(*********************************************

  Import-Export
  Version   := RSLogix 5000 v30.01
  Owner     := Windows User, Brock Solutions
  Exported  := Thu Mar 21 13:33:15 2019

  Note:  File encoded in UTF-8.  Only edit file in a program 
         which supports UTF-8 (like Notepad, not Wordpad).

**********************************************)
IE_VER := 2.21;

CONTROLLER PLC_01 (ProcessorType := "1756-L73",
                   Major := 30,
                   TimeSlice := 20,
                   ShareUnusedTimeSlice := 1,
                   MajorFaultProgram := "Controller_Fault_Handler",
                   RedundancyEnabled := 1,
                   KeepTestEditsOnSwitchOver := 0,
                   DataTablePadPercentage := 50,
                   SecurityCode := 0,
                   ChangesToDetect := 16#ffff_ffff_ffff_ffff,
                   SFCExecutionControl := "CurrentActive",
                   SFCRestartPosition := "MostRecent",
                   SFCLastScan := "DontScan",
                   SerialNumber := 16#00f9_72fe,
                   MatchProjectToController := No,
                   CanUseRPIFromProducer := No,
                   InhibitAutomaticFirmwareUpdate := 0,
                   PassThroughConfiguration := EnabledWithAppend,
                   DownloadProjectDocumentationAndExtendedProperties := Yes,
                   ReportMinorOverflow := 0)
	DATATYPE Bag_Data (FamilyType := NoFamily)
		DINT Orig_PE_ID (Description := "Originating Photoeye ID");
		DINT Orig_PLC_ID (Description := "Originating PLC ID");
		DINT EDS_Bag_ID (Description := "EDS Bag ID");
		DINT EDS_Mach_ID (Description := "EDS Machine ID");
		DINT Length (Description := "Bag Length");
		DINT Dest_ID (Description := "Destination ID");
		DINT Div_Err_Code (Description := "Diverter Error Code");
		DINT Div_ID (Description := "Diverter ID");
		DINT Security_Code (Description := "Security Code");
		DINT Security_Level (Description := "Security Level");
		DINT BHS_ID (Description := "BHS ID");
		DINT DS_Tracking_ID (Description := "Tracking ID of bag in downstream PLC");
		STR_10 IATA_Tag (Description := "IATA Tag");
		SINT ZZZZZZZZZZBag_Data13 (Hidden := 1);
		BIT Not_Diverted ZZZZZZZZZZBag_Data13 : 0 (Description := "Not Diverted");
		BIT Diverted ZZZZZZZZZZBag_Data13 : 1 (Description := "Diverted");
		BIT OverSize ZZZZZZZZZZBag_Data13 : 2 (Description := "Oversize Flag");
		BIT OutOfGauge ZZZZZZZZZZBag_Data13 : 3 (Description := "Out of Gauge Flag");
		BIT OverWidth ZZZZZZZZZZBag_Data13 : 4 (Description := "Overwidth Flag");
		BIT Bag_Dimensioned ZZZZZZZZZZBag_Data13 : 5 (Description := "Bag Dimensioned Flag");
		BIT TooClose_L ZZZZZZZZZZBag_Data13 : 6 (Description := "Too Close Leading");
		BIT TooClose_T ZZZZZZZZZZBag_Data13 : 7 (Description := "Too Close Trailing");
		SINT ZZZZZZZZZZBag_Data22 (Hidden := 1);
		BIT Unk_Bag ZZZZZZZZZZBag_Data22 : 0 (Description := "First occurrence of PE Block");
		BIT Tracked_Bag ZZZZZZZZZZBag_Data22 : 1 (Description := "Tracked Bag");
		BIT Inter_PLC ZZZZZZZZZZBag_Data22 : 2 (Description := "Inter PLC Transferred Bag");
		BIT ISD_Update ZZZZZZZZZZBag_Data22 : 3 (Description := "ISD Security Status Update");
		BIT Unk_Purge_Update ZZZZZZZZZZBag_Data22 : 4 (Description := "Unknow Purge Flag");
	END_DATATYPE

	DATATYPE BT (FamilyType := NoFamily)
		TIMER FAULT_TIMER (Description := "Fault Timer");
		TIMER RAMP_UP_TMR (Description := "Motor ramp up timer");
		DINT ACCUM (Description := "Pulses accumulated since last minute change");
		DINT CAPT (Description := "Number of pulses capture");
		SINT ZZZZZZZZZZBT4 (Hidden := 1);
		BIT BT_PULSE ZZZZZZZZZZBT4 : 0 (Description := "Belt Tach Pulse");
		BIT MOTOR_ON ZZZZZZZZZZBT4 : 1 (Description := "Motor On");
		BIT TACH_IN_LIM ZZZZZZZZZZBT4 : 2 (Description := "Belt Tach in limits");
		BIT MON_EN ZZZZZZZZZZBT4 : 3 (Description := "Monitor Enable");
		BIT Pulse_1 ZZZZZZZZZZBT4 : 4 (Description := "Pulse one");
		BIT Last_State ZZZZZZZZZZBT4 : 5 (Description := "Last State");
	END_DATATYPE

	DATATYPE BTP (FamilyType := NoFamily)
		TIMER FAULT_TIMER (Description := "Fault Timer");
		TIMER RAMP_UP_TMR (Description := "Motor ramp up timer");
		DINT ACCUM (Description := "Pulses accumulated since last minute change");
		DINT CAPT (Description := "Number of pulses capture");
		DINT SIM_PULSE_TIME (Description := "Simulated pulse time");
		DINT RAMP_CNT (Description := "Ramp count");
		DINT CFG_CNT (Description := "Configuration Counter");
		DINT PULSE_TIME_DIF (Description := "CST & SIM TIME DIF");
		DINT LU_COUNTER (Description := "Lockup Counter");
		DINT TIMELEFT (Description := "Time until next pulse");
		SINT ZZZZZZZZZZBTP9 (Hidden := 1);
		BIT BT_PULSE ZZZZZZZZZZBTP9 : 0 (Description := "Pulse");
		BIT MOVING ZZZZZZZZZZBTP9 : 1 (Description := "Moving");
		BIT SIM_PULSE_TIME_NEG ZZZZZZZZZZBTP9 : 2 (Description := "Simulated pulse time negative one shot");
		BIT SIM_PULSE_TIME_NEG_MEM ZZZZZZZZZZBTP9 : 3 (Description := "Simulated pulse time negative one shot memory");
		BIT SIM_PULSE_ROLL ZZZZZZZZZZBTP9 : 4 (Description := "Simulated pulse time roll over");
		BIT RAMP_CNT_DN ZZZZZZZZZZBTP9 : 5 (Description := "Ramp count done");
		BIT INT_PULSE ZZZZZZZZZZBTP9 : 6 (Description := "Internal Pulse");
		BIT STRT_MEM ZZZZZZZZZZBTP9 : 7 (Description := "Startup memory");
		SINT ZZZZZZZZZZBTP18 (Hidden := 1);
		BIT LU_DET ZZZZZZZZZZBTP18 : 0 (Description := "Lockup detected");
		BIT LU_ONS ZZZZZZZZZZBTP18 : 1 (Description := "Lockup ONS");
		BIT RUN ZZZZZZZZZZBTP18 : 2 (Description := "Conveyor Run Memory Bit");
		BIT NORUN ZZZZZZZZZZBTP18 : 3 (Description := "Conveyor Not Running Memory Bit");
		BIT RUN_ONS ZZZZZZZZZZBTP18 : 4 (Description := "Rising Edge of Conveyor Run");
		BIT CFG_RAMP_UP ZZZZZZZZZZBTP18 : 5 (Description := "Configure Ramp Up Setting");
	END_DATATYPE

	DATATYPE BTx (FamilyType := NoFamily)
		REAL RES (Description := "Resolution in inches");
		DINT HI_LIMIT (Description := "Fault range High Limit");
		DINT LO_LIMIT (Description := "Fault range Low Limit");
		DINT PULSE_PERIOD (Description := "Pulse period in microseconds");
		DINT RAMP_UP_SET (Description := "Ramp up setpoint");
		DINT RAMP_DN_SET (Description := "Ramp down setpoint");
		DINT FAULT_TIME (Description := "Fault Time in milliseconds");
	END_DATATYPE

	DATATYPE CHAR (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[1] (Radix := ASCII);
	END_DATATYPE

	DATATYPE COM_STATUS (FamilyType := NoFamily)
		TIMER FltFilter_Tmr (Description := "Filter timer");
		DINT FaultData (Description := "Fault data");
		INT EntryStatus[2] (Description := "Entry status");
		SINT ZZZZZZZZZZCOM_STATUS3 (Hidden := 1);
		BIT Fault ZZZZZZZZZZCOM_STATUS3 : 0 (Description := "Fault");
	END_DATATYPE

	DATATYPE DIV (Description := "Diverter",
	              FamilyType := NoFamily)
		DIV_FIFO ACT_FFL_DATA (Description := "Activate Position");
		DIV_FIFO ACT_FIFO[5] (Description := "Activate Fifo");
		DIV_FIFO ACT_FFU_DATA (Description := "Activate ID");
		DIV_FIFO XFER_FIFO[5] (Description := "Transfer Fifo");
		DIV_FIFO XFER_FIFO_DATA (Description := "Transfer ID");
		TIMER RET_DB_TON (Description := "Retracted debounce timer");
		TIMER RET_DB_TOF (Description := "Retracted debounce timer");
		TIMER DIV_DB_TON (Description := "Extended debounce timer");
		TIMER DIV_DB_TOF (Description := "Extended debounce timer");
		TIMER EXT_TRIG_TMR (Description := "Extend Trigger Timer");
		TIMER RET_TRIG_TMR (Description := "Retract Trigger Timer");
		TIMER DELAY_START_TMR (Description := "Delay start timer");
		TIMER Auto_Retract_TMR (Description := "Auto Retract timer");
		TIMER FailedToExtend_TMR (Description := "Failed to extend timer");
		TIMER FailedToRetract_TMR (Description := "Failed to retract timer");
		TIMER PositionFault_TMR (Description := "Position Fault timer");
		TIMER EN_DLY (Description := "DIV Enable timer");
		TIMER PDL_RUN_TMR (Description := "Paddle Run timer");
		TIMER OFF_TMR (Description := "Contactor timer");
		TIMER FAULT_TMR (Description := "Internal Fault timer");
		TIMER RAMP_UP_TMR (Description := "Conveyor acceleration monitor");
		COUNTER TooCloseCNT (Description := "Too Close counter");
		CONTROL ACT_CNTRL (Description := "Activate Fifo");
		CONTROL XFER_CNTRL (Description := "Transfer Fifo");
		CONTROL Area_Clear_Cntrl (Description := "Area Clear Control");
		DINT Area_Clear_Reg[3] (Description := "Area Clear Shift Register");
		DINT Event (Description := "Event code");
		DINT Reason (Description := "Reason code");
		DINT ScndLast_BAG (Description := "Second last bag ID");
		DINT ACT_POINT (Description := "Activation Position");
		DINT G (Description := "Graphic Status");
		DINT P (Description := "Graphic Position");
		SINT ZZZZZZZZZZDIV35 (Hidden := 1);
		BIT INT_MTR ZZZZZZZZZZDIV35 : 0 (Description := "Internal Motor");
		BIT ACT_ID_VALID ZZZZZZZZZZDIV35 : 1 (Description := "Activation ID Valid");
		BIT DIV_HALF_CNT ZZZZZZZZZZDIV35 : 2 (Description := "50/50 divert control");
		BIT IM_ONS ZZZZZZZZZZDIV35 : 3 (Description := "Internal Motor One-Shot");
		BIT LAST_POS_EXT ZZZZZZZZZZDIV35 : 4 (Description := "Last Position was Extend");
		BIT IP_DISC_ONS ZZZZZZZZZZDIV35 : 5 (Description := "Interface Panel Disconnect Off One Shot");
		BIT DIV_REQ ZZZZZZZZZZDIV35 : 6 (Description := "Divert request");
		BIT RET_REQ ZZZZZZZZZZDIV35 : 7 (Description := "Retract request");
		SINT ZZZZZZZZZZDIV44 (Hidden := 1);
		BIT HOME_FLTR ZZZZZZZZZZDIV44 : 0 (Description := "Home signal debounced");
		BIT DIV_FLTR ZZZZZZZZZZDIV44 : 1 (Description := "Extended signal debounced");
		BIT NO_FAULT ZZZZZZZZZZDIV44 : 2 (Description := "No Faults Present");
		BIT ML_STOP_FLT ZZZZZZZZZZDIV44 : 3 (Description := "Stop the mainline due to fault");
		BIT INST_RET ZZZZZZZZZZDIV44 : 4 (Description := "Instantaneous retract");
		BIT INST_RET_SB ZZZZZZZZZZDIV44 : 5 (Description := "Storage bit");
		BIT Area_Clear ZZZZZZZZZZDIV44 : 6 (Description := "Paddle Area Clear");
		BIT TooClose ZZZZZZZZZZDIV44 : 7 (Description := "Too close");
		SINT ZZZZZZZZZZDIV53 (Hidden := 1);
		BIT UNLD_XFER_ID ZZZZZZZZZZDIV53 : 0 (Description := "Unload Xfer ID");
		BIT ACTIVATE_ONS ZZZZZZZZZZDIV53 : 1 (Description := "Activation One Shot");
		BIT XFER_ID_VALID ZZZZZZZZZZDIV53 : 2 (Description := "Transfer ID valid");
		BIT BT_DONT_CLEAR ZZZZZZZZZZDIV53 : 3 (Description := "Don$'t Clear Tracking BT");
		BIT BAG_DIVERTED ZZZZZZZZZZDIV53 : 4 (Description := "Bag diverted");
		BIT BAG_NOT_DIVERTED ZZZZZZZZZZDIV53 : 5 (Description := "Bag not diverted");
		BIT FULL ZZZZZZZZZZDIV53 : 6 (Description := "Receiving Line Full");
		BIT BAG_ERROR ZZZZZZZZZZDIV53 : 7 (Description := "Tracking Error");
		SINT ZZZZZZZZZZDIV62 (Hidden := 1);
		BIT CON_ONS ZZZZZZZZZZDIV62 : 0 (Description := "Contactor timer ONS");
		BIT DIV_0_ONS_SB ZZZZZZZZZZDIV62 : 1 (Description := "HMI Out Of Service SB");
		BIT DIV_0_ONS ZZZZZZZZZZDIV62 : 2 (Description := "HMI Override ONS");
		BIT DIV_ALL_ONS_SB ZZZZZZZZZZDIV62 : 3 (Description := "HMI DIV All SB");
		BIT DIV_ALL_ONS ZZZZZZZZZZDIV62 : 4 (Description := "HMI DIV All ONS");
		BIT Idle ZZZZZZZZZZDIV62 : 5 (Description := "Idle");
		BIT RUNNING ZZZZZZZZZZDIV62 : 6 (Description := "Running");
		BIT AUTO_STOPPED ZZZZZZZZZZDIV62 : 7 (Description := "Auto Stopped");
		SINT ZZZZZZZZZZDIV71 (Hidden := 1);
		BIT FAULT ZZZZZZZZZZDIV71 : 0 (Description := "Faulted");
		BIT FIRE_ALM ZZZZZZZZZZDIV71 : 1 (Description := "Fire Alarm");
		BIT E_STOP ZZZZZZZZZZDIV71 : 2 (Description := "E-Stopped");
		BIT COMM ZZZZZZZZZZDIV71 : 3 (Description := "Communications Fault");
		BIT E_STOPPED_RES ZZZZZZZZZZDIV71 : 4 (Description := "E-Stop Reset");
		BIT RESET_RDY ZZZZZZZZZZDIV71 : 5 (Description := "Ready for Reset");
		BIT FAULT_RESET ZZZZZZZZZZDIV71 : 6 (Description := "Fault Reset");
		BIT HOME_FLTR_SEAL ZZZZZZZZZZDIV71 : 7 (Description := "Home Filter Seal");
		SINT ZZZZZZZZZZDIV72 (Hidden := 1);
		BIT FAULT_ONS ZZZZZZZZZZDIV72 : 0 (Description := "Internal Fault One Shot");
		BIT DIV_REQ_ONS ZZZZZZZZZZDIV72 : 1 (Description := "Divert One Shot");
		BIT RET_REQ_ONS ZZZZZZZZZZDIV72 : 2 (Description := "Retract One Shot");
		BIT FAIL_EXTEND_ONS ZZZZZZZZZZDIV72 : 3 (Description := "Failed to Extend One Shot");
		BIT FAIL_RETRACT_ONS ZZZZZZZZZZDIV72 : 4 (Description := "Failed to Retract one Shot");
		BIT POS_FLT_ONS ZZZZZZZZZZDIV72 : 5 (Description := "Unknown Position One Shot");
		BIT SYNC_RUN ZZZZZZZZZZDIV72 : 6 (Description := "Sync Run");
		BIT Extended_Prohibit ZZZZZZZZZZDIV72 : 7 (Description := "Extended Position Prohibited - Retract if Extended");
		SINT ZZZZZZZZZZDIV73 (Hidden := 1);
		BIT Cycle_Prohibit ZZZZZZZZZZDIV73 : 0 (Description := "Paddle Cycle Prohibited");
		BIT Reason_NA ZZZZZZZZZZDIV73 : 1 (Description := "Set Diverter Reason to NA");
	END_DATATYPE

	DATATYPE DIVx (FamilyType := NoFamily)
		DINT ID (Description := "Device ID");
		DINT ACT_Const (Description := "Diverter Activate Constant");
		DINT XFER_Const (Description := "Diverter Transfer Constant");
		DINT EXT_Delay (Description := "Diverter Extend Delay");
		DINT DivDestID (Description := "Divert Destination ID");
		DINT LowSpdDelay (Description := "Conveyor not at full speed$NDelay diverter activation");
		DINT MedSpdDelay (Description := "Conveyor not at full speed$NDelay diverter activation");
		DINT LowSpdTime (Description := "Time to accelerate past low speed");
		DINT MedSpdTime (Description := "Time to accelerate past medium speed");
		DINT Area_Clear_Mask[3] (Description := "Area Clear Mask");
		STR_20 HMI_STATE[5] (Description := "Transaction Comments");
	END_DATATYPE

	DATATYPE DIV_FIFO (FamilyType := NoFamily)
		DINT BAG_ID (Description := "Bag ID");
		DINT POS (Description := "Trigger Position in Pulses");
		DINT REASON (Description := "Diverter Routing Reason Code");
		DINT HMI_CNTRL (Description := "0 = Auto$N1 = Divert All$N2 = Divert Half$N3=Divert None");
	END_DATATYPE

	DATATYPE ES_Zone (FamilyType := NoFamily)
		SINT ZZZZZZZZZZES_Zone0 (Hidden := 1);
		BIT Zone_OK ZZZZZZZZZZES_Zone0 : 0 (Description := "Zone OK");
		BIT Zone_RES ZZZZZZZZZZES_Zone0 : 1 (Description := "Zone Resettable");
	END_DATATYPE

	DATATYPE FAULTRECORD (FamilyType := NoFamily)
		DINT Time_Low (Description := "lower 32 bits of the fault timestamp value");
		DINT Time_High (Description := "upper 32 bits of the fault timestamp value");
		INT Type (Description := "fault type (program, I/O, etc...)");
		INT Code (Description := "unique code for the fault");
		DINT Info[8] (Description := "fault specific information");
	END_DATATYPE

	DATATYPE HCD (Description := "HCD",
	              FamilyType := NoFamily)
		DINT Result (Description := "Result code");
		DINT Reason (Description := "Reason code");
		DINT ScndLast_BAG (Description := "Second last bag ID");
		DINT XFER_POS_MIN (Description := "Transfer delay minimum");
		DINT XFER_FIFO_0_BAG_ID (Description := "XFER FIFO ELEMENT 0 BAG ID");
		DINT DIST_TO_ACT_POS (Description := "Pulses from Activate Position");
		DINT G (Description := "Graphic Status");
		DINT P (Description := "Graphic Position");
		HCD_FIFO ACT_FFU_DATA (Description := "Activate ID");
		HCD_FIFO ACT_FIFO[5] (Description := "Activate Fifo");
		HCD_FIFO ACT_FFL_DATA (Description := "Activate Position");
		HCD_FIFO XFER_FIFO[5] (Description := "Transfer Fifo");
		HCD_FIFO XFER_FIFO_DATA (Description := "Transfer ID");
		TIMER RET_DB_TON (Description := "Retracted debounce timer");
		TIMER RET_DB_TOF (Description := "Retracted debounce timer");
		TIMER DIV_DB_TON (Description := "Extended debounce timer");
		TIMER DIV_DB_TOF (Description := "Extended debounce timer");
		TIMER TRIG_TMR (Description := "Trigger Timer");
		TIMER DELAY_START_TMR (Description := "Delay start timer");
		TIMER Auto_Retract_TMR (Description := "Auto Retract timer");
		TIMER FailedToExtend_TMR (Description := "Failed to extend timer");
		TIMER FailedToRetract_TMR (Description := "Failed to retract timer");
		TIMER PositionFault_TMR (Description := "Position Fault timer");
		TIMER Fault_TMR (Description := "Diverter Internal Fault timer");
		TIMER PDL_RUN_TMR (Description := "Paddle Run timer");
		TIMER XFER_FIFO_EM_TMR (Description := "Transfer FIFO empty timer");
		COUNTER TooCloseCNT (Description := "Too Close counter");
		CONTROL ACT_CNTRL (Description := "Activate Fifo");
		CONTROL XFER_CNTRL (Description := "Transfer Fifo");
		SINT ZZZZZZZZZZHCD31 (Hidden := 1);
		BIT INT_MTR ZZZZZZZZZZHCD31 : 0 (Description := "Internal Motor");
		BIT HMI_OVRD ZZZZZZZZZZHCD31 : 1 (Description := "HMI Override");
		BIT DIV_HALF_CNT ZZZZZZZZZZHCD31 : 2 (Description := "50/50 divert control");
		BIT EXT_PERM ZZZZZZZZZZHCD31 : 3 (Description := "Extend permissive");
		BIT RET_PERM ZZZZZZZZZZHCD31 : 4 (Description := "Retract permissive");
		BIT CYC_ONS ZZZZZZZZZZHCD31 : 5 (Description := "Cycle one shot");
		BIT DIV_REQ ZZZZZZZZZZHCD31 : 6 (Description := "Divert request");
		BIT RET_REQ ZZZZZZZZZZHCD31 : 7 (Description := "Retract request");
		SINT ZZZZZZZZZZHCD40 (Hidden := 1);
		BIT HOME_FLTR ZZZZZZZZZZHCD40 : 0 (Description := "Home signal debounced");
		BIT DIV_FLTR ZZZZZZZZZZHCD40 : 1 (Description := "Extended signal debounced");
		BIT ML_STOP ZZZZZZZZZZHCD40 : 2 (Description := "Stop the mainline");
		BIT ML_STOP_FLT ZZZZZZZZZZHCD40 : 3 (Description := "Stop the mainline due to fault");
		BIT INST_RET ZZZZZZZZZZHCD40 : 4 (Description := "Instantaneous retract");
		BIT INST_RET_SB ZZZZZZZZZZHCD40 : 5 (Description := "Storage bit");
		BIT DEST_AVAIL ZZZZZZZZZZHCD40 : 6 (Description := "Destination available");
		BIT TooClose ZZZZZZZZZZHCD40 : 7 (Description := "Too close");
		SINT ZZZZZZZZZZHCD49 (Hidden := 1);
		BIT UNLD_XFER_ID ZZZZZZZZZZHCD49 : 0 (Description := "Unload Xfer ID");
		BIT DUMP_XFER_ID ZZZZZZZZZZHCD49 : 1 (Description := "Dump Xfer ID");
		BIT XFER_ID_VALID ZZZZZZZZZZHCD49 : 2 (Description := "Transfer ID valid");
		BIT XFER_DIV_LINE ZZZZZZZZZZHCD49 : 3 (Description := "Transfer bag to divert line");
		BIT BAG_DIVERTED ZZZZZZZZZZHCD49 : 4 (Description := "Bag diverted");
		BIT BAG_NOT_DIVERTED ZZZZZZZZZZHCD49 : 5 (Description := "Bag not diverted");
		BIT FULL ZZZZZZZZZZHCD49 : 6 (Description := "Receiving Line Full");
		BIT FAULT_RESET ZZZZZZZZZZHCD49 : 7 (Description := "Fault Reset");
		SINT ZZZZZZZZZZHCD58 (Hidden := 1);
		BIT PROX_MADE ZZZZZZZZZZHCD58 : 0 (Description := "Position Reached");
		BIT DIV_0_ONS_SB ZZZZZZZZZZHCD58 : 1 (Description := "HMI Out Of Service SB");
		BIT DIV_0_ONS ZZZZZZZZZZHCD58 : 2 (Description := "HMI Override ONS");
		BIT DIV_ALL_ONS_SB ZZZZZZZZZZHCD58 : 3 (Description := "HMI DIV All SB");
		BIT DIV_ALL_ONS ZZZZZZZZZZHCD58 : 4 (Description := "HMI DIV All ONS");
		BIT RUNNING ZZZZZZZZZZHCD58 : 5 (Description := "HCD Running");
		BIT AUTO_STOPPED ZZZZZZZZZZHCD58 : 6 (Description := "Auto Stopped");
		BIT JAMMED ZZZZZZZZZZHCD58 : 7 (Description := "Jammed");
		SINT ZZZZZZZZZZHCD67 (Hidden := 1);
		BIT E_STOP ZZZZZZZZZZHCD67 : 0 (Description := "E-Stopped");
		BIT E_STOPPED_RES ZZZZZZZZZZHCD67 : 1 (Description := "E-Stopped Reset");
		BIT COMM ZZZZZZZZZZHCD67 : 2 (Description := "Communications Error");
		BIT FIRE_ALM ZZZZZZZZZZHCD67 : 3 (Description := "Fire Alarm");
		BIT HOME_FLTR_SEAL ZZZZZZZZZZHCD67 : 4;
		BIT NO_FAULT ZZZZZZZZZZHCD67 : 5;
		BIT IDLE ZZZZZZZZZZHCD67 : 6;
		BIT POS_FLT_ONS ZZZZZZZZZZHCD67 : 7;
		SINT ZZZZZZZZZZHCD76 (Hidden := 1);
		BIT DIV_REQ_ONS ZZZZZZZZZZHCD76 : 0 (Description := "Divert OneShot");
		BIT FAIL_EXTEND_ONS ZZZZZZZZZZHCD76 : 1 (Description := "Failed to Extend OneShot");
		BIT FAIL_RETRACT_ONS ZZZZZZZZZZHCD76 : 2 (Description := "Failed to Retract OneShot");
		BIT FAULT_ONS ZZZZZZZZZZHCD76 : 3 (Description := "Diverter Internal Fault OneShot");
		BIT MSD_ONS ZZZZZZZZZZHCD76 : 4 (Description := "Diverter MSD OneShot");
		BIT RESET_RDY ZZZZZZZZZZHCD76 : 5 (Description := "Diverter Fault Reset Ready");
		BIT SEND_MSG ZZZZZZZZZZHCD76 : 6 (Description := "Diverter Send Message");
		BIT SYNC_RUN ZZZZZZZZZZHCD76 : 7 (Description := "Diverter SYNC RUN");
		SINT ZZZZZZZZZZHCD85 (Hidden := 1);
		BIT ADJUST_ACT_POS_ONS ZZZZZZZZZZHCD85 : 0 (Description := "Adjust Activate Position OneShot");
	END_DATATYPE

	DATATYPE HCDx (FamilyType := NoFamily)
		DINT DIV_Const (Description := "Diverter Divert Activate Constant");
		DINT RET_Const (Description := "Diverter Retract Activate Constant");
		DINT ID (Description := "Device ID");
		DINT DIV_XFER_Const (Description := "Diverter Divert Transfer Constant");
		DINT RET_XFER_Const (Description := "Diverter Retract Transfer Constant");
		DINT DivDestID (Description := "Divert Destination ID");
		DINT NoDivDestID (Description := "No Divert Destination ID");
	END_DATATYPE

	DATATYPE HCD_FIFO (FamilyType := NoFamily)
		DINT BAG_ID (Description := "Bag ID");
		DINT POS (Description := "Trigger Position in Pulses");
		DINT REASON (Description := "Diverter Routing Reason Code");
	END_DATATYPE

	DATATYPE HSD (Description := "HSD",
	              FamilyType := NoFamily)
		DINT Result (Description := "Result code");
		DINT Reason (Description := "Reason code");
		DINT ScndLast_BAG (Description := "Second last bag ID");
		HCD_FIFO ACT_FFU_DATA (Description := "Activate ID");
		HCD_FIFO ACT_FIFO[5] (Description := "Activate Fifo");
		HCD_FIFO ACT_FFL_DATA (Description := "Activate Position");
		HCD_FIFO XFER_FIFO[5] (Description := "Transfer Fifo");
		HCD_FIFO XFER_FIFO_DATA (Description := "Transfer ID");
		DINT XFER_POS_MIN (Description := "Transfer delay minimum");
		DINT G (Description := "Graphic Status");
		DINT P (Description := "Graphic Position");
		DINT DIST_TO_ACT_POS (Description := "Pulses from Activate Position");
		TIMER RET_DB_TON (Description := "Retracted debounce timer");
		TIMER RET_DB_TOF (Description := "Retracted debounce timer");
		TIMER DIV_DB_TON (Description := "Extended debounce timer");
		TIMER DIV_DB_TOF (Description := "Extended debounce timer");
		TIMER EXT_TRIG_TMR (Description := "Extend Trigger Timer");
		TIMER RET_TRIG_TMR (Description := "Retract Trigger Timer");
		TIMER DELAY_START_TMR (Description := "Delay start timer");
		TIMER Auto_Retract_TMR (Description := "Auto Retract timer");
		TIMER FailedToExtend_TMR (Description := "Failed to extend timer");
		TIMER FailedToRetract_TMR (Description := "Failed to retract timer");
		TIMER PositionFault_TMR (Description := "Position Fault timer");
		TIMER EN_DLY (Description := "HSD Enable timer");
		TIMER PDL_RUN_TMR (Description := "Paddle Run timer");
		TIMER CON_TMR (Description := "Contactor timer");
		TIMER XFER_FIFO_EM_TMR (Description := "Transfer FIFO empty timer");
		COUNTER TooCloseCNT (Description := "Too Close counter");
		CONTROL ACT_CNTRL (Description := "Activate Fifo");
		CONTROL XFER_CNTRL (Description := "Transfer Fifo");
		SINT ZZZZZZZZZZDIV30 (Hidden := 1);
		BIT INT_MTR ZZZZZZZZZZDIV30 : 0 (Description := "Internal Motor");
		BIT HMI_OVRD ZZZZZZZZZZDIV30 : 1 (Description := "HMI Override");
		BIT DIV_HALF_CNT ZZZZZZZZZZDIV30 : 2 (Description := "50/50 divert control");
		BIT EXT_PERM ZZZZZZZZZZDIV30 : 3 (Description := "Extend permissive");
		BIT RET_PERM ZZZZZZZZZZDIV30 : 4 (Description := "Retract permissive");
		BIT CYC_ONS ZZZZZZZZZZDIV30 : 5 (Description := "Cycle one shot");
		BIT DIV_REQ ZZZZZZZZZZDIV30 : 6 (Description := "Divert request");
		BIT RET_REQ ZZZZZZZZZZDIV30 : 7 (Description := "Retract request");
		SINT ZZZZZZZZZZDIV39 (Hidden := 1);
		BIT HOME_FLTR ZZZZZZZZZZDIV39 : 0 (Description := "Home signal debounced");
		BIT DIV_FLTR ZZZZZZZZZZDIV39 : 1 (Description := "Extended signal debounced");
		BIT ML_STOP ZZZZZZZZZZDIV39 : 2 (Description := "Stop the mainline");
		BIT ML_STOP_FLT ZZZZZZZZZZDIV39 : 3 (Description := "Stop the mainline due to fault");
		BIT INST_RET ZZZZZZZZZZDIV39 : 4 (Description := "Instantaneous retract");
		BIT INST_RET_SB ZZZZZZZZZZDIV39 : 5 (Description := "Storage bit");
		BIT DEST_AVAIL ZZZZZZZZZZDIV39 : 6 (Description := "Destination available");
		BIT TooClose ZZZZZZZZZZDIV39 : 7 (Description := "Too close");
		SINT ZZZZZZZZZZDIV48 (Hidden := 1);
		BIT UNLD_XFER_ID ZZZZZZZZZZDIV48 : 0 (Description := "Unload Xfer ID");
		BIT DUMP_XFER_ID ZZZZZZZZZZDIV48 : 1 (Description := "Dump Xfer ID");
		BIT XFER_ID_VALID ZZZZZZZZZZDIV48 : 2 (Description := "Transfer ID valid");
		BIT XFER_DIV_LINE ZZZZZZZZZZDIV48 : 3 (Description := "Transfer bag to divert line");
		BIT BAG_DIVERTED ZZZZZZZZZZDIV48 : 4 (Description := "Bag diverted");
		BIT BAG_NOT_DIVERTED ZZZZZZZZZZDIV48 : 5 (Description := "Bag not diverted");
		BIT FULL ZZZZZZZZZZDIV48 : 6 (Description := "Receiving Line Full");
		BIT PROX_MADE ZZZZZZZZZZDIV48 : 7 (Description := "Position Reached");
		SINT ZZZZZZZZZZDIV57 (Hidden := 1);
		BIT CON_ONS ZZZZZZZZZZDIV57 : 0 (Description := "Contactor timer ONS");
		BIT DIV_0_ONS_SB ZZZZZZZZZZDIV57 : 1 (Description := "HMI Out Of Service SB");
		BIT DIV_0_ONS ZZZZZZZZZZDIV57 : 2 (Description := "HMI Override ONS");
		BIT DIV_ALL_ONS_SB ZZZZZZZZZZDIV57 : 3 (Description := "HMI DIV All SB");
		BIT DIV_ALL_ONS ZZZZZZZZZZDIV57 : 4 (Description := "HMI DIV All ONS");
		BIT Idle ZZZZZZZZZZDIV57 : 5 (Description := "Idle");
		BIT RUNNING ZZZZZZZZZZDIV57 : 6 (Description := "Running");
		BIT AUTO_STOPPED ZZZZZZZZZZDIV57 : 7 (Description := "Auto Stopped");
		SINT ZZZZZZZZZZDIV66 (Hidden := 1);
		BIT FAULT ZZZZZZZZZZDIV66 : 0 (Description := "HSD Faulted");
		BIT FIRE_ALM ZZZZZZZZZZDIV66 : 1 (Description := "Fire Alarm");
		BIT E_STOP ZZZZZZZZZZDIV66 : 2 (Description := "E-Stopped");
		BIT COMM ZZZZZZZZZZDIV66 : 3 (Description := "Communications Fault");
		BIT E_STOPPED_RES ZZZZZZZZZZDIV66 : 4 (Description := "E-Stop Reset");
		BIT RESET_RDY ZZZZZZZZZZDIV66 : 5 (Description := "HSD Ready for Reset");
		BIT FAULT_RESET ZZZZZZZZZZDIV66 : 6 (Description := "Fault Reset");
		BIT HOME_FLTR_SEAL ZZZZZZZZZZDIV66 : 7 (Description := "Home Filter Seal");
		SINT ZZZZZZZZZZDIV75 (Hidden := 1);
		BIT SEND_MSG ZZZZZZZZZZDIV75 : 0 (Description := "Send Message");
		BIT DIV_REQ_ONS ZZZZZZZZZZDIV75 : 1 (Description := "Divert one shot");
		BIT RET_REQ_ONS ZZZZZZZZZZDIV75 : 2 (Description := "Retract one shot");
		BIT FAIL_EXTEND_ONS ZZZZZZZZZZDIV75 : 3 (Description := "Failed to Extend one shot");
		BIT FAIL_RETRACT_ONS ZZZZZZZZZZDIV75 : 4 (Description := "Failed to Retract one shot");
		BIT POS_FLT_ONS ZZZZZZZZZZDIV75 : 5 (Description := "Unknown Position one shot");
		BIT SYNC_RUN ZZZZZZZZZZDIV75 : 6 (Description := "Diverter Sync Run");
		BIT NO_FAULT ZZZZZZZZZZDIV75 : 7 (Description := "No Faults Present");
		SINT ZZZZZZZZZZDIV84 (Hidden := 1);
		BIT ADJUST_ACT_POS_ONS ZZZZZZZZZZDIV84 : 0 (Description := "Adjust Activate Position one shot");
	END_DATATYPE

	DATATYPE HSDx (FamilyType := NoFamily)
		DINT ACT_Const (Description := "Diverter Activate Constant");
		DINT ID (Description := "Device ID");
		DINT XFER_Const (Description := "Diverter Transfer Constant");
		DINT DivDestID (Description := "Divert Destination ID");
		DINT NoDivDestID (Description := "No Divert Destination ID");
	END_DATATYPE

	DATATYPE HSD_FIFO (FamilyType := NoFamily)
		DINT BAG_ID (Description := "Bag ID");
		DINT POS (Description := "Trigger Position in Pulses");
		DINT REASON (Description := "Diverter Routing Reason Code");
	END_DATATYPE

	DATATYPE IATA_STRING (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[10] (Radix := ASCII);
	END_DATATYPE

	DATATYPE INTERNAL (FamilyType := NoFamily)
		SINT ZZZZZZZZZZINTERNAL0 (Hidden := 1);
		BIT FLASHER_BIT ZZZZZZZZZZINTERNAL0 : 0 (Description := "Flasher Bit");
		BIT FAST_FLASHER_BIT ZZZZZZZZZZINTERNAL0 : 1 (Description := "Fast Flasher 2 Bit");
		BIT ALWAYS_TRUE ZZZZZZZZZZINTERNAL0 : 2 (Description := "Always True");
		BIT ALWAYS_FALSE ZZZZZZZZZZINTERNAL0 : 3 (Description := "Always False");
		BIT SCAN_0 ZZZZZZZZZZINTERNAL0 : 4 (Description := "Scan 0");
		BIT SCAN_1 ZZZZZZZZZZINTERNAL0 : 5 (Description := "Scan 1");
		BIT SCAN_2 ZZZZZZZZZZINTERNAL0 : 6 (Description := "Scan 2");
		BIT SCAN_3 ZZZZZZZZZZINTERNAL0 : 7 (Description := "Scan 3");
		SINT ZZZZZZZZZZINTERNAL9 (Hidden := 1);
		BIT RESET_STATS_PULSE ZZZZZZZZZZINTERNAL9 : 0 (Description := "Reset stats pulse");
		BIT ONE_MIN_PULSE ZZZZZZZZZZINTERNAL9 : 1 (Description := "One minute pulse");
		BIT ONE_MIN_PULSE_SB1 ZZZZZZZZZZINTERNAL9 : 2 (Description := "Storage Bit");
		BIT ONE_MIN_PULSE_SB2 ZZZZZZZZZZINTERNAL9 : 3 (Description := "Storage Bit");
		BIT TWO_S_PULSE ZZZZZZZZZZINTERNAL9 : 4 (Description := "2 second pulse");
		BIT TWO_S_PULSE_SB1 ZZZZZZZZZZINTERNAL9 : 5 (Description := "Storage Bit");
		BIT TWO_S_PULSE_SB2 ZZZZZZZZZZINTERNAL9 : 6 (Description := "Storage Bit");
		BIT FIRST_SCAN_MAN ZZZZZZZZZZINTERNAL9 : 7 (Description := "First Scan Manual Call");
		SINT ZZZZZZZZZZINTERNAL18 (Hidden := 1);
		BIT SET_BT_CONST ZZZZZZZZZZINTERNAL18 : 0 (Description := "Set BT constants");
		BIT SET_T_CONST ZZZZZZZZZZINTERNAL18 : 1 (Description := "Set tracking constants");
		BIT SET_PE_CONST ZZZZZZZZZZINTERNAL18 : 2 (Description := "Set photoeye constants");
		BIT SET_MTR_CONST ZZZZZZZZZZINTERNAL18 : 3 (Description := "Set motor constants");
		BIT SET_MRG_CONST ZZZZZZZZZZINTERNAL18 : 4 (Description := "Set merge constants");
		BIT SET_DIV_CONST ZZZZZZZZZZINTERNAL18 : 5 (Description := "Set Diverter Constants");
		BIT SET_PUSHER_CONST ZZZZZZZZZZINTERNAL18 : 6 (Description := "Set Pusher Constants");
		BIT SET_SPACER_CONST ZZZZZZZZZZINTERNAL18 : 7 (Description := "Set Spacer Constants");
		SINT ZZZZZZZZZZINTERNAL27 (Hidden := 1);
		BIT SET_DOOR_CONST ZZZZZZZZZZINTERNAL27 : 0 (Description := "Set Door Constants");
		BIT SET_MEC_CONST ZZZZZZZZZZINTERNAL27 : 1 (Description := "Set MEC Constants");
		BIT SET_VSU_CONST ZZZZZZZZZZINTERNAL27 : 2 (Description := "Set Vertical Sorter Constants");
		BIT SET_ISD_CONST ZZZZZZZZZZINTERNAL27 : 3 (Description := "Set ISD Constants");
		BIT CST_Neg_ONS ZZZZZZZZZZINTERNAL27 : 4 (Description := "CST negative one shot");
		BIT CST_Neg_ONS_Mem ZZZZZZZZZZINTERNAL27 : 5 (Description := "CST negative one shot memory");
		BIT SET_BSD_CONST ZZZZZZZZZZINTERNAL27 : 6 (Description := "Set BSD Constants");
		BIT SET_VMU_CONST ZZZZZZZZZZINTERNAL27 : 7 (Description := "Set Vertical Merge Constants");
		DINT RESET_STATS_LEN (Description := "Reset Stats Array Length");
		DINT NO_READ_CODE (Description := "No read code");
		DINT ALT_SCAN_CONTROL (Description := "Alternating scan control");
		DINT SCAN_0_SCAN_TIME (Description := "Scan 0 scan time");
		DINT SCAN_0_MAX_SCAN_TIME (Description := "Scan 0 max scan time");
		DINT SCAN_1_SCAN_TIME (Description := "Scan 1 scan time");
		DINT SCAN_1_MAX_SCAN_TIME (Description := "Scan 1 max scan time");
		DINT SCAN_2_SCAN_TIME (Description := "Scan 2 scan time");
		DINT SCAN_2_MAX_SCAN_TIME (Description := "Scan 2 max scan time");
		DINT SCAN_3_SCAN_TIME (Description := "Scan 3 scan time");
		DINT SCAN_3_MAX_SCAN_TIME (Description := "Scan 3 max scan time");
		DINT PLC_STATUS (Description := "PLC Status");
		DINT PLC_FORCE_STATUS (Description := "PLC Force Status");
		DINT PLC_MINOR_FLT (Description := "PLC Minor Fault Code");
		DINT PLC_Number_Const (Description := "PLC SAC Identified");
		DINT PLC_Chassis_ID (Description := "PLC Redundant Chassis");
		DINT PLC_PartnerChassisRedundState (Description := "PLC Secondary Chassis Redundancy State");
		DINT Bag_Data_Low_Limit (Description := "Lower Limit of Bag Data Table");
		DINT Bag_Data_High_Limit (Description := "Upper Limit of Bag Data Table");
		DINT Create_Bag_Data_Low_Limit (Description := "Lower Limit of New Bag IDs to Create");
		DINT Create_Bag_Data_High_Limit (Description := "Upper Limit of New Bag IDs to Create");
		DINT BHS_ID_Low_Limit (Description := "Lower Limit of New BHS IDs to Create");
		DINT BHS_ID_High_Limit (Description := "Upper Limit of New BHS IDs to Create");
		DINT Missing_Bag_Const (Description := "Missing Bag Jam Constant");
		DINT Internal_Motor_Pre (Description := "Internal Motor timer preset");
		DINT DS_Delay_Pre (Description := "Downstream running delay preset");
		DINT Decode_Length (Description := "Tracking Decode Point (Pulses before PE)");
		DINT XFR_SET_DEF (Description := "Transfer Setting Default");
		DINT SYNC_SET_DEF (Description := "Sync Setting Default");
		DINT InterPLC_UNK_BAG_ID (Description := "Unknown bag msg to Peer Bag ID");
		DINT InterPLC_UNK_BAG_ID_FIFO[5] (Description := "Unknown bag msg to Peer Queue");
		TIMER FlasherOff_TON (Description := "Common Flasher Timer - Timer OFF");
		TIMER FlasherOn_TON (Description := "Common Flasher Timer - Timer ON");
		TIMER Flasher2On_TON (Description := "Common Fast Flasher Timer - Timer ON");
		TIMER Flasher2Off_TON (Description := "Common Fast Flasher Timer - Timer OFF");
		CONTROL InterPLC_UNK_BAG_ID_FIFO_CONTROL (Description := "Unknown bag msg to Peer Queue");
		SINT ZZZZZZZZZZINTERNAL72 (Hidden := 1);
		BIT SET_CONSTANTS ZZZZZZZZZZINTERNAL72 : 0 (Description := "Set Constants");
	END_DATATYPE

	DATATYPE LEN (FamilyType := NoFamily)
		DINT BAG_ID (Description := "Bag ID");
		DINT BAG_LENGTH (Description := "Bag Length Measurement");
		DINT TEMP_STORE (Description := "Temp Data Storage");
		DINT MAX_MEASURE (Description := "Max Measurement Before Cancel");
		SINT ZZZZZZZZZZLEN4 (Hidden := 1);
		BIT ID_VALID ZZZZZZZZZZLEN4 : 0 (Description := "ID Valid");
		BIT SB1 ZZZZZZZZZZLEN4 : 1 (Description := "Storage Bit");
		BIT SB2 ZZZZZZZZZZLEN4 : 2 (Description := "Storage Bit");
		BIT NEG_XITN_MEASURE ZZZZZZZZZZLEN4 : 3 (Description := "Negative Transition Measure");
		BIT MEASURE ZZZZZZZZZZLEN4 : 4 (Description := "Measure");
		BIT CONV_STOP_SEAL ZZZZZZZZZZLEN4 : 5 (Description := "Seal of Length measuring conveyor stopping");
		BIT CANCEL_ZERO ZZZZZZZZZZLEN4 : 6 (Description := "Cancel Measurement due to Zero Recorded Length");
		BIT CANCEL_MAX_OVR ZZZZZZZZZZLEN4 : 7 (Description := "Cancel Measurement due to Max Over Detected");
		SINT ZZZZZZZZZZLEN13 (Hidden := 1);
		BIT ERR ZZZZZZZZZZLEN13 : 0 (Description := "Length Changed Oneshot");
		BIT ZERO_LEN ZZZZZZZZZZLEN13 : 1 (Description := "Bag Length Zero");
	END_DATATYPE

	DATATYPE LENx (FamilyType := NoFamily)
		DINT MAX_LEN_OVR (Description := "Max pulses length check can be over");
		DINT MAX_LEN_UNDER (Description := "Max pulses length can be under");
	END_DATATYPE

	DATATYPE MRG (FamilyType := NoFamily)
		TIMER MrgLBagflow (Description := "Mergeline bag flow detection timer");
		TIMER MergeRunTmr (Description := "Merge Run Timer");
		TIMER MLPriorityTmr (Description := "Main Line Priority Timer");
		TIMER MrgLPriorityTmr (Description := "Merge Line Priority Timer");
		TIMER SyncRunTmr (Description := "Merge Sync Run Timer");
		DINT MainLineBS[10] (Description := "Main Line Bit Shift Reg");
		DINT MrgLineBS[10] (Description := "Merge Line Bit Shift Reg");
		DINT Intrfr[10] (Description := "Interference Reg");
		DINT MLBagInCntr (Description := "Main Line Bag In Counter");
		DINT BagID (Description := "Merge Bag ID");
		DINT BagLength_Gap (Description := "Merge Bag Length and Gap");
		DINT BagPastPE (Description := "Merge Bag Past Photoeye");
		DINT Lead_Gap_Acc (Description := "Leading Gap Counter Accumulator");
		DINT MLWndoCntDn_Acc (Description := "Mainline Window Countdown Accumulator");
		DINT Lead_Gap (Description := "Lead Gap After Bag Coast on Merge");
		DINT TailHeadAcc (Description := "Tail to Head Accumulator");
		DINT HeadHeadAcc (Description := "Head to Head Accumulator");
		DINT HeadHeadCnt (Description := "Head to Head Count");
		DINT TailHeadCnt (Description := "Tail to Head Count");
		DINT LastBagMrgWndo (Description := "Distance From Head to Head of last two bags to pass capture photo-eye");
		DINT LastBagGapDist (Description := "Distance from Tail to Head of last two bags to pass capture photo-eye");
		DINT Length (Description := "Length of Bag for Non Tracked Merge");
		CONTROL MainLineBScntrl (Description := "Bit Shift Control");
		CONTROL MrgLineBScntrl (Description := "Bit Shift Control");
		SINT ZZZZZZZZZZMRG24 (Hidden := 1);
		BIT MrgOK ZZZZZZZZZZMRG24 : 0 (Description := "OK to Merge");
		BIT MrgOK_PosXitn ZZZZZZZZZZMRG24 : 1 (Description := "OK to Merge Positive Transition");
		BIT MrgSeal ZZZZZZZZZZMRG24 : 2 (Description := "Merge Seal");
		BIT PeSeal ZZZZZZZZZZMRG24 : 3 (Description := "Merge Photoeye Seal");
		BIT PeSeal_PosXitn ZZZZZZZZZZMRG24 : 4 (Description := "Merge Photoeye Seal Positive Transition");
		BIT Hold_MA ZZZZZZZZZZMRG24 : 5 (Description := "Hold for Merge Ahead Spacing Setup");
		BIT Hold_MB ZZZZZZZZZZMRG24 : 6 (Description := "Hold for Merge Behind Spacing Setup");
		BIT Hold_Align ZZZZZZZZZZMRG24 : 7 (Description := "Hold Merge for Alignment Setup");
		SINT ZZZZZZZZZZMRG33 (Hidden := 1);
		BIT Lead_Gap_DN ZZZZZZZZZZMRG33 : 0 (Description := "Leading Gap Counter Done");
		BIT MLWndoCntDn_DN ZZZZZZZZZZMRG33 : 1 (Description := "Mainline Window Countdown Done");
		BIT PriorityStop ZZZZZZZZZZMRG33 : 2 (Description := "Priority Stop bit");
	END_DATATYPE

	DATATYPE MRGx (FamilyType := NoFamily)
		DINT Lead_Gap (Description := "Leading Gap of Merging Bag");
		DINT Trail_Gap (Description := "Trailing Gap of Merging Bag");
		DINT MLWndoCntDn (Description := "Mainline Window Count Down");
		DINT MergeLineFullPriorityCntPRE (Description := "Mergeline Priority Count Preset");
		DINT MLSpacConst (Description := "Mainline Spacer Size");
		DINT MergeRunCntPre (Description := "Merge Conveyor Run Time");
		DINT MinLength (Description := "Minimum Merge bag length");
		DINT MaxLength (Description := "Max Merge Bag length");
	END_DATATYPE

	DATATYPE MSG_CONST (FamilyType := NoFamily)
		DINT OK (Description := "General - OK");
		DINT NA (Description := "General - Not Applicable");
		DINT MsgID_HeartBeat (Description := "Message ID - HeartBeat");
		DINT MsgID_Scanner (Description := "Message ID - Scanner");
		DINT MsgID_ScannerNoSort (Description := "Message ID - Non-sorting Scanner");
		DINT MsgID_ScannerCBIS (Description := "Message ID - CBIS Scanner");
		DINT MsgID_Divert (Description := "Message ID - Divert");
		DINT MsgID_VSU (Description := "Message ID - VSU");
		DINT MsgID_PreEDS (Description := "Message ID - Pre EDS");
		DINT MsgID_EDSResult (Description := "Message ID - EDS Result");
		DINT MsgID_PostEDS (Description := "Message ID - Post EDS");
		DINT MsgID_CBRAArrival (Description := "Message ID - CBRA Arrival");
		DINT MsgID_TrackingUpdate (Description := "Message ID - Tracking Update");
		DINT MsgID_BDS (Description := "Message ID - Bag Dimensioning System");
		DINT Event_Diverted (Description := "Event Code - Divert$NOK");
		DINT Event_DivStraight (Description := "Event Code - Divert$NBag not Diverted");
		DINT Event_DivError (Description := "Event Code - Divert$NDiverter not in position");
		DINT Event_VSUp (Description := "Event Code - VSU$NBag Sorted UP");
		DINT Event_VSDown (Description := "Event Code - VSU$NBag Sorted Down");
		DINT Event_ATRScanned (Description := "Event Code  - ATR$NScannned Bag");
		DINT Event_ATRBadData (Description := "Event Code - ATR$NBad Data");
		DINT Event_ATRTimeout (Description := "Event Code - ATR$NTimeout");
		DINT Event_ATRTooClose (Description := "Event Code - ATR$NToo close");
		DINT Event_EDSUnk (Description := "Event Code - EDS$NUnknown");
		DINT Event_EDSClr (Description := "Event Code - EDS$NClear");
		DINT Event_EDSSus (Description := "Event Code - EDS$NSuspect");
		DINT Event_EDSTmOut (Description := "Event Code - EDS$NTimeout");
		DINT Event_EDSCommErr (Description := "Event Code - EDS$NComm Error");
		DINT Event_EDSNoExitData (Description := "Bag detected exiting ISD; No information received");
		DINT Event_EDSExitOK (Description := "Event Code - EDS$NBag Exit Okay; Received Exit Bag Data");
		DINT Event_EDSPend (Description := "Event Code - EDS$NPending");
		DINT Event_BDSIG (Description := "Event Code - BDS$NIn Gauge");
		DINT Event_BDSOG (Description := "Event Code - BDS$NOut of Gauge");
		DINT Event_ETDArrived (Description := "Event Code - CBRA$NBag Arrived");
		DINT Event_TUTrackingErr (Description := "Event Code - Tracking Update$NBag Tracking Ended");
		DINT Event_TUUnknown (Description := "Event Code - Tracking Update$NUnknown Bag");
		DINT Event_TUNewBag (Description := "Event Code - Tracking Update$NTracking Started");
		DINT Event_TUClearDisallow (Description := "Event Code - Tracking Update$NDisallow EDS Clear Decision");
		DINT Event_TUArrived (Description := "Event Code - Tracking Update$NBag Arrived");
		DINT Event_TUDeparted (Description := "Event Code - Tracking Update$NBag Departed");
		DINT Event_TUUnscannable (Description := "Event Code -$NIATA Tag must not be used");
		DINT Event_TURecirc (Description := "Event Code - Recirculation");
		DINT Event_TUCBRARemoved (Description := "Event Code - Bag Removed for Inspection");
		DINT Rson_DivAuto (Description := "Reason Code - Divert$NAuto Mode");
		DINT Rson_DivTooClose (Description := "Reason Code - Divert$NToo close");
		DINT Rson_DivDestNotAvail (Description := "Reason Code - Divert$NDestination Not Available");
		DINT Rson_DivEstop (Description := "Reason Code - Divert$NE-stopped");
		DINT Rson_DivLnJam (Description := "Reason Code - Divert$NChute jam");
		DINT Rson_DivNotAuto (Description := "Reason Code - Divert$NLocal Maintenance Mode");
		DINT Rson_DivDisconnectOff (Description := "Reason Code - Divert$NMotor Disconnect Off");
		DINT Rson_DivHMIDivertAll (Description := "Reason Code - Divert$NHMI Divert All");
		DINT Rson_DivHMIOutServ (Description := "Reason Code - Divert$NHMI Out of Service");
		DINT Rson_DivHMIDivertHalf (Description := "Reason Code - Divert$NHMI Divert Half");
		DINT Rson_DivUnVerifiedPush (Description := "Reason Code - Divert$NNot Verified");
		DINT Rson_DivFaulted (Description := "Reason Code - Divert$NFaulted");
		DINT Rson_DivLnOutServ (Description := "Reason Code - Divert Line$NHMI Out of Service");
		DINT Rson_DivLnFull (Description := "Reason Code - Divert Line$NFull");
		DINT Rson_DivFailedToRet (Description := "Reason Code - Divert$NDiverter Failed to Retract");
		DINT Rson_DivFailedtoExt (Description := "Reason Code - Divert$NDiverter Failed to Extend");
		DINT Rson_DivPosFault (Description := "Reason Code - Divert$NDiverter Unk Pos Fault");
		DINT Rson_DivNotRunning (Description := "Reason Code - Divert$NDiverter Not Running");
		DINT Rson_VSAuto (Description := "Reason Code - VSU$NAuto Mode");
		DINT Rson_VSHMIOutServ (Description := "Reason Code - VSU$NHMI Out of Service");
		DINT Rson_VSHMIOverride (Description := "Reason Code - VSU$NHMI Override");
		DINT Rson_VSDisconnectOff (Description := "Reason Code - VSU$NDisconnect off");
		DINT Rson_VSFaulted (Description := "Reason Code - VSU$NDevice Faulted");
		DINT Rson_VSNotAuto (Description := "Reason Code - VSU$NDevice Maintenance Mode");
		DINT Rson_VSDestNotAvail (Description := "Reason Code - VSU$NDestination not available");
		DINT Rson_ETDLostBag (Description := "Reason Code - ETD$NLost In Track Bag");
		DINT Rson_ETDSuspect (Description := "Reason Code - ETD$NSuspect bag");
		DINT Rson_ETDOOG (Description := "Reason Code - ETD$NOut of gauge");
		DINT Rson_ETDTO (Description := "Reason Code - ETD$NTimeout/No Decision");
		DINT Rson_ETDClear (Description := "Reason Code - ETD$NClear Bag");
		DINT Rson_ETDUnk (Description := "Reason Code - ETD$NUnknown Decision Bag");
		DINT Rson_ETDFlush (Description := "Reason Code - ETD$NFlushed From EDS");
		DINT Rson_ETDBHSPurge (Description := "Reason Code - ETD$NBHS Reject");
		DINT Rson_ETDCommErr (Description := "Reason Code - ETD$NCommunications Error");
		DINT Rson_ETDStoppedInScan (Description := "Reason Code - ETD$NStopped in L3 Scan Plane");
		DINT Rson_EDSL1 (Description := "Reason Code - EDS$NLevel 1");
		DINT Rson_EDSL2 (Description := "Reason Code - EDS$NLevel 2");
		DINT Rson_EDSPseudo (Description := "Reason Code - EDS$NL3 Pseudo ID");
		DINT Rson_EDSLate (Description := "Reason Code - ISD Decision arrived after last chance");
		DINT Rson_BDSOG (Description := "Reason Code - BDS$NOut of Gauge");
		DINT Rson_BDSBadData (Description := "Reason Code - BDS$NData Error");
		DINT Rson_BDSTimeout (Description := "Reason Code - BDS$NTimeout");
		DINT Rson_BDSTooClose (Description := "Reason Code - BDS$NToo Close");
		DINT Rson_BDSNoDim (Description := "Reason Code - BDS$NMissing Dimension");
		DINT Rson_TUJamDelete (Description := "Reason Code - Tracking Update$NJam");
		DINT Rson_TUMissBag (Description := "Reason Code - Tracking Update$NMissing Bag");
		DINT Rson_TUMissBagPurge (Description := "Reason Code - Tracking Update$NPurged by downstream lost Bag");
		DINT Rson_TUUnkPurge (Description := "Reason Code - Tracking Update$NPurged by Unknown Bag too close");
		DINT Rson_TULenPurge (Description := "Reason Code - Tracking Update$NLength Error");
		DINT Rson_TUTrkErr (Description := "Reason Code - Tracking Update$NInternal Tracking Error");
		DINT Rson_TUHEDataErr (Description := "Reason Code - Tracking Update$NHead End Data Error");
		DINT Rson_TURemoved (Description := "Reason Code - Tracking Update$NBag Removed from Belt");
		DINT Rson_TUEncErr (Description := "Reason Code - Tracking Update$NEncoder Error");
		DINT Rson_TUWindowErr (Description := "Reason Code - Tracking Update$NMultiBag Window");
		DINT Rson_TUStoppedInScan (Description := "Reason Code - Tracking Update$NBag stopped in Scan area");
		DINT Rson_TUUpstreamPurge (Description := "Reason Code - Tracking Update$NBag purged upstream of CTX");
		DINT Rson_RCBySAC (Description := "Reason Code - Recirculation$NBag sorted to Runout");
		DINT Rson_RCLost (Description := "Reason Code - Recirculation$NLost In Tracking");
		DINT Rson_RCMissDiv (Description := "Reason Code - Recirculation$NBag not diverted to assigned destination");
		DINT Sort_Pier (Description := "Sort Method$NPier");
		DINT Sort_InvalidPier (Description := "Sort Method$NInvalid Pier");
		DINT Sort_Carrier (Description := "Sort Method$NCarrier");
		DINT Sort_InvalidCarrier (Description := "Sort Method$NInvalid Carrier");
		DINT Sort_InvalidAirport (Description := "Sort Method$NInvalid Airport");
		DINT Sort_CnflctBcds (Description := "Sort Method$NConflicting Barcodes");
		DINT Sort_NoRead (Description := "Sort Method$NNo Read");
		DINT Sort_TooManyBcds (Description := "Sort Method$NToo Many Barcodes");
	END_DATATYPE

	DATATYPE MSG_P2UL_QUEUE (FamilyType := NoFamily)
		DINT LOAD_POS (Description := "Position to load next message");
		DINT UNLD_POS (Description := "Position of next message to Unload");
		DINT UNLD_POS_MIN1 (Description := "One Less than UNLD_POS");
		DINT QUEUE_SIZE (Description := "Size of Queue");
		DINT QUEUE_SIZE_MIN1 (Description := "One less than QUEUE_SIZE");
		DINT PAGE_POS (Description := "Position to load next message onto page");
		DINT PAGE_SIZE (Description := "Size of Page");
	END_DATATYPE

	DATATYPE MSG_P2UL_SMH (FamilyType := NoFamily)
		DINT PLC_ID (Description := "PLC ID");
		DINT MSG_ID (Description := "Message type ID");
		DINT PLC_BAG_ID (Description := "Bag_Data Index");
		DINT BHS_ID (Description := "BHS ID for global tracking");
		DINT SECURITY_ID (Description := "Security ID");
		DINT DEVICE_ID (Description := "Device ID");
		DINT EVENT_ID (Description := "The What");
		DINT REASON_ID (Description := "The Why");
		STR_20 DEVICE_DATA (Description := "Additional Device Data");
	END_DATATYPE

	DATATYPE MSG_TO_PEER (FamilyType := NoFamily)
		DINT FIFO[20] (Description := "Transfer Bag ID FIFO");
		CONTROL FIFO_CNT (Description := "Transfer Bag ID FIFO Control");
		DINT Add (Description := "Transfer Bag ID FIFO Load");
		DINT DISCARD;
		DINT ID (Description := "Transfer Bag ID FIFO Unload");
		DINT TRIG (Description := "Bag Data Message Trigger");
	END_DATATYPE

	DATATYPE MSG_TO_UL_RTN (FamilyType := NoFamily)
		TIMER TTL_TMR (Description := "Time to live");
		INT HB_CNT (Description := "Heartbeat counter");
		INT FLAGS (Description := "Copy of msg status flags");
		SINT ZZZZZZZZZZMSG_TO_UL_2 (Hidden := 1);
		BIT EX ZZZZZZZZZZMSG_TO_UL_2 : 0 (Description := "Write execute flag");
		BIT EX_ONS ZZZZZZZZZZMSG_TO_UL_2 : 1 (Description := "Oneshot for write execute");
		BIT MSG_IN_FLIGHT ZZZZZZZZZZMSG_TO_UL_2 : 2 (Description := "Message in flight");
		BIT MSG_RCVD ZZZZZZZZZZMSG_TO_UL_2 : 3 (Description := "Response received");
		BIT MSG_DN_ONS ZZZZZZZZZZMSG_TO_UL_2 : 4 (Description := "Message Sent ONS");
	END_DATATYPE

	DATATYPE MTR (FamilyType := NoFamily)
		TIMER IM_TMR (Description := "Internal Motor Timer");
		TIMER ON_TMR (Description := "On Timer");
		TIMER OFF_TMR (Description := "Off Timer");
		TIMER CTCTR_FLT_TMR (Description := "Motor/Contactor Feedback Fault Timer");
		TIMER H2H_SPACE_TMR (Description := "Head to Head - Spacer Timer");
		TIMER T2H_SPACE_TMR (Description := "Tail to Head - Spacer Timer");
		TIMER INDEX_TMR (Description := "Conveyor Index Timer");
		DINT H2H_SPACE_CNT (Description := "Head to Head Spacer Counter");
		DINT T2H_SPACE_CNT (Description := "Tail to Head Spacer Count");
		DINT G (Description := "Graphics");
		SINT ZZZZZZZZZZMTR10 (Hidden := 1);
		BIT NO_FAULT ZZZZZZZZZZMTR10 : 0 (Description := "Motor no Fault");
		BIT INTL_MTR ZZZZZZZZZZMTR10 : 1 (Description := "Internal Motor");
		BIT CONV_RUN ZZZZZZZZZZMTR10 : 2 (Description := "Conveyor Running");
		BIT ANTI_CASC ZZZZZZZZZZMTR10 : 3 (Description := "Anti-Cascade Bit - Used to restart conv when bag removed");
		BIT POS_XITN_CONV_RUN ZZZZZZZZZZMTR10 : 4 (Description := "Oneshot Conveyor Start-up");
		BIT NEG_XITN_CONV_RUN ZZZZZZZZZZMTR10 : 5 (Description := "Oneshot Conveyor Stop");
		BIT IM_ONS ZZZZZZZZZZMTR10 : 6 (Description := "Internal Motor One Shot");
		BIT SYNC_RUN ZZZZZZZZZZMTR10 : 7 (Description := "Synch Run with Downstream");
		SINT ZZZZZZZZZZMTR19 (Hidden := 1);
		BIT SYNC_STOP ZZZZZZZZZZMTR19 : 0 (Description := "Synch Stop with Upstream");
		BIT SR_STOPPED ZZZZZZZZZZMTR19 : 1 (Description := "Synch Run Stopped");
		BIT START_EN ZZZZZZZZZZMTR19 : 2 (Description := "Start Enable");
		BIT STOP ZZZZZZZZZZMTR19 : 3 (Description := "Stop");
		BIT H2H_SPACE ZZZZZZZZZZMTR19 : 4 (Description := "Head to Head Spacer");
		BIT T2H_SPACE ZZZZZZZZZZMTR19 : 5 (Description := "Tail to Head Spacer");
		BIT SPACE ZZZZZZZZZZMTR19 : 6 (Description := "Spacer");
		BIT DISABLE_SPACE ZZZZZZZZZZMTR19 : 7 (Description := "Disable Spacing");
		SINT ZZZZZZZZZZMTR28 (Hidden := 1);
		BIT LONG_BAG ZZZZZZZZZZMTR28 : 0 (Description := "Long Bag Detected");
		BIT COMM ZZZZZZZZZZMTR28 : 1 (Description := "Communication Fault");
		BIT RUNNING ZZZZZZZZZZMTR28 : 2 (Description := "Running");
		BIT E_STOP ZZZZZZZZZZMTR28 : 3 (Description := "E-Stopped");
		BIT E_STOP_RES ZZZZZZZZZZMTR28 : 4 (Description := "E-Stopped, Reset");
		BIT FIRE_ALM ZZZZZZZZZZMTR28 : 5 (Description := "Fire Alarm");
		BIT CASC ZZZZZZZZZZMTR28 : 6 (Description := "Cascaded");
		BIT AUTO_STOP ZZZZZZZZZZMTR28 : 7 (Description := "Auto Stopped");
		SINT ZZZZZZZZZZMTR37 (Hidden := 1);
		BIT MB_JAMMED ZZZZZZZZZZMTR37 : 0 (Description := "Missing Bag Jammed");
		BIT JAMMED ZZZZZZZZZZMTR37 : 1 (Description := "Jammed");
		BIT MSD_ONS ZZZZZZZZZZMTR37 : 2 (Description := "Motor Disconnect One Shot");
		BIT MOL_ONS ZZZZZZZZZZMTR37 : 3 (Description := "Motor Overload One Shot");
		BIT MS_FLT_ONS ZZZZZZZZZZMTR37 : 4 (Description := "Motor Start Fault One Shot");
		BIT HMI_OVERRIDE_ONS ZZZZZZZZZZMTR37 : 5 (Description := "HMI Override One Shot");
		BIT OOS_ONS ZZZZZZZZZZMTR37 : 6 (Description := "Out of Service One Shot");
		BIT INDEX_EN ZZZZZZZZZZMTR37 : 7 (Description := "Conveyor Indexing Enabled");
		SINT ZZZZZZZZZZMTR46 (Hidden := 1);
		BIT INDEX_FWD ZZZZZZZZZZMTR46 : 0 (Description := "Index Run Forward");
		BIT DIV_SYNC_STOP ZZZZZZZZZZMTR46 : 1 (Description := "MTR-DIV Sync Stop");
		BIT DIV_SYNC_RUN ZZZZZZZZZZMTR46 : 2 (Description := "MTR-DIV Sync Run");
		BIT JRB_FILT ZZZZZZZZZZMTR46 : 3 (Description := "Jog Reverse Button Filter");
		TIMER JRB_FILT_TON;
	END_DATATYPE

	DATATYPE MTRx (FamilyType := NoFamily)
		DINT CONV_SPEED (Description := "Conveyor Speed");
		DINT H2H_SPACE_DIST (Description := "Head to Head Spacer Distance");
		DINT T2H_SPACE_DIST (Description := "Tail to Head Spacer Distance");
		DINT H2H_SPACE_SET (Description := "Head to Head Spacer Setpoint");
		DINT T2H_SPACE_SET (Description := "Tail to Head Spacer Setpoint");
	END_DATATYPE

	DATATYPE MTR_GRP (FamilyType := NoFamily)
		TIMER AUTO_STOP_TIMER (Description := "Auto stop timer");
		SINT ZZZZZZZZZZMTR_GRP1 (Hidden := 1);
		BIT RUN_LATCH ZZZZZZZZZZMTR_GRP1 : 0 (Description := "Group run latch");
		BIT RUN_EXPAND ZZZZZZZZZZMTR_GRP1 : 1 (Description := "Group run expand");
		BIT START ZZZZZZZZZZMTR_GRP1 : 2 (Description := "Start command");
		BIT START_DS ZZZZZZZZZZMTR_GRP1 : 3 (Description := "Start down stream system");
		BIT PEs ZZZZZZZZZZMTR_GRP1 : 4 (Description := "PE Group");
	END_DATATYPE

	DATATYPE Non_Tracked_Div (FamilyType := NoFamily)
		DINT BT_CNT (Description := "Pulse Count");
		DINT BAG_ID (Description := "Bag ID");
		Bag_Data Bag_Data[5] (Description := "Diverter Bag Data");
		SINT ZZZZZZZZZZNon_Tracke3 (Hidden := 1);
		BIT DONT_CLR ZZZZZZZZZZNon_Tracke3 : 0 (Description := "Don$'t Clear Pulse Counter");
		DINT Bag_Data_Low_Limit (Description := "Lower Limit of Non-Tracked Diverter Bag Data Table");
		DINT Bag_Data_High_Limit (Description := "Upper Limit of Non-Tracked Diverter Bag Data Table");
		DINT BAG_ID_High_Limit (Description := "Bag ID High Limit");
	END_DATATYPE

	DATATYPE PE (FamilyType := NoFamily)
		TIMER JAM_TMR (Description := "Jam timer");
		TIMER TOF (Description := "Off filter");
		TIMER TON (Description := "On filter");
		SINT ZZZZZZZZZZPE3 (Hidden := 1);
		BIT FILT ZZZZZZZZZZPE3 : 0 (Description := "Photoeye filtered");
		BIT JAM_CTR_ONS ZZZZZZZZZZPE3 : 1 (Description := "Jam counter one shot");
		BIT FILT_NEG_XITN ZZZZZZZZZZPE3 : 2 (Description := "Filtered Photoeye Negative Transition Oneshot");
		BIT FILT_NEG_XITN_MEM ZZZZZZZZZZPE3 : 3 (Description := "Filtered Photoeye Negative Transition Memory");
		BIT FILT_POS_XITN ZZZZZZZZZZPE3 : 4 (Description := "Filtered Photoeye Positive Transition Oneshot");
		BIT FILT_POS_XITN_MEM ZZZZZZZZZZPE3 : 5 (Description := "Filtered Photoeye Positive Transition Memory");
		BIT POS_XITN ZZZZZZZZZZPE3 : 6 (Description := "Positive Transition");
		BIT POS_XITN_MEM ZZZZZZZZZZPE3 : 7 (Description := "Positive Transition Memory");
		SINT ZZZZZZZZZZPE12 (Hidden := 1);
		BIT NEG_XITN_MEM ZZZZZZZZZZPE12 : 0 (Description := "Negative Transition Memory");
		BIT NEG_PE_SEAL ZZZZZZZZZZPE12 : 1 (Description := "Negative Transition PE Seal");
		BIT JAM_ONS ZZZZZZZZZZPE12 : 2 (Description := "Bag Jam One Shot");
	END_DATATYPE

	DATATYPE PEER_STATUS (FamilyType := NoFamily)
		TIMER LS_TMR (Description := "Lifesign Timer");
		SINT ZZZZZZZZZZPEER_STATUS4 (Hidden := 1);
		BIT LS_HI_ONS ZZZZZZZZZZPEER_STATUS4 : 0 (Description := "Lifesign High One Shot");
		BIT LS_LO_ONS ZZZZZZZZZZPEER_STATUS4 : 1 (Description := "Lifesign Low One Shot");
	END_DATATYPE

	DATATYPE PLC (FamilyType := NoFamily)
		TIMER SCAN_CRTCL_TMR;
		TIMER SCAN_HI_TMR;
		DINT SCAN_LOG[10];
		DINT SCAN_LOG_CRTCL_LMT;
		DINT SCAN_LOG_HI_LMT;
		DINT SCAN_LOG_NDX;
		DINT SCAN_LOG_CRTCL_CNT;
		DINT SCAN_LOG_HI_CNT;
		DINT LED_STATUS;
		DINT IO_MEM_FREE;
		DINT EXP_MEM_FREE;
		DINT IO_MEM_TOTAL;
		DINT EXP_MEM_TOTAL;
		SINT ZZZZZZZZZZPLC13 (Hidden := 1);
		BIT MEM_MSG_MEM ZZZZZZZZZZPLC13 : 0;
		BIT MEM_MSG_ONS ZZZZZZZZZZPLC13 : 1;
		BIT Compatible ZZZZZZZZZZPLC13 : 2;
		BIT A_Active ZZZZZZZZZZPLC13 : 3;
		BIT B_Active ZZZZZZZZZZPLC13 : 4;
		BIT Peer_Compatible ZZZZZZZZZZPLC13 : 5;
		BIT Peer_KSW_Match ZZZZZZZZZZPLC13 : 6;
		BIT Peer_Qualified ZZZZZZZZZZPLC13 : 7;
		SINT ZZZZZZZZZZPLC22 (Hidden := 1);
		BIT Peer_Run ZZZZZZZZZZPLC22 : 0;
		BIT Peer_Battery_Status ZZZZZZZZZZPLC22 : 1;
		BIT SWITCHOVER ZZZZZZZZZZPLC22 : 2 (Description := "First scan after HB switchover");
	END_DATATYPE

	DATATYPE Redundancy_Status (FamilyType := NoFamily)
		INT Chassis_Redundancy_State (Description := "Chassis Redundancy State");
		INT Compatibility_Results (Description := "Compatibility Results");
		DINT Keyswitch_Alarm (Description := "Keyswitch Alarm");
		INT Module_Redundancy_State (Description := "Module Redundancy State");
		INT Partner_Chassis_Redundancy_State (Description := "Partner Chassis Redundancy State");
		DINT Partner_Minor_Faults (Description := "Partner Minor Fault");
		DINT Partner_Mode (Description := "Partner Mode");
		INT Partner_Module_Redundancy_State (Description := "Partner Module Redundancy State");
		INT Physical_Chassis_ID (Description := "Physical Chassis ID");
	END_DATATYPE

	DATATYPE STATUS (FamilyType := NoFamily)
		DINT Brown_Grey (Description := "HMI Color Code",
		                Radix := Hex);
		DINT Brown (Description := "HMI Color Code",
		           Radix := Hex);
		DINT Red (Description := "HMI Color Code",
		         Radix := Hex);
		DINT Red_Grey (Description := "HMI Color Code",
		              Radix := Hex);
		DINT Green_DKGreen (Description := "HMI Color Code",
		                   Radix := Hex);
		DINT Blue (Description := "HMI Color Code",
		          Radix := Hex);
		DINT Yellow (Description := "HMI Color Code",
		            Radix := Hex);
		DINT Blue_Yellow (Description := "HMI Color Code",
		                 Radix := Hex);
		DINT White (Description := "HMI Color Code",
		           Radix := Hex);
		DINT White_Grey (Description := "HMI Color Code",
		                Radix := Hex);
		DINT Magenta (Description := "HMI Color Code",
		             Radix := Hex);
		DINT Cyan (Description := "HMI Color Code",
		          Radix := Hex);
		DINT Grey (Description := "HMI Color Code",
		          Radix := Hex);
		DINT Black (Description := "HMI Color Code",
		           Radix := Hex);
		DINT Green (Description := "HMI Color Code",
		           Radix := Hex);
		DINT ATRNoReads (Description := "ATR No Reads",
		                Radix := Hex);
		DINT ATRNoResp (Description := "ATR No Response",
		               Radix := Hex);
		DINT ATRChnlDataFail (Description := "ATR Channel Data Error",
		                     Radix := Hex);
		DINT ATRScnNotActive (Description := "ATR Scanner Not Active",
		                     Radix := Hex);
		DINT ATRComFault (Description := "ATR Communication Fault",
		                 Radix := Hex);
		DINT ATRScnError (Description := "ATR Scanner Error",
		                 Radix := Hex);
		DINT ATRPeFault (Description := "ATR Photoeye Fault",
		                Radix := Hex);
		DINT ATREncFault (Description := "ATR Encoder Fault",
		                 Radix := Hex);
		DINT ATRReady (Description := "ATR Ready",
		              Radix := Hex);
		DINT ATRULFault (Description := "ATR UL Comm Fault",
		                Radix := Hex);
		DINT ATRTimeOutReady (Description := "ATR Timed out and Ready",
		                     Radix := Hex);
		DINT BDSNoResp (Description := "BDS No Response",
		               Radix := Hex);
		DINT BDSComFault (Description := "BDS Communication Fault",
		                 Radix := Hex);
		DINT BDSReady (Description := "BDS Ready",
		              Radix := Hex);
		DINT BDSTimeOutReady (Description := "BDS Timed out and Ready",
		                     Radix := Hex);
		DINT BDSEncFault (Description := "BDS Encoder Fault",
		                 Radix := Hex);
		DINT BDSPeFault (Description := "BDS Photo-Eye Fault",
		                Radix := Hex);
		DINT BDSScnError (Description := "BDS Scanner Fault",
		                 Radix := Hex);
		DINT BDSScnNotActive (Description := "BDS Scanner not Active",
		                     Radix := Hex);
		DINT BDSChnDataFail (Description := "BDS Channel Data Fail",
		                    Radix := Hex);
		DINT BSDEnabled (Description := "BSD Enabled",
		                Radix := Hex);
		DINT BSDDisabled (Description := "BSD Disabled",
		                 Radix := Hex);
		DINT BSDSACComm (Description := "BSD SAC Comm Fault",
		                Radix := Hex);
		DINT BSDBagWaitALM (Description := "BSD Bag Waiting Alarm",
		                   Radix := Hex);
		DINT BSDBagPresent (Description := "BSD Bag Present",
		                   Radix := Hex);
		DINT BSDCommFault (Description := "BSD Communication Fault",
		                  Radix := Hex);
		DINT BSDPrintEnabled (Description := "BSD Printing Enabled",
		                     Radix := Hex);
		DINT ConvCommFault (Description := "Conveyor Communications Fault",
		                   Radix := Hex);
		DINT ConvOutOfServ (Description := "Conveyor Out Of Service",
		                   Radix := Hex);
		DINT ConvEStop (Description := "Conveyor E-Stop",
		               Radix := Hex);
		DINT ConvFireAlarm (Description := "Conveyor Fire Alarm",
		                   Radix := Hex);
		DINT ConvOverRide (Description := "Conveyor Override",
		                  Radix := Hex);
		DINT ConvOverLoad (Description := "Conveyor Overload",
		                  Radix := Hex);
		DINT ConvCTCFlt (Description := "Conveyor Contactor Fault",
		                Radix := Hex);
		DINT ConvVFDFlt (Description := "Conveyor VFD Fault",
		                Radix := Hex);
		DINT ConvJammed (Description := "Conveyor Jammed, Missing bag Jam, or Failsafe",
		                Radix := Hex);
		DINT ConvFailSafeFlt (Description := "Conveyor Fail Safe Fault",
		                     Radix := Hex);
		DINT ConvDisc (Description := "Conveyor Disconnect Off",
		              Radix := Hex);
		DINT ConvFull (Description := "Conveyor Full",
		              Radix := Hex);
		DINT ConvOverSize (Description := "Conveyor OverSize",
		                  Radix := Hex);
		DINT ConvCascade (Description := "Conveyor Cascade",
		                 Radix := Hex);
		DINT ConvBagPresCasc (Description := "Conveyor Cascade w/ Bag Present",
		                     Radix := Hex);
		DINT ConvEncoderFlt (Description := "Conveyor Encoder Fault",
		                    Radix := Hex);
		DINT ConvIdle (Description := "Conveyor Idle",
		              Radix := Hex);
		DINT ConvTimeOut (Description := "Conveyor Timed Out",
		                 Radix := Hex);
		DINT ConvRunning (Description := "Conveyor Running",
		                 Radix := Hex);
		DINT ConvMBJam (Description := "Conveyor Missing Bag Jam",
		               Radix := Hex);
		DINT ConvEstopRes (Description := "Conveyor Estop Resettable",
		                  Radix := Hex);
		DINT DivCommFault (Description := "Diverter Communications Fault",
		                  Radix := Hex);
		DINT DivOutOfServ (Description := "Diverter Out of Service",
		                  Radix := Hex);
		DINT DivEStop (Description := "Diverter E-Stop",
		              Radix := Hex);
		DINT DivFireAlarm (Description := "Diverter Fire Alarm",
		                  Radix := Hex);
		DINT DivOverRide (Description := "Diverter Override",
		                 Radix := Hex);
		DINT DivProxOverride (Description := "Diverter Home Prox. Override",
		                     Radix := Hex);
		DINT DivOverLoad (Description := "Diverter Overload",
		                 Radix := Hex);
		DINT DivCTCFlt (Description := "Diverter Contactor Fault",
		               Radix := Hex);
		DINT DivJammed (Description := "Diverter Jammed",
		               Radix := Hex);
		DINT DivDisc (Description := "Diverter Disconnect Off",
		             Radix := Hex);
		DINT DivFault (Description := "Diverter Faulted",
		              Radix := Hex);
		DINT DivFailRet (Description := "Diverter Failed to Retract",
		                Radix := Hex);
		DINT DivFailExt (Description := "Diverter Failed to Extend",
		                Radix := Hex);
		DINT DivPositionFault (Description := "Diverter Position Fault",
		                      Radix := Hex);
		DINT DivNotAuto (Description := "Diverter Not In Auto",
		                Radix := Hex);
		DINT DivIdle (Description := "Diverter Idle",
		             Radix := Hex);
		DINT DivFull (Description := "Diverter Full",
		             Radix := Hex);
		DINT DivTimeOut (Description := "Diverter Timed Out",
		                Radix := Hex);
		DINT DivRunning (Description := "Diverter Running",
		                Radix := Hex);
		DINT DivPOShome (Description := "Diverter Position Home",
		                Radix := Hex);
		DINT DivPOSdivert (Description := "Diverter Position Divert",
		                  Radix := Hex);
		DINT DivPosNotHomeOrExt (Description := "Diverter Not Home or Extended",
		                        Radix := Hex);
		DINT DivPosHomeAndExt (Description := "Diverter Home and Extended",
		                      Radix := Hex);
		DINT ISDCommFault (Description := "ISD Communications Fault",
		                  Radix := Hex);
		DINT ISDOutOfServ (Description := "ISD Out Of Service",
		                  Radix := Hex);
		DINT ISDEstop (Description := "ISD E-Stop",
		              Radix := Hex);
		DINT ISDFault (Description := "ISD Fault",
		              Radix := Hex);
		DINT ISDBypass (Description := "ISD Bypass",
		               Radix := Hex);
		DINT ISDIQTest (Description := "ISD IQ Test Mode",
		               Radix := Hex);
		DINT ISDNormal (Description := "ISD Normal",
		               Radix := Hex);
		DINT ISDStdby (Description := "ISD Standby",
		              Radix := Hex);
		DINT ISDRestart (Description := "ISD Restarting",
		                Radix := Hex);
		DINT ISDResynch (Description := "ISD Resynch",
		                Radix := Hex);
		DINT ISDInitial (Description := "ISD Initialization",
		                Radix := Hex);
		DINT ISDWarmUp (Description := "ISD Warm Up",
		               Radix := Hex);
		DINT ISDCalibration (Description := "ISD Calibration",
		                    Radix := Hex);
		DINT ISDHibernate (Description := "ISD Hibernate",
		                  Radix := Hex);
		DINT ISDxRayMin (Description := "ISD xRay Minimized",
		                Radix := Hex);
		DINT ISDInsert (Description := "ISD Insert",
		               Radix := Hex);
		DINT ISDProcess (Description := "ISD Bag in Process",
		                Radix := Hex);
		DINT ISDDieBack (Description := "ISD in Die-Back",
		                Radix := Hex);
		DINT ISDModeCommFault (Description := "ISD Mode comm Fault");
		DINT ISDModeEstop (Description := "ISD Mode E-Stopped");
		DINT ISDModeFault (Description := "ISD Mode Faulted");
		DINT ISDModeBypass (Description := "ISD Mode Bypass");
		DINT ISDModeIQTest (Description := "ISD Mode IQ Test");
		DINT ISDModeNormal (Description := "ISD Mode Normal");
		DINT ISDModeStdBy (Description := "ISD Mode Standby");
		DINT ISDModeRestart (Description := "ISD Mode Restarting");
		DINT ISDModeResynch (Description := "ISD Mode Resynch");
		DINT ISDModeInitial (Description := "ISD Mode Initialization");
		DINT ISDModeWarmUp (Description := "ISD Mode Warm Up");
		DINT ISDModeCalibration (Description := "ISD Mode Calibration");
		DINT ISDModeHibernate (Description := "ISD Mode Hibernate");
		DINT ISDModexRayMin (Description := "ISD Mode xRay Minimized");
		DINT MCPCommFault (Description := "MCP Communications Error",
		                  Radix := Hex);
		DINT MCPFireAlarm (Description := "MCP Fire Alarm",
		                  Radix := Hex);
		DINT MCPEStop (Description := "MCP E-Stop",
		              Radix := Hex);
		DINT MCPOverTemp (Description := "MCP Over Temperature",
		                 Radix := Hex);
		DINT MCPMTRFlt (Description := "MCP Motor Fault",
		               Radix := Hex);
		DINT MCPFieldMTRFlt (Description := "MCP Field Motor Fault",
		                    Radix := Hex);
		DINT MCPTimeOut (Description := "MCP Timed Out",
		                Radix := Hex);
		DINT MCPActive (Description := "MCP Running",
		               Radix := Hex);
		DINT MCPFuseFlt (Description := "MCP Fuse Fault",
		                Radix := Hex);
		DINT MCPPLCFlt (Description := "MCP PLC Fault",
		               Radix := Hex);
		DINT MCPJamFlt (Description := "MCP Jam Fault",
		               Radix := Hex);
		DINT MCPCTCTRFlt (Description := "MCP Contactor Fault",
		                 Radix := Hex);
		DINT MECCommFLT (Description := "MEC Communications Fault",
		                Radix := Hex);
		DINT MECOutOfServ (Description := "MEC Out of Service",
		                  Radix := Hex);
		DINT MECOff (Description := "MEC Off",
		            Radix := Hex);
		DINT MECFull (Description := "MEC Full",
		             Radix := Hex);
		DINT MECBackup (Description := "MEC Backup Mode",
		               Radix := Hex);
		DINT MECReady (Description := "MEC Ok",
		              Radix := Hex);
		DINT MECIdle (Description := "MEC Idle",
		             Radix := Hex);
		DINT PusherCommFault (Description := "Pusher Communications Fault",
		                     Radix := Hex);
		DINT PusherOutOfServ (Description := "Pusher Out Of Service",
		                     Radix := Hex);
		DINT PusherEStop (Description := "Pusher E-Stop",
		                 Radix := Hex);
		DINT PusherFireAlarm (Description := "Pusher Fire Alarm",
		                     Radix := Hex);
		DINT PusherOverRide (Description := "Pusher OverRide",
		                    Radix := Hex);
		DINT PusherOverLoad (Description := "Pusher Motor Overload",
		                    Radix := Hex);
		DINT PusherCTCFlt (Description := "Pusher Contactor Fault",
		                  Radix := Hex);
		DINT PusherJammed (Description := "Pusher Jammed",
		                  Radix := Hex);
		DINT PusherDisc (Description := "Pusher Disc Off",
		                Radix := Hex);
		DINT PusherIdle (Description := "Pusher Idle",
		                Radix := Hex);
		DINT PusherFull (Description := "Pusher Full",
		                Radix := Hex);
		DINT PusherTimeOut (Description := "Pusher Timed Out",
		                   Radix := Hex);
		DINT PusherRunning (Description := "Pusher Running",
		                   Radix := Hex);
		DINT PusherNotAuto (Description := "Pusher Not in Auto",
		                   Radix := Hex);
		DINT VSCommFault (Description := "Vertisorter Communications Fault",
		                 Radix := Hex);
		DINT VSEStop (Description := "Vertisorter E-Stop",
		             Radix := Hex);
		DINT VSGSFault (Description := "Vertisorter Gate Switch Fault",
		               Radix := Hex);
		DINT VSFireAlarm (Description := "Vertisorter Fire Alarm",
		                 Radix := Hex);
		DINT VSOverLoad (Description := "Vertisorter Overload",
		                Radix := Hex);
		DINT VSCTCFlt (Description := "Vertisorter Contactor Fault",
		              Radix := Hex);
		DINT VSFailSwitch (Description := "Vertisorter Failed to Switch",
		                  Radix := Hex);
		DINT VSPositionFault (Description := "Vertisorter Position Fault",
		                     Radix := Hex);
		DINT VSCollisionFault (Description := "Vertisorter Collision Fault",
		                      Radix := Hex);
		DINT VSDisc (Description := "Vertisorter Disconnect Off",
		            Radix := Hex);
		DINT VSOverRide (Description := "Vertisorter OverRide",
		                Radix := Hex);
		DINT VSNotAuto (Description := "Vertisorter Not In Auto",
		               Radix := Hex);
		DINT VSIdle (Description := "Vertisorter Idle",
		            Radix := Hex);
		DINT VSTimeOut (Description := "Vertisorter Timed Out",
		               Radix := Hex);
		DINT VSRunning (Description := "Vertisorter Running",
		               Radix := Hex);
		DINT VSPOSup (Description := "Vertisorter Position Up",
		             Radix := Hex);
		DINT VSPOSdown (Description := "Vertisorter Position Down",
		               Radix := Hex);
		DINT VSPOSNotUpOrDn (Description := "Vertisorter Not Up or Down Position",
		                    Radix := Hex);
		DINT VSPOSUpAndDn (Description := "Vertisorter Up and Down Position",
		                  Radix := Hex);
		DINT CarCommFault (Description := "Carousel Communications Fault",
		                  Radix := Hex);
		DINT CarOutOfServ (Description := "Carousel Out Of Service",
		                  Radix := Hex);
		DINT CarEStop (Description := "Carousel E-Stop",
		              Radix := Hex);
		DINT CarFireAlarm (Description := "Carousel Fire Alarm",
		                  Radix := Hex);
		DINT CarOverRide (Description := "Carousel Override",
		                 Radix := Hex);
		DINT CarOverLoad (Description := "Carousel Overload/VFD Fault",
		                 Radix := Hex);
		DINT CarCTCFlt (Description := "Carousel Contactor Fault",
		               Radix := Hex);
		DINT CarJammed (Description := "Carousel Jammed, Missing bag Jam, or Failsafe",
		               Radix := Hex);
		DINT CarDisc (Description := "Carousel Disconnect Off",
		             Radix := Hex);
		DINT CarFull (Description := "Carousel Full",
		             Radix := Hex);
		DINT CarNotInAuto (Description := "Carousel Not in Auto",
		                  Radix := Hex);
		DINT CarCascade (Description := "Carousel Cascade",
		                Radix := Hex);
		DINT CarIdle (Description := "Carousel Idle",
		             Radix := Hex);
		DINT CarTimeOut (Description := "Carousel Timed Out",
		                Radix := Hex);
		DINT CarRunning (Description := "Carousel Running",
		                Radix := Hex);
		DINT DoorCommFault (Description := "Door Communications Fault",
		                   Radix := Hex);
		DINT DoorNotAuto (Description := "Door Not in Auto",
		                 Radix := Hex);
		DINT DoorOutOfServ (Description := "Door Out Of Service",
		                   Radix := Hex);
		DINT DoorEstop (Description := "Door E-Stop",
		               Radix := Hex);
		DINT DoorFireAlarm (Description := "Door Fire Alarm",
		                   Radix := Hex);
		DINT DoorOvRide (Description := "Door Override",
		                Radix := Hex);
		DINT DoorMOL (Description := "Door Motor Overload",
		             Radix := Hex);
		DINT DoorCTCTRFlt (Description := "Door Contactor Fault",
		                  Radix := Hex);
		DINT DoorFailOpen (Description := "Door Failed to Open",
		                  Radix := Hex);
		DINT DoorFailClose (Description := "Door Failed to Close",
		                   Radix := Hex);
		DINT DoorUnkPos (Description := "Door Unknown Position",
		                Radix := Hex);
		DINT DoorOBSFlt (Description := "Door Obstruction Fault",
		                Radix := Hex);
		DINT DoorDisc (Description := "Door Disconnect Off",
		              Radix := Hex);
		DINT DoorIdle (Description := "Door Idle",
		              Radix := Hex);
		DINT DoorClosed (Description := "Door Closed",
		                Radix := Hex);
		DINT DoorOpen (Description := "Door Open",
		              Radix := Hex);
		DINT DoorBetweenPos (Description := "Door Inbetween Positions",
		                    Radix := Hex);
		DINT DoorPOSOpen (Description := "Door Open Position",
		                 Radix := Hex);
		DINT DoorPOSClosed (Description := "Door Closed Position",
		                   Radix := Hex);
	END_DATATYPE

	DATATYPE STR_10 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[10] (Radix := ASCII);
	END_DATATYPE

	DATATYPE STR_20 (FamilyType := StringFamily)
		DINT LEN;
		SINT DATA[20] (Radix := ASCII);
	END_DATATYPE

	DATATYPE SYS (FamilyType := NoFamily)
		MTR_GRP MTR_GRP;
		SYS_STATUS STATUS;
	END_DATATYPE

	DATATYPE SYS_STATUS (FamilyType := NoFamily)
		DINT G (Description := "Graphics");
		TIMER E_STOP_ALM_TMR (Description := "E-stop alarm timer");
		TIMER MOL_ALM_TMR (Description := "Motor overload alarm timer");
		TIMER MSD_OFF_ALM_TMR (Description := "Disconnect off alarm timer");
		TIMER VFD_FLT_ALM_TMR (Description := "VFD Fault alarm timer");
		TIMER CTCTR_FLT_ALM_TMR (Description := "Contactor Fault alarm timer");
		TIMER JAM_ALM_TMR (Description := "Jam alarm timer");
		TIMER MB_JAM_ALM_TMR (Description := "Missing Bag Jam alarm timer");
		TIMER DR_FLT_ALM_TMR (Description := "Door Fault alarm timer");
		TIMER VSU_FLT_ALM_TMR (Description := "Vertisorter Fault alarm timer");
		TIMER DIV_FLT_ALM_TMR (Description := "Diverter Fault alarm timer");
		TIMER VMU_FLT_ALM_TMR (Description := "Vertical Merge Fault alarm timer");
		SINT ZZZZZZZZZZSYS_STATUS9 (Hidden := 1);
		BIT E_STOP_ALARM ZZZZZZZZZZSYS_STATUS9 : 0 (Description := "E-stop alarm");
		BIT E_STOP_MONITOR ZZZZZZZZZZSYS_STATUS9 : 1 (Description := "E-stop monitor");
		BIT E_STOP_ALM_TRIG ZZZZZZZZZZSYS_STATUS9 : 2 (Description := "E-Stop Alarm  Trigger");
		BIT JAM_ALARM ZZZZZZZZZZSYS_STATUS9 : 3 (Description := "Jam alarm");
		BIT JAM_MONITOR ZZZZZZZZZZSYS_STATUS9 : 4 (Description := "Jam monitor");
		BIT JAM_ALM_TRIG ZZZZZZZZZZSYS_STATUS9 : 5 (Description := "Jam Alarm Trigger");
		BIT MB_JAM_ALARM ZZZZZZZZZZSYS_STATUS9 : 6 (Description := "Missing Bag Alarm");
		BIT MB_JAM_MONITOR ZZZZZZZZZZSYS_STATUS9 : 7 (Description := "Missing Bag Monitor");
		SINT ZZZZZZZZZZSYS_STATUS18 (Hidden := 1);
		BIT MB_JAM_ALM_TRIG ZZZZZZZZZZSYS_STATUS18 : 0 (Description := "Missing Bag Alarm Trigger");
		BIT MOL_ALARM ZZZZZZZZZZSYS_STATUS18 : 1 (Description := "Motor overload alarm");
		BIT MOL_MONITOR ZZZZZZZZZZSYS_STATUS18 : 2 (Description := "Motor overload monitor");
		BIT MOL_ALM_TRIG ZZZZZZZZZZSYS_STATUS18 : 3 (Description := "Motor overload Alarm Trigger");
		BIT VFD_FLT_ALARM ZZZZZZZZZZSYS_STATUS18 : 4 (Description := "VFD Fault Alarm");
		BIT VFD_FLT_MONITOR ZZZZZZZZZZSYS_STATUS18 : 5 (Description := "VFD Fault monitor");
		BIT VFD_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS18 : 6 (Description := "VFD Fault Alarm Trigger");
		BIT MSD_OFF_ALARM ZZZZZZZZZZSYS_STATUS18 : 7 (Description := "Disconnect off alarm");
		SINT ZZZZZZZZZZSYS_STATUS27 (Hidden := 1);
		BIT MSD_OFF_MONITOR ZZZZZZZZZZSYS_STATUS27 : 0 (Description := "Disconnect off monitor");
		BIT MSD_OFF_ALM_TRIG ZZZZZZZZZZSYS_STATUS27 : 1 (Description := "Disconnect off Alarm Trigger");
		BIT DR_FLT_ALARM ZZZZZZZZZZSYS_STATUS27 : 2 (Description := "Door Fault Alarm");
		BIT DR_FLT_MONITOR ZZZZZZZZZZSYS_STATUS27 : 3 (Description := "Door Fault Monitor");
		BIT DR_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS27 : 4 (Description := "Door Fault Alarm Trigger");
		BIT VSU_FLT_ALARM ZZZZZZZZZZSYS_STATUS27 : 5 (Description := "Vertical Sorter Fault Alarm");
		BIT VSU_FLT_MONITOR ZZZZZZZZZZSYS_STATUS27 : 6 (Description := "Vertical Sorter Fault Monitor");
		BIT VSU_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS27 : 7 (Description := "Vertical Sorter Fault Alarm Trigger");
		SINT ZZZZZZZZZZSYS_STATUS36 (Hidden := 1);
		BIT CTCTR_FLT_ALARM ZZZZZZZZZZSYS_STATUS36 : 0 (Description := "Contactor Fault Alarm");
		BIT CTCTR_FLT_MONITOR ZZZZZZZZZZSYS_STATUS36 : 1 (Description := "Contactor Fault monitor");
		BIT CTCTR_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS36 : 2 (Description := "Contactor Fault Alarm Trigger");
		BIT READY ZZZZZZZZZZSYS_STATUS36 : 3 (Description := "Ready");
		BIT STARTUP_WARN ZZZZZZZZZZSYS_STATUS36 : 4 (Description := "Startup warning");
		BIT FIRE_ALM ZZZZZZZZZZSYS_STATUS36 : 5 (Description := "System Fire Alarm");
		BIT DIV_FLT_ALARM ZZZZZZZZZZSYS_STATUS36 : 6 (Description := "Diverter Fault Alarm");
		BIT DIV_FLT_MONITOR ZZZZZZZZZZSYS_STATUS36 : 7 (Description := "Diverter Fault Monitor");
		SINT ZZZZZZZZZZSYS_STATUS45 (Hidden := 1);
		BIT DIV_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS45 : 0 (Description := "Diverter Fault Alarm Trigger");
		BIT VMU_FLT_ALARM ZZZZZZZZZZSYS_STATUS45 : 2 (Description := "Vertical Merge Fault Alarm");
		BIT VMU_FLT_MONITOR ZZZZZZZZZZSYS_STATUS45 : 3 (Description := "Vertical Merge Fault Monitor");
		BIT VMU_FLT_ALM_TRIG ZZZZZZZZZZSYS_STATUS45 : 4 (Description := "Vertical Merge Fault Alarm Trigger");
	END_DATATYPE

	DATATYPE VFD (FamilyType := NoFamily)
		TIMER POWERED_DLY_TMR (Description := "VFD Under Power - Delay Timer");
		SINT ZZZZZZZZZZVFD1 (Hidden := 1);
		BIT READY ZZZZZZZZZZVFD1 : 0 (Description := "VFD Ready Status");
		BIT FAULTED ZZZZZZZZZZVFD1 : 1 (Description := "VFD Faulted");
		BIT FAULT_ONS ZZZZZZZZZZVFD1 : 2 (Description := "VFD Fault One Shot");
		DINT SPD1 (Description := "Preset Speed 1");
	END_DATATYPE

	MODULE Local (Parent := "Local",
	              ParentModPortId := 1,
	              CatalogNumber := "1756-L73",
	              Vendor := 1,
	              ProductType := 14,
	              ProductCode := 94,
	              Major := 30,
	              Minor := 51,
	              PortLabel := "RxBACKPLANE",
	              ChassisSize := 7,
	              Slot := 0,
	              Mode := 2#0000_0000_0000_0001,
	              CompatibleModule := 0,
	              KeyMask := 2#0000_0000_0001_1111)
	END_MODULE

	MODULE CC01_RK1_S02 (Parent := "Local",
	                     ParentModPortId := 1,
	                     CatalogNumber := "1756-CNB/E",
	                     Vendor := 1,
	                     ProductType := 12,
	                     ProductCode := 7,
	                     Major := 11,
	                     Minor := 1,
	                     PortLabel := "RxBACKPLANE",
	                     Slot := 2,
	                     NodeAddress := "1",
	                     CommMethod := 536870914,
	                     Mode := 2#0000_0000_0000_0100,
	                     CompatibleModule := 1,
	                     KeyMask := 2#0000_0000_0001_1111,
	                     ControlNetSignature := 16#0000_0000)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>131177</ConfigID></public>___]]]
	END_MODULE

	MODULE MCP_BM1_RK1_S16 (Parent := "CC01_RK1_S02",
	                        ParentModPortId := 2,
	                        CatalogNumber := "1756-CNB/E",
	                        Vendor := 1,
	                        ProductType := 12,
	                        ProductCode := 7,
	                        Major := 11,
	                        Minor := 1,
	                        PortLabel := "CNet",
	                        ChassisSize := 17,
	                        Slot := 16,
	                        NodeAddress := "2",
	                        CommMethod := 805306369,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION Output (Rate := 20000,
			                   EventID := 0)
					InputData  := [-1,[[-1,0],[-1,65535],[-1,7967],[-1,0],[-1,0],[-1,0],[-1,256],[-1,32832],[-1,65471],[-1,63742],[-1,0],[-1,0],[-1,64512],[-1,65535],[-1,0],[-1,0],[-1
		,0]]];
					OutputData  := [-1,[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[12224],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_BM1_RK1_IA01 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 1,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA02 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 2,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA03 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 3,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_S04 (Parent := "MCP_BM1_RK1_S16",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 9,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA05 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 5,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA06 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 6,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA07 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 7,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA08 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 8,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA09 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 9,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA10 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 10,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA11 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 11,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA12 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 12,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_IA13 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 13,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,1,0,0,0,1,9,1,9,0,0,0,0,65535,65535];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_OA14 (Parent := "MCP_BM1_RK1_S16",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 14,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK1_S15 (Parent := "MCP_BM1_RK1_S16",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-ENBT/A",
	                        Vendor := 1,
	                        ProductType := 12,
	                        ProductCode := 58,
	                        Major := 5,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 15,
	                        CommMethod := 536870914,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-ENBT</CatNum><ConfigID>4325481</ConfigID></public>___]]]
	END_MODULE

	MODULE MCP_BM1_RK2_S0 (Parent := "CC01_RK1_S02",
	                       ParentModPortId := 2,
	                       CatalogNumber := "1756-CNB/E",
	                       Vendor := 1,
	                       ProductType := 12,
	                       ProductCode := 7,
	                       Major := 11,
	                       Minor := 1,
	                       PortLabel := "CNet",
	                       ChassisSize := 17,
	                       Slot := 0,
	                       NodeAddress := "3",
	                       CommMethod := 805306369,
	                       Mode := 2#0000_0000_0000_0000,
	                       CompatibleModule := 1,
	                       KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION Output (Rate := 20000,
			                   EventID := 0)
					InputData  := [-1,[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,63743],[-1,2146959360],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[7679],[496],[0],[0],[0],[13312],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_BM1_RK2_OA01 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 1,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA02 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 2,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA03 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 3,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA04 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 4,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA05 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 5,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA06 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 6,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA07 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 7,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA08 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 8,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_OA09 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-OA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 13,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 9,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,1,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_IA10 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA16",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 9,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 10,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388612,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262154</ConfigID><CatNum>1756-IA16</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_IA11 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA32/A",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 10,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 11,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388613,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_IA12 (Parent := "MCP_BM1_RK2_S0",
	                         ParentModPortId := 1,
	                         CatalogNumber := "1756-IA32/A",
	                         Vendor := 1,
	                         ProductType := 7,
	                         ProductCode := 10,
	                         Major := 3,
	                         Minor := 1,
	                         PortLabel := "RxBACKPLANE",
	                         Slot := 12,
	                         CommMethod := 1073741824,
	                         ConfigMethod := 8388613,
	                         Mode := 2#0000_0000_0000_0000,
	                         CompatibleModule := 1,
	                         KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_S0_IA13 (Parent := "MCP_BM1_RK2_S0",
	                            ParentModPortId := 1,
	                            CatalogNumber := "1756-IB16",
	                            Vendor := 1,
	                            ProductType := 7,
	                            ProductCode := 11,
	                            Major := 3,
	                            Minor := 1,
	                            PortLabel := "RxBACKPLANE",
	                            Slot := 13,
	                            CommMethod := 1073741824,
	                            ConfigMethod := 8388613,
	                            Mode := 2#0000_0000_0000_0000,
	                            CompatibleModule := 1,
	                            KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262151</ConfigID><CatNum>1756-IB16</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,1,1,1,1,1,1,1,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_S0_OA14 (Parent := "MCP_BM1_RK2_S0",
	                            ParentModPortId := 1,
	                            CatalogNumber := "1756-OW16I",
	                            Vendor := 1,
	                            ProductType := 7,
	                            ProductCode := 30,
	                            Major := 3,
	                            Minor := 1,
	                            PortLabel := "RxBACKPLANE",
	                            Slot := 14,
	                            CommMethod := 1073741824,
	                            ConfigMethod := 8388612,
	                            Mode := 2#0000_0000_0000_0000,
	                            CompatibleModule := 1,
	                            KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OW16I</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_BM1_RK2_S0_OA15 (Parent := "MCP_BM1_RK2_S0",
	                            ParentModPortId := 1,
	                            CatalogNumber := "1756-OA16",
	                            Vendor := 1,
	                            ProductType := 7,
	                            ProductCode := 13,
	                            Major := 3,
	                            Minor := 1,
	                            PortLabel := "RxBACKPLANE",
	                            Slot := 15,
	                            CommMethod := 1073741824,
	                            ConfigMethod := 8388612,
	                            Mode := 2#0000_0000_0000_0000,
	                            CompatibleModule := 1,
	                            KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "4",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION Output (Rate := 20000,
			                   EventID := 0)
					InputData  := [-1,[[-1,0],[-1,2097151],[-1,0],[-1,0],[-1,16777216],[-1,-65535],[-1,31],[-1,2097151],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[0],[0],[0],[0],[0],[0],[0],[4],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_01_RK1_IA01 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA02 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA03 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_IA04 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_IA05 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_IA06 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_IA07 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA08 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA09 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 9,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA10 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 10,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_01_RK1_OA11 (Parent := "MCP_01_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 11,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "6",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION RACK_OPTIMIZED (Rate := 20000,
			                           EventID := 0)
					InputData  := [-1,[[-1,0],[-1,131071],[-1,16383],[-1,0],[-1,1],[-1,-65536],[-1,570458111],[-1,-1],[-1,1],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_02_RK1_IA01 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA02 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA03 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA04 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA05 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA06 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA07 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK1_IA08 (Parent := "MCP_02_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "7",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION RACK_OPTIMIZED (Rate := 20000,
			                           EventID := 0)
					InputData  := [-1,[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[0],[958],[0],[0],[0],[0],[2048],[0],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_02_RK2_OA01 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA02 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA03 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA04 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA05 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA06 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA07 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA08 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_02_RK2_OA09 (Parent := "MCP_02_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 9,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "8",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION RACK_OPTIMIZED (Rate := 20000,
			                           EventID := 0)
					InputData  := [-1,[[-1,0],[-1,536870911],[-1,63],[-1,0],[-1,4196352],[-1,-1],[-1,-65529],[-1,8323071],[-1,17],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0
		]]];
					OutputData  := [-1,[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_03_RK1_IA01 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA02 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA03 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA04 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA05 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA06 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA07 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK1_IA08 (Parent := "MCP_03_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "9",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION RACK_OPTIMIZED (Rate := 20000,
			                           EventID := 0)
					InputData  := [-1,[[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[0],[0],[0],[0],[0],[0],[0],[0],[1],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_03_RK2_OA01 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA02 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA03 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA04 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA05 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA06 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA07 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA08 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA09 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 9,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_03_RK2_OA10 (Parent := "MCP_03_RK2_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 10,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_S0 (Parent := "CC01_RK1_S02",
	                      ParentModPortId := 2,
	                      CatalogNumber := "1756-CNB/E",
	                      Vendor := 1,
	                      ProductType := 12,
	                      ProductCode := 7,
	                      Major := 11,
	                      Minor := 1,
	                      PortLabel := "CNet",
	                      ChassisSize := 17,
	                      Slot := 0,
	                      NodeAddress := "10",
	                      CommMethod := 805306369,
	                      Mode := 2#0000_0000_0000_0000,
	                      CompatibleModule := 1,
	                      KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-CNB</CatNum><ConfigID>262247</ConfigID></public>___]]]
			CONNECTION RACK_OPTIMIZED (Rate := 20000,
			                           EventID := 0)
					InputData  := [-1,[[-1,0],[-1,8191],[-1,0],[-1,134217728],[-1,8191],[-1,2047],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]];
					OutputData  := [-1,[[0],[0],[2032],[0],[0],[0],[16],[512],[0],[0],[0],[0],[0],[0],[0],[0],[0]]];
			END_CONNECTION

	END_MODULE

	MODULE MCP_16_RK1_IA01 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 1,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_OA02 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 2,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_IA03 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 3,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_IA04 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 4,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_IA05 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-IA32/A",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 10,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 5,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388613,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262155</ConfigID><CatNum>1756-IA32</CatNum></public>___]]]
			ConfigData  := [28,16,0,0,0,0,1,9,1,9,1,9,1,9,-1,-1];
			InputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_OA06 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 6,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_OA07 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 7,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE MCP_16_RK1_OA08 (Parent := "MCP_16_RK1_S0",
	                        ParentModPortId := 1,
	                        CatalogNumber := "1756-OA16",
	                        Vendor := 1,
	                        ProductType := 7,
	                        ProductCode := 13,
	                        Major := 3,
	                        Minor := 1,
	                        PortLabel := "RxBACKPLANE",
	                        Slot := 8,
	                        CommMethod := 1073741824,
	                        ConfigMethod := 8388612,
	                        Mode := 2#0000_0000_0000_0000,
	                        CompatibleModule := 1,
	                        KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><ConfigID>262147</ConfigID><CatNum>1756-OA16</CatNum></public>___]]]
			ConfigData  := [28,18,0,0,0,0,0,0,0,0];
			InputAliasComments ;
			OutputAliasComments ;
	END_MODULE

	MODULE LCP_RK1_S06 (Parent := "Local",
	                    ParentModPortId := 1,
	                    CatalogNumber := "1756-EN2T",
	                    Vendor := 1,
	                    ProductType := 12,
	                    ProductCode := 166,
	                    Major := 10,
	                    Minor := 1,
	                    PortLabel := "RxBACKPLANE",
	                    Slot := 6,
	                    NodeAddress := "10.48.81.101",
	                    CommMethod := 536870914,
	                    Mode := 2#0000_0000_0000_0000,
	                    CompatibleModule := 1,
	                    KeyMask := 2#0000_0000_0001_1111)
			ExtendedProp := [[[___<public><Vendor>Rockwell Automation/Allen-Bradley</Vendor><CatNum>1756-EN2T</CatNum><ConfigID>4325481</ConfigID></public>___]]]
	END_MODULE

	MODULE AM_Adapter (Parent := "LCP_RK1_S06",
	                   ParentModPortId := 2,
	                   CatalogNumber := "ETHERNET-MODULE",
	                   Vendor := 1,
	                   ProductType := 0,
	                   ProductCode := 18,
	                   Major := 1,
	                   Minor := 1,
	                   PortLabel := "ENet",
	                   NodeAddress := "10.185.108.11",
	                   CommMethod := 536870915,
	                   ConfigMethod := 8388611,
	                   Mode := 2#0000_0000_0000_0000,
	                   CompatibleModule := 0,
	                   KeyMask := 2#0000_0000_0000_0000,
	                   PrimCxnInputSize := 80,
	                   PrimCxnOutputSize := 80,
	                   SecCxnInputSize := 0,
	                   SecCxnOutputSize := 0)
			ConfigData  := [7,3,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
			CONNECTION Standard (Rate := 10000,
			                     InputCxnPoint := 102,
			                     InputSize := 80,
			                     OutputCxnPoint := 101,
			                     OutputSize := 80,
			                     EventID := 0,
			                     Unicast := No)
					InputData  := [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
					OutputData  := [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
			END_CONNECTION

	END_MODULE

	TAG
		AM_DELAY_TIMER : TIMER (ExternalAccess := Read Only) := [0,0,0];
		AM_I_HSD_HSD_XO1_EXT OF AM_Adapter:I.Data[8].6 (RADIX := Decimal);
		AM_I_HSD_HSD_XO1_HOME OF AM_Adapter:I.Data[8].5 (RADIX := Decimal);
		AM_I_HSD_HSD_XO2_EXT OF AM_Adapter:I.Data[8].8 (RADIX := Decimal);
		AM_I_HSD_HSD_XO2_HOME OF AM_Adapter:I.Data[8].7 (RADIX := Decimal);
		AM_I_PE_BM1_06 OF AM_Adapter:I.Data[5].6 (RADIX := Decimal);
		AM_I_PE_BM1_06_OH OF AM_Adapter:I.Data[5].5 (RADIX := Decimal);
		AM_I_PE_BM1_07 OF AM_Adapter:I.Data[5].7 (RADIX := Decimal);
		AM_I_PE_BM1_08 OF AM_Adapter:I.Data[5].8 (RADIX := Decimal);
		AM_I_PE_BM1_09 OF AM_Adapter:I.Data[5].9 (RADIX := Decimal);
		AM_I_PE_BM1_10 OF AM_Adapter:I.Data[5].10 (RADIX := Decimal);
		AM_I_PE_BM1_11 OF AM_Adapter:I.Data[5].11 (RADIX := Decimal);
		AM_I_PE_BM1_12 OF AM_Adapter:I.Data[5].12 (RADIX := Decimal);
		AM_I_PE_BM1_13 OF AM_Adapter:I.Data[5].13 (RADIX := Decimal);
		AM_I_PE_BM1_14 OF AM_Adapter:I.Data[5].14 (RADIX := Decimal);
		AM_I_PE_BM1_14_A OF AM_Adapter:I.Data[5].15 (RADIX := Decimal);
		AM_I_PE_BM1_15 OF AM_Adapter:I.Data[6].0 (RADIX := Decimal);
		AM_I_PE_BM1_16 OF AM_Adapter:I.Data[6].1 (RADIX := Decimal);
		AM_I_PE_BM1_17 OF AM_Adapter:I.Data[6].2 (RADIX := Decimal);
		AM_I_PE_BM1_18 OF AM_Adapter:I.Data[6].3 (RADIX := Decimal);
		AM_I_PE_BM1_19 OF AM_Adapter:I.Data[6].5 (RADIX := Decimal);
		AM_I_PE_BM1_19_OH OF AM_Adapter:I.Data[6].4 (RADIX := Decimal);
		AM_I_PE_BM1_20 OF AM_Adapter:I.Data[6].6 (RADIX := Decimal);
		AM_I_PE_BM1_21 OF AM_Adapter:I.Data[6].7 (RADIX := Decimal);
		AM_I_PE_BM1_22 OF AM_Adapter:I.Data[6].8 (RADIX := Decimal);
		AM_I_PE_BM1_23 OF AM_Adapter:I.Data[6].10 (RADIX := Decimal);
		AM_I_PE_BM1_23_A OF AM_Adapter:I.Data[6].9 (RADIX := Decimal);
		AM_I_PE_BM1_23_B OF AM_Adapter:I.Data[7].14 (RADIX := Decimal);
		AM_I_PE_BM1_23_B1 OF AM_Adapter:I.Data[7].14 (RADIX := Decimal);
		AM_I_PE_BM1_24 OF AM_Adapter:I.Data[6].11 (RADIX := Decimal);
		AM_I_PE_BM1_25 OF AM_Adapter:I.Data[6].12 (RADIX := Decimal);
		AM_I_PE_BM1_26 OF AM_Adapter:I.Data[6].13 (RADIX := Decimal);
		AM_I_PE_BM1_27 OF AM_Adapter:I.Data[6].14 (RADIX := Decimal);
		AM_I_PE_BM1_27_A OF AM_Adapter:I.Data[6].15 (RADIX := Decimal);
		AM_I_PE_BM1_28 OF AM_Adapter:I.Data[7].7 (RADIX := Decimal);
		AM_I_PE_BM1_28_A OF AM_Adapter:I.Data[7].8 (RADIX := Decimal);
		AM_I_PE_BM1_29 OF AM_Adapter:I.Data[7].9 (RADIX := Decimal);
		AM_I_PE_BM1_29_A OF AM_Adapter:I.Data[7].10 (RADIX := Decimal);
		AM_I_PE_BM1_30 OF AM_Adapter:I.Data[7].11 (RADIX := Decimal);
		AM_I_PE_BM1_30_A OF AM_Adapter:I.Data[7].12 (RADIX := Decimal);
		AM_I_PE_BM1_30_OH OF AM_Adapter:I.Data[7].13 (RADIX := Decimal);
		AM_I_PE_BM1_34 OF AM_Adapter:I.Data[7].0 (RADIX := Decimal);
		AM_I_PE_BM1_35 OF AM_Adapter:I.Data[7].1 (RADIX := Decimal);
		AM_I_PE_BM1_36 OF AM_Adapter:I.Data[7].2 (RADIX := Decimal);
		AM_I_PE_BM1_37 OF AM_Adapter:I.Data[7].3 (RADIX := Decimal);
		AM_I_PE_BM1_38 OF AM_Adapter:I.Data[7].4 (RADIX := Decimal);
		AM_I_PE_C2T_12 OF AM_Adapter:I.Data[0].15 (RADIX := Decimal);
		AM_I_PE_C2T_13 OF AM_Adapter:I.Data[1].0 (RADIX := Decimal);
		AM_I_PE_C2T_14 OF AM_Adapter:I.Data[1].1 (RADIX := Decimal);
		AM_I_PE_C2T_15 OF AM_Adapter:I.Data[1].2 (RADIX := Decimal);
		AM_I_PE_C2T_16 OF AM_Adapter:I.Data[1].3 (RADIX := Decimal);
		AM_I_PE_C2T_17 OF AM_Adapter:I.Data[1].4 (RADIX := Decimal);
		AM_I_PE_CL1T_01 OF AM_Adapter:I.Data[3].3 (RADIX := Decimal);
		AM_I_PE_CL1T_02 OF AM_Adapter:I.Data[3].4 (RADIX := Decimal);
		AM_I_PE_CL1T_03 OF AM_Adapter:I.Data[3].5 (RADIX := Decimal);
		AM_I_PE_CL1T_04 OF AM_Adapter:I.Data[3].6 (RADIX := Decimal);
		AM_I_PE_CL1T_05 OF AM_Adapter:I.Data[3].7 (RADIX := Decimal);
		AM_I_PE_CL1T_06 OF AM_Adapter:I.Data[3].8 (RADIX := Decimal);
		AM_I_PE_CL1T_07 OF AM_Adapter:I.Data[3].9 (RADIX := Decimal);
		AM_I_PE_CL1T_08 OF AM_Adapter:I.Data[3].10 (RADIX := Decimal);
		AM_I_PE_CL1T_09 OF AM_Adapter:I.Data[3].11 (RADIX := Decimal);
		AM_I_PE_CL1T_10 OF AM_Adapter:I.Data[3].12 (RADIX := Decimal);
		AM_I_PE_CL1T_11 OF AM_Adapter:I.Data[3].13 (RADIX := Decimal);
		AM_I_PE_CL1T_12 OF AM_Adapter:I.Data[3].14 (RADIX := Decimal);
		AM_I_PE_CL1T_13 OF AM_Adapter:I.Data[3].15 (RADIX := Decimal);
		AM_I_PE_CL1T_14 OF AM_Adapter:I.Data[4].0 (RADIX := Decimal);
		AM_I_PE_CL1T_15 OF AM_Adapter:I.Data[4].1 (RADIX := Decimal);
		AM_I_PE_CL1T_16 OF AM_Adapter:I.Data[4].2 (RADIX := Decimal);
		AM_I_PE_CL1T_17 OF AM_Adapter:I.Data[4].3 (RADIX := Decimal);
		AM_I_PE_CL1T_18 OF AM_Adapter:I.Data[4].4 (RADIX := Decimal);
		AM_I_PE_CL1T_19 OF AM_Adapter:I.Data[4].5 (RADIX := Decimal);
		AM_I_PE_CL1T_20 OF AM_Adapter:I.Data[4].6 (RADIX := Decimal);
		AM_I_PE_CL1T_21 OF AM_Adapter:I.Data[4].7 (RADIX := Decimal);
		AM_I_PE_CL1T_23 OF AM_Adapter:I.Data[4].8 (RADIX := Decimal);
		AM_I_PE_CL1T_24 OF AM_Adapter:I.Data[4].9 (RADIX := Decimal);
		AM_I_PE_CL1T_26 OF AM_Adapter:I.Data[4].10 (RADIX := Decimal);
		AM_I_PE_CL2T_01 OF AM_Adapter:I.Data[1].5 (RADIX := Decimal);
		AM_I_PE_CL2T_02 OF AM_Adapter:I.Data[1].6 (RADIX := Decimal);
		AM_I_PE_CL2T_03 OF AM_Adapter:I.Data[1].7 (RADIX := Decimal);
		AM_I_PE_CL2T_04 OF AM_Adapter:I.Data[1].8 (RADIX := Decimal);
		AM_I_PE_CL2T_05 OF AM_Adapter:I.Data[1].9 (RADIX := Decimal);
		AM_I_PE_CL2T_06 OF AM_Adapter:I.Data[1].10 (RADIX := Decimal);
		AM_I_PE_CL2T_07 OF AM_Adapter:I.Data[1].11 (RADIX := Decimal);
		AM_I_PE_CL2T_08 OF AM_Adapter:I.Data[1].12 (RADIX := Decimal);
		AM_I_PE_CL2T_09 OF AM_Adapter:I.Data[1].13 (RADIX := Decimal);
		AM_I_PE_CL3T_01 OF AM_Adapter:I.Data[1].14 (RADIX := Decimal);
		AM_I_PE_CL3T_02 OF AM_Adapter:I.Data[1].15 (RADIX := Decimal);
		AM_I_PE_CL3T_03 OF AM_Adapter:I.Data[2].0 (RADIX := Decimal);
		AM_I_PE_CL3T_04 OF AM_Adapter:I.Data[2].1 (RADIX := Decimal);
		AM_I_PE_CL3T_05 OF AM_Adapter:I.Data[2].2 (RADIX := Decimal);
		AM_I_PE_CL3T_06 OF AM_Adapter:I.Data[2].3 (RADIX := Decimal);
		AM_I_PE_CL3T_07 OF AM_Adapter:I.Data[2].4 (RADIX := Decimal);
		AM_I_PE_CL3T_08 OF AM_Adapter:I.Data[2].5 (RADIX := Decimal);
		AM_I_PE_HX1T_06 OF AM_Adapter:I.Data[4].11 (RADIX := Decimal);
		AM_I_PE_HX1T_07 OF AM_Adapter:I.Data[4].12 (RADIX := Decimal);
		AM_I_PE_HX1T_08 OF AM_Adapter:I.Data[4].13 (RADIX := Decimal);
		AM_I_PE_HX1T_09 OF AM_Adapter:I.Data[4].14 (RADIX := Decimal);
		AM_I_PE_HX1T_10 OF AM_Adapter:I.Data[4].15 (RADIX := Decimal);
		AM_I_PE_HX1T_10A OF AM_Adapter:I.Data[5].0 (RADIX := Decimal);
		AM_I_PE_O2T_04 OF AM_Adapter:I.Data[0].0 (RADIX := Decimal);
		AM_I_PE_O2T_05 OF AM_Adapter:I.Data[0].1 (RADIX := Decimal);
		AM_I_PE_O2T_06 OF AM_Adapter:I.Data[0].2 (RADIX := Decimal);
		AM_I_PE_O2T_07 OF AM_Adapter:I.Data[0].3 (RADIX := Decimal);
		AM_I_PE_O2T_08 OF AM_Adapter:I.Data[0].4 (RADIX := Decimal);
		AM_I_PE_O2T_09 OF AM_Adapter:I.Data[0].5 (RADIX := Decimal);
		AM_I_PE_O2T_10 OF AM_Adapter:I.Data[0].6 (RADIX := Decimal);
		AM_I_PE_O2T_11 OF AM_Adapter:I.Data[0].7 (RADIX := Decimal);
		AM_I_PE_O2T_12 OF AM_Adapter:I.Data[0].8 (RADIX := Decimal);
		AM_I_PE_O2T_13 OF AM_Adapter:I.Data[0].9 (RADIX := Decimal);
		AM_I_PE_O2T_14 OF AM_Adapter:I.Data[0].10 (RADIX := Decimal);
		AM_I_PE_O2T_15 OF AM_Adapter:I.Data[0].11 (RADIX := Decimal);
		AM_I_PE_O2T_16 OF AM_Adapter:I.Data[0].12 (RADIX := Decimal);
		AM_I_PE_O2T_17 OF AM_Adapter:I.Data[0].13 (RADIX := Decimal);
		AM_I_PE_O2T_18 OF AM_Adapter:I.Data[0].14 (RADIX := Decimal);
		AM_I_PE_O4T_05 OF AM_Adapter:I.Data[2].9 (RADIX := Decimal);
		AM_I_PE_O4T_06 OF AM_Adapter:I.Data[2].10 (RADIX := Decimal);
		AM_I_PE_O4T_07 OF AM_Adapter:I.Data[2].11 (RADIX := Decimal);
		AM_I_PE_O4T_08 OF AM_Adapter:I.Data[2].12 (RADIX := Decimal);
		AM_I_PE_O4T_09 OF AM_Adapter:I.Data[2].13 (RADIX := Decimal);
		AM_I_PE_O4T_10 OF AM_Adapter:I.Data[2].14 (RADIX := Decimal);
		AM_I_PE_O4T_10_A OF AM_Adapter:I.Data[2].15 (RADIX := Decimal);
		AM_I_PE_O4T_11 OF AM_Adapter:I.Data[3].0 (RADIX := Decimal);
		AM_I_PE_O4T_12 OF AM_Adapter:I.Data[3].1 (RADIX := Decimal);
		AM_I_PE_O4T_13 OF AM_Adapter:I.Data[3].2 (RADIX := Decimal);
		AM_I_PE_T5T_08 OF AM_Adapter:I.Data[7].5 (RADIX := Decimal);
		AM_I_PE_T5T_09 OF AM_Adapter:I.Data[7].6 (RADIX := Decimal);
		AM_I_PE_XO1_01 OF AM_Adapter:I.Data[2].6 (RADIX := Decimal);
		AM_I_PE_XO1_01_A OF AM_Adapter:I.Data[7].15 (RADIX := Decimal);
		AM_I_PE_XO1_02 OF AM_Adapter:I.Data[2].7 (RADIX := Decimal);
		AM_I_PE_XO1_03 OF AM_Adapter:I.Data[2].8 (RADIX := Decimal);
		AM_I_PE_XO2_01 OF AM_Adapter:I.Data[5].1 (RADIX := Decimal);
		AM_I_PE_XO2_02 OF AM_Adapter:I.Data[5].2 (RADIX := Decimal);
		AM_I_PE_XO2_03 OF AM_Adapter:I.Data[5].3 (RADIX := Decimal);
		AM_I_PE_XO2_04 OF AM_Adapter:I.Data[5].4 (RADIX := Decimal);
		AM_I_PE_zPARE1_02 OF AM_Adapter:I.Data[8].0 (RADIX := Decimal);
		AM_I_PE_zPARE1_03 OF AM_Adapter:I.Data[8].1 (RADIX := Decimal);
		AM_I_PE_zPARE1_04 OF AM_Adapter:I.Data[8].2 (RADIX := Decimal);
		AM_I_PE_zPARE1_05 OF AM_Adapter:I.Data[8].3 (RADIX := Decimal);
		AM_I_PE_zPARE1_06 OF AM_Adapter:I.Data[8].4 (RADIX := Decimal);
		AM_MODEL1_RUNNING OF AM_Adapter:I.Data[18].0 (Description := "Mapped to the GUI$'s $'Other Config$' sheet. Can use to reset faults when model initializes, or toggle in GUI while model running without needing to restart the model",
		            RADIX := Decimal);
		AM_O_C_BM1_01 OF AM_Adapter:O.Data[6].9 (RADIX := Decimal);
		AM_O_C_BM1_02 OF AM_Adapter:O.Data[6].10 (RADIX := Decimal);
		AM_O_C_BM1_03 OF AM_Adapter:O.Data[6].11 (RADIX := Decimal);
		AM_O_C_BM1_04 OF AM_Adapter:O.Data[6].12 (RADIX := Decimal);
		AM_O_C_BM1_05 OF AM_Adapter:O.Data[6].13 (RADIX := Decimal);
		AM_O_C_BM1_06 OF AM_Adapter:O.Data[6].14 (RADIX := Decimal);
		AM_O_C_BM1_07 OF AM_Adapter:O.Data[6].15 (RADIX := Decimal);
		AM_O_C_BM1_08 OF AM_Adapter:O.Data[7].0 (RADIX := Decimal);
		AM_O_C_BM1_09 OF AM_Adapter:O.Data[7].1 (RADIX := Decimal);
		AM_O_C_BM1_10 OF AM_Adapter:O.Data[7].2 (RADIX := Decimal);
		AM_O_C_BM1_11 OF AM_Adapter:O.Data[7].3 (RADIX := Decimal);
		AM_O_C_BM1_12 OF AM_Adapter:O.Data[7].4 (RADIX := Decimal);
		AM_O_C_BM1_13 OF AM_Adapter:O.Data[7].5 (RADIX := Decimal);
		AM_O_C_BM1_14 OF AM_Adapter:O.Data[1].12 (RADIX := Decimal);
		AM_O_C_BM1_15 OF AM_Adapter:O.Data[1].13 (RADIX := Decimal);
		AM_O_C_BM1_16 OF AM_Adapter:O.Data[1].14 (RADIX := Decimal);
		AM_O_C_BM1_17 OF AM_Adapter:O.Data[1].15 (RADIX := Decimal);
		AM_O_C_BM1_18 OF AM_Adapter:O.Data[2].0 (RADIX := Decimal);
		AM_O_C_BM1_19 OF AM_Adapter:O.Data[2].1 (RADIX := Decimal);
		AM_O_C_BM1_20 OF AM_Adapter:O.Data[2].2 (RADIX := Decimal);
		AM_O_C_BM1_21 OF AM_Adapter:O.Data[2].3 (RADIX := Decimal);
		AM_O_C_BM1_22 OF AM_Adapter:O.Data[2].4 (RADIX := Decimal);
		AM_O_C_BM1_23 OF AM_Adapter:O.Data[2].5 (RADIX := Decimal);
		AM_O_C_BM1_24 OF AM_Adapter:O.Data[2].6 (RADIX := Decimal);
		AM_O_C_BM1_25 OF AM_Adapter:O.Data[2].7 (RADIX := Decimal);
		AM_O_C_BM1_26 OF AM_Adapter:O.Data[2].8 (RADIX := Decimal);
		AM_O_C_BM1_27 OF AM_Adapter:O.Data[7].13 (RADIX := Decimal);
		AM_O_C_BM1_27_FWD OF AM_Adapter:O.Data[2].9 (RADIX := Decimal);
		AM_O_C_BM1_27_REV OF AM_Adapter:O.Data[2].10 (RADIX := Decimal);
		AM_O_C_BM1_28_FWD OF AM_Adapter:O.Data[2].11 (RADIX := Decimal);
		AM_O_C_BM1_28_REV OF AM_Adapter:O.Data[2].12 (RADIX := Decimal);
		AM_O_C_BM1_29_FWD OF AM_Adapter:O.Data[2].13 (RADIX := Decimal);
		AM_O_C_BM1_29_REV OF AM_Adapter:O.Data[2].14 (RADIX := Decimal);
		AM_O_C_BM1_30_FWD OF AM_Adapter:O.Data[2].15 (RADIX := Decimal);
		AM_O_C_BM1_30_REV OF AM_Adapter:O.Data[3].0 (RADIX := Decimal);
		AM_O_C_BM1_34 OF AM_Adapter:O.Data[7].11 (RADIX := Decimal);
		AM_O_C_BM1_35 OF AM_Adapter:O.Data[1].8 (RADIX := Decimal);
		AM_O_C_BM1_36 OF AM_Adapter:O.Data[1].9 (RADIX := Decimal);
		AM_O_C_BM1_37 OF AM_Adapter:O.Data[1].10 (RADIX := Decimal);
		AM_O_C_BM1_38 OF AM_Adapter:O.Data[1].11 (RADIX := Decimal);
		AM_O_HSD_HSD_XO1_EXT OF AM_Adapter:O.Data[8].13 (RADIX := Decimal);
		AM_O_HSD_HSD_XO1_RET OF AM_Adapter:O.Data[8].15 (RADIX := Decimal);
		AM_O_HSD_HSD_XO2_EXT OF AM_Adapter:O.Data[8].14 (RADIX := Decimal);
		AM_O_HSD_HSD_XO2_RET OF AM_Adapter:O.Data[9].0 (RADIX := Decimal);
		AM_O_M_C2T_12 OF AM_Adapter:O.Data[0].15 (RADIX := Decimal);
		AM_O_M_C2T_13 OF AM_Adapter:O.Data[1].0 (RADIX := Decimal);
		AM_O_M_C2T_14 OF AM_Adapter:O.Data[1].1 (RADIX := Decimal);
		AM_O_M_C2T_15 OF AM_Adapter:O.Data[1].2 (RADIX := Decimal);
		AM_O_M_C2T_16 OF AM_Adapter:O.Data[1].3 (RADIX := Decimal);
		AM_O_M_C2T_17 OF AM_Adapter:O.Data[1].4 (RADIX := Decimal);
		AM_O_M_CL1T_01 OF AM_Adapter:O.Data[3].10 (RADIX := Decimal);
		AM_O_M_CL1T_02 OF AM_Adapter:O.Data[3].11 (RADIX := Decimal);
		AM_O_M_CL1T_03 OF AM_Adapter:O.Data[3].12 (RADIX := Decimal);
		AM_O_M_CL1T_04 OF AM_Adapter:O.Data[3].13 (RADIX := Decimal);
		AM_O_M_CL1T_05 OF AM_Adapter:O.Data[3].14 (RADIX := Decimal);
		AM_O_M_CL1T_06 OF AM_Adapter:O.Data[3].15 (RADIX := Decimal);
		AM_O_M_CL1T_07 OF AM_Adapter:O.Data[4].0 (RADIX := Decimal);
		AM_O_M_CL1T_08 OF AM_Adapter:O.Data[4].1 (RADIX := Decimal);
		AM_O_M_CL1T_09 OF AM_Adapter:O.Data[4].2 (RADIX := Decimal);
		AM_O_M_CL1T_10 OF AM_Adapter:O.Data[4].3 (RADIX := Decimal);
		AM_O_M_CL1T_11 OF AM_Adapter:O.Data[4].4 (RADIX := Decimal);
		AM_O_M_CL1T_12 OF AM_Adapter:O.Data[4].5 (RADIX := Decimal);
		AM_O_M_CL1T_13 OF AM_Adapter:O.Data[4].6 (RADIX := Decimal);
		AM_O_M_CL1T_14 OF AM_Adapter:O.Data[4].7 (RADIX := Decimal);
		AM_O_M_CL1T_15 OF AM_Adapter:O.Data[4].8 (RADIX := Decimal);
		AM_O_M_CL1T_16 OF AM_Adapter:O.Data[4].9 (RADIX := Decimal);
		AM_O_M_CL1T_17 OF AM_Adapter:O.Data[4].10 (RADIX := Decimal);
		AM_O_M_CL1T_18 OF AM_Adapter:O.Data[4].11 (RADIX := Decimal);
		AM_O_M_CL1T_19 OF AM_Adapter:O.Data[4].12 (RADIX := Decimal);
		AM_O_M_CL1T_20 OF AM_Adapter:O.Data[4].13 (RADIX := Decimal);
		AM_O_M_CL1T_21 OF AM_Adapter:O.Data[4].14 (RADIX := Decimal);
		AM_O_M_CL1T_22 OF AM_Adapter:O.Data[4].15 (RADIX := Decimal);
		AM_O_M_CL1T_23 OF AM_Adapter:O.Data[5].0 (RADIX := Decimal);
		AM_O_M_CL1T_24 OF AM_Adapter:O.Data[5].1 (RADIX := Decimal);
		AM_O_M_CL1T_25 OF AM_Adapter:O.Data[5].2 (RADIX := Decimal);
		AM_O_M_CL1T_26 OF AM_Adapter:O.Data[5].3 (RADIX := Decimal);
		AM_O_M_CL2T_01 OF AM_Adapter:O.Data[6].0 (RADIX := Decimal);
		AM_O_M_CL2T_02 OF AM_Adapter:O.Data[6].1 (RADIX := Decimal);
		AM_O_M_CL2T_03 OF AM_Adapter:O.Data[6].2 (RADIX := Decimal);
		AM_O_M_CL2T_04 OF AM_Adapter:O.Data[6].3 (RADIX := Decimal);
		AM_O_M_CL2T_05 OF AM_Adapter:O.Data[6].4 (RADIX := Decimal);
		AM_O_M_CL2T_06 OF AM_Adapter:O.Data[6].5 (RADIX := Decimal);
		AM_O_M_CL2T_07 OF AM_Adapter:O.Data[6].6 (RADIX := Decimal);
		AM_O_M_CL2T_08 OF AM_Adapter:O.Data[6].7 (RADIX := Decimal);
		AM_O_M_CL2T_09 OF AM_Adapter:O.Data[6].8 (RADIX := Decimal);
		AM_O_M_CL3T_01 OF AM_Adapter:O.Data[5].8 (RADIX := Decimal);
		AM_O_M_CL3T_02 OF AM_Adapter:O.Data[5].9 (RADIX := Decimal);
		AM_O_M_CL3T_03 OF AM_Adapter:O.Data[5].10 (RADIX := Decimal);
		AM_O_M_CL3T_04 OF AM_Adapter:O.Data[5].11 (RADIX := Decimal);
		AM_O_M_CL3T_05 OF AM_Adapter:O.Data[5].12 (RADIX := Decimal);
		AM_O_M_CL3T_06 OF AM_Adapter:O.Data[5].13 (RADIX := Decimal);
		AM_O_M_CL3T_07 OF AM_Adapter:O.Data[5].14 (RADIX := Decimal);
		AM_O_M_CL3T_08 OF AM_Adapter:O.Data[5].15 (RADIX := Decimal);
		AM_O_M_HX1T_06 OF AM_Adapter:O.Data[7].6 (RADIX := Decimal);
		AM_O_M_HX1T_07 OF AM_Adapter:O.Data[7].7 (RADIX := Decimal);
		AM_O_M_HX1T_08 OF AM_Adapter:O.Data[7].8 (RADIX := Decimal);
		AM_O_M_HX1T_09 OF AM_Adapter:O.Data[7].9 (RADIX := Decimal);
		AM_O_M_HX1T_10 OF AM_Adapter:O.Data[7].10 (RADIX := Decimal);
		AM_O_M_HX1T_10A OF AM_Adapter:O.Data[7].12 (RADIX := Decimal);
		AM_O_M_O2T_04 OF AM_Adapter:O.Data[0].0 (RADIX := Decimal);
		AM_O_M_O2T_05 OF AM_Adapter:O.Data[0].1 (RADIX := Decimal);
		AM_O_M_O2T_06 OF AM_Adapter:O.Data[0].2 (RADIX := Decimal);
		AM_O_M_O2T_07 OF AM_Adapter:O.Data[0].3 (RADIX := Decimal);
		AM_O_M_O2T_08 OF AM_Adapter:O.Data[0].4 (RADIX := Decimal);
		AM_O_M_O2T_09 OF AM_Adapter:O.Data[0].5 (RADIX := Decimal);
		AM_O_M_O2T_10 OF AM_Adapter:O.Data[0].6 (RADIX := Decimal);
		AM_O_M_O2T_11 OF AM_Adapter:O.Data[0].7 (RADIX := Decimal);
		AM_O_M_O2T_12 OF AM_Adapter:O.Data[0].8 (RADIX := Decimal);
		AM_O_M_O2T_13 OF AM_Adapter:O.Data[0].9 (RADIX := Decimal);
		AM_O_M_O2T_14 OF AM_Adapter:O.Data[0].10 (RADIX := Decimal);
		AM_O_M_O2T_15 OF AM_Adapter:O.Data[0].11 (RADIX := Decimal);
		AM_O_M_O2T_16 OF AM_Adapter:O.Data[0].12 (RADIX := Decimal);
		AM_O_M_O2T_17 OF AM_Adapter:O.Data[0].13 (RADIX := Decimal);
		AM_O_M_O2T_18 OF AM_Adapter:O.Data[0].14 (RADIX := Decimal);
		AM_O_M_O3T_17 OF AM_Adapter:O.Data[8].0 (RADIX := Decimal);
		AM_O_M_O3T_18 OF AM_Adapter:O.Data[8].1 (RADIX := Decimal);
		AM_O_M_O3T_19 OF AM_Adapter:O.Data[8].2 (RADIX := Decimal);
		AM_O_M_O3T_20 OF AM_Adapter:O.Data[8].3 (RADIX := Decimal);
		AM_O_M_O3T_21 OF AM_Adapter:O.Data[8].4 (RADIX := Decimal);
		AM_O_M_O4T_05 OF AM_Adapter:O.Data[3].9 (RADIX := Decimal);
		AM_O_M_O4T_06 OF AM_Adapter:O.Data[3].8 (RADIX := Decimal);
		AM_O_M_O4T_07 OF AM_Adapter:O.Data[3].7 (RADIX := Decimal);
		AM_O_M_O4T_08 OF AM_Adapter:O.Data[3].6 (RADIX := Decimal);
		AM_O_M_O4T_09 OF AM_Adapter:O.Data[3].5 (RADIX := Decimal);
		AM_O_M_O4T_10 OF AM_Adapter:O.Data[3].4 (RADIX := Decimal);
		AM_O_M_O4T_11 OF AM_Adapter:O.Data[3].3 (RADIX := Decimal);
		AM_O_M_O4T_12 OF AM_Adapter:O.Data[3].2 (RADIX := Decimal);
		AM_O_M_O4T_13 OF AM_Adapter:O.Data[3].1 (RADIX := Decimal);
		AM_O_M_O4T_16 OF AM_Adapter:O.Data[8].5 (RADIX := Decimal);
		AM_O_M_O4T_17 OF AM_Adapter:O.Data[8].6 (RADIX := Decimal);
		AM_O_M_O4T_18 OF AM_Adapter:O.Data[8].7 (RADIX := Decimal);
		AM_O_M_O4T_19 OF AM_Adapter:O.Data[8].8 (RADIX := Decimal);
		AM_O_M_O4T_20 OF AM_Adapter:O.Data[8].9 (RADIX := Decimal);
		AM_O_M_O4T_21 OF AM_Adapter:O.Data[8].10 (RADIX := Decimal);
		AM_O_M_O4T_22 OF AM_Adapter:O.Data[8].11 (RADIX := Decimal);
		AM_O_M_O4T_23 OF AM_Adapter:O.Data[8].12 (RADIX := Decimal);
		AM_O_M_T5T_08 OF AM_Adapter:O.Data[7].14 (RADIX := Decimal);
		AM_O_M_T5T_09 OF AM_Adapter:O.Data[7].15 (RADIX := Decimal);
		AM_O_M_XO1_01 OF AM_Adapter:O.Data[1].5 (RADIX := Decimal);
		AM_O_M_XO1_02 OF AM_Adapter:O.Data[1].6 (RADIX := Decimal);
		AM_O_M_XO1_03 OF AM_Adapter:O.Data[1].7 (RADIX := Decimal);
		AM_O_M_XO2_01 OF AM_Adapter:O.Data[5].4 (RADIX := Decimal);
		AM_O_M_XO2_02 OF AM_Adapter:O.Data[5].5 (RADIX := Decimal);
		AM_O_M_XO2_03 OF AM_Adapter:O.Data[5].6 (RADIX := Decimal);
		AM_O_M_XO2_04 OF AM_Adapter:O.Data[5].7 (RADIX := Decimal);
		BAL_BM1_27_FWD OF BOOLS[7] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_27_NEG_XITN_STOP OF BOOLS[12] (Description := "Negative transition stop",
		            RADIX := Decimal);
		BAL_BM1_27_REV OF BOOLS[6] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_27_XITN_MEM OF BOOLS[8] (Description := "Negative Transition$N",
		            RADIX := Decimal);
		BAL_BM1_28_FWD OF BOOLS[5] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_28_NEG_XITN_STOP OF BOOLS[13] (Description := "Negative Transition Stop",
		            RADIX := Decimal);
		BAL_BM1_28_REV OF BOOLS[4] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_28_XITN_MEM OF BOOLS[9] (Description := "Negative Transition",
		            RADIX := Decimal);
		BAL_BM1_29_FWD OF BOOLS[3] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_29_NEG_XITN_STOP OF BOOLS[14] (Description := "Negative Transition Stop",
		            RADIX := Decimal);
		BAL_BM1_29_REV OF BOOLS[2] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_29_XITN_MEM OF BOOLS[10] (Description := "Negative Transition",
		            RADIX := Decimal);
		BAL_BM1_30_FWD OF BOOLS[1] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_30_NEG_XITN_STOP OF BOOLS[15] (Description := "Negative Transition Stop",
		            RADIX := Decimal);
		BAL_BM1_30_REV OF BOOLS[0] (Description := "CONV ON BAL PULLED",
		            RADIX := Decimal);
		BAL_BM1_30_XITN_MEM OF BOOLS[11] (Description := "Negative Transition",
		            RADIX := Decimal);
		BM1_01_EPB_ONS OF EPB_ONS[1] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_01_MTR OF MTR[34] (ExternalAccess := Read Only);
		BM1_01_MTRx OF MTRx[34] (ExternalAccess := Read Only);
		BM1_01_VFD OF VFD[34] (ExternalAccess := Read Only);
		BM1_02_EPB_ONS OF EPB_ONS[2] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_02_MTR OF MTR[33] (ExternalAccess := Read Only);
		BM1_02_MTRx OF MTRx[33] (ExternalAccess := Read Only);
		BM1_02_VFD OF VFD[33] (ExternalAccess := Read Only);
		BM1_03_EPB_ONS OF EPB_ONS[3] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_03_MTR OF MTR[32] (ExternalAccess := Read Only);
		BM1_03_MTRx OF MTRx[32] (ExternalAccess := Read Only);
		BM1_03_VFD OF VFD[32] (ExternalAccess := Read Only);
		BM1_04_MTR OF MTR[31] (ExternalAccess := Read Only);
		BM1_04_MTRx OF MTRx[31] (ExternalAccess := Read Only);
		BM1_04_VFD OF VFD[31] (ExternalAccess := Read Only);
		BM1_05_MTR OF MTR[30] (ExternalAccess := Read Only);
		BM1_05_MTRx OF MTRx[30] (ExternalAccess := Read Only);
		BM1_05_VFD OF VFD[30] (ExternalAccess := Read Only);
		BM1_06_EPB_ONS OF EPB_ONS[4] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_06_MTR OF MTR[29] (ExternalAccess := Read Only);
		BM1_06_MTRx OF MTRx[29] (ExternalAccess := Read Only);
		BM1_06_PE1 OF PE[1] (ExternalAccess := Read Only);
		BM1_06_PE2 OF PE[0] (ExternalAccess := Read Only);
		BM1_06_VFD OF VFD[29] (ExternalAccess := Read Only);
		BM1_07_EPB_ONS OF EPB_ONS[5] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_07_MTR OF MTR[28] (ExternalAccess := Read Only);
		BM1_07_MTRx OF MTRx[28] (ExternalAccess := Read Only);
		BM1_07_PE OF PE[2] (ExternalAccess := Read Only);
		BM1_07_VFD OF VFD[28] (ExternalAccess := Read Only);
		BM1_08_MTR OF MTR[27] (ExternalAccess := Read Only);
		BM1_08_MTRx OF MTRx[27] (ExternalAccess := Read Only);
		BM1_08_PE OF PE[3] (ExternalAccess := Read Only);
		BM1_08_VFD OF VFD[27] (ExternalAccess := Read Only);
		BM1_09_MTR OF MTR[26] (ExternalAccess := Read Only);
		BM1_09_MTRx OF MTRx[26] (ExternalAccess := Read Only);
		BM1_09_PE OF PE[4] (ExternalAccess := Read Only);
		BM1_09_VFD OF VFD[26] (ExternalAccess := Read Only);
		BM1_10_MTR OF MTR[25] (ExternalAccess := Read Only);
		BM1_10_MTRx OF MTRx[25] (ExternalAccess := Read Only);
		BM1_10_PE OF PE[5] (ExternalAccess := Read Only);
		BM1_10_VFD OF VFD[25] (ExternalAccess := Read Only);
		BM1_11_MTR OF MTR[24] (ExternalAccess := Read Only);
		BM1_11_MTRx OF MTRx[24] (ExternalAccess := Read Only);
		BM1_11_PE OF PE[6] (ExternalAccess := Read Only);
		BM1_11_VFD OF VFD[24] (ExternalAccess := Read Only);
		BM1_12_BT OF BTP[0] (ExternalAccess := Read Only);
		BM1_12_BTx OF BTx[0] (ExternalAccess := Read Only);
		BM1_12_LEN OF LEN[0] (ExternalAccess := Read Only);
		BM1_12_LENx OF LENx[0] (ExternalAccess := Read Only);
		BM1_12_MTR OF MTR[23] (ExternalAccess := Read Only);
		BM1_12_MTRx OF MTRx[23] (ExternalAccess := Read Only);
		BM1_12_PE OF PE[7] (ExternalAccess := Read Only);
		BM1_12_VFD OF VFD[23] (ExternalAccess := Read Only);
		BM1_13_BT OF BTP[1] (ExternalAccess := Read Only);
		BM1_13_BTx OF BTx[1] (ExternalAccess := Read Only);
		BM1_13_EPB_ONS OF EPB_ONS[6] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_13_MRG OF MRG[0] (ExternalAccess := Read Only);
		BM1_13_MRGx OF MRGx[0] (ExternalAccess := Read Only);
		BM1_13_MTR OF MTR[22] (ExternalAccess := Read Only);
		BM1_13_MTRx OF MTRx[22] (ExternalAccess := Read Only);
		BM1_13_PE OF PE[8] (ExternalAccess := Read Only);
		BM1_13_RUN_FWD_TMR OF REV_VFD_TMR[14] ;
		BM1_13_VFD OF VFD[22] (ExternalAccess := Read Only);
		BM1_14_BT OF BTP[2] (ExternalAccess := Read Only);
		BM1_14_BTx OF BTx[2] (ExternalAccess := Read Only);
		BM1_14_EPB1_ONS OF EPB_ONS[7] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_14_EPB2_ONS OF EPB_ONS[8] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_14_MTR OF MTR[16] (ExternalAccess := Read Only);
		BM1_14_MTRx OF MTRx[16] (ExternalAccess := Read Only);
		BM1_14_PE1 OF PE[10] (ExternalAccess := Read Only);
		BM1_14_PE2 OF PE[9] (ExternalAccess := Read Only);
		BM1_14_VFD OF VFD[16] (ExternalAccess := Read Only);
		BM1_15_EPB_ONS OF EPB_ONS[9] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_15_MTR OF MTR[15] (ExternalAccess := Read Only);
		BM1_15_MTRx OF MTRx[15] (ExternalAccess := Read Only);
		BM1_15_PE OF PE[11] (ExternalAccess := Read Only);
		BM1_15_VFD OF VFD[15] (ExternalAccess := Read Only);
		BM1_16_EPB1_ONS OF EPB_ONS[10] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_16_EPB2_ONS OF EPB_ONS[11] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_16_MTR OF MTR[14] (ExternalAccess := Read Only);
		BM1_16_MTRx OF MTRx[14] (ExternalAccess := Read Only);
		BM1_16_PE OF PE[12] (ExternalAccess := Read Only);
		BM1_16_VFD OF VFD[14] (ExternalAccess := Read Only);
		BM1_17_EPB1_ONS OF EPB_ONS[12] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_17_EPB2_ONS OF EPB_ONS[13] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_17_MTR OF MTR[13] (ExternalAccess := Read Only);
		BM1_17_MTRx OF MTRx[13] (ExternalAccess := Read Only);
		BM1_17_PE OF PE[13] (ExternalAccess := Read Only);
		BM1_17_VFD OF VFD[13] (ExternalAccess := Read Only);
		BM1_18_EPB_ONS OF EPB_ONS[14] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_18_MTR OF MTR[12] (ExternalAccess := Read Only);
		BM1_18_MTRx OF MTRx[12] (ExternalAccess := Read Only);
		BM1_18_PE OF PE[14] (ExternalAccess := Read Only);
		BM1_18_VFD OF VFD[12] (ExternalAccess := Read Only);
		BM1_19_EPB_ONS OF EPB_ONS[15] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_19_MTR OF MTR[11] (ExternalAccess := Read Only);
		BM1_19_MTRx OF MTRx[11] (ExternalAccess := Read Only);
		BM1_19_PE1 OF PE[16] (ExternalAccess := Read Only);
		BM1_19_PE2 OF PE[15] (ExternalAccess := Read Only);
		BM1_19_VFD OF VFD[11] (ExternalAccess := Read Only);
		BM1_20_EPB_ONS OF EPB_ONS[16] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_20_MTR OF MTR[10] (ExternalAccess := Read Only);
		BM1_20_MTRx OF MTRx[10] (ExternalAccess := Read Only);
		BM1_20_PE OF PE[17] (ExternalAccess := Read Only);
		BM1_20_VFD OF VFD[10] (ExternalAccess := Read Only);
		BM1_21_MTR OF MTR[9] (ExternalAccess := Read Only);
		BM1_21_MTRx OF MTRx[9] (ExternalAccess := Read Only);
		BM1_21_PE OF PE[18] (ExternalAccess := Read Only);
		BM1_21_VFD OF VFD[9] (ExternalAccess := Read Only);
		BM1_22_BT OF BTP[19] (ExternalAccess := Read Only);
		BM1_22_BTx OF BTx[19] (ExternalAccess := Read Only);
		BM1_22_MTR OF MTR[8] (ExternalAccess := Read Only);
		BM1_22_MTRx OF MTRx[8] (ExternalAccess := Read Only);
		BM1_22_PE OF PE[19] (ExternalAccess := Read Only);
		BM1_22_VFD OF VFD[8] (ExternalAccess := Read Only);
		BM1_23_BT OF BTP[18] (ExternalAccess := Read Only);
		BM1_23_BTx OF BTx[18] (ExternalAccess := Read Only);
		BM1_23_EPB1_ONS OF EPB_ONS[18] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_23_EPB_ONS OF EPB_ONS[17] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_23_MTR OF MTR[7] (ExternalAccess := Read Only);
		BM1_23_MTRx OF MTRx[7] (ExternalAccess := Read Only);
		BM1_23_PE OF PE[22] (ExternalAccess := Read Only);
		BM1_23_PE1 OF PE[21] (ExternalAccess := Read Only);
		BM1_23_PE2 OF PE[20] (ExternalAccess := Read Only);
		BM1_23_VFD OF VFD[7] (ExternalAccess := Read Only);
		BM1_24_MTR OF MTR[6] (ExternalAccess := Read Only);
		BM1_24_MTRx OF MTRx[6] (ExternalAccess := Read Only);
		BM1_24_PE OF PE[23] (ExternalAccess := Read Only);
		BM1_24_VFD OF VFD[6] (ExternalAccess := Read Only);
		BM1_25_EPB_ONS OF EPB_ONS[19] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_25_MTR OF MTR[5] (ExternalAccess := Read Only);
		BM1_25_MTRx OF MTRx[5] (ExternalAccess := Read Only);
		BM1_25_PE OF PE[24] (ExternalAccess := Read Only);
		BM1_25_VFD OF VFD[5] (ExternalAccess := Read Only);
		BM1_26_MTR OF MTR[4] (ExternalAccess := Read Only);
		BM1_26_MTRx OF MTRx[4] (ExternalAccess := Read Only);
		BM1_26_PE OF PE[25] (ExternalAccess := Read Only);
		BM1_26_VFD OF VFD[4] (ExternalAccess := Read Only);
		BM1_27_EPB1_ONS OF EPB_ONS[20] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_27_EPB2_ONS OF EPB_ONS[21] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_27_EPB3_ONS OF EPB_ONS[22] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_27_EPB4_ONS OF EPB_ONS[23] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_27_EPB5_ONS OF EPB_ONS[24] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_27_MTR OF MTR[3] (ExternalAccess := Read Only);
		BM1_27_MTRx OF MTRx[3] (ExternalAccess := Read Only);
		BM1_27_PE1 OF PE[27] (ExternalAccess := Read Only);
		BM1_27_PE2 OF PE[26] (ExternalAccess := Read Only);
		BM1_27_RUN_FWD_TMR OF REV_VFD_TMR[0] ;
		BM1_27_RUN_REV_TMR OF REV_VFD_TMR[1] ;
		BM1_27_VFD OF VFD[3] (ExternalAccess := Read Only);
		BM1_28_EPB1_ONS OF EPB_ONS[25] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_28_EPB2_ONS OF EPB_ONS[26] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_28_EPB3_ONS OF EPB_ONS[27] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_28_EPB4_ONS OF EPB_ONS[28] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_28_MTR OF MTR[2] (ExternalAccess := Read Only);
		BM1_28_MTRx OF MTRx[2] (ExternalAccess := Read Only);
		BM1_28_PE1 OF PE[29] (ExternalAccess := Read Only);
		BM1_28_PE2 OF PE[28] (ExternalAccess := Read Only);
		BM1_28_RUN_FWD_TMR OF REV_VFD_TMR[2] ;
		BM1_28_RUN_REV_TMR OF REV_VFD_TMR[3] ;
		BM1_28_VFD OF VFD[2] (ExternalAccess := Read Only);
		BM1_29_EPB1_ONS OF EPB_ONS[29] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_29_EPB2_ONS OF EPB_ONS[30] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_29_EPB3_ONS OF EPB_ONS[31] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_29_EPB4_ONS OF EPB_ONS[32] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_29_MTR OF MTR[1] (ExternalAccess := Read Only);
		BM1_29_MTRx OF MTRx[1] (ExternalAccess := Read Only);
		BM1_29_PE1 OF PE[31] (ExternalAccess := Read Only);
		BM1_29_PE2 OF PE[30] (ExternalAccess := Read Only);
		BM1_29_RUN_FWD_TMR OF REV_VFD_TMR[4] ;
		BM1_29_RUN_REV_TMR OF REV_VFD_TMR[5] ;
		BM1_29_VFD OF VFD[1] (ExternalAccess := Read Only);
		BM1_30_EPB1_ONS OF EPB_ONS[33] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_30_EPB2_ONS OF EPB_ONS[34] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_30_EPB3_ONS OF EPB_ONS[35] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_30_EPB4_ONS OF EPB_ONS[36] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_30_MTR OF MTR[0] (ExternalAccess := Read Only);
		BM1_30_MTRx OF MTRx[0] (ExternalAccess := Read Only);
		BM1_30_PE1 OF PE[34] (ExternalAccess := Read Only);
		BM1_30_PE2 OF PE[33] (ExternalAccess := Read Only);
		BM1_30_PE3 OF PE[32] (ExternalAccess := Read Only);
		BM1_30_RUN_FWD_TMR OF REV_VFD_TMR[6] ;
		BM1_30_RUN_REV_TMR OF REV_VFD_TMR[7] ;
		BM1_30_VFD OF VFD[0] (ExternalAccess := Read Only);
		BM1_34_EPB_ONS OF EPB_ONS[37] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_34_MTR OF MTR[21] (ExternalAccess := Read Only);
		BM1_34_MTRx OF MTRx[21] (ExternalAccess := Read Only);
		BM1_34_PE OF PE[35] (ExternalAccess := Read Only);
		BM1_34_VFD OF VFD[21] (ExternalAccess := Read Only);
		BM1_35_MTR OF MTR[20] (ExternalAccess := Read Only);
		BM1_35_MTRx OF MTRx[20] (ExternalAccess := Read Only);
		BM1_35_PE OF PE[36] (ExternalAccess := Read Only);
		BM1_35_VFD OF VFD[20] (ExternalAccess := Read Only);
		BM1_36_MTR OF MTR[19] (ExternalAccess := Read Only);
		BM1_36_MTRx OF MTRx[19] (ExternalAccess := Read Only);
		BM1_36_PE OF PE[37] (ExternalAccess := Read Only);
		BM1_36_VFD OF VFD[19] (ExternalAccess := Read Only);
		BM1_37_MTR OF MTR[18] (ExternalAccess := Read Only);
		BM1_37_MTRx OF MTRx[18] (ExternalAccess := Read Only);
		BM1_37_PE OF PE[38] (ExternalAccess := Read Only);
		BM1_37_VFD OF VFD[18] (ExternalAccess := Read Only);
		BM1_38_BT OF BTP[3] (ExternalAccess := Read Only);
		BM1_38_BTx OF BTx[3] (ExternalAccess := Read Only);
		BM1_38_EPB_ONS OF EPB_ONS[38] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		BM1_38_MTR OF MTR[17] (ExternalAccess := Read Only);
		BM1_38_MTRx OF MTRx[17] (ExternalAccess := Read Only);
		BM1_38_PE OF PE[39] (ExternalAccess := Read Only);
		BM1_38_VFD OF VFD[17] (ExternalAccess := Read Only);
		BM1_A OF SYS[0] (ExternalAccess := Read Only);
		BM1_B OF SYS[1] (ExternalAccess := Read Only);
		BM1_C OF SYS[2] (ExternalAccess := Read Only);
		BOOLS : BOOL[128] (RADIX := Decimal) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		BT : BT[31] (ExternalAccess := Read Only) := [[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,1000,0],[0,1000,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,1000
				,0],[0,1000,0],0,0,0],[[0,1000,0],[0,1000,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,1000
				,0],[0,1000,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,1000,0],[0,1000,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,1000,0],[0,1000,0],0,0,4],[[0,1000,0],[0,1000,0],0,0,4],[[0,1000,0],[0,1000
				,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0],[[0,0,0],[0,0,0],0,0,0]];
		BTP : BTP[31] (ExternalAccess := Read Only) := [[[0,268,0],[0,1000,0],0,0,247471133,0,0,0,0,-7796614,0,8],[[0,211,0],[0,1000,0],0,0,247422360,0,0,0,0,-7790216,0,8],[[-1072601420
				,268,60],[-1609472332,1000,1020],14,16,247386135,1,0,17074,3,69582,-94,4],[[-1072601420,290,60],[-1609472332
				,1000,1020],13,15,247406066,1,0,37005,6,-5554,-94,4],[[0,125,0],[0,1000,0],0,0,247394012,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000
				,0],0,0,247394012,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000,0],0,0,247394012,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000,0],0,0,247394012
				,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000,0],0,0,247415756,0,0,0,0,-7814880,64,8],[[3678734,125,0],[3678734,1000,0],0,0,247369999
				,0,0,49485,1,-13015,0,8],[[0,125,0],[0,1000,0],0,0,247394012,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000,0],0,0,247394012,0,0,0,0,-7836624
				,0,8],[[1765330,125,0],[1765330,1000,0],0,0,247410779,0,0,61511,1,-989,64,8],[[1765330,125,0],[1765330,1000,0],0,0,247390810
				,0,0,41542,1,-20958,0,8],[[0,125,0],[0,1000,0],0,0,247394012,0,0,0,0,-7836624,0,8],[[0,125,0],[0,1000,0],0,0,247456512,0,0,0,0,-7836624
				,64,8],[[1777270,125,0],[1777300,1000,0],0,0,247401753,0,0,49962,1,19960,0,8],[[-1072601390,125,0],[-1609472302,1000
				,1020],32,34,247422586,1,0,23523,1,-7836624,-94,4],[[0,280,0],[0,1000,0],0,0,247480744,0,0,0,0,-7799933,0,8],[[-1072601390
				,287,90],[-1609472302,1000,1020],14,14,247409556,1,0,10493,3,11974,-94,4],[[0,0,0],[0,1000,0],0,0,-8204082,0,0,0,0,-1614169626
				,72,8],[[0,0,0],[0,1000,0],0,0,-8204082,0,0,0,0,-1614169626,72,8],[[-1072601390,125,0],[-1609472302,1000,1020],32,34,247425939
				,1,0,26876,1,-20139,-94,4],[[795430,125,0],[795430,1000,0],0,0,247437659,0,82,52492,1,-10008,64,8],[[795430,125,0],[795430
				,1000,0],0,0,247447661,0,74,62494,1,-6,64,8],[[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0],[[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0],[[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0],[[0,0,0
				],[0,0,0],0,0,0,0,0,0,0,0,0,0],[[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0],[[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0]];
		BTx : BTx[31] (ExternalAccess := Read Only) := [[2.50000000e+000,19,11,134409,1,1,268],[2.50000000e+000,24,14,105932,1,1,211],[2.50000000e+000,19,11,134409
				,1,1,268],[2.50000000e+000,18,10,145349,1,1,290],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40
				,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000
				,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000
				,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000
				,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000
				,40,24,62500,1,1,125],[2.50000000e+000,18,10,140449,1,1,280],[2.50000000e+000,18,10,143678,1,1,287],[2.50000000e+000
				,3,-3,-1,1,1,0],[2.50000000e+000,3,-3,-1,1,1,0],[2.50000000e+000,40,24,62500,1,1,125],[2.50000000e+000,40,24,62500
				,1,1,125],[2.50000000e+000,40,24,62500,1,1,125],[0.00000000e+000,0,0,0,0,0,0],[0.00000000e+000,0,0,0,0,0,0],[0.00000000e+000
				,0,0,0,0,0,0],[0.00000000e+000,0,0,0,0,0,0],[0.00000000e+000,0,0,0,0,0,0],[0.00000000e+000,0,0,0,0,0,0]];
		B_BDS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_CTX : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_DOOR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_ISD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_L3 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_PLC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		B_PLC_101_RUNNING OF B_PLC[0].0 (Description := "CNTRL/PLC-101 PLC Running",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		B_VS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		C2T OF SYS[4] (ExternalAccess := Read Only);
		C2T_12_MTR OF MTR[55] (ExternalAccess := Read Only);
		C2T_12_MTRx OF MTRx[55] (ExternalAccess := Read Only);
		C2T_12_PE OF PE[60] (ExternalAccess := Read Only);
		C2T_12_VFD OF VFD[55] (ExternalAccess := Read Only);
		C2T_13_EPB_ONS OF EPB_ONS[49] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		C2T_13_MTR OF MTR[54] (ExternalAccess := Read Only);
		C2T_13_MTRx OF MTRx[54] (ExternalAccess := Read Only);
		C2T_13_PE OF PE[59] (ExternalAccess := Read Only);
		C2T_13_VFD OF VFD[54] (ExternalAccess := Read Only);
		C2T_14_MTR OF MTR[53] (ExternalAccess := Read Only);
		C2T_14_MTRx OF MTRx[53] (ExternalAccess := Read Only);
		C2T_14_PE OF PE[58] (ExternalAccess := Read Only);
		C2T_14_VFD OF VFD[53] (ExternalAccess := Read Only);
		C2T_15_MTR OF MTR[52] (ExternalAccess := Read Only);
		C2T_15_MTRx OF MTRx[52] (ExternalAccess := Read Only);
		C2T_15_PE OF PE[57] (ExternalAccess := Read Only);
		C2T_15_VFD OF VFD[52] (ExternalAccess := Read Only);
		C2T_16_BT OF BTP[7] (ExternalAccess := Read Only);
		C2T_16_BTx OF BTx[7] (ExternalAccess := Read Only);
		C2T_16_LEN OF LEN[2] (ExternalAccess := Read Only);
		C2T_16_LENx OF LENx[2] (ExternalAccess := Read Only);
		C2T_16_MTR OF MTR[51] (ExternalAccess := Read Only);
		C2T_16_MTRx OF MTRx[51] (ExternalAccess := Read Only);
		C2T_16_PE OF PE[56] (ExternalAccess := Read Only);
		C2T_16_VFD OF VFD[51] (ExternalAccess := Read Only);
		C2T_17_BT OF BTP[6] (ExternalAccess := Read Only);
		C2T_17_BTx OF BTx[6] (ExternalAccess := Read Only);
		C2T_17_EPB_ONS OF EPB_ONS[50] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		C2T_17_MRG OF MRG[2] (ExternalAccess := Read Only);
		C2T_17_MRGx OF MRGx[2] (ExternalAccess := Read Only);
		C2T_17_MTR OF MTR[50] (ExternalAccess := Read Only);
		C2T_17_MTRx OF MTRx[50] (ExternalAccess := Read Only);
		C2T_17_PE OF PE[55] (ExternalAccess := Read Only);
		C2T_17_VFD OF VFD[50] (ExternalAccess := Read Only);
		C4_08_PE OF PE[143] (ExternalAccess := Read Only);
		C4_09ZZ_MTRx OF MTRx[138] (ExternalAccess := Read Only);
		C4_09_BT OF BTP[20] (ExternalAccess := Read Only);
		C4_09_BTx OF BTx[20] (ExternalAccess := Read Only);
		CC01_RK1_S02_STATUS OF COM_STATUS[0] (ExternalAccess := Read Only);
		CL12T OF SYS[14] (ExternalAccess := Read Only);
		CL12T_35_BTP OF BTP[24] (ExternalAccess := Read Only);
		CL12T_35_BTx OF BTx[24] (ExternalAccess := Read Only);
		CL12T_35_MTR OF MTR[136] (ExternalAccess := Read Only);
		CL12T_35_MTRx OF MTRx[136] (ExternalAccess := Read Only);
		CL12T_35_PE OF PE[142] (ExternalAccess := Read Only);
		CL12T_35_VFD OF VFD[136] (ExternalAccess := Read Only);
		CL12T_36_BT OF BTP[23] (ExternalAccess := Read Only);
		CL12T_36_BTx OF BTx[23] (ExternalAccess := Read Only);
		CL12T_36_MRG OF MRG[6] (ExternalAccess := Read Only);
		CL12T_36_MRG1 OF MRG[6] (ExternalAccess := Read Only);
		CL12T_36_MRGx OF MRGx[6] (ExternalAccess := Read Only);
		CL12T_36_MRGx1 OF MRGx[6] (ExternalAccess := Read Only);
		CL12T_36_MTR OF MTR[135] (ExternalAccess := Read Only);
		CL12T_36_MTRx OF MTRx[135] (ExternalAccess := Read Only);
		CL12T_36_PE OF PE[141] (ExternalAccess := Read Only);
		CL12T_36_VFD OF VFD[135] (ExternalAccess := Read Only);
		CL1T OF SYS[10] (ExternalAccess := Read Only);
		CL1T_01_EPB1_ONS OF EPB_ONS[73] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_01_EPB2_ONS OF EPB_ONS[74] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_01_EPB3_ONS OF EPB_ONS[75] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_01_MTR OF MTR[117] (ExternalAccess := Read Only);
		CL1T_01_MTRx OF MTRx[117] (ExternalAccess := Read Only);
		CL1T_01_PE OF PE[123] (ExternalAccess := Read Only);
		CL1T_01_VFD OF VFD[117] (ExternalAccess := Read Only);
		CL1T_02_EPB1_ONS OF EPB_ONS[76] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_02_EPB2_ONS OF EPB_ONS[77] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_02_EPB3_ONS OF EPB_ONS[78] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_02_MTR OF MTR[116] (ExternalAccess := Read Only);
		CL1T_02_MTRx OF MTRx[116] (ExternalAccess := Read Only);
		CL1T_02_PE OF PE[122] (ExternalAccess := Read Only);
		CL1T_02_VFD OF VFD[116] (ExternalAccess := Read Only);
		CL1T_03_MTR OF MTR[115] (ExternalAccess := Read Only);
		CL1T_03_MTRx OF MTRx[115] (ExternalAccess := Read Only);
		CL1T_03_PE OF PE[121] (ExternalAccess := Read Only);
		CL1T_03_VFD OF VFD[115] (ExternalAccess := Read Only);
		CL1T_04_MTR OF MTR[114] (ExternalAccess := Read Only);
		CL1T_04_MTRx OF MTRx[114] (ExternalAccess := Read Only);
		CL1T_04_PE OF PE[120] (ExternalAccess := Read Only);
		CL1T_04_VFD OF VFD[114] (ExternalAccess := Read Only);
		CL1T_05_EPB_ONS OF EPB_ONS[79] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_05_MTR OF MTR[113] (ExternalAccess := Read Only);
		CL1T_05_MTRx OF MTRx[113] (ExternalAccess := Read Only);
		CL1T_05_PE OF PE[119] (ExternalAccess := Read Only);
		CL1T_05_VFD OF VFD[113] (ExternalAccess := Read Only);
		CL1T_06_MTR OF MTR[112] (ExternalAccess := Read Only);
		CL1T_06_MTRx OF MTRx[112] (ExternalAccess := Read Only);
		CL1T_06_PE OF PE[118] (ExternalAccess := Read Only);
		CL1T_06_VFD OF VFD[112] (ExternalAccess := Read Only);
		CL1T_07_MTR OF MTR[111] (ExternalAccess := Read Only);
		CL1T_07_MTRx OF MTRx[111] (ExternalAccess := Read Only);
		CL1T_07_PE OF PE[117] (ExternalAccess := Read Only);
		CL1T_07_VFD OF VFD[111] (ExternalAccess := Read Only);
		CL1T_08_MTR OF MTR[110] (ExternalAccess := Read Only);
		CL1T_08_MTRx OF MTRx[110] (ExternalAccess := Read Only);
		CL1T_08_PE OF PE[116] (ExternalAccess := Read Only);
		CL1T_08_VFD OF VFD[110] (ExternalAccess := Read Only);
		CL1T_09_EPB_ONS OF EPB_ONS[80] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_09_MTR OF MTR[109] (ExternalAccess := Read Only);
		CL1T_09_MTRx OF MTRx[109] (ExternalAccess := Read Only);
		CL1T_09_PE OF PE[115] (ExternalAccess := Read Only);
		CL1T_09_VFD OF VFD[109] (ExternalAccess := Read Only);
		CL1T_10_MTR OF MTR[108] (ExternalAccess := Read Only);
		CL1T_10_MTRx OF MTRx[108] (ExternalAccess := Read Only);
		CL1T_10_PE OF PE[114] (ExternalAccess := Read Only);
		CL1T_10_VFD OF VFD[108] (ExternalAccess := Read Only);
		CL1T_11_EPB_ONS OF EPB_ONS[81] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_11_MTR OF MTR[107] (ExternalAccess := Read Only);
		CL1T_11_MTRx OF MTRx[107] (ExternalAccess := Read Only);
		CL1T_11_PE OF PE[113] (ExternalAccess := Read Only);
		CL1T_11_VFD OF VFD[107] (ExternalAccess := Read Only);
		CL1T_12_EPB_ONS OF EPB_ONS[82] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_12_MTR OF MTR[106] (ExternalAccess := Read Only);
		CL1T_12_MTRx OF MTRx[106] (ExternalAccess := Read Only);
		CL1T_12_PE OF PE[112] (ExternalAccess := Read Only);
		CL1T_12_VFD OF VFD[106] (ExternalAccess := Read Only);
		CL1T_13_MTR OF MTR[105] (ExternalAccess := Read Only);
		CL1T_13_MTRx OF MTRx[105] (ExternalAccess := Read Only);
		CL1T_13_PE OF PE[111] (ExternalAccess := Read Only);
		CL1T_13_VFD OF VFD[105] (ExternalAccess := Read Only);
		CL1T_14_MTR OF MTR[104] (ExternalAccess := Read Only);
		CL1T_14_MTRx OF MTRx[104] (ExternalAccess := Read Only);
		CL1T_14_PE OF PE[110] (ExternalAccess := Read Only);
		CL1T_14_VFD OF VFD[104] (ExternalAccess := Read Only);
		CL1T_15_MTR OF MTR[103] (ExternalAccess := Read Only);
		CL1T_15_MTRx OF MTRx[103] (ExternalAccess := Read Only);
		CL1T_15_PE OF PE[109] (ExternalAccess := Read Only);
		CL1T_15_VFD OF VFD[103] (ExternalAccess := Read Only);
		CL1T_16_EPB_ONS OF EPB_ONS[83] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_16_MTR OF MTR[102] (ExternalAccess := Read Only);
		CL1T_16_MTRx OF MTRx[102] (ExternalAccess := Read Only);
		CL1T_16_PE OF PE[108] (ExternalAccess := Read Only);
		CL1T_16_VFD OF VFD[102] (ExternalAccess := Read Only);
		CL1T_17_MTR OF MTR[101] (ExternalAccess := Read Only);
		CL1T_17_MTRx OF MTRx[101] (ExternalAccess := Read Only);
		CL1T_17_PE OF PE[107] (ExternalAccess := Read Only);
		CL1T_17_VFD OF VFD[101] (ExternalAccess := Read Only);
		CL1T_18_MTR OF MTR[100] (ExternalAccess := Read Only);
		CL1T_18_MTRx OF MTRx[100] (ExternalAccess := Read Only);
		CL1T_18_PE OF PE[106] (ExternalAccess := Read Only);
		CL1T_18_VFD OF VFD[100] (ExternalAccess := Read Only);
		CL1T_19_MTR OF MTR[99] (ExternalAccess := Read Only);
		CL1T_19_MTRx OF MTRx[99] (ExternalAccess := Read Only);
		CL1T_19_PE OF PE[105] (ExternalAccess := Read Only);
		CL1T_19_VFD OF VFD[99] (ExternalAccess := Read Only);
		CL1T_20_EPB_ONS OF EPB_ONS[84] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_20_MTR OF MTR[98] (ExternalAccess := Read Only);
		CL1T_20_MTRx OF MTRx[98] (ExternalAccess := Read Only);
		CL1T_20_PE OF PE[104] (ExternalAccess := Read Only);
		CL1T_20_VFD OF VFD[98] (ExternalAccess := Read Only);
		CL1T_21_MTR OF MTR[97] (ExternalAccess := Read Only);
		CL1T_21_MTRx OF MTRx[97] (ExternalAccess := Read Only);
		CL1T_21_PE OF PE[103] (ExternalAccess := Read Only);
		CL1T_21_VFD OF VFD[97] (ExternalAccess := Read Only);
		CL1T_22_MTR OF MTR[96] (ExternalAccess := Read Only);
		CL1T_22_MTRx OF MTRx[96] (ExternalAccess := Read Only);
		CL1T_22_VFD OF VFD[96] (ExternalAccess := Read Only);
		CL1T_23_MTR OF MTR[95] (ExternalAccess := Read Only);
		CL1T_23_MTRx OF MTRx[95] (ExternalAccess := Read Only);
		CL1T_23_PE OF PE[102] (ExternalAccess := Read Only);
		CL1T_23_VFD OF VFD[95] (ExternalAccess := Read Only);
		CL1T_24_EPB_ONS OF EPB_ONS[85] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL1T_24_MTR OF MTR[94] (ExternalAccess := Read Only);
		CL1T_24_MTRx OF MTRx[94] (ExternalAccess := Read Only);
		CL1T_24_PE OF PE[101] (ExternalAccess := Read Only);
		CL1T_24_VFD OF VFD[94] (ExternalAccess := Read Only);
		CL1T_25_MTR OF MTR[93] (ExternalAccess := Read Only);
		CL1T_25_MTRx OF MTRx[93] (ExternalAccess := Read Only);
		CL1T_25_VFD OF VFD[93] (ExternalAccess := Read Only);
		CL1T_26_BT OF BTP[9] (ExternalAccess := Read Only);
		CL1T_26_BTx OF BTx[9] (ExternalAccess := Read Only);
		CL1T_26_MTR OF MTR[92] (ExternalAccess := Read Only);
		CL1T_26_MTRx OF MTRx[92] (ExternalAccess := Read Only);
		CL1T_26_PE1 OF PE[99] (ExternalAccess := Read Only);
		CL1T_26_PE2 OF PE[100] (ExternalAccess := Read Only);
		CL1T_26_VFD OF VFD[92] (ExternalAccess := Read Only);
		CL2T OF SYS[5] (ExternalAccess := Read Only);
		CL2T_01_EPB1_ONS OF EPB_ONS[51] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_01_EPB2_ONS OF EPB_ONS[52] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_01_MTR OF MTR[64] (ExternalAccess := Read Only);
		CL2T_01_MTRx OF MTRx[64] (ExternalAccess := Read Only);
		CL2T_01_PE OF PE[69] (ExternalAccess := Read Only);
		CL2T_01_VFD OF VFD[64] (ExternalAccess := Read Only);
		CL2T_02_EPB1_ONS OF EPB_ONS[53] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_02_EPB2_ONS OF EPB_ONS[54] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_02_EPB3_ONS OF EPB_ONS[55] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_02_MTR OF MTR[63] (ExternalAccess := Read Only);
		CL2T_02_MTRx OF MTRx[63] (ExternalAccess := Read Only);
		CL2T_02_PE OF PE[68] (ExternalAccess := Read Only);
		CL2T_02_VFD OF VFD[63] (ExternalAccess := Read Only);
		CL2T_03_MTR OF MTR[62] (ExternalAccess := Read Only);
		CL2T_03_MTRx OF MTRx[62] (ExternalAccess := Read Only);
		CL2T_03_PE OF PE[67] (ExternalAccess := Read Only);
		CL2T_03_VFD OF VFD[62] (ExternalAccess := Read Only);
		CL2T_04_EPB_ONS OF EPB_ONS[56] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_04_MTR OF MTR[61] (ExternalAccess := Read Only);
		CL2T_04_MTRx OF MTRx[61] (ExternalAccess := Read Only);
		CL2T_04_PE OF PE[66] (ExternalAccess := Read Only);
		CL2T_04_VFD OF VFD[61] (ExternalAccess := Read Only);
		CL2T_05_EPB1_ONS OF EPB_ONS[57] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_05_EPB2_ONS OF EPB_ONS[58] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_05_MTR OF MTR[60] (ExternalAccess := Read Only);
		CL2T_05_MTRx OF MTRx[60] (ExternalAccess := Read Only);
		CL2T_05_PE OF PE[65] (ExternalAccess := Read Only);
		CL2T_05_VFD OF VFD[60] (ExternalAccess := Read Only);
		CL2T_06_MTR OF MTR[59] (ExternalAccess := Read Only);
		CL2T_06_MTRx OF MTRx[59] (ExternalAccess := Read Only);
		CL2T_06_PE OF PE[64] (ExternalAccess := Read Only);
		CL2T_06_VFD OF VFD[59] (ExternalAccess := Read Only);
		CL2T_07_MTR OF MTR[58] (ExternalAccess := Read Only);
		CL2T_07_MTRx OF MTRx[58] (ExternalAccess := Read Only);
		CL2T_07_PE OF PE[63] (ExternalAccess := Read Only);
		CL2T_07_VFD OF VFD[58] (ExternalAccess := Read Only);
		CL2T_08_MTR OF MTR[57] (ExternalAccess := Read Only);
		CL2T_08_MTRx OF MTRx[57] (ExternalAccess := Read Only);
		CL2T_08_PE OF PE[62] (ExternalAccess := Read Only);
		CL2T_08_VFD OF VFD[57] (ExternalAccess := Read Only);
		CL2T_09_EPB_ONS OF EPB_ONS[59] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL2T_09_MTR OF MTR[56] (ExternalAccess := Read Only);
		CL2T_09_MTRx OF MTRx[56] (ExternalAccess := Read Only);
		CL2T_09_PE OF PE[61] (ExternalAccess := Read Only);
		CL2T_09_VFD OF VFD[56] (ExternalAccess := Read Only);
		CL3T OF SYS[6] (ExternalAccess := Read Only);
		CL3T_01_EPB1_ONS OF EPB_ONS[60] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_01_EPB2_ONS OF EPB_ONS[61] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_01_MTR OF MTR[72] (ExternalAccess := Read Only);
		CL3T_01_MTRx OF MTRx[72] (ExternalAccess := Read Only);
		CL3T_01_PE OF PE[77] (ExternalAccess := Read Only);
		CL3T_01_VFD OF VFD[72] (ExternalAccess := Read Only);
		CL3T_02_EPB1_ONS OF EPB_ONS[62] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_02_EPB2_ONS OF EPB_ONS[63] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_02_EPB3_ONS OF EPB_ONS[64] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_02_EPB4_ONS OF EPB_ONS[65] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_02_MTR OF MTR[71] (ExternalAccess := Read Only);
		CL3T_02_MTRx OF MTRx[71] (ExternalAccess := Read Only);
		CL3T_02_PE OF PE[76] (ExternalAccess := Read Only);
		CL3T_02_VFD OF VFD[71] (ExternalAccess := Read Only);
		CL3T_03_MTR OF MTR[70] (ExternalAccess := Read Only);
		CL3T_03_MTRx OF MTRx[70] (ExternalAccess := Read Only);
		CL3T_03_PE OF PE[75] (ExternalAccess := Read Only);
		CL3T_03_VFD OF VFD[70] (ExternalAccess := Read Only);
		CL3T_04_EPB_ONS OF EPB_ONS[66] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CL3T_04_MTR OF MTR[69] (ExternalAccess := Read Only);
		CL3T_04_MTRx OF MTRx[69] (ExternalAccess := Read Only);
		CL3T_04_PE OF PE[74] (ExternalAccess := Read Only);
		CL3T_04_VFD OF VFD[69] (ExternalAccess := Read Only);
		CL3T_05_MTR OF MTR[68] (ExternalAccess := Read Only);
		CL3T_05_MTRx OF MTRx[68] (ExternalAccess := Read Only);
		CL3T_05_PE OF PE[73] (ExternalAccess := Read Only);
		CL3T_05_VFD OF VFD[68] (ExternalAccess := Read Only);
		CL3T_06_MTR OF MTR[67] (ExternalAccess := Read Only);
		CL3T_06_MTRx OF MTRx[67] (ExternalAccess := Read Only);
		CL3T_06_PE OF PE[72] (ExternalAccess := Read Only);
		CL3T_06_VFD OF VFD[67] (ExternalAccess := Read Only);
		CL3T_07_MTR OF MTR[66] (ExternalAccess := Read Only);
		CL3T_07_MTRx OF MTRx[66] (ExternalAccess := Read Only);
		CL3T_07_PE OF PE[71] (ExternalAccess := Read Only);
		CL3T_07_VFD OF VFD[66] (ExternalAccess := Read Only);
		CL3T_08_MTR OF MTR[65] (ExternalAccess := Read Only);
		CL3T_08_MTRx OF MTRx[65] (ExternalAccess := Read Only);
		CL3T_08_PE OF PE[70] (ExternalAccess := Read Only);
		CL3T_08_VFD OF VFD[65] (ExternalAccess := Read Only);
		COM_STATUS : COM_STATUS[15] (ExternalAccess := Read Only) := [[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0
				,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000
				,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,10000,10000],516,[4096,1],0],[[0,0,0],0,[0,0],0],[[0,0,0],0,[0,0],0],[[0,0,0],0,[0,0],0],[[0,0,0],0,[0,0
				],0]];
		CST : DINT[2] (Description := "Coordinated System Time",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [247489061,175];
		CS_BM1_01_LTA_FLASH OF LTA_FLASH[0] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_02_LTA_FLASH OF LTA_FLASH[1] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_03_LTA_FLASH OF LTA_FLASH[2] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_06_LTA_FLASH OF LTA_FLASH[3] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_07_LTA_FLASH OF LTA_FLASH[4] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_07_LTW_FLASH OF LTW_FLASH[4] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_13_LTA_FLASH OF LTA_FLASH[5] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_14_LTA1_FLASH OF LTA_FLASH[6] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_14_LTA2_FLASH OF LTA_FLASH[7] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_15_LTA_FLASH OF LTA_FLASH[8] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_16_LTA1_FLASH OF LTA_FLASH[9] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_16_LTA2_FLASH OF LTA_FLASH[10] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_17_LTA1_FLASH OF LTA_FLASH[11] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_17_LTA2_FLASH OF LTA_FLASH[12] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_17_LTW1_FLASH OF LTW_FLASH[11] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_18_LTA_FLASH OF LTA_FLASH[13] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_19_LTA_FLASH OF LTA_FLASH[14] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_20_LTA_FLASH OF LTA_FLASH[15] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_20_LTW_FLASH OF LTW_FLASH[15] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_23_LTA1_FLASH OF LTA_FLASH[17] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_23_LTA2_FLASH OF LTA_FLASH[88] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_23_LTA_FLASH OF LTA_FLASH[16] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_25_LTA_FLASH OF LTA_FLASH[18] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_27_LTA1_FLASH OF LTA_FLASH[19] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_27_LTA2_FLASH OF LTA_FLASH[20] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_27_LTA3_FLASH OF LTA_FLASH[21] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_27_LTA4_FLASH OF LTA_FLASH[22] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_27_LTA5_FLASH OF LTA_FLASH[23] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_28_LTA1_FLASH OF LTA_FLASH[24] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_28_LTA2_FLASH OF LTA_FLASH[25] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_28_LTA3_FLASH OF LTA_FLASH[26] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_28_LTA4_FLASH OF LTA_FLASH[27] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_28_LTW1_FLASH OF LTW_FLASH[24] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_29_LTA1_FLASH OF LTA_FLASH[28] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_29_LTA2_FLASH OF LTA_FLASH[29] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_29_LTA3_FLASH OF LTA_FLASH[30] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_29_LTA4_FLASH OF LTA_FLASH[31] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_30_LTA1_FLASH OF LTA_FLASH[32] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_30_LTA2_FLASH OF LTA_FLASH[33] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_30_LTA3_FLASH OF LTA_FLASH[34] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_30_LTA4_FLASH OF LTA_FLASH[35] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_30_LTW1_FLASH OF LTW_FLASH[32] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_34_LTA_FLASH OF LTA_FLASH[36] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_BM1_38_LTA_FLASH OF LTA_FLASH[37] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_C2T_13_LTA_FLASH OF LTA_FLASH[44] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_C2T_17_LTA_FLASH OF LTA_FLASH[45] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_01_LTA1_FLASH OF LTA_FLASH[68] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_01_LTA2_FLASH OF LTA_FLASH[69] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_01_LTA3_FLASH OF LTA_FLASH[70] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_02_LTA1_FLASH OF LTA_FLASH[71] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_02_LTA2_FLASH OF LTA_FLASH[72] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_02_LTA3_FLASH OF LTA_FLASH[73] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_05_LTA_FLASH OF LTA_FLASH[74] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_09_LTA_FLASH OF LTA_FLASH[75] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_11_LTA_FLASH OF LTA_FLASH[76] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_12_LTA_FLASH OF LTA_FLASH[77] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_16_LTA_FLASH OF LTA_FLASH[78] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_20_LTA_FLASH OF LTA_FLASH[79] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL1T_24_LTA_FLASH OF LTA_FLASH[80] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_01_LTA1_FLASH OF LTA_FLASH[46] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_01_LTA2_FLASH OF LTA_FLASH[47] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_02_LTA1_FLASH OF LTA_FLASH[48] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_02_LTA2_FLASH OF LTA_FLASH[49] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_02_LTA3_FLASH OF LTA_FLASH[50] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_04_LTA_FLASH OF LTA_FLASH[51] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_05_LTA1_FLASH OF LTA_FLASH[52] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_05_LTA2_FLASH OF LTA_FLASH[53] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL2T_09_LTA_FLASH OF LTA_FLASH[54] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_01_LTA1_FLASH OF LTA_FLASH[55] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_01_LTA2_FLASH OF LTA_FLASH[56] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_02_LTA1_FLASH OF LTA_FLASH[57] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_02_LTA2_FLASH OF LTA_FLASH[58] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_02_LTA3_FLASH OF LTA_FLASH[59] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_02_LTA4_FLASH OF LTA_FLASH[60] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_CL3T_04_LTA_FLASH OF LTA_FLASH[61] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_HX1T_10_LTA_FLASH OF LTA_FLASH[81] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_04_LTA_FLASH OF LTA_FLASH[38] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_06_LTA_FLASH OF LTA_FLASH[39] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_10_LTA_FLASH OF LTA_FLASH[40] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_12_LTA_FLASH OF LTA_FLASH[41] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_14_LTA_FLASH OF LTA_FLASH[42] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O2T_18_LTA_FLASH OF LTA_FLASH[43] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O3T_17_LTA_FLASH OF LTA_FLASH[82] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O3T_19_LTA1_FLASH OF LTA_FLASH[83] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O3T_19_LTA2_FLASH OF LTA_FLASH[84] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_06_LTA_FLASH OF LTA_FLASH[62] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_10_LTA_FLASH OF LTA_FLASH[63] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_16_LTA_FLASH OF LTA_FLASH[85] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_19_LTA1_FLASH OF LTA_FLASH[86] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_19_LTA2_FLASH OF LTA_FLASH[87] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_21_LTA1_FLASH OF LTA_FLASH[86] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_O4T_21_LTA2_FLASH OF LTA_FLASH[87] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_T5T_09_LTA_FLASH OF LTA_FLASH[65] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_XO1_01_LTA_FLASH OF LTA_FLASH[64] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_XO2_02_LTA_FLASH OF LTA_FLASH[66] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		CS_XO2_05_LTA_FLASH OF LTA_FLASH[67] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		DIV : DIV[3] (ExternalAccess := Read Only) := [[[1,6,0,0],[[1,6,0,0],[1,6,0,0],[1,6,0,0],[1,6,0,0],[1,6,0,0]],[0,0,0,0],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[0,0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1140549,100,100],[1140549
				,100,100],[1671125,8000,0],[3266390,295000,0],[0,400,0],[0,400,0],[0,400,0],[-1609472187,1000,1020],[0,10000,0],[-1609472187
				,2000,2010],[-1609472187,2000,2022],[0,300,0],[0,14,0],[536870912,5,5],[268435456,5,0],[0,96,0],[0,0,0],0,0,0,0,2490374,3,0,72,8
				,0,1,0,0],[[1,6,0,0],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[0,6,0,0],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[0,0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1140553,100,100
				],[1140553,100,100],[0,8000,0],[-1609472183,295000,295020],[0,400,0],[0,400,0],[0,400,0],[-1609472183,1000,1020],[538648211
				,10000,10020],[-1609472183,2000,2010],[-1609472183,2000,2022],[1777299,300,0],[0,14,0],[268435456,5,0],[268435456
				,5,0],[0,96,0],[0,0,0],0,0,0,0,2490374,3,0,72,0,0,1,0,0],[[0,0,0,0],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[0,0,0,0],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[0,0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,0,0,0,0,0]];
		DIVx : DIVx[3] (ExternalAccess := Read Only) := [[5002,6,6,0,5202,0,0,90,210,[1048448,0,0],[[4,'Auto$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'Div All$00$00$00$00$00$00$00$00$00$00$00$00$00'],[8,'Div Half$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Div None$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]],[5001,6,6,0,5201,0,0,90,210,[1048448,0,0],[[4,'Auto$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[7,'Div All$00$00$00$00$00$00$00$00$00$00$00$00$00'],[8,'Div Half$00$00$00$00$00$00$00$00$00$00$00$00'
				],[8,'Div None$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]]],[0,0,0,0,0,0,0,0,0,[0,0,0],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]]];
		EPB_ONS : BOOL[128] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		ES_Zone : ES_Zone[31] (ExternalAccess := Read Only) := [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[0],[0],[0],[0],[0],[0],[0]];
		EZ_30100 OF ES_Zone[1] (ExternalAccess := Read Only);
		EZ_30101 OF ES_Zone[7] (ExternalAccess := Read Only);
		EZ_30102 OF ES_Zone[8] (ExternalAccess := Read Only);
		EZ_30103 OF ES_Zone[9] (ExternalAccess := Read Only);
		EZ_30200 OF ES_Zone[2] (ExternalAccess := Read Only);
		EZ_30201 OF ES_Zone[10] (ExternalAccess := Read Only);
		EZ_30202 OF ES_Zone[11] (ExternalAccess := Read Only);
		EZ_30203 OF ES_Zone[12] (ExternalAccess := Read Only);
		EZ_30300 OF ES_Zone[3] (ExternalAccess := Read Only);
		EZ_30301 OF ES_Zone[16] (ExternalAccess := Read Only);
		EZ_30303 OF ES_Zone[18] (ExternalAccess := Read Only);
		EZ_30304 OF ES_Zone[19] (ExternalAccess := Read Only);
		EZ_30305 OF ES_Zone[20] (ExternalAccess := Read Only);
		EZ_30306 OF ES_Zone[21] (ExternalAccess := Read Only);
		EZ_30307 OF ES_Zone[15] (ExternalAccess := Read Only);
		EZ_31600 OF ES_Zone[4] (ExternalAccess := Read Only);
		EZ_A3283 OF ES_Zone[17] (ExternalAccess := Read Only);
		EZ_A32A3 OF ES_Zone[13] (ExternalAccess := Read Only);
		EZ_A32B3 OF ES_Zone[14] (ExternalAccess := Read Only);
		EZ_BM1_ECR_1 OF ES_Zone[0] (ExternalAccess := Read Only);
		EZ_W12_1CR OF ES_Zone[23] (ExternalAccess := Read Only);
		EZ_W15_1CR OF ES_Zone[22] (ExternalAccess := Read Only);
		EZ_ZONE_1 OF ES_Zone[5] (ExternalAccess := Read Only);
		EZ_ZONE_2 OF ES_Zone[6] (ExternalAccess := Read Only);
		F_ATR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_BDS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_BM1_01_CS_E_STOP OF F_CS1A[0].0 (Description := "MTR/BM1-01 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_CS_E_STOP_RESET OF F_CS1A[0].1 (Description := "MTR/BM1-01 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_CTCTR_FAULT OF F_C[8].5 (Description := "MTR/BM1-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_ENCODER_FAULT OF F_C[8].6 (Description := "MTR/BM1-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_MOL OF F_C[8].3 (Description := "MTR/BM1-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_MSD_OFF OF F_C[8].7 (Description := "MTR/BM1-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_OUTSERV OF F_C[8].8 (Description := "MTR/BM1-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_OVRIDE OF F_C[8].9 (Description := "MTR/BM1-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_01_VFD_FAULT OF F_C[8].4 (Description := "MTR/BM1-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_CS_E_STOP OF F_CS1A[0].2 (Description := "MTR/BM1-02 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_CS_E_STOP_RESET OF F_CS1A[0].3 (Description := "MTR/BM1-02 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_CTCTR_FAULT OF F_C[7].30 (Description := "MTR/BM1-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_ENCODER_FAULT OF F_C[7].31 (Description := "MTR/BM1-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_MOL OF F_C[7].28 (Description := "MTR/BM1-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_MSD_OFF OF F_C[8].0 (Description := "MTR/BM1-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_OUTSERV OF F_C[8].1 (Description := "MTR/BM1-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_OVRIDE OF F_C[8].2 (Description := "MTR/BM1-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_02_VFD_FAULT OF F_C[7].29 (Description := "MTR/BM1-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_CS_E_STOP OF F_CS1A[0].4 (Description := "MTR/BM1-03 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_CS_E_STOP_RESET OF F_CS1A[0].5 (Description := "MTR/BM1-03 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_CTCTR_FAULT OF F_C[7].23 (Description := "MTR/BM1-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_ENCODER_FAULT OF F_C[7].24 (Description := "MTR/BM1-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_MOL OF F_C[7].21 (Description := "MTR/BM1-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_MSD_OFF OF F_C[7].25 (Description := "MTR/BM1-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_OUTSERV OF F_C[7].26 (Description := "MTR/BM1-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_OVRIDE OF F_C[7].27 (Description := "MTR/BM1-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_03_VFD_FAULT OF F_C[7].22 (Description := "MTR/BM1-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_CTCTR_FAULT OF F_C[7].16 (Description := "MTR/BM1-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_ENCODER_FAULT OF F_C[7].17 (Description := "MTR/BM1-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_MOL OF F_C[7].14 (Description := "MTR/BM1-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_MSD_OFF OF F_C[7].18 (Description := "MTR/BM1-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_OUTSERV OF F_C[7].19 (Description := "MTR/BM1-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_OVRIDE OF F_C[7].20 (Description := "MTR/BM1-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_04_VFD_FAULT OF F_C[7].15 (Description := "MTR/BM1-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_CTCTR_FAULT OF F_C[7].9 (Description := "MTR/BM1-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_ENCODER_FAULT OF F_C[7].10 (Description := "MTR/BM1-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_MOL OF F_C[7].7 (Description := "MTR/BM1-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_MSD_OFF OF F_C[7].11 (Description := "MTR/BM1-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_OUTSERV OF F_C[7].12 (Description := "MTR/BM1-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_OVRIDE OF F_C[7].13 (Description := "MTR/BM1-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_05_VFD_FAULT OF F_C[7].8 (Description := "MTR/BM1-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_CS_E_STOP OF F_CS1A[0].6 (Description := "MTR/BM1-06 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_CS_E_STOP_RESET OF F_CS1A[0].7 (Description := "MTR/BM1-06 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_CTCTR_FAULT OF F_C[7].2 (Description := "MTR/BM1-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_ENCODER_FAULT OF F_C[7].3 (Description := "MTR/BM1-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_MOL OF F_C[7].0 (Description := "MTR/BM1-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_MSD_OFF OF F_C[7].4 (Description := "MTR/BM1-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_OUTSERV OF F_C[7].5 (Description := "MTR/BM1-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_OVRIDE OF F_C[7].6 (Description := "MTR/BM1-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_PE1_JAMMED OF F_PE[0].0 (Description := "MTR/BM1-06 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_PE1_JAMMED1 OF F_PE[0].0 (Description := "MTR/BM1-06 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_PE2_OVERHEIGHT OF F_OH[0].0 (Description := "MTR/BM1-06 PE-B Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_PE3_OVERHEIGHT OF F_OH[0].0 (Description := "MTR/BM1-06 PE3 Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_06_VFD_FAULT OF F_C[7].1 (Description := "MTR/BM1-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_CS_E_STOP OF F_CS2A[0].0 (Description := "MTR/BM1-07 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_CS_E_STOP_RESET OF F_CS2A[0].1 (Description := "MTR/BM1-07 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_CTCTR_FAULT OF F_C[6].27 (Description := "MTR/BM1-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_ENCODER_FAULT OF F_C[6].28 (Description := "MTR/BM1-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_MOL OF F_C[6].25 (Description := "MTR/BM1-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_MSD_OFF OF F_C[6].29 (Description := "MTR/BM1-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_OUTSERV OF F_C[6].30 (Description := "MTR/BM1-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_OVRIDE OF F_C[6].31 (Description := "MTR/BM1-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_PE_JAMMED OF F_PE[0].1 (Description := "MTR/BM1-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_07_VFD_FAULT OF F_C[6].26 (Description := "MTR/BM1-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_CTCTR_FAULT OF F_C[6].20 (Description := "MTR/BM1-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_ENCODER_FAULT OF F_C[6].21 (Description := "MTR/BM1-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_MOL OF F_C[6].18 (Description := "MTR/BM1-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_MSD_OFF OF F_C[6].22 (Description := "MTR/BM1-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_OUTSERV OF F_C[6].23 (Description := "MTR/BM1-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_OVRIDE OF F_C[6].24 (Description := "MTR/BM1-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_PE_JAMMED OF F_PE[0].2 (Description := "MTR/BM1-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_08_VFD_FAULT OF F_C[6].19 (Description := "MTR/BM1-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_CTCTR_FAULT OF F_C[6].13 (Description := "MTR/BM1-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_ENCODER_FAULT OF F_C[6].14 (Description := "MTR/BM1-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_MOL OF F_C[6].11 (Description := "MTR/BM1-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_MSD_OFF OF F_C[6].15 (Description := "MTR/BM1-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_OUTSERV OF F_C[6].16 (Description := "MTR/BM1-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_OVRIDE OF F_C[6].17 (Description := "MTR/BM1-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_PE_JAMMED OF F_PE[0].3 (Description := "MTR/BM1-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_09_VFD_FAULT OF F_C[6].12 (Description := "MTR/BM1-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_CTCTR_FAULT OF F_C[6].6 (Description := "MTR/BM1-10 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_ENCODER_FAULT OF F_C[6].7 (Description := "MTR/BM1-10 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_MOL OF F_C[6].4 (Description := "MTR/BM1-10 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_MSD_OFF OF F_C[6].8 (Description := "MTR/BM1-10 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_OUTSERV OF F_C[6].9 (Description := "MTR/BM1-10 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_OVRIDE OF F_C[6].10 (Description := "MTR/BM1-10 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_PE_JAMMED OF F_PE[0].4 (Description := "MTR/BM1-10 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_10_VFD_FAULT OF F_C[6].5 (Description := "MTR/BM1-10 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_CTCTR_FAULT OF F_C[5].31 (Description := "MTR/BM1-11 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_ENCODER_FAULT OF F_C[6].0 (Description := "MTR/BM1-11 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_MOL OF F_C[5].29 (Description := "MTR/BM1-11 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_MSD_OFF OF F_C[6].1 (Description := "MTR/BM1-11 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_OUTSERV OF F_C[6].2 (Description := "MTR/BM1-11 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_OVRIDE OF F_C[6].3 (Description := "MTR/BM1-11 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_PE_JAMMED OF F_PE[0].5 (Description := "MTR/BM1-11 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_11_VFD_FAULT OF F_C[5].30 (Description := "MTR/BM1-11 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_CTCTR_FAULT OF F_C[5].24 (Description := "MTR/BM1-12 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_ENCODER_FAULT OF F_C[5].25 (Description := "MTR/BM1-12 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_MOL OF F_C[5].22 (Description := "MTR/BM1-12 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_MSD_OFF OF F_C[5].26 (Description := "MTR/BM1-12 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_OUTSERV OF F_C[5].27 (Description := "MTR/BM1-12 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_OVRIDE OF F_C[5].28 (Description := "MTR/BM1-12 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_PE_JAMMED OF F_PE[0].6 (Description := "MTR/BM1-12 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_12_VFD_FAULT OF F_C[5].23 (Description := "MTR/BM1-12 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_CS_E_STOP OF F_CS3A[0].0 (Description := "MTR/BM1-13 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_CS_E_STOP_RESET OF F_CS3A[0].1 (Description := "MTR/BM1-13 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_CTCTR_FAULT OF F_C[5].17 (Description := "MTR/BM1-13 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_ENCODER_FAULT OF F_C[5].18 (Description := "MTR/BM1-13 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_MOL OF F_C[5].15 (Description := "MTR/BM1-13 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_MSD_OFF OF F_C[5].19 (Description := "MTR/BM1-13 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_OUTSERV OF F_C[5].20 (Description := "MTR/BM1-13 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_OVRIDE OF F_C[5].21 (Description := "MTR/BM1-13 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_PE_JAMMED OF F_PE[0].7 (Description := "MTR/BM1-13 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_13_VFD_FAULT OF F_C[5].16 (Description := "MTR/BM1-13 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS1_E_STOP OF F_CS1A[0].8 (Description := "MTR/BM1-14 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS1_E_STOP1 OF F_CS1A[0].8 (Description := "MTR/BM1-14 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS1_E_STOP_RESET OF F_CS1A[0].9 (Description := "MTR/BM1-14 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS1_E_STOP_RESET1 OF F_CS1A[0].9 (Description := "MTR/BM1-14 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS2_E_STOP OF F_CS1A[0].10 (Description := "MTR/BM1-14 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS2_E_STOP1 OF F_CS1A[0].10 (Description := "MTR/BM1-14 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS2_E_STOP_RESET OF F_CS1A[0].11 (Description := "MTR/BM1-14 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CS2_E_STOP_RESET1 OF F_CS1A[0].11 (Description := "MTR/BM1-14 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_CTCTR_FAULT OF F_C[5].10 (Description := "MTR/BM1-14 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_ENCODER_FAULT OF F_C[5].11 (Description := "MTR/BM1-14 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_MOL OF F_C[5].8 (Description := "MTR/BM1-14 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_MSD_OFF OF F_C[5].12 (Description := "MTR/BM1-14 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_OUTSERV OF F_C[5].13 (Description := "MTR/BM1-14 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_OVRIDE OF F_C[5].14 (Description := "MTR/BM1-14 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_PE1_JAMMED OF F_PE[0].9 (Description := "MTR/BM1-14 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_PE1_JAMMED1 OF F_PE[0].9 (Description := "MTR/BM1-14 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_PE2_JAMMED OF F_PE[0].8 (Description := "MTR/BM1-14 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_PE2_JAMMED1 OF F_PE[0].8 (Description := "MTR/BM1-14 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_14_VFD_FAULT OF F_C[5].9 (Description := "MTR/BM1-14 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_CS_E_STOP OF F_CS1A[0].12 (Description := "MTR/BM1-15 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_CS_E_STOP_RESET OF F_CS1A[0].13 (Description := "MTR/BM1-15 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_CTCTR_FAULT OF F_C[5].3 (Description := "MTR/BM1-15 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_ENCODER_FAULT OF F_C[5].4 (Description := "MTR/BM1-15 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_MOL OF F_C[5].1 (Description := "MTR/BM1-15 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_MSD_OFF OF F_C[5].5 (Description := "MTR/BM1-15 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_OUTSERV OF F_C[5].6 (Description := "MTR/BM1-15 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_OVRIDE OF F_C[5].7 (Description := "MTR/BM1-15 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_PE_JAMMED OF F_PE[0].10 (Description := "MTR/BM1-15 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_15_VFD_FAULT OF F_C[5].2 (Description := "MTR/BM1-15 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS1_E_STOP OF F_CS1A[0].14 (Description := "MTR/BM1-16 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS1_E_STOP1 OF F_CS1A[0].14 (Description := "MTR/BM1-16 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS1_E_STOP_RESET OF F_CS1A[0].15 (Description := "MTR/BM1-16 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS1_E_STOP_RESET1 OF F_CS1A[0].15 (Description := "MTR/BM1-16 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS2_E_STOP OF F_CS1A[0].16 (Description := "MTR/BM1-16 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS2_E_STOP1 OF F_CS1A[0].16 (Description := "MTR/BM1-16 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS2_E_STOP_RESET OF F_CS1A[0].17 (Description := "MTR/BM1-16 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CS2_E_STOP_RESET1 OF F_CS1A[0].17 (Description := "MTR/BM1-16 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_CTCTR_FAULT OF F_C[4].28 (Description := "MTR/BM1-16 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_ENCODER_FAULT OF F_C[4].29 (Description := "MTR/BM1-16 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_MOL OF F_C[4].26 (Description := "MTR/BM1-16 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_MSD_OFF OF F_C[4].30 (Description := "MTR/BM1-16 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_OUTSERV OF F_C[4].31 (Description := "MTR/BM1-16 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_OVRIDE OF F_C[5].0 (Description := "MTR/BM1-16 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_PE_JAMMED OF F_PE[0].11 (Description := "MTR/BM1-16 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_16_VFD_FAULT OF F_C[4].27 (Description := "MTR/BM1-16 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS1_E_STOP OF F_CS1A[0].18 (Description := "MTR/BM1-17 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS1_E_STOP1 OF F_CS1A[0].18 (Description := "MTR/BM1-17 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS1_E_STOP_RESET OF F_CS1A[0].19 (Description := "MTR/BM1-17 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS1_E_STOP_RESET1 OF F_CS1A[0].19 (Description := "MTR/BM1-17 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS2_E_STOP OF F_CS2A[0].2 (Description := "MTR/BM1-17 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS2_E_STOP1 OF F_CS2A[0].2 (Description := "MTR/BM1-17 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS2_E_STOP_RESET OF F_CS2A[0].3 (Description := "MTR/BM1-17 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CS2_E_STOP_RESET1 OF F_CS2A[0].3 (Description := "MTR/BM1-17 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_CTCTR_FAULT OF F_C[4].21 (Description := "MTR/BM1-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_ENCODER_FAULT OF F_C[4].22 (Description := "MTR/BM1-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_MOL OF F_C[4].19 (Description := "MTR/BM1-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_MSD_OFF OF F_C[4].23 (Description := "MTR/BM1-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_OUTSERV OF F_C[4].24 (Description := "MTR/BM1-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_OVRIDE OF F_C[4].25 (Description := "MTR/BM1-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_PE_JAMMED OF F_PE[0].12 (Description := "MTR/BM1-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_17_VFD_FAULT OF F_C[4].20 (Description := "MTR/BM1-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_CS_E_STOP OF F_CS1A[0].20 (Description := "MTR/BM1-18 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_CS_E_STOP_RESET OF F_CS1A[0].21 (Description := "MTR/BM1-18 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_CTCTR_FAULT OF F_C[4].14 (Description := "MTR/BM1-18 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_ENCODER_FAULT OF F_C[4].15 (Description := "MTR/BM1-18 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_MOL OF F_C[4].12 (Description := "MTR/BM1-18 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_MSD_OFF OF F_C[4].16 (Description := "MTR/BM1-18 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_OUTSERV OF F_C[4].17 (Description := "MTR/BM1-18 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_OVRIDE OF F_C[4].18 (Description := "MTR/BM1-18 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_PE_JAMMED OF F_PE[0].13 (Description := "MTR/BM1-18 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_18_VFD_FAULT OF F_C[4].13 (Description := "MTR/BM1-18 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_CS_E_STOP OF F_CS1A[0].22 (Description := "MTR/BM1-19 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_CS_E_STOP_RESET OF F_CS1A[0].23 (Description := "MTR/BM1-19 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_CTCTR_FAULT OF F_C[4].7 (Description := "MTR/BM1-19 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_ENCODER_FAULT OF F_C[4].8 (Description := "MTR/BM1-19 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_MOL OF F_C[4].5 (Description := "MTR/BM1-19 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_MSD_OFF OF F_C[4].9 (Description := "MTR/BM1-19 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_OUTSERV OF F_C[4].10 (Description := "MTR/BM1-19 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_OVRIDE OF F_C[4].11 (Description := "MTR/BM1-19 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_PE1_JAMMED OF F_PE[0].14 (Description := "MTR/BM1-19 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_PE1_JAMMED1 OF F_PE[0].14 (Description := "MTR/BM1-19 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_PE2_OVERHEIGHT OF F_OH[0].1 (Description := "MTR/BM1-19 PE-B Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_PE3_OVERHEIGHT OF F_OH[0].1 (Description := "MTR/BM1-19 PE3 Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_19_VFD_FAULT OF F_C[4].6 (Description := "MTR/BM1-19 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_CS_E_STOP OF F_CS4A[0].0 (Description := "MTR/BM1-20 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_CS_E_STOP_RESET OF F_CS4A[0].1 (Description := "MTR/BM1-20 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_CTCTR_FAULT OF F_C[4].0 (Description := "MTR/BM1-20 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_ENCODER_FAULT OF F_C[4].1 (Description := "MTR/BM1-20 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_MOL OF F_C[3].30 (Description := "MTR/BM1-20 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_MSD_OFF OF F_C[4].2 (Description := "MTR/BM1-20 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_OUTSERV OF F_C[4].3 (Description := "MTR/BM1-20 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_OVRIDE OF F_C[4].4 (Description := "MTR/BM1-20 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_PE_JAMMED OF F_PE[0].15 (Description := "MTR/BM1-20 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_20_VFD_FAULT OF F_C[3].31 (Description := "MTR/BM1-20 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_CTCTR_FAULT OF F_C[3].25 (Description := "MTR/BM1-21 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_ENCODER_FAULT OF F_C[3].26 (Description := "MTR/BM1-21 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_MOL OF F_C[3].23 (Description := "MTR/BM1-21 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_MSD_OFF OF F_C[3].27 (Description := "MTR/BM1-21 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_OUTSERV OF F_C[3].28 (Description := "MTR/BM1-21 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_OVRIDE OF F_C[3].29 (Description := "MTR/BM1-21 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_PE_JAMMED OF F_PE[0].16 (Description := "MTR/BM1-21 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_21_VFD_FAULT OF F_C[3].24 (Description := "MTR/BM1-21 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_CTCTR_FAULT OF F_C[3].18 (Description := "MTR/BM1-22 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_ENCODER_FAULT OF F_C[3].19 (Description := "MTR/BM1-22 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_MOL OF F_C[3].16 (Description := "MTR/BM1-22 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_MSD_OFF OF F_C[3].20 (Description := "MTR/BM1-22 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_OUTSERV OF F_C[3].21 (Description := "MTR/BM1-22 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_OVRIDE OF F_C[3].22 (Description := "MTR/BM1-22 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_PE_JAMMED OF F_PE[0].17 (Description := "MTR/BM1-22 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_22_VFD_FAULT OF F_C[3].17 (Description := "MTR/BM1-22 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS1_E_STOP OF F_CS1A[0].24 (Description := "MTR/BM1-23 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS1_E_STOP1 OF F_CS1A[0].24 (Description := "MTR/BM1-23 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS1_E_STOP_RESET OF F_CS1A[0].25 (Description := "MTR/BM1-23 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS1_E_STOP_RESET1 OF F_CS1A[0].25 (Description := "MTR/BM1-23 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS2_E_STOP OF F_CS04[0].0 (Description := "MTR/BM1-23 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS2_E_STOP1 OF F_CS04[0].0 (Description := "MTR/BM1-23 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS2_E_STOP_RESET OF F_CS04[0].1 (Description := "MTR/BM1-23 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CS2_E_STOP_RESET1 OF F_CS04[0].1 (Description := "MTR/BM1-23 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_CTCTR_FAULT OF F_C[3].11 (Description := "MTR/BM1-23 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_ENCODER_FAULT OF F_C[3].12 (Description := "MTR/BM1-23 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_MOL OF F_C[3].9 (Description := "MTR/BM1-23 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_MSD_OFF OF F_C[3].13 (Description := "MTR/BM1-23 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_OUTSERV OF F_C[3].14 (Description := "MTR/BM1-23 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_OVRIDE OF F_C[3].15 (Description := "MTR/BM1-23 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE1_JAMMED OF F_PE[0].20 (Description := "MTR/BM1-23 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE1_JAMMED1 OF F_PE[0].20 (Description := "MTR/BM1-23 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE2_JAMMED OF F_PE[0].19 (Description := "MTR/BM1-23 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE2_JAMMED1 OF F_PE[0].19 (Description := "MTR/BM1-23 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE3_JAMMED OF F_PE[0].18 (Description := "MTR/BM1-23 PE-C Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_PE3_JAMMED1 OF F_PE[0].18 (Description := "MTR/BM1-23 PE3 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_23_VFD_FAULT OF F_C[3].10 (Description := "MTR/BM1-23 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_CTCTR_FAULT OF F_C[3].4 (Description := "MTR/BM1-24 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_ENCODER_FAULT OF F_C[3].5 (Description := "MTR/BM1-24 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_MOL OF F_C[3].2 (Description := "MTR/BM1-24 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_MSD_OFF OF F_C[3].6 (Description := "MTR/BM1-24 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_OUTSERV OF F_C[3].7 (Description := "MTR/BM1-24 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_OVRIDE OF F_C[3].8 (Description := "MTR/BM1-24 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_PE_JAMMED OF F_PE[0].21 (Description := "MTR/BM1-24 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_24_VFD_FAULT OF F_C[3].3 (Description := "MTR/BM1-24 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_CS_E_STOP OF F_CS1A[0].26 (Description := "MTR/BM1-25 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_CS_E_STOP_RESET OF F_CS1A[0].27 (Description := "MTR/BM1-25 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_CTCTR_FAULT OF F_C[2].29 (Description := "MTR/BM1-25 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_ENCODER_FAULT OF F_C[2].30 (Description := "MTR/BM1-25 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_MOL OF F_C[2].27 (Description := "MTR/BM1-25 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_MSD_OFF OF F_C[2].31 (Description := "MTR/BM1-25 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_OUTSERV OF F_C[3].0 (Description := "MTR/BM1-25 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_OVRIDE OF F_C[3].1 (Description := "MTR/BM1-25 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_PE_JAMMED OF F_PE[0].22 (Description := "MTR/BM1-25 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_25_VFD_FAULT OF F_C[2].28 (Description := "MTR/BM1-25 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_CTCTR_FAULT OF F_C[2].22 (Description := "MTR/BM1-26 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_ENCODER_FAULT OF F_C[2].23 (Description := "MTR/BM1-26 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_MOL OF F_C[2].20 (Description := "MTR/BM1-26 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_MSD_OFF OF F_C[2].24 (Description := "MTR/BM1-26 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_OUTSERV OF F_C[2].25 (Description := "MTR/BM1-26 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_OVRIDE OF F_C[2].26 (Description := "MTR/BM1-26 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_PE_JAMMED OF F_PE[0].23 (Description := "MTR/BM1-26 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_26_VFD_FAULT OF F_C[2].21 (Description := "MTR/BM1-26 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS1_E_STOP OF F_CS1A[0].28 (Description := "MTR/BM1-27 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS1_E_STOP1 OF F_CS1A[0].28 (Description := "MTR/BM1-27 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS1_E_STOP_RESET OF F_CS1A[0].29 (Description := "MTR/BM1-27 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS1_E_STOP_RESET1 OF F_CS1A[0].29 (Description := "MTR/BM1-27 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS2_E_STOP OF F_CS1A[0].30 (Description := "MTR/BM1-27 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS2_E_STOP1 OF F_CS1A[0].30 (Description := "MTR/BM1-27 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS2_E_STOP_RESET OF F_CS1A[0].31 (Description := "MTR/BM1-27 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS2_E_STOP_RESET1 OF F_CS1A[0].31 (Description := "MTR/BM1-27 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS3_E_STOP OF F_CS01[0].0 (Description := "MTR/BM1-27 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS3_E_STOP1 OF F_CS01[0].2 (Description := "MTR/BM1-27 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS3_E_STOP_RESET OF F_CS01[0].1 (Description := "MTR/BM1-27 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS3_E_STOP_RESET1 OF F_CS01[0].3 (Description := "MTR/BM1-27 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS4_E_STOP OF F_CS01[0].2 (Description := "MTR/BM1-27 CS4 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS4_E_STOP1 OF F_CS03[0].30 (Description := "MTR/BM1-27 CS-D E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS4_E_STOP_RESET OF F_CS01[0].3 (Description := "MTR/BM1-27 CS4 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS4_E_STOP_RESET1 OF F_CS03[0].31 (Description := "MTR/BM1-27 CS-D E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS5_E_STOP OF F_CS13[0].0 (Description := "MTR/BM1-27 CS5 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS5_E_STOP1 OF F_CS13[0].0 (Description := "MTR/BM1-27 CS-E E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS5_E_STOP_RESET OF F_CS13[0].1 (Description := "MTR/BM1-27 CS5 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CS5_E_STOP_RESET1 OF F_CS13[0].1 (Description := "MTR/BM1-27 CS-E E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_CTCTR_FAULT OF F_C[2].15 (Description := "MTR/BM1-27 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_ENCODER_FAULT OF F_C[2].16 (Description := "MTR/BM1-27 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_MOL OF F_C[2].13 (Description := "MTR/BM1-27 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_MSD_OFF OF F_C[2].17 (Description := "MTR/BM1-27 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_OUTSERV OF F_C[2].18 (Description := "MTR/BM1-27 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_OVRIDE OF F_C[2].19 (Description := "MTR/BM1-27 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_PE1_JAMMED OF F_PE[0].25 (Description := "MTR/BM1-27 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_PE1_JAMMED1 OF F_PE[0].25 (Description := "MTR/BM1-27 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_PE2_JAMMED OF F_PE[0].24 (Description := "MTR/BM1-27 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_PE2_JAMMED1 OF F_PE[0].24 (Description := "MTR/BM1-27 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_27_RUN_FWD OF F_MISC[0].8 (Description := "MTR/BM1-27 Forward Direction",
		            RADIX := Decimal);
		F_BM1_27_RUN_REV OF F_MISC[0].9 (Description := "MTR/BM1-27 Reverse Direction",
		            RADIX := Decimal);
		F_BM1_27_VFD_FAULT OF F_C[2].14 (Description := "MTR/BM1-27 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS1_E_STOP OF F_CS2A[0].4 (Description := "MTR/BM1-28 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS1_E_STOP1 OF F_CS1A[1].0 (Description := "MTR/BM1-28 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS1_E_STOP_RESET OF F_CS2A[0].5 (Description := "MTR/BM1-28 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS1_E_STOP_RESET1 OF F_CS1A[1].1 (Description := "MTR/BM1-28 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS2_E_STOP OF F_CS1A[1].2 (Description := "MTR/BM1-28 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS2_E_STOP1 OF F_CS1A[1].2 (Description := "MTR/BM1-28 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS2_E_STOP_RESET OF F_CS1A[1].3 (Description := "MTR/BM1-28 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS2_E_STOP_RESET1 OF F_CS1A[1].3 (Description := "MTR/BM1-28 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS3_E_STOP OF F_CS01[0].4 (Description := "MTR/BM1-28 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS3_E_STOP1 OF F_CS01[0].6 (Description := "MTR/BM1-28 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS3_E_STOP_RESET OF F_CS01[0].5 (Description := "MTR/BM1-28 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS3_E_STOP_RESET1 OF F_CS01[0].7 (Description := "MTR/BM1-28 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS4_E_STOP OF F_CS13[0].6 (Description := "MTR/BM1-28 CS4 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS4_E_STOP1 OF F_CS03[1].0 (Description := "MTR/BM1-28 CS-D E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS4_E_STOP_RESET OF F_CS13[0].7 (Description := "MTR/BM1-28 CS4 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CS4_E_STOP_RESET1 OF F_CS03[1].1 (Description := "MTR/BM1-28 CS-D E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_CTCTR_FAULT OF F_C[2].8 (Description := "MTR/BM1-28 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_ENCODER_FAULT OF F_C[2].9 (Description := "MTR/BM1-28 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_MOL OF F_C[2].6 (Description := "MTR/BM1-28 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_MSD_OFF OF F_C[2].10 (Description := "MTR/BM1-28 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_OUTSERV OF F_C[2].11 (Description := "MTR/BM1-28 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_OVRIDE OF F_C[2].12 (Description := "MTR/BM1-28 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_PE1_JAMMED OF F_PE[0].27 (Description := "MTR/BM1-28 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_PE1_JAMMED1 OF F_PE[0].27 (Description := "MTR/BM1-28 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_PE2_JAMMED OF F_PE[0].26 (Description := "MTR/BM1-28 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_PE2_JAMMED1 OF F_PE[0].26 (Description := "MTR/BM1-28 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_28_RUN_FWD OF F_MISC[0].10 (Description := "MTR/BM1-28 Forward Direction",
		            RADIX := Decimal);
		F_BM1_28_RUN_REV OF F_MISC[0].11 (Description := "MTR/BM1-28 Reverse Direction",
		            RADIX := Decimal);
		F_BM1_28_VFD_FAULT OF F_C[2].7 (Description := "MTR/BM1-28 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS1_E_STOP OF F_CS1A[1].4 (Description := "MTR/BM1-29 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS1_E_STOP1 OF F_CS01[0].8 (Description := "MTR/BM1-29 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS1_E_STOP_RESET OF F_CS1A[1].5 (Description := "MTR/BM1-29 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS1_E_STOP_RESET1 OF F_CS01[0].9 (Description := "MTR/BM1-29 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS2_E_STOP OF F_CS03[1].2 (Description := "MTR/BM1-29 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS2_E_STOP1 OF F_CS1A[1].4 (Description := "MTR/BM1-29 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS2_E_STOP_RESET OF F_CS03[1].3 (Description := "MTR/BM1-29 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS2_E_STOP_RESET1 OF F_CS1A[1].5 (Description := "MTR/BM1-29 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS3_E_STOP OF F_CS13[0].2 (Description := "MTR/BM1-29 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS3_E_STOP1 OF F_CS13[0].2 (Description := "MTR/BM1-29 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS3_E_STOP_RESET OF F_CS13[0].3 (Description := "MTR/BM1-29 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS3_E_STOP_RESET1 OF F_CS13[0].3 (Description := "MTR/BM1-29 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS4_E_STOP OF F_CS01[0].10 (Description := "MTR/BM1-29 CS4 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS4_E_STOP1 OF F_CS01[0].10 (Description := "MTR/BM1-29 CS-D E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS4_E_STOP_RESET OF F_CS01[0].11 (Description := "MTR/BM1-29 CS4 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CS4_E_STOP_RESET1 OF F_CS01[0].11 (Description := "MTR/BM1-29 CS-D E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_CTCTR_FAULT OF F_C[2].1 (Description := "MTR/BM1-29 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_ENCODER_FAULT OF F_C[2].2 (Description := "MTR/BM1-29 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_MOL OF F_C[1].31 (Description := "MTR/BM1-29 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_MSD_OFF OF F_C[2].3 (Description := "MTR/BM1-29 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_OUTSERV OF F_C[2].4 (Description := "MTR/BM1-29 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_OVRIDE OF F_C[2].5 (Description := "MTR/BM1-29 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_PE1_JAMMED OF F_PE[0].29 (Description := "MTR/BM1-29 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_PE1_JAMMED1 OF F_PE[0].29 (Description := "MTR/BM1-29 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_PE2_JAMMED OF F_PE[0].28 (Description := "MTR/BM1-29 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_PE2_JAMMED1 OF F_PE[0].28 (Description := "MTR/BM1-29 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_29_RUN_FWD OF F_MISC[0].12 (Description := "MTR/BM1-29 Forward Direction",
		            RADIX := Decimal);
		F_BM1_29_RUN_REV OF F_MISC[0].13 (Description := "MTR/BM1-29 Reverse Direction",
		            RADIX := Decimal);
		F_BM1_29_VFD_FAULT OF F_C[2].0 (Description := "MTR/BM1-29 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS1_E_STOP OF F_CS4A[0].2 (Description := "MTR/BM1-30 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS1_E_STOP1 OF F_CS4A[0].2 (Description := "MTR/BM1-30 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS1_E_STOP_RESET OF F_CS4A[0].3 (Description := "MTR/BM1-30 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS1_E_STOP_RESET1 OF F_CS4A[0].3 (Description := "MTR/BM1-30 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS2_E_STOP OF F_CS1A[1].6 (Description := "MTR/BM1-30 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS2_E_STOP1 OF F_CS13[0].4 (Description := "MTR/BM1-30 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS2_E_STOP_RESET OF F_CS1A[1].7 (Description := "MTR/BM1-30 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS2_E_STOP_RESET1 OF F_CS13[0].5 (Description := "MTR/BM1-30 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS3_E_STOP OF F_CS01[0].12 (Description := "MTR/BM1-30 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS3_E_STOP1 OF F_CS01[0].12 (Description := "MTR/BM1-30 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS3_E_STOP_RESET OF F_CS01[0].13 (Description := "MTR/BM1-30 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS3_E_STOP_RESET1 OF F_CS01[0].13 (Description := "MTR/BM1-30 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS4_E_STOP OF F_CS1A[1].6 (Description := "MTR/BM1-30 CS4 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS4_E_STOP1 OF F_CS03[1].4 (Description := "MTR/BM1-30 CS-D E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS4_E_STOP_RESET OF F_CS1A[1].7 (Description := "MTR/BM1-30 CS4 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CS4_E_STOP_RESET1 OF F_CS03[1].5 (Description := "MTR/BM1-30 CS-D E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_CTCTR_FAULT OF F_C[1].26 (Description := "MTR/BM1-30 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_ENCODER_FAULT OF F_C[1].27 (Description := "MTR/BM1-30 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_MOL OF F_C[1].24 (Description := "MTR/BM1-30 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_MSD_OFF OF F_C[1].28 (Description := "MTR/BM1-30 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_OUTSERV OF F_C[1].29 (Description := "MTR/BM1-30 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_OVRIDE OF F_C[1].30 (Description := "MTR/BM1-30 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE1_JAMMED OF F_PE[0].31 (Description := "MTR/BM1-30 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE1_JAMMED1 OF F_PE[0].31 (Description := "MTR/BM1-30 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE2_OVERHEIGHT OF F_OH[0].2 (Description := "MTR/BM1-30 PE-B Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE3_JAMMED OF F_PE[0].30 (Description := "MTR/BM1-30 PE-C Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE3_JAMMED1 OF F_PE[0].30 (Description := "MTR/BM1-30 PE3 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_PE3_OVERHEIGHT OF F_OH[0].2 (Description := "MTR/BM1-30 PE3 Overheight",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_30_RUN_FWD OF F_MISC[0].14 (Description := "MTR/BM1-30 Forward Direction",
		            RADIX := Decimal);
		F_BM1_30_RUN_REV OF F_MISC[0].15 (Description := "MTR/BM1-30 Reverse Direction",
		            RADIX := Decimal);
		F_BM1_30_VFD_FAULT OF F_C[1].25 (Description := "MTR/BM1-30 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_CTCTR_FAULT OF F_C[1].19 (Description := "MTR/BM1-31 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_ENCODER_FAULT OF F_C[1].20 (Description := "MTR/BM1-31 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_MOL OF F_C[1].17 (Description := "MTR/BM1-31 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_MSD_OFF OF F_C[1].21 (Description := "MTR/BM1-31 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_OUTSERV OF F_C[1].22 (Description := "MTR/BM1-31 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_OVRIDE OF F_C[1].23 (Description := "MTR/BM1-31 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_PE_JAMMED OF F_PE[1].0 (Description := "MTR/BM1-31 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_31_VFD_FAULT OF F_C[1].18 (Description := "MTR/BM1-31 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_CTCTR_FAULT OF F_C[1].12 (Description := "MTR/BM1-32 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_ENCODER_FAULT OF F_C[1].13 (Description := "MTR/BM1-32 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_MOL OF F_C[1].10 (Description := "MTR/BM1-32 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_MSD_OFF OF F_C[1].14 (Description := "MTR/BM1-32 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_OUTSERV OF F_C[1].15 (Description := "MTR/BM1-32 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_OVRIDE OF F_C[1].16 (Description := "MTR/BM1-32 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_PE_JAMMED OF F_PE[1].1 (Description := "MTR/BM1-32 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_32_VFD_FAULT OF F_C[1].11 (Description := "MTR/BM1-32 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_CTCTR_FAULT OF F_C[1].5 (Description := "MTR/BM1-33 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_ENCODER_FAULT OF F_C[1].6 (Description := "MTR/BM1-33 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_MOL OF F_C[1].3 (Description := "MTR/BM1-33 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_MSD_OFF OF F_C[1].7 (Description := "MTR/BM1-33 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_OUTSERV OF F_C[1].8 (Description := "MTR/BM1-33 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_OVRIDE OF F_C[1].9 (Description := "MTR/BM1-33 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_PE_JAMMED OF F_PE[1].2 (Description := "MTR/BM1-33 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_33_VFD_FAULT OF F_C[1].4 (Description := "MTR/BM1-33 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_CS_E_STOP OF F_CS1A[1].8 (Description := "MTR/BM1-34 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_CS_E_STOP_RESET OF F_CS1A[1].9 (Description := "MTR/BM1-34 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_CTCTR_FAULT OF F_C[0].30 (Description := "MTR/BM1-34 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_ENCODER_FAULT OF F_C[0].31 (Description := "MTR/BM1-34 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_MOL OF F_C[0].28 (Description := "MTR/BM1-34 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_MSD_OFF OF F_C[1].0 (Description := "MTR/BM1-34 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_OUTSERV OF F_C[1].1 (Description := "MTR/BM1-34 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_OVRIDE OF F_C[1].2 (Description := "MTR/BM1-34 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_PE_JAMMED OF F_PE[1].3 (Description := "MTR/BM1-34 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_34_VFD_FAULT OF F_C[0].29 (Description := "MTR/BM1-34 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_CTCTR_FAULT OF F_C[0].23 (Description := "MTR/BM1-35 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_ENCODER_FAULT OF F_C[0].24 (Description := "MTR/BM1-35 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_MOL OF F_C[0].21 (Description := "MTR/BM1-35 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_MSD_OFF OF F_C[0].25 (Description := "MTR/BM1-35 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_OUTSERV OF F_C[0].26 (Description := "MTR/BM1-35 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_OVRIDE OF F_C[0].27 (Description := "MTR/BM1-35 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_PE_JAMMED OF F_PE[1].4 (Description := "MTR/BM1-35 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_35_VFD_FAULT OF F_C[0].22 (Description := "MTR/BM1-35 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_CTCTR_FAULT OF F_C[0].16 (Description := "MTR/BM1-36 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_ENCODER_FAULT OF F_C[0].17 (Description := "MTR/BM1-36 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_MOL OF F_C[0].14 (Description := "MTR/BM1-36 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_MSD_OFF OF F_C[0].18 (Description := "MTR/BM1-36 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_OUTSERV OF F_C[0].19 (Description := "MTR/BM1-36 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_OVRIDE OF F_C[0].20 (Description := "MTR/BM1-36 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_PE_JAMMED OF F_PE[1].5 (Description := "MTR/BM1-36 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_36_VFD_FAULT OF F_C[0].15 (Description := "MTR/BM1-36 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_CTCTR_FAULT OF F_C[0].9 (Description := "MTR/BM1-37 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_ENCODER_FAULT OF F_C[0].10 (Description := "MTR/BM1-37 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_MOL OF F_C[0].7 (Description := "MTR/BM1-37 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_MSD_OFF OF F_C[0].11 (Description := "MTR/BM1-37 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_OUTSERV OF F_C[0].12 (Description := "MTR/BM1-37 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_OVRIDE OF F_C[0].13 (Description := "MTR/BM1-37 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_PE_JAMMED OF F_PE[1].6 (Description := "MTR/BM1-37 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_37_VFD_FAULT OF F_C[0].8 (Description := "MTR/BM1-37 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_CS_E_STOP OF F_CS1A[1].10 (Description := "MTR/BM1-38 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_CS_E_STOP_RESET OF F_CS1A[1].11 (Description := "MTR/BM1-38 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_CTCTR_FAULT OF F_C[0].2 (Description := "MTR/BM1-38 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_ENCODER_FAULT OF F_C[0].3 (Description := "MTR/BM1-38 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_MOL OF F_C[0].0 (Description := "MTR/BM1-38 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_MSD_OFF OF F_C[0].4 (Description := "MTR/BM1-38 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_OUTSERV OF F_C[0].5 (Description := "MTR/BM1-38 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_OVRIDE OF F_C[0].6 (Description := "MTR/BM1-38 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_PE_JAMMED OF F_PE[1].7 (Description := "MTR/BM1-38 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BM1_38_VFD_FAULT OF F_C[0].1 (Description := "MTR/BM1-38 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_BSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_C : DINT[31] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,131072,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		F_C2T_12_CTCTR_FAULT OF F_C[12].24 (Description := "MTR/C2T-12 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_ENCODER_FAULT OF F_C[12].25 (Description := "MTR/C2T-12 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_MOL OF F_C[12].22 (Description := "MTR/C2T-12 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_MSD_OFF OF F_C[12].26 (Description := "MTR/C2T-12 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_OUTSERV OF F_C[12].27 (Description := "MTR/C2T-12 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_OVRIDE OF F_C[12].28 (Description := "MTR/C2T-12 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_PE_JAMMED OF F_PE[1].28 (Description := "MTR/C2T-12 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_12_VFD_FAULT OF F_C[12].23 (Description := "MTR/C2T-12 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_CS_E_STOP OF F_CS04[0].12 (Description := "MTR/C2T-13 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_CS_E_STOP_RESET OF F_CS04[0].13 (Description := "MTR/C2T-13 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_CTCTR_FAULT OF F_C[12].17 (Description := "MTR/C2T-13 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_ENCODER_FAULT OF F_C[12].18 (Description := "MTR/C2T-13 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_MOL OF F_C[12].15 (Description := "MTR/C2T-13 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_MSD_OFF OF F_C[12].19 (Description := "MTR/C2T-13 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_OUTSERV OF F_C[12].20 (Description := "MTR/C2T-13 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_OVRIDE OF F_C[12].21 (Description := "MTR/C2T-13 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_PE_JAMMED OF F_PE[1].27 (Description := "MTR/C2T-13 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_13_VFD_FAULT OF F_C[12].16 (Description := "MTR/C2T-13 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_CTCTR_FAULT OF F_C[12].10 (Description := "MTR/C2T-14 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_ENCODER_FAULT OF F_C[12].11 (Description := "MTR/C2T-14 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_MOL OF F_C[12].8 (Description := "MTR/C2T-14 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_MSD_OFF OF F_C[12].12 (Description := "MTR/C2T-14 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_OUTSERV OF F_C[12].13 (Description := "MTR/C2T-14 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_OVRIDE OF F_C[12].14 (Description := "MTR/C2T-14 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_PE_JAMMED OF F_PE[1].26 (Description := "MTR/C2T-14 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_14_VFD_FAULT OF F_C[12].9 (Description := "MTR/C2T-14 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_CTCTR_FAULT OF F_C[12].3 (Description := "MTR/C2T-15 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_ENCODER_FAULT OF F_C[12].4 (Description := "MTR/C2T-15 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_MOL OF F_C[12].1 (Description := "MTR/C2T-15 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_MSD_OFF OF F_C[12].5 (Description := "MTR/C2T-15 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_OUTSERV OF F_C[12].6 (Description := "MTR/C2T-15 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_OVRIDE OF F_C[12].7 (Description := "MTR/C2T-15 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_PE_JAMMED OF F_PE[1].25 (Description := "MTR/C2T-15 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_15_VFD_FAULT OF F_C[12].2 (Description := "MTR/C2T-15 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_CTCTR_FAULT OF F_C[11].28 (Description := "MTR/C2T-16 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_ENCODER_FAULT OF F_C[11].29 (Description := "MTR/C2T-16 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_MOL OF F_C[11].26 (Description := "MTR/C2T-16 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_MSD_OFF OF F_C[11].30 (Description := "MTR/C2T-16 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_OUTSERV OF F_C[11].31 (Description := "MTR/C2T-16 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_OVRIDE OF F_C[12].0 (Description := "MTR/C2T-16 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_PE_JAMMED OF F_PE[1].24 (Description := "MTR/C2T-16 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_16_VFD_FAULT OF F_C[11].27 (Description := "MTR/C2T-16 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_CS_E_STOP OF F_CS05[0].2 (Description := "MTR/C2T-17 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_CS_E_STOP_RESET OF F_CS05[0].3 (Description := "MTR/C2T-17 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_CTCTR_FAULT OF F_C[11].21 (Description := "MTR/C2T-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_ENCODER_FAULT OF F_C[11].22 (Description := "MTR/C2T-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_JOG_REVERSE OF F_MISC[0].3 (Description := "MTR/C2T-17 Jog Reverse",
		            RADIX := Decimal);
		F_C2T_17_MOL OF F_C[11].19 (Description := "MTR/C2T-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_MSD_OFF OF F_C[11].23 (Description := "MTR/C2T-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_OUTSERV OF F_C[11].24 (Description := "MTR/C2T-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_OVRIDE OF F_C[11].25 (Description := "MTR/C2T-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_PE_JAMMED OF F_PE[1].23 (Description := "MTR/C2T-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C2T_17_VFD_FAULT OF F_C[11].20 (Description := "MTR/C2T-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_C4_09_ENCODER_FAULT OF F_MISC[0].1 (Description := "MTR/C4-09 Encoder Fault",
		            RADIX := Decimal);
		F_CCOM : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CL12T_35_CTCTR_FAULT OF F_C[30].22 (Description := "MTR/CL12T-35 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_ENCODER_FAULT OF F_C[30].23 (Description := "MTR/CL12T-35 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_MOL OF F_C[30].20 (Description := "MTR/CL12T-35 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_MSD_OFF OF F_C[30].24 (Description := "MTR/CL12T-35 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_OUTSERV OF F_C[30].25 (Description := "MTR/CL12T-35 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_OVRIDE OF F_C[30].26 (Description := "MTR/CL12T-35 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_PE_JAMMED OF F_PE[4].14 (Description := "MTR/CL12T-35 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_35_VFD_FAULT OF F_C[30].21 (Description := "MTR/CL12T-35 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_CS_E_STOP OF F_CS05[0].10 (Description := "MTR/CL12T-36 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_CS_E_STOP_RESET OF F_CS05[0].11 (Description := "MTR/CL12T-36 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_CTCTR_FAULT OF F_C[30].15 (Description := "MTR/CL12T-36 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_ENCODER_FAULT OF F_C[30].16 (Description := "MTR/CL12T-36 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_JOG_REVERSE OF F_MISC[0].7 (Description := "MTR/CL12T-36 Jog Reverse",
		            RADIX := Decimal);
		F_CL12T_36_MOL OF F_C[30].13 (Description := "MTR/CL12T-36 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_MSD_OFF OF F_C[30].17 (Description := "MTR/CL12T-36 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_OUTSERV OF F_C[30].18 (Description := "MTR/CL12T-36 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_OVRIDE OF F_C[30].19 (Description := "MTR/CL12T-36 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_PE_JAMMED OF F_PE[4].13 (Description := "MTR/CL12T-36 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL12T_36_VFD_FAULT OF F_C[30].14 (Description := "MTR/CL12T-36 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS1_E_STOP OF F_CS03[0].16 (Description := "MTR/CL1T-01 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS1_E_STOP1 OF F_CS03[0].16 (Description := "MTR/CL1T-01 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS1_E_STOP_RESET OF F_CS03[0].17 (Description := "MTR/CL1T-01 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS1_E_STOP_RESET1 OF F_CS03[0].17 (Description := "MTR/CL1T-01 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS2_E_STOP OF F_CS03[0].18 (Description := "MTR/CL1T-01 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS2_E_STOP1 OF F_CS03[0].18 (Description := "MTR/CL1T-01 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS2_E_STOP_RESET OF F_CS03[0].19 (Description := "MTR/CL1T-01 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS2_E_STOP_RESET1 OF F_CS03[0].19 (Description := "MTR/CL1T-01 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS3_E_STOP OF F_CS03[0].20 (Description := "MTR/CL1T-01 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS3_E_STOP1 OF F_CS03[0].20 (Description := "MTR/CL1T-01 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS3_E_STOP_RESET OF F_CS03[0].21 (Description := "MTR/CL1T-01 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CS3_E_STOP_RESET1 OF F_CS03[0].21 (Description := "MTR/CL1T-01 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_CTCTR_FAULT OF F_C[26].17 (Description := "MTR/CL1T-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_ENCODER_FAULT OF F_C[26].18 (Description := "MTR/CL1T-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_MOL OF F_C[26].15 (Description := "MTR/CL1T-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_MSD_OFF OF F_C[26].19 (Description := "MTR/CL1T-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_OUTSERV OF F_C[26].20 (Description := "MTR/CL1T-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_OVRIDE OF F_C[26].21 (Description := "MTR/CL1T-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_PE_JAMMED OF F_PE[3].28 (Description := "MTR/CL1T-01 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_01_VFD_FAULT OF F_C[26].16 (Description := "MTR/CL1T-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS1_E_STOP OF F_CS04[1].6 (Description := "MTR/CL1T-02 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS1_E_STOP1 OF F_CS04[1].6 (Description := "MTR/CL1T-02 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS1_E_STOP_RESET OF F_CS04[1].7 (Description := "MTR/CL1T-02 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS1_E_STOP_RESET1 OF F_CS04[1].7 (Description := "MTR/CL1T-02 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS2_E_STOP OF F_CS03[0].22 (Description := "MTR/CL1T-02 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS2_E_STOP1 OF F_CS03[0].22 (Description := "MTR/CL1T-02 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS2_E_STOP_RESET OF F_CS03[0].23 (Description := "MTR/CL1T-02 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS2_E_STOP_RESET1 OF F_CS03[0].23 (Description := "MTR/CL1T-02 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS3_E_STOP OF F_CS03[0].24 (Description := "MTR/CL1T-02 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS3_E_STOP1 OF F_CS03[0].24 (Description := "MTR/CL1T-02 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS3_E_STOP_RESET OF F_CS03[0].25 (Description := "MTR/CL1T-02 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CS3_E_STOP_RESET1 OF F_CS03[0].25 (Description := "MTR/CL1T-02 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_CTCTR_FAULT OF F_C[26].10 (Description := "MTR/CL1T-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_ENCODER_FAULT OF F_C[26].11 (Description := "MTR/CL1T-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_MOL OF F_C[26].8 (Description := "MTR/CL1T-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_MSD_OFF OF F_C[26].12 (Description := "MTR/CL1T-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_OUTSERV OF F_C[26].13 (Description := "MTR/CL1T-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_OVRIDE OF F_C[26].14 (Description := "MTR/CL1T-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_PE_JAMMED OF F_PE[3].27 (Description := "MTR/CL1T-02 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_02_VFD_FAULT OF F_C[26].9 (Description := "MTR/CL1T-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_CTCTR_FAULT OF F_C[26].3 (Description := "MTR/CL1T-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_ENCODER_FAULT OF F_C[26].4 (Description := "MTR/CL1T-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_MOL OF F_C[26].1 (Description := "MTR/CL1T-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_MSD_OFF OF F_C[26].5 (Description := "MTR/CL1T-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_OUTSERV OF F_C[26].6 (Description := "MTR/CL1T-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_OVRIDE OF F_C[26].7 (Description := "MTR/CL1T-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_PE_JAMMED OF F_PE[3].26 (Description := "MTR/CL1T-03 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_03_VFD_FAULT OF F_C[26].2 (Description := "MTR/CL1T-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_CTCTR_FAULT OF F_C[25].28 (Description := "MTR/CL1T-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_ENCODER_FAULT OF F_C[25].29 (Description := "MTR/CL1T-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_MOL OF F_C[25].26 (Description := "MTR/CL1T-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_MSD_OFF OF F_C[25].30 (Description := "MTR/CL1T-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_OUTSERV OF F_C[25].31 (Description := "MTR/CL1T-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_OVRIDE OF F_C[26].0 (Description := "MTR/CL1T-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_PE_JAMMED OF F_PE[3].25 (Description := "MTR/CL1T-04 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_04_VFD_FAULT OF F_C[25].27 (Description := "MTR/CL1T-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_CS_E_STOP OF F_CS04[1].8 (Description := "MTR/CL1T-05 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_CS_E_STOP_RESET OF F_CS04[1].9 (Description := "MTR/CL1T-05 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_CTCTR_FAULT OF F_C[25].21 (Description := "MTR/CL1T-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_ENCODER_FAULT OF F_C[25].22 (Description := "MTR/CL1T-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_MOL OF F_C[25].19 (Description := "MTR/CL1T-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_MSD_OFF OF F_C[25].23 (Description := "MTR/CL1T-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_OUTSERV OF F_C[25].24 (Description := "MTR/CL1T-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_OVRIDE OF F_C[25].25 (Description := "MTR/CL1T-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_PE_JAMMED OF F_PE[3].24 (Description := "MTR/CL1T-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_05_VFD_FAULT OF F_C[25].20 (Description := "MTR/CL1T-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_CTCTR_FAULT OF F_C[25].14 (Description := "MTR/CL1T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_ENCODER_FAULT OF F_C[25].15 (Description := "MTR/CL1T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_MOL OF F_C[25].12 (Description := "MTR/CL1T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_MSD_OFF OF F_C[25].16 (Description := "MTR/CL1T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_OUTSERV OF F_C[25].17 (Description := "MTR/CL1T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_OVRIDE OF F_C[25].18 (Description := "MTR/CL1T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_PE_JAMMED OF F_PE[3].23 (Description := "MTR/CL1T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_06_VFD_FAULT OF F_C[25].13 (Description := "MTR/CL1T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_CTCTR_FAULT OF F_C[25].7 (Description := "MTR/CL1T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_ENCODER_FAULT OF F_C[25].8 (Description := "MTR/CL1T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_MOL OF F_C[25].5 (Description := "MTR/CL1T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_MSD_OFF OF F_C[25].9 (Description := "MTR/CL1T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_OUTSERV OF F_C[25].10 (Description := "MTR/CL1T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_OVRIDE OF F_C[25].11 (Description := "MTR/CL1T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_PE_JAMMED OF F_PE[3].22 (Description := "MTR/CL1T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_07_VFD_FAULT OF F_C[25].6 (Description := "MTR/CL1T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_CTCTR_FAULT OF F_C[25].0 (Description := "MTR/CL1T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_ENCODER_FAULT OF F_C[25].1 (Description := "MTR/CL1T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_MOL OF F_C[24].30 (Description := "MTR/CL1T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_MSD_OFF OF F_C[25].2 (Description := "MTR/CL1T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_OUTSERV OF F_C[25].3 (Description := "MTR/CL1T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_OVRIDE OF F_C[25].4 (Description := "MTR/CL1T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_PE_JAMMED OF F_PE[3].21 (Description := "MTR/CL1T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_08_VFD_FAULT OF F_C[24].31 (Description := "MTR/CL1T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_CS_E_STOP OF F_CS04[1].10 (Description := "MTR/CL1T-09 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_CS_E_STOP_RESET OF F_CS04[1].11 (Description := "MTR/CL1T-09 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_CTCTR_FAULT OF F_C[24].25 (Description := "MTR/CL1T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_ENCODER_FAULT OF F_C[24].26 (Description := "MTR/CL1T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_MOL OF F_C[24].23 (Description := "MTR/CL1T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_MSD_OFF OF F_C[24].27 (Description := "MTR/CL1T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_OUTSERV OF F_C[24].28 (Description := "MTR/CL1T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_OVRIDE OF F_C[24].29 (Description := "MTR/CL1T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_PE_JAMMED OF F_PE[3].20 (Description := "MTR/CL1T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_09_VFD_FAULT OF F_C[24].24 (Description := "MTR/CL1T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_CTCTR_FAULT OF F_C[24].18 (Description := "MTR/CL1T-10 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_ENCODER_FAULT OF F_C[24].19 (Description := "MTR/CL1T-10 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_MOL OF F_C[24].16 (Description := "MTR/CL1T-10 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_MSD_OFF OF F_C[24].20 (Description := "MTR/CL1T-10 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_OUTSERV OF F_C[24].21 (Description := "MTR/CL1T-10 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_OVRIDE OF F_C[24].22 (Description := "MTR/CL1T-10 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_PE_JAMMED OF F_PE[3].19 (Description := "MTR/CL1T-10 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_10_VFD_FAULT OF F_C[24].17 (Description := "MTR/CL1T-10 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_CS_E_STOP OF F_CS04[1].12 (Description := "MTR/CL1T-11 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_CS_E_STOP_RESET OF F_CS04[1].13 (Description := "MTR/CL1T-11 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_CTCTR_FAULT OF F_C[24].11 (Description := "MTR/CL1T-11 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_ENCODER_FAULT OF F_C[24].12 (Description := "MTR/CL1T-11 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_MOL OF F_C[24].9 (Description := "MTR/CL1T-11 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_MSD_OFF OF F_C[24].13 (Description := "MTR/CL1T-11 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_OUTSERV OF F_C[24].14 (Description := "MTR/CL1T-11 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_OVRIDE OF F_C[24].15 (Description := "MTR/CL1T-11 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_PE_JAMMED OF F_PE[3].18 (Description := "MTR/CL1T-11 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_11_VFD_FAULT OF F_C[24].10 (Description := "MTR/CL1T-11 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_CS_E_STOP OF F_CS04[1].14 (Description := "MTR/CL1T-12 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_CS_E_STOP_RESET OF F_CS04[1].15 (Description := "MTR/CL1T-12 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_CTCTR_FAULT OF F_C[24].4 (Description := "MTR/CL1T-12 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_ENCODER_FAULT OF F_C[24].5 (Description := "MTR/CL1T-12 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_MOL OF F_C[24].2 (Description := "MTR/CL1T-12 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_MSD_OFF OF F_C[24].6 (Description := "MTR/CL1T-12 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_OUTSERV OF F_C[24].7 (Description := "MTR/CL1T-12 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_OVRIDE OF F_C[24].8 (Description := "MTR/CL1T-12 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_PE_JAMMED OF F_PE[3].17 (Description := "MTR/CL1T-12 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_12_VFD_FAULT OF F_C[24].3 (Description := "MTR/CL1T-12 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_CTCTR_FAULT OF F_C[23].29 (Description := "MTR/CL1T-13 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_ENCODER_FAULT OF F_C[23].30 (Description := "MTR/CL1T-13 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_MOL OF F_C[23].27 (Description := "MTR/CL1T-13 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_MSD_OFF OF F_C[23].31 (Description := "MTR/CL1T-13 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_OUTSERV OF F_C[24].0 (Description := "MTR/CL1T-13 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_OVRIDE OF F_C[24].1 (Description := "MTR/CL1T-13 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_PE_JAMMED OF F_PE[3].16 (Description := "MTR/CL1T-13 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_13_VFD_FAULT OF F_C[23].28 (Description := "MTR/CL1T-13 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_CTCTR_FAULT OF F_C[23].22 (Description := "MTR/CL1T-14 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_ENCODER_FAULT OF F_C[23].23 (Description := "MTR/CL1T-14 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_MOL OF F_C[23].20 (Description := "MTR/CL1T-14 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_MSD_OFF OF F_C[23].24 (Description := "MTR/CL1T-14 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_OUTSERV OF F_C[23].25 (Description := "MTR/CL1T-14 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_OVRIDE OF F_C[23].26 (Description := "MTR/CL1T-14 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_PE_JAMMED OF F_PE[3].15 (Description := "MTR/CL1T-14 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_14_VFD_FAULT OF F_C[23].21 (Description := "MTR/CL1T-14 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_CTCTR_FAULT OF F_C[23].15 (Description := "MTR/CL1T-15 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_ENCODER_FAULT OF F_C[23].16 (Description := "MTR/CL1T-15 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_MOL OF F_C[23].13 (Description := "MTR/CL1T-15 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_MSD_OFF OF F_C[23].17 (Description := "MTR/CL1T-15 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_OUTSERV OF F_C[23].18 (Description := "MTR/CL1T-15 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_OVRIDE OF F_C[23].19 (Description := "MTR/CL1T-15 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_PE_JAMMED OF F_PE[3].14 (Description := "MTR/CL1T-15 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_15_VFD_FAULT OF F_C[23].14 (Description := "MTR/CL1T-15 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_CS_E_STOP OF F_CS04[1].16 (Description := "MTR/CL1T-16 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_CS_E_STOP_RESET OF F_CS04[1].17 (Description := "MTR/CL1T-16 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_CTCTR_FAULT OF F_C[23].8 (Description := "MTR/CL1T-16 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_ENCODER_FAULT OF F_C[23].9 (Description := "MTR/CL1T-16 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_MOL OF F_C[23].6 (Description := "MTR/CL1T-16 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_MSD_OFF OF F_C[23].10 (Description := "MTR/CL1T-16 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_OUTSERV OF F_C[23].11 (Description := "MTR/CL1T-16 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_OVRIDE OF F_C[23].12 (Description := "MTR/CL1T-16 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_PE_JAMMED OF F_PE[3].13 (Description := "MTR/CL1T-16 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_16_VFD_FAULT OF F_C[23].7 (Description := "MTR/CL1T-16 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_CTCTR_FAULT OF F_C[23].1 (Description := "MTR/CL1T-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_ENCODER_FAULT OF F_C[23].2 (Description := "MTR/CL1T-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_MOL OF F_C[22].31 (Description := "MTR/CL1T-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_MSD_OFF OF F_C[23].3 (Description := "MTR/CL1T-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_OUTSERV OF F_C[23].4 (Description := "MTR/CL1T-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_OVRIDE OF F_C[23].5 (Description := "MTR/CL1T-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_PE_JAMMED OF F_PE[3].12 (Description := "MTR/CL1T-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_17_VFD_FAULT OF F_C[23].0 (Description := "MTR/CL1T-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_CTCTR_FAULT OF F_C[22].26 (Description := "MTR/CL1T-18 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_ENCODER_FAULT OF F_C[22].27 (Description := "MTR/CL1T-18 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_MOL OF F_C[22].24 (Description := "MTR/CL1T-18 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_MSD_OFF OF F_C[22].28 (Description := "MTR/CL1T-18 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_OUTSERV OF F_C[22].29 (Description := "MTR/CL1T-18 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_OVRIDE OF F_C[22].30 (Description := "MTR/CL1T-18 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_PE_JAMMED OF F_PE[3].11 (Description := "MTR/CL1T-18 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_18_VFD_FAULT OF F_C[22].25 (Description := "MTR/CL1T-18 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_CTCTR_FAULT OF F_C[22].19 (Description := "MTR/CL1T-19 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_ENCODER_FAULT OF F_C[22].20 (Description := "MTR/CL1T-19 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_MOL OF F_C[22].17 (Description := "MTR/CL1T-19 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_MSD_OFF OF F_C[22].21 (Description := "MTR/CL1T-19 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_OUTSERV OF F_C[22].22 (Description := "MTR/CL1T-19 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_OVRIDE OF F_C[22].23 (Description := "MTR/CL1T-19 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_PE_JAMMED OF F_PE[3].10 (Description := "MTR/CL1T-19 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_19_VFD_FAULT OF F_C[22].18 (Description := "MTR/CL1T-19 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_CS_E_STOP OF F_CS04[1].18 (Description := "MTR/CL1T-20 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_CS_E_STOP_RESET OF F_CS04[1].19 (Description := "MTR/CL1T-20 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_CTCTR_FAULT OF F_C[22].12 (Description := "MTR/CL1T-20 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_ENCODER_FAULT OF F_C[22].13 (Description := "MTR/CL1T-20 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_MOL OF F_C[22].10 (Description := "MTR/CL1T-20 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_MSD_OFF OF F_C[22].14 (Description := "MTR/CL1T-20 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_OUTSERV OF F_C[22].15 (Description := "MTR/CL1T-20 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_OVRIDE OF F_C[22].16 (Description := "MTR/CL1T-20 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_PE_JAMMED OF F_PE[3].9 (Description := "MTR/CL1T-20 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_20_VFD_FAULT OF F_C[22].11 (Description := "MTR/CL1T-20 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_CTCTR_FAULT OF F_C[22].5 (Description := "MTR/CL1T-21 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_ENCODER_FAULT OF F_C[22].6 (Description := "MTR/CL1T-21 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_MOL OF F_C[22].3 (Description := "MTR/CL1T-21 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_MSD_OFF OF F_C[22].7 (Description := "MTR/CL1T-21 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_OUTSERV OF F_C[22].8 (Description := "MTR/CL1T-21 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_OVRIDE OF F_C[22].9 (Description := "MTR/CL1T-21 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_PE_JAMMED OF F_PE[3].8 (Description := "MTR/CL1T-21 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_21_VFD_FAULT OF F_C[22].4 (Description := "MTR/CL1T-21 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_CTCTR_FAULT OF F_C[21].30 (Description := "MTR/CL1T-22 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_ENCODER_FAULT OF F_C[21].31 (Description := "MTR/CL1T-22 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_MOL OF F_C[21].28 (Description := "MTR/CL1T-22 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_MSD_OFF OF F_C[22].0 (Description := "MTR/CL1T-22 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_OUTSERV OF F_C[22].1 (Description := "MTR/CL1T-22 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_OVRIDE OF F_C[22].2 (Description := "MTR/CL1T-22 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_22_VFD_FAULT OF F_C[21].29 (Description := "MTR/CL1T-22 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_CTCTR_FAULT OF F_C[21].23 (Description := "MTR/CL1T-23 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_ENCODER_FAULT OF F_C[21].24 (Description := "MTR/CL1T-23 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_MOL OF F_C[21].21 (Description := "MTR/CL1T-23 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_MSD_OFF OF F_C[21].25 (Description := "MTR/CL1T-23 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_OUTSERV OF F_C[21].26 (Description := "MTR/CL1T-23 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_OVRIDE OF F_C[21].27 (Description := "MTR/CL1T-23 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_PE_JAMMED OF F_PE[3].7 (Description := "MTR/CL1T-23 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_23_VFD_FAULT OF F_C[21].22 (Description := "MTR/CL1T-23 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_CS_E_STOP OF F_CS04[1].20 (Description := "MTR/CL1T-24 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_CS_E_STOP_RESET OF F_CS04[1].21 (Description := "MTR/CL1T-24 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_CTCTR_FAULT OF F_C[21].16 (Description := "MTR/CL1T-24 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_ENCODER_FAULT OF F_C[21].17 (Description := "MTR/CL1T-24 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_MOL OF F_C[21].14 (Description := "MTR/CL1T-24 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_MSD_OFF OF F_C[21].18 (Description := "MTR/CL1T-24 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_OUTSERV OF F_C[21].19 (Description := "MTR/CL1T-24 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_OVRIDE OF F_C[21].20 (Description := "MTR/CL1T-24 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_PE_JAMMED OF F_PE[3].6 (Description := "MTR/CL1T-24 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_24_VFD_FAULT OF F_C[21].15 (Description := "MTR/CL1T-24 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_CTCTR_FAULT OF F_C[21].9 (Description := "MTR/CL1T-25 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_ENCODER_FAULT OF F_C[21].10 (Description := "MTR/CL1T-25 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_MOL OF F_C[21].7 (Description := "MTR/CL1T-25 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_MSD_OFF OF F_C[21].11 (Description := "MTR/CL1T-25 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_OUTSERV OF F_C[21].12 (Description := "MTR/CL1T-25 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_OVRIDE OF F_C[21].13 (Description := "MTR/CL1T-25 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_25_VFD_FAULT OF F_C[21].8 (Description := "MTR/CL1T-25 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_CTCTR_FAULT OF F_C[21].2 (Description := "MTR/CL1T-26 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_ENCODER_FAULT OF F_C[21].3 (Description := "MTR/CL1T-26 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_MOL OF F_C[21].0 (Description := "MTR/CL1T-26 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_MSD_OFF OF F_C[21].4 (Description := "MTR/CL1T-26 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_OUTSERV OF F_C[21].5 (Description := "MTR/CL1T-26 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_OVRIDE OF F_C[21].6 (Description := "MTR/CL1T-26 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_PE1_JAMMED OF F_PE[3].1 (Description := "MTR/CL1T-26 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_PE1_JAMMED1 OF F_PE[3].4 (Description := "MTR/CL1T-26 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_PE2_JAMMED OF F_PE[3].2 (Description := "MTR/CL1T-26 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_PE2_JAMMED1 OF F_PE[3].5 (Description := "MTR/CL1T-26 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL1T_26_VFD_FAULT OF F_C[21].1 (Description := "MTR/CL1T-26 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS1_E_STOP OF F_CS03[0].0 (Description := "MTR/CL2T-01 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS1_E_STOP1 OF F_CS03[0].0 (Description := "MTR/CL2T-01 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS1_E_STOP_RESET OF F_CS03[0].1 (Description := "MTR/CL2T-01 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS1_E_STOP_RESET1 OF F_CS03[0].1 (Description := "MTR/CL2T-01 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS2_E_STOP OF F_CS03[0].2 (Description := "MTR/CL2T-01 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS2_E_STOP1 OF F_CS03[0].2 (Description := "MTR/CL2T-01 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS2_E_STOP_RESET OF F_CS03[0].3 (Description := "MTR/CL2T-01 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CS2_E_STOP_RESET1 OF F_CS03[0].3 (Description := "MTR/CL2T-01 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_CTCTR_FAULT OF F_C[14].23 (Description := "MTR/CL2T-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_ENCODER_FAULT OF F_C[14].24 (Description := "MTR/CL2T-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_MOL OF F_C[14].21 (Description := "MTR/CL2T-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_MSD_OFF OF F_C[14].25 (Description := "MTR/CL2T-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_OUTSERV OF F_C[14].26 (Description := "MTR/CL2T-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_OVRIDE OF F_C[14].27 (Description := "MTR/CL2T-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_PE_JAMMED OF F_PE[2].5 (Description := "MTR/CL2T-01 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_01_VFD_FAULT OF F_C[14].22 (Description := "MTR/CL2T-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS1_E_STOP OF F_CS04[0].14 (Description := "MTR/CL2T-02 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS1_E_STOP1 OF F_CS04[0].14 (Description := "MTR/CL2T-02 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS1_E_STOP_RESET OF F_CS04[0].15 (Description := "MTR/CL2T-02 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS1_E_STOP_RESET1 OF F_CS04[0].15 (Description := "MTR/CL2T-02 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS2_E_STOP OF F_CS03[0].4 (Description := "MTR/CL2T-02 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS2_E_STOP1 OF F_CS03[0].4 (Description := "MTR/CL2T-02 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS2_E_STOP_RESET OF F_CS03[0].5 (Description := "MTR/CL2T-02 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS2_E_STOP_RESET1 OF F_CS03[0].5 (Description := "MTR/CL2T-02 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS3_E_STOP OF F_CS03[0].6 (Description := "MTR/CL2T-02 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS3_E_STOP1 OF F_CS03[0].6 (Description := "MTR/CL2T-02 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS3_E_STOP_RESET OF F_CS03[0].7 (Description := "MTR/CL2T-02 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CS3_E_STOP_RESET1 OF F_CS03[0].7 (Description := "MTR/CL2T-02 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_CTCTR_FAULT OF F_C[14].16 (Description := "MTR/CL2T-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_ENCODER_FAULT OF F_C[14].17 (Description := "MTR/CL2T-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_MOL OF F_C[14].14 (Description := "MTR/CL2T-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_MSD_OFF OF F_C[14].18 (Description := "MTR/CL2T-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_OUTSERV OF F_C[14].19 (Description := "MTR/CL2T-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_OVRIDE OF F_C[14].20 (Description := "MTR/CL2T-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_PE_JAMMED OF F_PE[2].4 (Description := "MTR/CL2T-02 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_02_VFD_FAULT OF F_C[14].15 (Description := "MTR/CL2T-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_CTCTR_FAULT OF F_C[14].9 (Description := "MTR/CL2T-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_ENCODER_FAULT OF F_C[14].10 (Description := "MTR/CL2T-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_MOL OF F_C[14].7 (Description := "MTR/CL2T-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_MSD_OFF OF F_C[14].11 (Description := "MTR/CL2T-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_OUTSERV OF F_C[14].12 (Description := "MTR/CL2T-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_OVRIDE OF F_C[14].13 (Description := "MTR/CL2T-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_PE_JAMMED OF F_PE[2].3 (Description := "MTR/CL2T-03 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_03_VFD_FAULT OF F_C[14].8 (Description := "MTR/CL2T-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_CS_E_STOP OF F_CS04[0].16 (Description := "MTR/CL2T-04 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_CS_E_STOP_RESET OF F_CS04[0].17 (Description := "MTR/CL2T-04 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_CTCTR_FAULT OF F_C[14].2 (Description := "MTR/CL2T-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_ENCODER_FAULT OF F_C[14].3 (Description := "MTR/CL2T-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_MOL OF F_C[14].0 (Description := "MTR/CL2T-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_MSD_OFF OF F_C[14].4 (Description := "MTR/CL2T-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_OUTSERV OF F_C[14].5 (Description := "MTR/CL2T-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_OVRIDE OF F_C[14].6 (Description := "MTR/CL2T-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_PE_JAMMED OF F_PE[2].2 (Description := "MTR/CL2T-04 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_04_VFD_FAULT OF F_C[14].1 (Description := "MTR/CL2T-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS1_E_STOP OF F_CS04[0].18 (Description := "MTR/CL2T-05 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS1_E_STOP1 OF F_CS04[0].18 (Description := "MTR/CL2T-05 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS1_E_STOP_RESET OF F_CS04[0].19 (Description := "MTR/CL2T-05 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS1_E_STOP_RESET1 OF F_CS04[0].19 (Description := "MTR/CL2T-05 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS2_E_STOP OF F_CS04[0].20 (Description := "MTR/CL2T-05 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS2_E_STOP1 OF F_CS04[0].20 (Description := "MTR/CL2T-05 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS2_E_STOP_RESET OF F_CS04[0].21 (Description := "MTR/CL2T-05 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CS2_E_STOP_RESET1 OF F_CS04[0].21 (Description := "MTR/CL2T-05 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_CTCTR_FAULT OF F_C[13].27 (Description := "MTR/CL2T-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_ENCODER_FAULT OF F_C[13].28 (Description := "MTR/CL2T-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_MOL OF F_C[13].25 (Description := "MTR/CL2T-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_MSD_OFF OF F_C[13].29 (Description := "MTR/CL2T-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_OUTSERV OF F_C[13].30 (Description := "MTR/CL2T-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_OVRIDE OF F_C[13].31 (Description := "MTR/CL2T-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_PE_JAMMED OF F_PE[2].1 (Description := "MTR/CL2T-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_05_VFD_FAULT OF F_C[13].26 (Description := "MTR/CL2T-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_CTCTR_FAULT OF F_C[13].20 (Description := "MTR/CL2T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_ENCODER_FAULT OF F_C[13].21 (Description := "MTR/CL2T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_MOL OF F_C[13].18 (Description := "MTR/CL2T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_MSD_OFF OF F_C[13].22 (Description := "MTR/CL2T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_OUTSERV OF F_C[13].23 (Description := "MTR/CL2T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_OVRIDE OF F_C[13].24 (Description := "MTR/CL2T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_PE_JAMMED OF F_PE[2].0 (Description := "MTR/CL2T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_06_VFD_FAULT OF F_C[13].19 (Description := "MTR/CL2T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_CTCTR_FAULT OF F_C[13].13 (Description := "MTR/CL2T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_ENCODER_FAULT OF F_C[13].14 (Description := "MTR/CL2T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_MOL OF F_C[13].11 (Description := "MTR/CL2T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_MSD_OFF OF F_C[13].15 (Description := "MTR/CL2T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_OUTSERV OF F_C[13].16 (Description := "MTR/CL2T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_OVRIDE OF F_C[13].17 (Description := "MTR/CL2T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_PE_JAMMED OF F_PE[1].31 (Description := "MTR/CL2T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_07_VFD_FAULT OF F_C[13].12 (Description := "MTR/CL2T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_CTCTR_FAULT OF F_C[13].6 (Description := "MTR/CL2T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_ENCODER_FAULT OF F_C[13].7 (Description := "MTR/CL2T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_MOL OF F_C[13].4 (Description := "MTR/CL2T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_MSD_OFF OF F_C[13].8 (Description := "MTR/CL2T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_OUTSERV OF F_C[13].9 (Description := "MTR/CL2T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_OVRIDE OF F_C[13].10 (Description := "MTR/CL2T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_PE_JAMMED OF F_PE[1].30 (Description := "MTR/CL2T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_08_VFD_FAULT OF F_C[13].5 (Description := "MTR/CL2T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_CS_E_STOP OF F_CS04[0].22 (Description := "MTR/CL2T-09 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_CS_E_STOP_RESET OF F_CS04[0].23 (Description := "MTR/CL2T-09 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_CTCTR_FAULT OF F_C[12].31 (Description := "MTR/CL2T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_ENCODER_FAULT OF F_C[13].0 (Description := "MTR/CL2T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_MOL OF F_C[12].29 (Description := "MTR/CL2T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_MSD_OFF OF F_C[13].1 (Description := "MTR/CL2T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_OUTSERV OF F_C[13].2 (Description := "MTR/CL2T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_OVRIDE OF F_C[13].3 (Description := "MTR/CL2T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_PE_JAMMED OF F_PE[1].29 (Description := "MTR/CL2T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL2T_09_VFD_FAULT OF F_C[12].30 (Description := "MTR/CL2T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS1_E_STOP OF F_CS03[0].8 (Description := "MTR/CL3T-01 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS1_E_STOP1 OF F_CS03[0].8 (Description := "MTR/CL3T-01 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS1_E_STOP_RESET OF F_CS03[0].9 (Description := "MTR/CL3T-01 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS1_E_STOP_RESET1 OF F_CS03[0].9 (Description := "MTR/CL3T-01 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS2_E_STOP OF F_CS03[0].10 (Description := "MTR/CL3T-01 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS2_E_STOP1 OF F_CS03[0].10 (Description := "MTR/CL3T-01 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS2_E_STOP_RESET OF F_CS03[0].11 (Description := "MTR/CL3T-01 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CS2_E_STOP_RESET1 OF F_CS03[0].11 (Description := "MTR/CL3T-01 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_CTCTR_FAULT OF F_C[16].15 (Description := "MTR/CL3T-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_ENCODER_FAULT OF F_C[16].16 (Description := "MTR/CL3T-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_MOL OF F_C[16].13 (Description := "MTR/CL3T-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_MSD_OFF OF F_C[16].17 (Description := "MTR/CL3T-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_OUTSERV OF F_C[16].18 (Description := "MTR/CL3T-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_OVRIDE OF F_C[16].19 (Description := "MTR/CL3T-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_PE_JAMMED OF F_PE[2].13 (Description := "MTR/CL3T-01 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_01_VFD_FAULT OF F_C[16].14 (Description := "MTR/CL3T-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS1_E_STOP OF F_CS04[0].24 (Description := "MTR/CL3T-02 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS1_E_STOP1 OF F_CS04[0].24 (Description := "MTR/CL3T-02 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS1_E_STOP_RESET OF F_CS04[0].25 (Description := "MTR/CL3T-02 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS1_E_STOP_RESET1 OF F_CS04[0].25 (Description := "MTR/CL3T-02 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS2_E_STOP OF F_CS03[0].12 (Description := "MTR/CL3T-02 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS2_E_STOP1 OF F_CS03[0].12 (Description := "MTR/CL3T-02 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS2_E_STOP_RESET OF F_CS03[0].13 (Description := "MTR/CL3T-02 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS2_E_STOP_RESET1 OF F_CS03[0].13 (Description := "MTR/CL3T-02 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS3_E_STOP OF F_CS03[0].14 (Description := "MTR/CL3T-02 CS3 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS3_E_STOP1 OF F_CS03[0].14 (Description := "MTR/CL3T-02 CS-C E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS3_E_STOP_RESET OF F_CS03[0].15 (Description := "MTR/CL3T-02 CS3 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS3_E_STOP_RESET1 OF F_CS03[0].15 (Description := "MTR/CL3T-02 CS-C E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS4_E_STOP OF F_CS04[0].26 (Description := "MTR/CL3T-02 CS4 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS4_E_STOP1 OF F_CS04[0].26 (Description := "MTR/CL3T-02 CS-D E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS4_E_STOP_RESET OF F_CS04[0].27 (Description := "MTR/CL3T-02 CS4 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CS4_E_STOP_RESET1 OF F_CS04[0].27 (Description := "MTR/CL3T-02 CS-D E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_CTCTR_FAULT OF F_C[16].8 (Description := "MTR/CL3T-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_ENCODER_FAULT OF F_C[16].9 (Description := "MTR/CL3T-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_MOL OF F_C[16].6 (Description := "MTR/CL3T-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_MSD_OFF OF F_C[16].10 (Description := "MTR/CL3T-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_OUTSERV OF F_C[16].11 (Description := "MTR/CL3T-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_OVRIDE OF F_C[16].12 (Description := "MTR/CL3T-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_PE_JAMMED OF F_PE[2].12 (Description := "MTR/CL3T-02 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_02_VFD_FAULT OF F_C[16].7 (Description := "MTR/CL3T-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_CTCTR_FAULT OF F_C[16].1 (Description := "MTR/CL3T-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_ENCODER_FAULT OF F_C[16].2 (Description := "MTR/CL3T-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_MOL OF F_C[15].31 (Description := "MTR/CL3T-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_MSD_OFF OF F_C[16].3 (Description := "MTR/CL3T-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_OUTSERV OF F_C[16].4 (Description := "MTR/CL3T-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_OVRIDE OF F_C[16].5 (Description := "MTR/CL3T-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_PE_JAMMED OF F_PE[2].11 (Description := "MTR/CL3T-03 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_03_VFD_FAULT OF F_C[16].0 (Description := "MTR/CL3T-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_CS_E_STOP OF F_CS04[0].28 (Description := "MTR/CL3T-04 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_CS_E_STOP_RESET OF F_CS04[0].29 (Description := "MTR/CL3T-04 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_CTCTR_FAULT OF F_C[15].26 (Description := "MTR/CL3T-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_ENCODER_FAULT OF F_C[15].27 (Description := "MTR/CL3T-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_MOL OF F_C[15].24 (Description := "MTR/CL3T-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_MSD_OFF OF F_C[15].28 (Description := "MTR/CL3T-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_OUTSERV OF F_C[15].29 (Description := "MTR/CL3T-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_OVRIDE OF F_C[15].30 (Description := "MTR/CL3T-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_PE_JAMMED OF F_PE[2].10 (Description := "MTR/CL3T-04 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_04_VFD_FAULT OF F_C[15].25 (Description := "MTR/CL3T-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_CTCTR_FAULT OF F_C[15].19 (Description := "MTR/CL3T-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_ENCODER_FAULT OF F_C[15].20 (Description := "MTR/CL3T-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_MOL OF F_C[15].17 (Description := "MTR/CL3T-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_MSD_OFF OF F_C[15].21 (Description := "MTR/CL3T-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_OUTSERV OF F_C[15].22 (Description := "MTR/CL3T-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_OVRIDE OF F_C[15].23 (Description := "MTR/CL3T-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_PE_JAMMED OF F_PE[2].9 (Description := "MTR/CL3T-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_05_VFD_FAULT OF F_C[15].18 (Description := "MTR/CL3T-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_CTCTR_FAULT OF F_C[15].12 (Description := "MTR/CL3T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_ENCODER_FAULT OF F_C[15].13 (Description := "MTR/CL3T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_MOL OF F_C[15].10 (Description := "MTR/CL3T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_MSD_OFF OF F_C[15].14 (Description := "MTR/CL3T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_OUTSERV OF F_C[15].15 (Description := "MTR/CL3T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_OVRIDE OF F_C[15].16 (Description := "MTR/CL3T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_PE_JAMMED OF F_PE[2].8 (Description := "MTR/CL3T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_06_VFD_FAULT OF F_C[15].11 (Description := "MTR/CL3T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_CTCTR_FAULT OF F_C[15].5 (Description := "MTR/CL3T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_ENCODER_FAULT OF F_C[15].6 (Description := "MTR/CL3T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_MOL OF F_C[15].3 (Description := "MTR/CL3T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_MSD_OFF OF F_C[15].7 (Description := "MTR/CL3T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_OUTSERV OF F_C[15].8 (Description := "MTR/CL3T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_OVRIDE OF F_C[15].9 (Description := "MTR/CL3T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_PE_JAMMED OF F_PE[2].7 (Description := "MTR/CL3T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_07_VFD_FAULT OF F_C[15].4 (Description := "MTR/CL3T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_CTCTR_FAULT OF F_C[14].30 (Description := "MTR/CL3T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_ENCODER_FAULT OF F_C[14].31 (Description := "MTR/CL3T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_MOL OF F_C[14].28 (Description := "MTR/CL3T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_MSD_OFF OF F_C[15].0 (Description := "MTR/CL3T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_OUTSERV OF F_C[15].1 (Description := "MTR/CL3T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_OVRIDE OF F_C[15].2 (Description := "MTR/CL3T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_PE_JAMMED OF F_PE[2].6 (Description := "MTR/CL3T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CL3T_08_VFD_FAULT OF F_C[14].29 (Description := "MTR/CL3T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_CS01 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS02 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS03 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS04 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS05 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS13 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS14 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS15 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS16 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS1A : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS2A : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS3A : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CS4A : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_CTX : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_DOOR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_HCD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_HSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [2098176,0,0,0,0,0,0,0,0,0];
		F_HX1T_06_CTCTR_FAULT OF F_C[27].20 (Description := "MTR/HX1T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_ENCODER_FAULT OF F_C[27].21 (Description := "MTR/HX1T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_MOL OF F_C[27].18 (Description := "MTR/HX1T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_MSD_OFF OF F_C[27].22 (Description := "MTR/HX1T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_OUTSERV OF F_C[27].23 (Description := "MTR/HX1T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_OVRIDE OF F_C[27].24 (Description := "MTR/HX1T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_PE_JAMMED OF F_PE[4].1 (Description := "MTR/HX1T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_06_VFD_FAULT OF F_C[27].19 (Description := "MTR/HX1T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_CTCTR_FAULT OF F_C[27].13 (Description := "MTR/HX1T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_ENCODER_FAULT OF F_C[27].14 (Description := "MTR/HX1T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_MOL OF F_C[27].11 (Description := "MTR/HX1T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_MSD_OFF OF F_C[27].15 (Description := "MTR/HX1T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_OUTSERV OF F_C[27].16 (Description := "MTR/HX1T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_OVRIDE OF F_C[27].17 (Description := "MTR/HX1T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_PE_JAMMED OF F_PE[4].0 (Description := "MTR/HX1T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_07_VFD_FAULT OF F_C[27].12 (Description := "MTR/HX1T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_CTCTR_FAULT OF F_C[27].6 (Description := "MTR/HX1T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_ENCODER_FAULT OF F_C[27].7 (Description := "MTR/HX1T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_MOL OF F_C[27].4 (Description := "MTR/HX1T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_MSD_OFF OF F_C[27].8 (Description := "MTR/HX1T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_OUTSERV OF F_C[27].9 (Description := "MTR/HX1T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_OVRIDE OF F_C[27].10 (Description := "MTR/HX1T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_PE_JAMMED OF F_PE[3].31 (Description := "MTR/HX1T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_08_VFD_FAULT OF F_C[27].5 (Description := "MTR/HX1T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_CTCTR_FAULT OF F_C[26].31 (Description := "MTR/HX1T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_ENCODER_FAULT OF F_C[27].0 (Description := "MTR/HX1T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_MOL OF F_C[26].29 (Description := "MTR/HX1T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_MSD_OFF OF F_C[27].1 (Description := "MTR/HX1T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_OUTSERV OF F_C[27].2 (Description := "MTR/HX1T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_OVRIDE OF F_C[27].3 (Description := "MTR/HX1T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_PE_JAMMED OF F_PE[3].30 (Description := "MTR/HX1T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_09_VFD_FAULT OF F_C[26].30 (Description := "MTR/HX1T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_CTCTR_FAULT OF F_C[20].27 (Description := "MTR/HX1T-10A Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_ENCODER_FAULT OF F_C[20].28 (Description := "MTR/HX1T-10A Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_MOL OF F_C[20].25 (Description := "MTR/HX1T-10A Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_MSD_OFF OF F_C[20].29 (Description := "MTR/HX1T-10A Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_OUTSERV OF F_C[20].30 (Description := "MTR/HX1T-10A Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_OVRIDE OF F_C[20].31 (Description := "MTR/HX1T-10A HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_PE_JAMMED OF F_PE[3].3 (Description := "MTR/HX1T-10A PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10A_VFD_FAULT OF F_C[20].26 (Description := "MTR/HX1T-10A VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_CS_E_STOP OF F_CS05[0].8 (Description := "MTR/HX1T-10 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_CS_E_STOP_RESET OF F_CS05[0].9 (Description := "MTR/HX1T-10 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_CTCTR_FAULT OF F_C[26].24 (Description := "MTR/HX1T-10 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_ENCODER_FAULT OF F_C[26].25 (Description := "MTR/HX1T-10 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_JOG_REVERSE OF F_MISC[0].6 (Description := "MTR/HX1T-10 Jog Reverse",
		            RADIX := Decimal);
		F_HX1T_10_MOL OF F_C[26].22 (Description := "MTR/HX1T-10 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_MSD_OFF OF F_C[26].26 (Description := "MTR/HX1T-10 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_OUTSERV OF F_C[26].27 (Description := "MTR/HX1T-10 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_OVRIDE OF F_C[26].28 (Description := "MTR/HX1T-10 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_PE_JAMMED OF F_PE[3].29 (Description := "MTR/HX1T-10 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_10_VFD_FAULT OF F_C[26].23 (Description := "MTR/HX1T-10 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_CTCTR_FAULT OF F_C[26].3 (Description := "MTR/HX1T-11 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_ENCODER_FAULT OF F_C[26].4 (Description := "MTR/HX1T-11 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_MOL OF F_C[26].1 (Description := "MTR/HX1T-11 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_MSD_OFF OF F_C[26].5 (Description := "MTR/HX1T-11 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_OUTSERV OF F_C[26].6 (Description := "MTR/HX1T-11 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_OVRIDE OF F_C[26].7 (Description := "MTR/HX1T-11 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_HX1T_11_VFD_FAULT OF F_C[26].2 (Description := "MTR/HX1T-11 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_ISD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_L3 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_MCP : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_MCP_01_CS_E_STOP OF F_MCP[0].4 (Description := "PNL/MCP-01 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_01_CS_E_STOP_RESET OF F_MCP[0].5 (Description := "PNL/MCP-01 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_01_FIRE_ALM_FAULT OF F_MCP[0].6 (Description := "PNL/MCP-01 Fire Alarm",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_01_HIGH_TEMP OF F_MCP[0].7 (Description := "PNL/MCP-01 High Temperature",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_01_RK01_S00_COMM OF F_CCOM[0].3 (Description := "PNL/MCP-01 Rack01 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_01_RK02_S00_COMM OF F_CCOM[0].4 (Description := "PNL/MCP-01 Rack02 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_CS_E_STOP OF F_MCP[0].8 (Description := "PNL/MCP-02 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_CS_E_STOP_RESET OF F_MCP[0].9 (Description := "PNL/MCP-02 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_FIRE_ALM_FAULT OF F_MCP[0].10 (Description := "PNL/MCP-02 Fire Alarm",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_HIGH_TEMP OF F_MCP[0].11 (Description := "PNL/MCP-02 High Temperature",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_RK01_S00_COMM OF F_CCOM[0].5 (Description := "PNL/MCP-02 Rack01 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_02_RK02_S00_COMM OF F_CCOM[0].6 (Description := "PNL/MCP-02 Rack02 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_CS_E_STOP OF F_MCP[0].12 (Description := "PNL/MCP-03 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_CS_E_STOP_RESET OF F_MCP[0].13 (Description := "PNL/MCP-03 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_FIRE_ALM_FAULT OF F_MCP[0].14 (Description := "PNL/MCP-03 Fire Alarm",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_HIGH_TEMP OF F_MCP[0].15 (Description := "PNL/MCP-03 High Temperature",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_RK01_S00_COMM OF F_CCOM[0].7 (Description := "PNL/MCP-03 Rack01 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_03_RK02_S00_COMM OF F_CCOM[0].8 (Description := "PNL/MCP-03 Rack02 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_CS_E_STOP OF F_MCP[0].16 (Description := "PNL/MCP-16 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_CS_E_STOP_RESET OF F_MCP[0].17 (Description := "PNL/MCP-16 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_FIRE_ALM_FAULT OF F_MCP[0].18 (Description := "PNL/MCP-16 Fire Alarm",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_HIGH_TEMP OF F_MCP[0].19 (Description := "PNL/MCP-16 High Temperature",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_RK01_S00_COMM OF F_CCOM[0].9 (Description := "PNL/MCP-16 Rack01 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_16_RK02_S00_COMM OF F_CCOM[0].10 (Description := "PNL/MCP-16 Rack02 Slot00 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_CS_E_STOP OF F_MCP[0].0 (Description := "PNL/MCP-BM1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_CS_E_STOP_RESET OF F_MCP[0].1 (Description := "PNL/MCP-BM1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_FIRE_ALM_FAULT OF F_MCP[0].2 (Description := "PNL/MCP-BM1 Fire Alarm",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_HIGH_TEMP OF F_MCP[0].3 (Description := "PNL/MCP-BM1 High Temperature",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_RK01_S16_COMM OF F_CCOM[0].1 (Description := "PNL/MCP-BM1 Rack01 Slot16 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_RK02_S00_COMM OF F_CCOM[0].2 (Description := "PNL/MCP-BM1 Rack02 Slot01 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_BM1_RK02_S01_COMM OF F_CCOM[0].2 (Description := "PNL/MCP-BM1 Rack02 Slot01 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_CC01_RK01_S02_COMM OF F_CCOM[0].0 (Description := "PNL/MCP-CC01 Rack01 Slot02 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MCP_LCP_RK01_S02_COMM OF F_CCOM[0].0 (Description := "PNL/MCP-LCP Rack01 Slot02 Comm Card Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_MEC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_MISC : DINT[10] (RADIX := Decimal) := [21760,0,0,0,0,0,0,0,0,0];
		F_MU : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_MVI : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_O2T_04_CS_E_STOP OF F_CS04[0].2 (Description := "MTR/O2T-04 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_CS_E_STOP_RESET OF F_CS04[0].3 (Description := "MTR/O2T-04 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_CTCTR_FAULT OF F_C[11].14 (Description := "MTR/O2T-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_ENCODER_FAULT OF F_C[11].15 (Description := "MTR/O2T-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_MOL OF F_C[11].12 (Description := "MTR/O2T-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_MSD_OFF OF F_C[11].16 (Description := "MTR/O2T-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_OUTSERV OF F_C[11].17 (Description := "MTR/O2T-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_OVRIDE OF F_C[11].18 (Description := "MTR/O2T-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_PE_JAMMED OF F_PE[1].22 (Description := "MTR/O2T-04 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_04_VFD_FAULT OF F_C[11].13 (Description := "MTR/O2T-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_CTCTR_FAULT OF F_C[11].7 (Description := "MTR/O2T-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_ENCODER_FAULT OF F_C[11].8 (Description := "MTR/O2T-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_MOL OF F_C[11].5 (Description := "MTR/O2T-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_MSD_OFF OF F_C[11].9 (Description := "MTR/O2T-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_OUTSERV OF F_C[11].10 (Description := "MTR/O2T-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_OVRIDE OF F_C[11].11 (Description := "MTR/O2T-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_PE_JAMMED OF F_PE[1].21 (Description := "MTR/O2T-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_05_VFD_FAULT OF F_C[11].6 (Description := "MTR/O2T-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_CS_E_STOP OF F_CS04[0].4 (Description := "MTR/O2T-06 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_CS_E_STOP_RESET OF F_CS04[0].5 (Description := "MTR/O2T-06 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_CTCTR_FAULT OF F_C[11].0 (Description := "MTR/O2T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_ENCODER_FAULT OF F_C[11].1 (Description := "MTR/O2T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_MOL OF F_C[10].30 (Description := "MTR/O2T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_MSD_OFF OF F_C[11].2 (Description := "MTR/O2T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_OUTSERV OF F_C[11].3 (Description := "MTR/O2T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_OVRIDE OF F_C[11].4 (Description := "MTR/O2T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_PE_JAMMED OF F_PE[1].20 (Description := "MTR/O2T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_06_VFD_FAULT OF F_C[10].31 (Description := "MTR/O2T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_CTCTR_FAULT OF F_C[10].25 (Description := "MTR/O2T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_ENCODER_FAULT OF F_C[10].26 (Description := "MTR/O2T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_MOL OF F_C[10].23 (Description := "MTR/O2T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_MSD_OFF OF F_C[10].27 (Description := "MTR/O2T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_OUTSERV OF F_C[10].28 (Description := "MTR/O2T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_OVRIDE OF F_C[10].29 (Description := "MTR/O2T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_PE_JAMMED OF F_PE[1].19 (Description := "MTR/O2T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_07_VFD_FAULT OF F_C[10].24 (Description := "MTR/O2T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_CTCTR_FAULT OF F_C[10].18 (Description := "MTR/O2T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_ENCODER_FAULT OF F_C[10].19 (Description := "MTR/O2T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_MOL OF F_C[10].16 (Description := "MTR/O2T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_MSD_OFF OF F_C[10].20 (Description := "MTR/O2T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_OUTSERV OF F_C[10].21 (Description := "MTR/O2T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_OVRIDE OF F_C[10].22 (Description := "MTR/O2T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_PE_JAMMED OF F_PE[1].18 (Description := "MTR/O2T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_08_VFD_FAULT OF F_C[10].17 (Description := "MTR/O2T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_CTCTR_FAULT OF F_C[10].11 (Description := "MTR/O2T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_ENCODER_FAULT OF F_C[10].12 (Description := "MTR/O2T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_MOL OF F_C[10].9 (Description := "MTR/O2T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_MSD_OFF OF F_C[10].13 (Description := "MTR/O2T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_OUTSERV OF F_C[10].14 (Description := "MTR/O2T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_OVRIDE OF F_C[10].15 (Description := "MTR/O2T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_PE_JAMMED OF F_PE[1].17 (Description := "MTR/O2T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_09_VFD_FAULT OF F_C[10].10 (Description := "MTR/O2T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_CS_E_STOP OF F_CS04[0].6 (Description := "MTR/O2T-10 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_CS_E_STOP_RESET OF F_CS04[0].7 (Description := "MTR/O2T-10 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_CTCTR_FAULT OF F_C[10].4 (Description := "MTR/O2T-10 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_ENCODER_FAULT OF F_C[10].5 (Description := "MTR/O2T-10 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_MOL OF F_C[10].2 (Description := "MTR/O2T-10 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_MSD_OFF OF F_C[10].6 (Description := "MTR/O2T-10 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_OUTSERV OF F_C[10].7 (Description := "MTR/O2T-10 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_OVRIDE OF F_C[10].8 (Description := "MTR/O2T-10 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_PE_JAMMED OF F_PE[1].16 (Description := "MTR/O2T-10 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_10_VFD_FAULT OF F_C[10].3 (Description := "MTR/O2T-10 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_CTCTR_FAULT OF F_C[9].29 (Description := "MTR/O2T-11 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_ENCODER_FAULT OF F_C[9].30 (Description := "MTR/O2T-11 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_MOL OF F_C[9].27 (Description := "MTR/O2T-11 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_MSD_OFF OF F_C[9].31 (Description := "MTR/O2T-11 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_OUTSERV OF F_C[10].0 (Description := "MTR/O2T-11 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_OVRIDE OF F_C[10].1 (Description := "MTR/O2T-11 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_PE_JAMMED OF F_PE[1].15 (Description := "MTR/O2T-11 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_11_VFD_FAULT OF F_C[9].28 (Description := "MTR/O2T-11 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_CS_E_STOP OF F_CS04[0].8 (Description := "MTR/O2T-12 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_CS_E_STOP_RESET OF F_CS04[0].9 (Description := "MTR/O2T-12 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_CTCTR_FAULT OF F_C[9].22 (Description := "MTR/O2T-12 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_ENCODER_FAULT OF F_C[9].23 (Description := "MTR/O2T-12 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_MOL OF F_C[9].20 (Description := "MTR/O2T-12 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_MSD_OFF OF F_C[9].24 (Description := "MTR/O2T-12 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_OUTSERV OF F_C[9].25 (Description := "MTR/O2T-12 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_OVRIDE OF F_C[9].26 (Description := "MTR/O2T-12 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_PE_JAMMED OF F_PE[1].14 (Description := "MTR/O2T-12 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_12_VFD_FAULT OF F_C[9].21 (Description := "MTR/O2T-12 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_CTCTR_FAULT OF F_C[9].15 (Description := "MTR/O2T-13 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_ENCODER_FAULT OF F_C[9].16 (Description := "MTR/O2T-13 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_MOL OF F_C[9].13 (Description := "MTR/O2T-13 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_MSD_OFF OF F_C[9].17 (Description := "MTR/O2T-13 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_OUTSERV OF F_C[9].18 (Description := "MTR/O2T-13 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_OVRIDE OF F_C[9].19 (Description := "MTR/O2T-13 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_PE_JAMMED OF F_PE[1].13 (Description := "MTR/O2T-13 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_13_VFD_FAULT OF F_C[9].14 (Description := "MTR/O2T-13 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_CS_E_STOP OF F_CS04[0].10 (Description := "MTR/O2T-14 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_CS_E_STOP_RESET OF F_CS04[0].11 (Description := "MTR/O2T-14 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_CTCTR_FAULT OF F_C[9].8 (Description := "MTR/O2T-14 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_ENCODER_FAULT OF F_C[9].9 (Description := "MTR/O2T-14 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_MOL OF F_C[9].6 (Description := "MTR/O2T-14 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_MSD_OFF OF F_C[9].10 (Description := "MTR/O2T-14 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_OUTSERV OF F_C[9].11 (Description := "MTR/O2T-14 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_OVRIDE OF F_C[9].12 (Description := "MTR/O2T-14 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_PE_JAMMED OF F_PE[1].12 (Description := "MTR/O2T-14 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_14_VFD_FAULT OF F_C[9].7 (Description := "MTR/O2T-14 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_CTCTR_FAULT OF F_C[9].1 (Description := "MTR/O2T-15 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_ENCODER_FAULT OF F_C[9].2 (Description := "MTR/O2T-15 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_MOL OF F_C[8].31 (Description := "MTR/O2T-15 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_MSD_OFF OF F_C[9].3 (Description := "MTR/O2T-15 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_OUTSERV OF F_C[9].4 (Description := "MTR/O2T-15 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_OVRIDE OF F_C[9].5 (Description := "MTR/O2T-15 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_PE_JAMMED OF F_PE[1].11 (Description := "MTR/O2T-15 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_15_VFD_FAULT OF F_C[9].0 (Description := "MTR/O2T-15 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_CTCTR_FAULT OF F_C[8].26 (Description := "MTR/O2T-16 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_ENCODER_FAULT OF F_C[8].27 (Description := "MTR/O2T-16 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_MOL OF F_C[8].24 (Description := "MTR/O2T-16 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_MSD_OFF OF F_C[8].28 (Description := "MTR/O2T-16 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_OUTSERV OF F_C[8].29 (Description := "MTR/O2T-16 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_OVRIDE OF F_C[8].30 (Description := "MTR/O2T-16 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_PE_JAMMED OF F_PE[1].10 (Description := "MTR/O2T-16 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_16_VFD_FAULT OF F_C[8].25 (Description := "MTR/O2T-16 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_CTCTR_FAULT OF F_C[8].19 (Description := "MTR/O2T-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_ENCODER_FAULT OF F_C[8].20 (Description := "MTR/O2T-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_MOL OF F_C[8].17 (Description := "MTR/O2T-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_MSD_OFF OF F_C[8].21 (Description := "MTR/O2T-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_OUTSERV OF F_C[8].22 (Description := "MTR/O2T-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_OVRIDE OF F_C[8].23 (Description := "MTR/O2T-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_PE_JAMMED OF F_PE[1].9 (Description := "MTR/O2T-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_17_VFD_FAULT OF F_C[8].18 (Description := "MTR/O2T-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_CS_E_STOP OF F_CS05[0].0 (Description := "MTR/O2T-18 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_CS_E_STOP_RESET OF F_CS05[0].1 (Description := "MTR/O2T-18 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_CTCTR_FAULT OF F_C[8].12 (Description := "MTR/O2T-18 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_ENCODER_FAULT OF F_C[8].13 (Description := "MTR/O2T-18 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_JOG_REVERSE OF F_MISC[0].2 (Description := "MTR/O2T-19 Jog Reverse",
		            RADIX := Decimal);
		F_O2T_18_MOL OF F_C[8].10 (Description := "MTR/O2T-18 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_MSD_OFF OF F_C[8].14 (Description := "MTR/O2T-18 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_OUTSERV OF F_C[8].15 (Description := "MTR/O2T-18 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_OVRIDE OF F_C[8].16 (Description := "MTR/O2T-18 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_PE_JAMMED OF F_PE[1].8 (Description := "MTR/O2T-18 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O2T_18_VFD_FAULT OF F_C[8].11 (Description := "MTR/O2T-18 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_CS_E_STOP OF F_CS04[1].22 (Description := "MTR/O3T-17 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_CS_E_STOP_RESET OF F_CS04[1].23 (Description := "MTR/O3T-17 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_CTCTR_FAULT OF F_C[30].8 (Description := "MTR/O3T-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_ENCODER_FAULT OF F_C[30].9 (Description := "MTR/O3T-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_MOL OF F_C[30].6 (Description := "MTR/O3T-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_MSD_OFF OF F_C[30].10 (Description := "MTR/O3T-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_OUTSERV OF F_C[30].11 (Description := "MTR/O3T-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_OVRIDE OF F_C[30].12 (Description := "MTR/O3T-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_PE_JAMMED OF F_PE[4].12 (Description := "MTR/O3T-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_17_VFD_FAULT OF F_C[30].7 (Description := "MTR/O3T-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_CTCTR_FAULT OF F_C[30].1 (Description := "MTR/O3T-18 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_ENCODER_FAULT OF F_C[30].2 (Description := "MTR/O3T-18 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_MOL OF F_C[29].31 (Description := "MTR/O3T-18 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_MSD_OFF OF F_C[30].3 (Description := "MTR/O3T-18 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_OUTSERV OF F_C[30].4 (Description := "MTR/O3T-18 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_OVRIDE OF F_C[30].5 (Description := "MTR/O3T-18 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_PE_JAMMED OF F_PE[4].11 (Description := "MTR/O3T-18 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_18_VFD_FAULT OF F_C[30].0 (Description := "MTR/O3T-18 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS1_E_STOP OF F_CS04[1].24 (Description := "MTR/O3T-19 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS1_E_STOP1 OF F_CS04[1].24 (Description := "MTR/O3T-19 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS1_E_STOP_RESET OF F_CS04[1].25 (Description := "MTR/O3T-19 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS1_E_STOP_RESET1 OF F_CS04[1].25 (Description := "MTR/O3T-19 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS2_E_STOP OF F_CS04[1].26 (Description := "MTR/O3T-19 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS2_E_STOP1 OF F_CS04[1].26 (Description := "MTR/O3T-19 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS2_E_STOP_RESET OF F_CS04[1].27 (Description := "MTR/O3T-19 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CS2_E_STOP_RESET1 OF F_CS04[1].27 (Description := "MTR/O3T-19 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_CTCTR_FAULT OF F_C[29].26 (Description := "MTR/O3T-19 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_ENCODER_FAULT OF F_C[29].27 (Description := "MTR/O3T-19 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_MOL OF F_C[29].24 (Description := "MTR/O3T-19 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_MSD_OFF OF F_C[29].28 (Description := "MTR/O3T-19 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_OUTSERV OF F_C[29].29 (Description := "MTR/O3T-19 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_OVRIDE OF F_C[29].30 (Description := "MTR/O3T-19 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_PE_JAMMED OF F_PE[4].10 (Description := "MTR/O3T-19 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_19_VFD_FAULT OF F_C[29].25 (Description := "MTR/O3T-19 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_CTCTR_FAULT OF F_C[29].19 (Description := "MTR/O3T-20 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_ENCODER_FAULT OF F_C[29].20 (Description := "MTR/O3T-20 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_MOL OF F_C[29].17 (Description := "MTR/O3T-20 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_MSD_OFF OF F_C[29].21 (Description := "MTR/O3T-20 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_OUTSERV OF F_C[29].22 (Description := "MTR/O3T-20 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_OVRIDE OF F_C[29].23 (Description := "MTR/O3T-20 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_PE_JAMMED OF F_PE[4].9 (Description := "MTR/O3T-20 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_20_VFD_FAULT OF F_C[29].18 (Description := "MTR/O3T-20 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_CTCTR_FAULT OF F_C[29].12 (Description := "MTR/O3T-21 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_ENCODER_FAULT OF F_C[29].13 (Description := "MTR/O3T-21 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_MOL OF F_C[29].10 (Description := "MTR/O3T-21 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_MSD_OFF OF F_C[29].14 (Description := "MTR/O3T-21 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_OUTSERV OF F_C[29].15 (Description := "MTR/O3T-21 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_OVRIDE OF F_C[29].16 (Description := "MTR/O3T-21 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O3T_21_VFD_FAULT OF F_C[29].11 (Description := "MTR/O3T-21 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_CTCTR_FAULT OF F_C[18].14 (Description := "MTR/O4T-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_ENCODER_FAULT OF F_C[18].15 (Description := "MTR/O4T-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_MOL OF F_C[18].12 (Description := "MTR/O4T-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_MSD_OFF OF F_C[18].16 (Description := "MTR/O4T-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_OUTSERV OF F_C[18].17 (Description := "MTR/O4T-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_OVRIDE OF F_C[18].18 (Description := "MTR/O4T-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_PE_JAMMED OF F_PE[2].23 (Description := "MTR/O4T-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_05_VFD_FAULT OF F_C[18].13 (Description := "MTR/O4T-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_CS_E_STOP OF F_CS04[0].30 (Description := "MTR/O4T-06 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_CS_E_STOP_RESET OF F_CS04[0].31 (Description := "MTR/O4T-06 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_CTCTR_FAULT OF F_C[18].7 (Description := "MTR/O4T-06 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_ENCODER_FAULT OF F_C[18].8 (Description := "MTR/O4T-06 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_MOL OF F_C[18].5 (Description := "MTR/O4T-06 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_MSD_OFF OF F_C[18].9 (Description := "MTR/O4T-06 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_OUTSERV OF F_C[18].10 (Description := "MTR/O4T-06 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_OVRIDE OF F_C[18].11 (Description := "MTR/O4T-06 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_PE_JAMMED OF F_PE[2].22 (Description := "MTR/O4T-06 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_06_VFD_FAULT OF F_C[18].6 (Description := "MTR/O4T-06 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_CTCTR_FAULT OF F_C[18].0 (Description := "MTR/O4T-07 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_ENCODER_FAULT OF F_C[18].1 (Description := "MTR/O4T-07 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_MOL OF F_C[17].30 (Description := "MTR/O4T-07 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_MSD_OFF OF F_C[18].2 (Description := "MTR/O4T-07 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_OUTSERV OF F_C[18].3 (Description := "MTR/O4T-07 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_OVRIDE OF F_C[18].4 (Description := "MTR/O4T-07 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_PE_JAMMED OF F_PE[2].21 (Description := "MTR/O4T-07 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_07_VFD_FAULT OF F_C[17].31 (Description := "MTR/O4T-07 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_CTCTR_FAULT OF F_C[17].25 (Description := "MTR/O4T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_ENCODER_FAULT OF F_C[17].26 (Description := "MTR/O4T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_MOL OF F_C[17].23 (Description := "MTR/O4T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_MSD_OFF OF F_C[17].27 (Description := "MTR/O4T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_OUTSERV OF F_C[17].28 (Description := "MTR/O4T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_OVRIDE OF F_C[17].29 (Description := "MTR/O4T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_PE_JAMMED OF F_PE[2].20 (Description := "MTR/O4T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_08_VFD_FAULT OF F_C[17].24 (Description := "MTR/O4T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_CTCTR_FAULT OF F_C[17].18 (Description := "MTR/O4T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_ENCODER_FAULT OF F_C[17].19 (Description := "MTR/O4T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_MOL OF F_C[17].16 (Description := "MTR/O4T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_MSD_OFF OF F_C[17].20 (Description := "MTR/O4T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_OUTSERV OF F_C[17].21 (Description := "MTR/O4T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_OVRIDE OF F_C[17].22 (Description := "MTR/O4T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_PE_JAMMED OF F_PE[2].19 (Description := "MTR/O4T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_09_VFD_FAULT OF F_C[17].17 (Description := "MTR/O4T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_CS_E_STOP OF F_CS04[1].0 (Description := "MTR/O4T-10 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_CS_E_STOP_RESET OF F_CS04[1].1 (Description := "MTR/O4T-10 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_CTCTR_FAULT OF F_C[17].11 (Description := "MTR/O4T-10 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_ENCODER_FAULT OF F_C[17].12 (Description := "MTR/O4T-10 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_MOL OF F_C[17].9 (Description := "MTR/O4T-10 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_MSD_OFF OF F_C[17].13 (Description := "MTR/O4T-10 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_OUTSERV OF F_C[17].14 (Description := "MTR/O4T-10 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_OVRIDE OF F_C[17].15 (Description := "MTR/O4T-10 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_PE1_JAMMED OF F_PE[2].14 (Description := "MTR/O4T-10 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_PE1_JAMMED1 OF F_PE[2].17 (Description := "MTR/O4T-10 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_PE2_JAMMED OF F_PE[2].15 (Description := "MTR/O4T-10 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_PE2_JAMMED1 OF F_PE[2].18 (Description := "MTR/O4T-10 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_10_VFD_FAULT OF F_C[17].10 (Description := "MTR/O4T-10 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_CTCTR_FAULT OF F_C[17].4 (Description := "MTR/O4T-11 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_ENCODER_FAULT OF F_C[17].5 (Description := "MTR/O4T-11 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_MOL OF F_C[17].2 (Description := "MTR/O4T-11 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_MSD_OFF OF F_C[17].6 (Description := "MTR/O4T-11 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_OUTSERV OF F_C[17].7 (Description := "MTR/O4T-11 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_OVRIDE OF F_C[17].8 (Description := "MTR/O4T-11 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_PE_JAMMED OF F_PE[2].16 (Description := "MTR/O4T-11 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_11_VFD_FAULT OF F_C[17].3 (Description := "MTR/O4T-11 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_CTCTR_FAULT OF F_C[16].29 (Description := "MTR/O4T-12 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_ENCODER_FAULT OF F_C[16].30 (Description := "MTR/O4T-12 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_MOL OF F_C[16].27 (Description := "MTR/O4T-12 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_MSD_OFF OF F_C[16].31 (Description := "MTR/O4T-12 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_OUTSERV OF F_C[17].0 (Description := "MTR/O4T-12 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_OVRIDE OF F_C[17].1 (Description := "MTR/O4T-12 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_PE_JAMMED OF F_PE[2].15 (Description := "MTR/O4T-12 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_12_VFD_FAULT OF F_C[16].28 (Description := "MTR/O4T-12 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_CTCTR_FAULT OF F_C[16].22 (Description := "MTR/O4T-13 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_ENCODER_FAULT OF F_C[16].23 (Description := "MTR/O4T-13 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_MOL OF F_C[16].20 (Description := "MTR/O4T-13 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_MSD_OFF OF F_C[16].24 (Description := "MTR/O4T-13 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_OUTSERV OF F_C[16].25 (Description := "MTR/O4T-13 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_OVRIDE OF F_C[16].26 (Description := "MTR/O4T-13 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_PE_JAMMED OF F_PE[2].14 (Description := "MTR/O4T-13 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_13_VFD_FAULT OF F_C[16].21 (Description := "MTR/O4T-13 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_CS_E_STOP OF F_CS04[1].28 (Description := "MTR/O4T-16 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_CS_E_STOP_RESET OF F_CS04[1].29 (Description := "MTR/O4T-16 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_CTCTR_FAULT OF F_C[29].5 (Description := "MTR/O4T-16 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_ENCODER_FAULT OF F_C[29].6 (Description := "MTR/O4T-16 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_MOL OF F_C[29].3 (Description := "MTR/O4T-16 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_MSD_OFF OF F_C[29].7 (Description := "MTR/O4T-16 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_OUTSERV OF F_C[29].8 (Description := "MTR/O4T-16 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_OVRIDE OF F_C[29].9 (Description := "MTR/O4T-16 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_PE_JAMMED OF F_PE[4].8 (Description := "MTR/O4T-16 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_16_VFD_FAULT OF F_C[29].4 (Description := "MTR/O4T-16 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_CTCTR_FAULT OF F_C[28].30 (Description := "MTR/O4T-17 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_ENCODER_FAULT OF F_C[28].31 (Description := "MTR/O4T-17 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_MOL OF F_C[28].28 (Description := "MTR/O4T-17 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_MSD_OFF OF F_C[29].0 (Description := "MTR/O4T-17 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_OUTSERV OF F_C[29].1 (Description := "MTR/O4T-17 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_OVRIDE OF F_C[29].2 (Description := "MTR/O4T-17 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_PE_JAMMED OF F_PE[4].7 (Description := "MTR/O4T-17 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_17_VFD_FAULT OF F_C[28].29 (Description := "MTR/O4T-17 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_CTCTR_FAULT OF F_C[28].23 (Description := "MTR/O4T-18 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_ENCODER_FAULT OF F_C[28].24 (Description := "MTR/O4T-18 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_MOL OF F_C[28].21 (Description := "MTR/O4T-18 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_MSD_OFF OF F_C[28].25 (Description := "MTR/O4T-18 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_OUTSERV OF F_C[28].26 (Description := "MTR/O4T-18 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_OVRIDE OF F_C[28].27 (Description := "MTR/O4T-18 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_PE_JAMMED OF F_PE[4].6 (Description := "MTR/O4T-18 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_18_VFD_FAULT OF F_C[28].22 (Description := "MTR/O4T-18 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_CS1_E_STOP OF F_CS04[1].30 (Description := "MTR/O4T-19 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_CS1_E_STOP_RESET OF F_CS04[1].31 (Description := "MTR/O4T-19 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_CS2_E_STOP OF F_CS04[2].0 (Description := "MTR/O4T-19 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_CS2_E_STOP_RESET OF F_CS04[2].1 (Description := "MTR/O4T-19 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_CTCTR_FAULT OF F_C[28].16 (Description := "MTR/O4T-19 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_ENCODER_FAULT OF F_C[28].17 (Description := "MTR/O4T-19 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_MOL OF F_C[28].14 (Description := "MTR/O4T-19 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_MSD_OFF OF F_C[28].18 (Description := "MTR/O4T-19 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_OUTSERV OF F_C[28].19 (Description := "MTR/O4T-19 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_OVRIDE OF F_C[28].20 (Description := "MTR/O4T-19 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_PE_JAMMED OF F_PE[4].5 (Description := "MTR/O4T-19 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_19_VFD_FAULT OF F_C[28].15 (Description := "MTR/O4T-19 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_CTCTR_FAULT OF F_C[28].9 (Description := "MTR/O4T-20 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_ENCODER_FAULT OF F_C[28].10 (Description := "MTR/O4T-20 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_MOL OF F_C[28].7 (Description := "MTR/O4T-20 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_MSD_OFF OF F_C[28].11 (Description := "MTR/O4T-20 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_OUTSERV OF F_C[28].12 (Description := "MTR/O4T-20 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_OVRIDE OF F_C[28].13 (Description := "MTR/O4T-20 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_PE_JAMMED OF F_PE[4].4 (Description := "MTR/O4T-20 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_20_VFD_FAULT OF F_C[28].8 (Description := "MTR/O4T-20 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS1_E_STOP OF F_CS04[1].30 (Description := "MTR/O4T-21 CS-A E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS1_E_STOP1 OF F_CS04[1].30 (Description := "MTR/O4T-21 CS1 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS1_E_STOP_RESET OF F_CS04[1].31 (Description := "MTR/O4T-21 CS-A E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS1_E_STOP_RESET1 OF F_CS04[1].31 (Description := "MTR/O4T-21 CS1 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS2_E_STOP OF F_CS04[2].0 (Description := "MTR/O4T-21 CS-B E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS2_E_STOP1 OF F_CS04[2].0 (Description := "MTR/O4T-21 CS2 E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS2_E_STOP_RESET OF F_CS04[2].1 (Description := "MTR/O4T-21 CS-B E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CS2_E_STOP_RESET1 OF F_CS04[2].1 (Description := "MTR/O4T-21 CS2 E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_CTCTR_FAULT OF F_C[28].2 (Description := "MTR/O4T-21 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_ENCODER_FAULT OF F_C[28].3 (Description := "MTR/O4T-21 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_MOL OF F_C[28].0 (Description := "MTR/O4T-21 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_MSD_OFF OF F_C[28].4 (Description := "MTR/O4T-21 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_OUTSERV OF F_C[28].5 (Description := "MTR/O4T-21 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_OVRIDE OF F_C[28].6 (Description := "MTR/O4T-21 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_PE_JAMMED OF F_PE[4].3 (Description := "MTR/O4T-21 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_21_VFD_FAULT OF F_C[28].1 (Description := "MTR/O4T-21 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_CTCTR_FAULT OF F_C[27].27 (Description := "MTR/O4T-22 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_ENCODER_FAULT OF F_C[27].28 (Description := "MTR/O4T-22 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_MOL OF F_C[27].25 (Description := "MTR/O4T-22 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_MSD_OFF OF F_C[27].29 (Description := "MTR/O4T-22 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_OUTSERV OF F_C[27].30 (Description := "MTR/O4T-22 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_OVRIDE OF F_C[27].31 (Description := "MTR/O4T-22 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_PE_JAMMED OF F_PE[4].2 (Description := "MTR/O4T-22 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4T_22_VFD_FAULT OF F_C[27].26 (Description := "MTR/O4T-22 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_O4_04_ENCODER_FAULT OF F_MISC[0].0 (Description := "MTR/O4-04 Encoder Fault",
		            RADIX := Decimal);
		F_OH : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_OL : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_P : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_PE : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,8192,0,0,0,0,0];
		F_PLC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [1409,0,0,0,0,0,0,0,0,0];
		F_PLC_101_BATTERY_FAULT OF F_PLC[0].2 (Description := "CNTRL/PLC-101 Battery Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_CNTRL_MJR_FAULT OF F_PLC[0].3 (Description := "CNTRL/PLC-101 Controller Major Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_FORCES_ON OF F_PLC[0].1 (Description := "CNTRL/PLC-101 Forces On",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_IO_NOT_OK OF F_PLC[0].7 (Description := "CNTRL/PLC-101 IO Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_KSW_REM OF F_PLC[0].10 (Description := "CNTRL/PLC-101 Keyswitch in Remote Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_KSW_RUN OF F_PLC[0].9 (Description := "CNTRL/PLC-101 Keyswitch in Run Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_KSW_UNK OF F_PLC[0].11 (Description := "CNTRL/PLC-101 Keyswitch in Unknown Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_MSG_FROM_SAM_FAIL OF F_PLC[0].14 (Description := "CNTRL/PLC-101 SAM Failed to Respond",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_MSG_TO_UL_FAIL OF F_PLC[0].0 (Description := "CNTRL/PLC-101 Upper Level Message Failure",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_MSG_TO_UL_FULL OF F_PLC[0].12 (Description := "CNTRL/PLC-101 Upper Level Message FIFO Full",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_MSG_TO_UL_SAM_FULL OF F_PLC[0].13 (Description := "CNTRL/PLC-101 Upper Level Message SAM FIFO Full",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_PRG_MJR_FAULT OF F_PLC[0].4 (Description := "CNTRL/PLC-101 Program Major Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_REDUNDANCY_FAULT OF F_PLC[0].8 (Description := "CNTRL/PLC-101 Redundancy Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_SCAN_CRTCL OF F_PLC[0].5 (Description := "CNTRL/PLC-101 Scan Time Critical",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_PLC_101_SCAN_HI OF F_PLC[0].6 (Description := "CNTRL/PLC-101 Scan Time High",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_CTCTR_FAULT OF F_C[19].17 (Description := "MTR/T5T-08 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_ENCODER_FAULT OF F_C[19].18 (Description := "MTR/T5T-08 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_MOL OF F_C[19].15 (Description := "MTR/T5T-08 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_MSD_OFF OF F_C[19].19 (Description := "MTR/T5T-08 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_OUTSERV OF F_C[19].20 (Description := "MTR/T5T-08 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_OVRIDE OF F_C[19].21 (Description := "MTR/T5T-08 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_PE_JAMMED OF F_PE[2].29 (Description := "MTR/T5T-08 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_08_VFD_FAULT OF F_C[19].16 (Description := "MTR/T5T-08 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_CS_E_STOP OF F_CS05[0].4 (Description := "MTR/T5T-09 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_CS_E_STOP_RESET OF F_CS05[0].5 (Description := "MTR/T5T-09 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_CTCTR_FAULT OF F_C[19].10 (Description := "MTR/T5T-09 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_ENCODER_FAULT OF F_C[19].11 (Description := "MTR/T5T-09 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_JOG_REVERSE OF F_MISC[0].4 (Description := "MTR/T5T-09 Jog Reverse",
		            RADIX := Decimal);
		F_T5T_09_MOL OF F_C[19].8 (Description := "MTR/T5T-09 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_MSD_OFF OF F_C[19].12 (Description := "MTR/T5T-09 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_OUTSERV OF F_C[19].13 (Description := "MTR/T5T-09 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_OVRIDE OF F_C[19].14 (Description := "MTR/T5T-09 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_PE_JAMMED OF F_PE[2].28 (Description := "MTR/T5T-09 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_T5T_09_VFD_FAULT OF F_C[19].9 (Description := "MTR/T5T-09 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_TPE : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_VCOM : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_VS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		F_XO1_01_CS_E_STOP OF F_CS04[1].2 (Description := "MTR/XO1-01 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_CS_E_STOP_RESET OF F_CS04[1].3 (Description := "MTR/XO1-01 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_CTCTR_FAULT OF F_C[19].3 (Description := "MTR/XO1-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_ENCODER_FAULT OF F_C[19].4 (Description := "MTR/XO1-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_DIVERT_ALL OF F_HSD[0].14 (Description := "HSD/XO1-01 Divert All Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_DIVERT_HALF OF F_HSD[0].15 (Description := "HSD/XO1-01 Divert Half Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_FAIL_TO_EXTEND OF F_HSD[0].18 (Description := "HSD/XO1-01 Failed To Extend",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_FAIL_TO_RETRACT OF F_HSD[0].19 (Description := "HSD/XO1-01 Failed to Retract",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_FAULT OF F_HSD[0].21 (Description := "HSD/XO1-01 Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_IP_DISC_OFF OF F_HSD[0].12 (Description := "HSD/XO1-01 Interface Panel Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_MSD_OFF OF F_HSD[0].11 (Description := "HSD/XO1-01 Motor Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_NOT_IN_AUTO OF F_HSD[0].16 (Description := "HSD/XO1-01 Not in Auto",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_OUTSERV OF F_HSD[0].13 (Description := "HSD/XO1-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_HSD_UNKNOWN_POS OF F_HSD[0].20 (Description := "HSD/XO1-01 Unknown Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_MOL OF F_C[19].1 (Description := "MTR/XO1-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_MSD_OFF OF F_C[19].5 (Description := "MTR/XO1-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_OUTSERV OF F_C[19].6 (Description := "MTR/XO1-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_OVRIDE OF F_C[19].7 (Description := "MTR/XO1-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_PE1_JAMMED OF F_PE[2].23 (Description := "MTR/XO1-01 PE-A Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_PE1_JAMMED1 OF F_PE[2].26 (Description := "MTR/XO1-01 PE1 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_PE2_JAMMED OF F_PE[2].24 (Description := "MTR/XO1-01 PE-B Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_PE2_JAMMED1 OF F_PE[2].27 (Description := "MTR/XO1-01 PE2 Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_PE_JAMMED OF F_PE[2].23 (Description := "MTR/XO1-01 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_01_VFD_FAULT OF F_C[19].2 (Description := "MTR/XO1-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_CTCTR_FAULT OF F_C[18].28 (Description := "MTR/XO1-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_ENCODER_FAULT OF F_C[18].29 (Description := "MTR/XO1-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_MOL OF F_C[18].26 (Description := "MTR/XO1-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_MSD_OFF OF F_C[18].30 (Description := "MTR/XO1-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_OUTSERV OF F_C[18].31 (Description := "MTR/XO1-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_OVRIDE OF F_C[19].0 (Description := "MTR/XO1-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_PE_JAMMED OF F_PE[2].25 (Description := "MTR/XO1-02 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_02_VFD_FAULT OF F_C[18].27 (Description := "MTR/XO1-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_CTCTR_FAULT OF F_C[18].21 (Description := "MTR/XO1-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_ENCODER_FAULT OF F_C[18].22 (Description := "MTR/XO1-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_MOL OF F_C[18].19 (Description := "MTR/XO1-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_MSD_OFF OF F_C[18].23 (Description := "MTR/XO1-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_OUTSERV OF F_C[18].24 (Description := "MTR/XO1-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_OVRIDE OF F_C[18].25 (Description := "MTR/XO1-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_PE_JAMMED OF F_PE[2].24 (Description := "MTR/XO1-03 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_03_VFD_FAULT OF F_C[18].20 (Description := "MTR/XO1-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_DIVERT_ALL OF F_HSD[0].14 (Description := "HSD/XO1- Divert All Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_DIVERT_HALF OF F_HSD[0].15 (Description := "HSD/XO1- Divert Half Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_FAIL_TO_EXTEND OF F_HSD[0].18 (Description := "HSD/XO1- Failed To Extend",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_FAIL_TO_RETRACT OF F_HSD[0].19 (Description := "HSD/XO1- Failed to Retract",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_FAULT OF F_HSD[0].21 (Description := "HSD/XO1- Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_IP_DISC_OFF OF F_HSD[0].12 (Description := "HSD/XO1- Interface Panel Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_MSD_OFF OF F_HSD[0].11 (Description := "HSD/XO1- Motor Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_NOT_IN_AUTO OF F_HSD[0].16 (Description := "HSD/XO1- Not in Auto",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_OUTSERV OF F_HSD[0].13 (Description := "HSD/XO1- Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_PROX_OVR OF F_HSD[0].17 (Description := "HSD/XO1- Home Prox Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO1_HSD_UNKNOWN_POS OF F_HSD[0].20 (Description := "HSD/XO1- Unknown Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_CTCTR_FAULT OF F_C[20].20 (Description := "MTR/XO2-01 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_ENCODER_FAULT OF F_C[20].21 (Description := "MTR/XO2-01 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_DIVERT_ALL OF F_HSD[0].3 (Description := "HSD/XO2-01 Divert All Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_DIVERT_HALF OF F_HSD[0].4 (Description := "HSD/XO2-01 Divert Half Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_FAIL_TO_EXTEND OF F_HSD[0].7 (Description := "HSD/XO2-01 Failed To Extend",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_FAIL_TO_RETRACT OF F_HSD[0].8 (Description := "HSD/XO2-01 Failed to Retract",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_FAULT OF F_HSD[0].10 (Description := "HSD/XO2-01 Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_IP_DISC_OFF OF F_HSD[0].1 (Description := "HSD/XO2-01 Interface Panel Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_MSD_OFF OF F_HSD[0].0 (Description := "HSD/XO2-01 Motor Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_NOT_IN_AUTO OF F_HSD[0].5 (Description := "HSD/XO2-01 Not in Auto",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_OUTSERV OF F_HSD[0].2 (Description := "HSD/XO2-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_HSD_UNKNOWN_POS OF F_HSD[0].9 (Description := "HSD/XO2-01 Unknown Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_MOL OF F_C[20].18 (Description := "MTR/XO2-01 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_MSD_OFF OF F_C[20].22 (Description := "MTR/XO2-01 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_OUTSERV OF F_C[20].23 (Description := "MTR/XO2-01 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_OVRIDE OF F_C[20].24 (Description := "MTR/XO2-01 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_PE_JAMMED OF F_PE[3].2 (Description := "MTR/XO2-01 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_01_VFD_FAULT OF F_C[20].19 (Description := "MTR/XO2-01 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_CS_E_STOP OF F_CS04[1].4 (Description := "MTR/XO2-02 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_CS_E_STOP_RESET OF F_CS04[1].5 (Description := "MTR/XO2-02 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_CTCTR_FAULT OF F_C[20].13 (Description := "MTR/XO2-02 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_ENCODER_FAULT OF F_C[20].14 (Description := "MTR/XO2-02 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_MOL OF F_C[20].11 (Description := "MTR/XO2-02 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_MSD_OFF OF F_C[20].15 (Description := "MTR/XO2-02 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_OUTSERV OF F_C[20].16 (Description := "MTR/XO2-02 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_OVRIDE OF F_C[20].17 (Description := "MTR/XO2-02 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_PE_JAMMED OF F_PE[3].1 (Description := "MTR/XO2-02 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_02_VFD_FAULT OF F_C[20].12 (Description := "MTR/XO2-02 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_CTCTR_FAULT OF F_C[20].6 (Description := "MTR/XO2-03 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_ENCODER_FAULT OF F_C[20].7 (Description := "MTR/XO2-03 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_MOL OF F_C[20].4 (Description := "MTR/XO2-03 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_MSD_OFF OF F_C[20].8 (Description := "MTR/XO2-03 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_OUTSERV OF F_C[20].9 (Description := "MTR/XO2-03 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_OVRIDE OF F_C[20].10 (Description := "MTR/XO2-03 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_PE_JAMMED OF F_PE[3].0 (Description := "MTR/XO2-03 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_03_VFD_FAULT OF F_C[20].5 (Description := "MTR/XO2-03 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_CTCTR_FAULT OF F_C[19].31 (Description := "MTR/XO2-04 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_ENCODER_FAULT OF F_C[20].0 (Description := "MTR/XO2-04 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_MOL OF F_C[19].29 (Description := "MTR/XO2-04 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_MSD_OFF OF F_C[20].1 (Description := "MTR/XO2-04 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_OUTSERV OF F_C[20].2 (Description := "MTR/XO2-04 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_OVRIDE OF F_C[20].3 (Description := "MTR/XO2-04 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_PE_JAMMED OF F_PE[2].31 (Description := "MTR/XO2-04 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_04_VFD_FAULT OF F_C[19].30 (Description := "MTR/XO2-04 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_CS_E_STOP OF F_CS05[0].6 (Description := "MTR/XO2-05 CS E-Stop Active",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_CS_E_STOP_RESET OF F_CS05[0].7 (Description := "MTR/XO2-05 CS E-Stop Reset",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_CTCTR_FAULT OF F_C[19].24 (Description := "MTR/XO2-05 Contactor Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_ENCODER_FAULT OF F_C[19].25 (Description := "MTR/XO2-05 Encoder Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_JOG_REVERSE OF F_MISC[0].5 (Description := "MTR/XO2-05 Jog Reverse",
		            RADIX := Decimal);
		F_XO2_05_MOL OF F_C[19].22 (Description := "MTR/XO2-05 Motor Overload",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_MSD_OFF OF F_C[19].26 (Description := "MTR/XO2-05 Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_OUTSERV OF F_C[19].27 (Description := "MTR/XO2-05 Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_OVRIDE OF F_C[19].28 (Description := "MTR/XO2-05 HMI Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_PE_JAMMED OF F_PE[2].30 (Description := "MTR/XO2-05 PE Jam",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_05_VFD_FAULT OF F_C[19].23 (Description := "MTR/XO2-05 VFD Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_DIVERT_ALL OF F_HSD[0].3 (Description := "HSD/XO2- Divert All Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_DIVERT_HALF OF F_HSD[0].4 (Description := "HSD/XO2- Divert Half Mode",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_FAIL_TO_EXTEND OF F_HSD[0].7 (Description := "HSD/XO2- Failed To Extend",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_FAIL_TO_RETRACT OF F_HSD[0].8 (Description := "HSD/XO2- Failed to Retract",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_FAULT OF F_HSD[0].10 (Description := "HSD/XO2- Fault",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_IP_DISC_OFF OF F_HSD[0].1 (Description := "HSD/XO2- Interface Panel Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_MSD_OFF OF F_HSD[0].0 (Description := "HSD/XO2- Motor Disconnect Off",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_NOT_IN_AUTO OF F_HSD[0].5 (Description := "HSD/XO2- Not in Auto",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_OUTSERV OF F_HSD[0].2 (Description := "HSD/XO2- Out of Service",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_PROX_OVR OF F_HSD[0].6 (Description := "HSD/XO2- Home Prox Override",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		F_XO2_HSD_UNKNOWN_POS OF F_HSD[0].9 (Description := "HSD/XO2- Unknown Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_ATR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_BDS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_BM1_01_STS OF G_C[37] (Description := "MTR/BM1-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_02_STS OF G_C[36] (Description := "MTR/BM1-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_03_STS OF G_C[35] (Description := "MTR/BM1-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_04_STS OF G_C[34] (Description := "MTR/BM1-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_05_STS OF G_C[33] (Description := "MTR/BM1-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_06_STS OF G_C[32] (Description := "MTR/BM1-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_07_STS OF G_C[31] (Description := "MTR/BM1-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_08_STS OF G_C[30] (Description := "MTR/BM1-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_09_STS OF G_C[29] (Description := "MTR/BM1-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_10_STS OF G_C[28] (Description := "MTR/BM1-10 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_11_STS OF G_C[27] (Description := "MTR/BM1-11 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_12_STS OF G_C[26] (Description := "MTR/BM1-12 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_13_STS OF G_C[25] (Description := "MTR/BM1-13 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_14_STS OF G_C[24] (Description := "MTR/BM1-14 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_15_STS OF G_C[23] (Description := "MTR/BM1-15 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_16_STS OF G_C[22] (Description := "MTR/BM1-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_17_STS OF G_C[21] (Description := "MTR/BM1-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_18_STS OF G_C[20] (Description := "MTR/BM1-18 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_19_STS OF G_C[19] (Description := "MTR/BM1-19 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_20_STS OF G_C[18] (Description := "MTR/BM1-20 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_21_STS OF G_C[17] (Description := "MTR/BM1-21 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_22_STS OF G_C[16] (Description := "MTR/BM1-22 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_23_STS OF G_C[15] (Description := "MTR/BM1-23 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_24_STS OF G_C[14] (Description := "MTR/BM1-24 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_25_STS OF G_C[13] (Description := "MTR/BM1-25 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_26_STS OF G_C[12] (Description := "MTR/BM1-26 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_27_STS OF G_C[11] (Description := "MTR/BM1-27 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_28_STS OF G_C[10] (Description := "MTR/BM1-28 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_29_STS OF G_C[9] (Description := "MTR/BM1-29 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_30_STS OF G_C[8] (Description := "MTR/BM1-30 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_31_STS OF G_C[7] (Description := "MTR/BM1-31 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_32_STS OF G_C[6] (Description := "MTR/BM1-32 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_33_STS OF G_C[5] (Description := "MTR/BM1-33 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_34_STS OF G_C[4] (Description := "MTR/BM1-34 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_35_STS OF G_C[3] (Description := "MTR/BM1-35 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_36_STS OF G_C[2] (Description := "MTR/BM1-36 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_37_STS OF G_C[1] (Description := "MTR/BM1-37 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BM1_38_STS OF G_C[0] (Description := "MTR/BM1-38 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_BSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_C : DINT[142] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [3932175,3932175,3932175,3932175,3932175,0,0,0,2293773,4456462,4456462,4456462,3932175,3932175,3932175
				,2293773,3932175,3932175,3932175,3932175,3932175,3932175,3932175,3932175,3932175,720902,393227
				,393227,393227,393227,393227,393227,393227,393227,393227,393227,393227,393227,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,3932175
				,3932175,3932175,2293773,3932175,3932175,3932175,3932175,3932175,4456462,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462
				,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462,4456462
				,4456462,4456462,3932175,3932175,3932175,3932175,3932175,3932175,3932175,0,4456462,4456462,4456462
				,4456462,2621447,458763,0];
		G_C2T_12_STS OF G_C[58] (Description := "MTR/C2T-12 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_C2T_13_STS OF G_C[57] (Description := "MTR/C2T-13 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_C2T_14_STS OF G_C[56] (Description := "MTR/C2T-14 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_C2T_15_STS OF G_C[55] (Description := "MTR/C2T-15 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_C2T_16_STS OF G_C[54] (Description := "MTR/C2T-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_C2T_17_STS OF G_C[53] (Description := "MTR/C2T-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL12T_35_STS OF G_C[140] (Description := "MTR/CL12T-35 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL12T_36_STS OF G_C[139] (Description := "MTR/CL12T-36 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_01_STS OF G_C[121] (Description := "MTR/CL1T-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_02_STS OF G_C[120] (Description := "MTR/CL1T-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_03_STS OF G_C[119] (Description := "MTR/CL1T-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_04_STS OF G_C[118] (Description := "MTR/CL1T-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_05_STS OF G_C[117] (Description := "MTR/CL1T-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_06_STS OF G_C[116] (Description := "MTR/CL1T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_07_STS OF G_C[115] (Description := "MTR/CL1T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_08_STS OF G_C[114] (Description := "MTR/CL1T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_09_STS OF G_C[113] (Description := "MTR/CL1T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_10_STS OF G_C[112] (Description := "MTR/CL1T-10 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_11_STS OF G_C[111] (Description := "MTR/CL1T-11 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_12_STS OF G_C[110] (Description := "MTR/CL1T-12 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_13_STS OF G_C[109] (Description := "MTR/CL1T-13 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_14_STS OF G_C[108] (Description := "MTR/CL1T-14 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_15_STS OF G_C[107] (Description := "MTR/CL1T-15 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_16_STS OF G_C[106] (Description := "MTR/CL1T-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_17_STS OF G_C[105] (Description := "MTR/CL1T-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_18_STS OF G_C[104] (Description := "MTR/CL1T-18 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_19_STS OF G_C[103] (Description := "MTR/CL1T-19 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_20_STS OF G_C[102] (Description := "MTR/CL1T-20 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_21_STS OF G_C[101] (Description := "MTR/CL1T-21 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_22_STS OF G_C[100] (Description := "MTR/CL1T-22 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_23_STS OF G_C[99] (Description := "MTR/CL1T-23 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_24_STS OF G_C[98] (Description := "MTR/CL1T-24 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_25_STS OF G_C[97] (Description := "MTR/CL1T-25 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL1T_26_STS OF G_C[96] (Description := "MTR/CL1T-26 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_01_STS OF G_C[67] (Description := "MTR/CL2T-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_02_STS OF G_C[66] (Description := "MTR/CL2T-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_03_STS OF G_C[65] (Description := "MTR/CL2T-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_04_STS OF G_C[64] (Description := "MTR/CL2T-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_05_STS OF G_C[63] (Description := "MTR/CL2T-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_06_STS OF G_C[62] (Description := "MTR/CL2T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_07_STS OF G_C[61] (Description := "MTR/CL2T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_08_STS OF G_C[60] (Description := "MTR/CL2T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL2T_09_STS OF G_C[59] (Description := "MTR/CL2T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_01_STS OF G_C[75] (Description := "MTR/CL3T-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_02_STS OF G_C[74] (Description := "MTR/CL3T-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_03_STS OF G_C[73] (Description := "MTR/CL3T-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_04_STS OF G_C[72] (Description := "MTR/CL3T-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_05_STS OF G_C[71] (Description := "MTR/CL3T-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_06_STS OF G_C[70] (Description := "MTR/CL3T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_07_STS OF G_C[69] (Description := "MTR/CL3T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CL3T_08_STS OF G_C[68] (Description := "MTR/CL3T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_CS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_CTX : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_DOOR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_HCD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_HSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [2490374,3,2490374,3,0,0,0,0,0,0];
		G_HX1T_06_STS OF G_C[126] (Description := "MTR/HX1T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_07_STS OF G_C[125] (Description := "MTR/HX1T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_08_STS OF G_C[124] (Description := "MTR/HX1T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_09_STS OF G_C[123] (Description := "MTR/HX1T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_10A_STS OF G_C[95] (Description := "MTR/HX1T-10A Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_10_STS OF G_C[122] (Description := "MTR/HX1T-10 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_HX1T_11_STS OF G_C[119] (Description := "MTR/HX1T-11 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_ISD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_L3 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_MCP : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [720902,4456462,65551,4456462,65551,0,0,0,0,0];
		G_MCP_01_STS OF G_MCP[1] (Description := "PNL/MCP-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_MCP_02_STS OF G_MCP[2] (Description := "PNL/MCP-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_MCP_03_STS OF G_MCP[3] (Description := "PNL/MCP-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_MCP_16_STS OF G_MCP[4] (Description := "PNL/MCP-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_MCP_BM1_STS OF G_MCP[0] (Description := "PNL/MCP-BM1 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_MEC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_MU : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_O2T_04_STS OF G_C[52] (Description := "MTR/O2T-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_05_STS OF G_C[51] (Description := "MTR/O2T-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_06_STS OF G_C[50] (Description := "MTR/O2T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_07_STS OF G_C[49] (Description := "MTR/O2T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_08_STS OF G_C[48] (Description := "MTR/O2T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_09_STS OF G_C[47] (Description := "MTR/O2T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_10_STS OF G_C[46] (Description := "MTR/O2T-10 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_11_STS OF G_C[45] (Description := "MTR/O2T-11 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_12_STS OF G_C[44] (Description := "MTR/O2T-12 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_13_STS OF G_C[43] (Description := "MTR/O2T-13 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_14_STS OF G_C[42] (Description := "MTR/O2T-14 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_15_STS OF G_C[41] (Description := "MTR/O2T-15 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_16_STS OF G_C[40] (Description := "MTR/O2T-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_17_STS OF G_C[39] (Description := "MTR/O2T-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O2T_18_STS OF G_C[38] (Description := "MTR/O2T-18 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O3T_17_STS OF G_C[138] (Description := "MTR/O3T-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O3T_18_STS OF G_C[137] (Description := "MTR/O3T-18 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O3T_19_STS OF G_C[136] (Description := "MTR/O3T-19 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O3T_20_STS OF G_C[135] (Description := "MTR/O3T-20 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O3T_21_STS OF G_C[134] (Description := "MTR/O3T-21 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_05_STS OF G_C[84] (Description := "MTR/O4T-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_06_STS OF G_C[83] (Description := "MTR/O4T-06 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_07_STS OF G_C[82] (Description := "MTR/O4T-07 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_08_STS OF G_C[81] (Description := "MTR/O4T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_09_STS OF G_C[80] (Description := "MTR/O4T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_10_STS OF G_C[79] (Description := "MTR/O4T-10 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_11_STS OF G_C[78] (Description := "MTR/O4T-11 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_12_STS OF G_C[77] (Description := "MTR/O4T-12 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_13_STS OF G_C[76] (Description := "MTR/O4T-13 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_16_STS OF G_C[133] (Description := "MTR/O4T-16 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_17_STS OF G_C[132] (Description := "MTR/O4T-17 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_18_STS OF G_C[131] (Description := "MTR/O4T-18 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_19_STS OF G_C[130] (Description := "MTR/O4T-19 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_20_STS OF G_C[129] (Description := "MTR/O4T-20 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_21_STS OF G_C[128] (Description := "MTR/O4T-21 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_O4T_22_STS OF G_C[127] (Description := "MTR/O4T-22 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_P : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_T5T_08_STS OF G_C[89] (Description := "MTR/T5T-08 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_T5T_09_STS OF G_C[88] (Description := "MTR/T5T-09 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_VS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		G_XO1_01_HSD_POS OF G_HSD[3] (Description := "HSD/XO1-01 Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_01_HSD_STS OF G_HSD[2] (Description := "HSD/XO1-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_01_STS OF G_C[87] (Description := "MTR/XO1-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_02_STS OF G_C[86] (Description := "MTR/XO1-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_03_STS OF G_C[85] (Description := "MTR/XO1-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_HSD_POS OF G_HSD[3] (Description := "HSD/XO1- Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO1_HSD_STS OF G_HSD[2] (Description := "HSD/XO1- Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_01_HSD_POS OF G_HSD[1] (Description := "HSD/XO2-01 Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_01_HSD_STS OF G_HSD[0] (Description := "HSD/XO2-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_01_STS OF G_C[94] (Description := "MTR/XO2-01 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_02_STS OF G_C[93] (Description := "MTR/XO2-02 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_03_STS OF G_C[92] (Description := "MTR/XO2-03 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_04_STS OF G_C[91] (Description := "MTR/XO2-04 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_05_STS OF G_C[90] (Description := "MTR/XO2-05 Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_HSD_POS OF G_HSD[1] (Description := "HSD/XO2- Position",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		G_XO2_HSD_STS OF G_HSD[0] (Description := "HSD/XO2- Status",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		HMI_BDS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_BM1_01_OUTSERV_REQ OF HMI_C[2].10 (Description := "MTR/BM1-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_01_OVRIDE_REQ OF HMI_C[2].11 (Description := "MTR/BM1-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_02_OUTSERV_REQ OF HMI_C[2].8 (Description := "MTR/BM1-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_02_OVRIDE_REQ OF HMI_C[2].9 (Description := "MTR/BM1-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_03_OUTSERV_REQ OF HMI_C[2].6 (Description := "MTR/BM1-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_03_OVRIDE_REQ OF HMI_C[2].7 (Description := "MTR/BM1-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_04_OUTSERV_REQ OF HMI_C[2].4 (Description := "MTR/BM1-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_04_OVRIDE_REQ OF HMI_C[2].5 (Description := "MTR/BM1-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_05_OUTSERV_REQ OF HMI_C[2].2 (Description := "MTR/BM1-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_05_OVRIDE_REQ OF HMI_C[2].3 (Description := "MTR/BM1-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_06_OUTSERV_REQ OF HMI_C[2].0 (Description := "MTR/BM1-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_06_OVRIDE_REQ OF HMI_C[2].1 (Description := "MTR/BM1-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_07_OUTSERV_REQ OF HMI_C[1].30 (Description := "MTR/BM1-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_07_OVRIDE_REQ OF HMI_C[1].31 (Description := "MTR/BM1-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_08_OUTSERV_REQ OF HMI_C[1].28 (Description := "MTR/BM1-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_08_OVRIDE_REQ OF HMI_C[1].29 (Description := "MTR/BM1-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_09_OUTSERV_REQ OF HMI_C[1].26 (Description := "MTR/BM1-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_09_OVRIDE_REQ OF HMI_C[1].27 (Description := "MTR/BM1-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_10_OUTSERV_REQ OF HMI_C[1].24 (Description := "MTR/BM1-10 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_10_OVRIDE_REQ OF HMI_C[1].25 (Description := "MTR/BM1-10 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_11_OUTSERV_REQ OF HMI_C[1].22 (Description := "MTR/BM1-11 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_11_OVRIDE_REQ OF HMI_C[1].23 (Description := "MTR/BM1-11 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_12_OUTSERV_REQ OF HMI_C[1].20 (Description := "MTR/BM1-12 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_12_OVRIDE_REQ OF HMI_C[1].21 (Description := "MTR/BM1-12 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_13_OUTSERV_REQ OF HMI_C[1].18 (Description := "MTR/BM1-13 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_13_OVRIDE_REQ OF HMI_C[1].19 (Description := "MTR/BM1-13 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_14_OUTSERV_REQ OF HMI_C[1].16 (Description := "MTR/BM1-14 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_14_OVRIDE_REQ OF HMI_C[1].17 (Description := "MTR/BM1-14 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_15_OUTSERV_REQ OF HMI_C[1].14 (Description := "MTR/BM1-15 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_15_OVRIDE_REQ OF HMI_C[1].15 (Description := "MTR/BM1-15 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_16_OUTSERV_REQ OF HMI_C[1].12 (Description := "MTR/BM1-16 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_16_OVRIDE_REQ OF HMI_C[1].13 (Description := "MTR/BM1-16 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_17_OUTSERV_REQ OF HMI_C[1].10 (Description := "MTR/BM1-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_17_OVRIDE_REQ OF HMI_C[1].11 (Description := "MTR/BM1-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_18_OUTSERV_REQ OF HMI_C[1].8 (Description := "MTR/BM1-18 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_18_OVRIDE_REQ OF HMI_C[1].9 (Description := "MTR/BM1-18 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_19_OUTSERV_REQ OF HMI_C[1].6 (Description := "MTR/BM1-19 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_19_OVRIDE_REQ OF HMI_C[1].7 (Description := "MTR/BM1-19 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_20_OUTSERV_REQ OF HMI_C[1].4 (Description := "MTR/BM1-20 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_20_OVRIDE_REQ OF HMI_C[1].5 (Description := "MTR/BM1-20 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_21_OUTSERV_REQ OF HMI_C[1].2 (Description := "MTR/BM1-21 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_21_OVRIDE_REQ OF HMI_C[1].3 (Description := "MTR/BM1-21 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_22_OUTSERV_REQ OF HMI_C[1].0 (Description := "MTR/BM1-22 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_22_OVRIDE_REQ OF HMI_C[1].1 (Description := "MTR/BM1-22 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_23_OUTSERV_REQ OF HMI_C[0].30 (Description := "MTR/BM1-23 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_23_OVRIDE_REQ OF HMI_C[0].31 (Description := "MTR/BM1-23 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_24_OUTSERV_REQ OF HMI_C[0].28 (Description := "MTR/BM1-24 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_24_OVRIDE_REQ OF HMI_C[0].29 (Description := "MTR/BM1-24 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_25_OUTSERV_REQ OF HMI_C[0].26 (Description := "MTR/BM1-25 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_25_OVRIDE_REQ OF HMI_C[0].27 (Description := "MTR/BM1-25 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_26_OUTSERV_REQ OF HMI_C[0].24 (Description := "MTR/BM1-26 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_26_OVRIDE_REQ OF HMI_C[0].25 (Description := "MTR/BM1-26 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_27_OUTSERV_REQ OF HMI_C[0].22 (Description := "MTR/BM1-27 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_27_OVRIDE_REQ OF HMI_C[0].23 (Description := "MTR/BM1-27 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_28_OUTSERV_REQ OF HMI_C[0].20 (Description := "MTR/BM1-28 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_28_OVRIDE_REQ OF HMI_C[0].21 (Description := "MTR/BM1-28 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_29_OUTSERV_REQ OF HMI_C[0].18 (Description := "MTR/BM1-29 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_29_OVRIDE_REQ OF HMI_C[0].19 (Description := "MTR/BM1-29 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_30_OUTSERV_REQ OF HMI_C[0].16 (Description := "MTR/BM1-30 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_30_OVRIDE_REQ OF HMI_C[0].17 (Description := "MTR/BM1-30 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_31_OUTSERV_REQ OF HMI_C[0].14 (Description := "MTR/BM1-31 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_31_OVRIDE_REQ OF HMI_C[0].15 (Description := "MTR/BM1-31 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_32_OUTSERV_REQ OF HMI_C[0].12 (Description := "MTR/BM1-32 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_32_OVRIDE_REQ OF HMI_C[0].13 (Description := "MTR/BM1-32 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_33_OUTSERV_REQ OF HMI_C[0].10 (Description := "MTR/BM1-33 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_33_OVRIDE_REQ OF HMI_C[0].11 (Description := "MTR/BM1-33 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_34_OUTSERV_REQ OF HMI_C[0].8 (Description := "MTR/BM1-34 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_34_OVRIDE_REQ OF HMI_C[0].9 (Description := "MTR/BM1-34 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_35_OUTSERV_REQ OF HMI_C[0].6 (Description := "MTR/BM1-35 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_35_OVRIDE_REQ OF HMI_C[0].7 (Description := "MTR/BM1-35 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_36_OUTSERV_REQ OF HMI_C[0].4 (Description := "MTR/BM1-36 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_36_OVRIDE_REQ OF HMI_C[0].5 (Description := "MTR/BM1-36 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_37_OUTSERV_REQ OF HMI_C[0].2 (Description := "MTR/BM1-37 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_37_OVRIDE_REQ OF HMI_C[0].3 (Description := "MTR/BM1-37 HMI Override Request",
		            RADIX := Decimal);
		HMI_BM1_38_OUTSERV_REQ OF HMI_C[0].0 (Description := "MTR/BM1-38 Out of Service Request",
		            RADIX := Decimal);
		HMI_BM1_38_OVRIDE_REQ OF HMI_C[0].1 (Description := "MTR/BM1-38 HMI Override Request",
		            RADIX := Decimal);
		HMI_C : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_C2T_12_OUTSERV_REQ OF HMI_C[3].20 (Description := "MTR/C2T-12 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_12_OVRIDE_REQ OF HMI_C[3].21 (Description := "MTR/C2T-12 HMI Override Request",
		            RADIX := Decimal);
		HMI_C2T_13_OUTSERV_REQ OF HMI_C[3].18 (Description := "MTR/C2T-13 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_13_OVRIDE_REQ OF HMI_C[3].19 (Description := "MTR/C2T-13 HMI Override Request",
		            RADIX := Decimal);
		HMI_C2T_14_OUTSERV_REQ OF HMI_C[3].16 (Description := "MTR/C2T-14 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_14_OVRIDE_REQ OF HMI_C[3].17 (Description := "MTR/C2T-14 HMI Override Request",
		            RADIX := Decimal);
		HMI_C2T_15_OUTSERV_REQ OF HMI_C[3].14 (Description := "MTR/C2T-15 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_15_OVRIDE_REQ OF HMI_C[3].15 (Description := "MTR/C2T-15 HMI Override Request",
		            RADIX := Decimal);
		HMI_C2T_16_OUTSERV_REQ OF HMI_C[3].12 (Description := "MTR/C2T-16 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_16_OVRIDE_REQ OF HMI_C[3].13 (Description := "MTR/C2T-16 HMI Override Request",
		            RADIX := Decimal);
		HMI_C2T_17_OUTSERV_REQ OF HMI_C[3].10 (Description := "MTR/C2T-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_C2T_17_OVRIDE_REQ OF HMI_C[3].11 (Description := "MTR/C2T-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL12T_35_OUTSERV_REQ OF HMI_C[8].24 (Description := "MTR/CL12T-35 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL12T_35_OVRIDE_REQ OF HMI_C[8].25 (Description := "MTR/CL12T-35 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL12T_36_OUTSERV_REQ OF HMI_C[8].22 (Description := "MTR/CL12T-36 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL12T_36_OVRIDE_REQ OF HMI_C[8].23 (Description := "MTR/CL12T-36 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_01_OUTSERV_REQ OF HMI_C[7].18 (Description := "MTR/CL1T-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_01_OVRIDE_REQ OF HMI_C[7].19 (Description := "MTR/CL1T-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_02_OUTSERV_REQ OF HMI_C[7].16 (Description := "MTR/CL1T-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_02_OVRIDE_REQ OF HMI_C[7].17 (Description := "MTR/CL1T-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_03_OUTSERV_REQ OF HMI_C[7].14 (Description := "MTR/CL1T-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_03_OVRIDE_REQ OF HMI_C[7].15 (Description := "MTR/CL1T-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_04_OUTSERV_REQ OF HMI_C[7].12 (Description := "MTR/CL1T-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_04_OVRIDE_REQ OF HMI_C[7].13 (Description := "MTR/CL1T-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_05_OUTSERV_REQ OF HMI_C[7].10 (Description := "MTR/CL1T-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_05_OVRIDE_REQ OF HMI_C[7].11 (Description := "MTR/CL1T-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_06_OUTSERV_REQ OF HMI_C[7].8 (Description := "MTR/CL1T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_06_OVRIDE_REQ OF HMI_C[7].9 (Description := "MTR/CL1T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_07_OUTSERV_REQ OF HMI_C[7].6 (Description := "MTR/CL1T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_07_OVRIDE_REQ OF HMI_C[7].7 (Description := "MTR/CL1T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_08_OUTSERV_REQ OF HMI_C[7].4 (Description := "MTR/CL1T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_08_OVRIDE_REQ OF HMI_C[7].5 (Description := "MTR/CL1T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_09_OUTSERV_REQ OF HMI_C[7].2 (Description := "MTR/CL1T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_09_OVRIDE_REQ OF HMI_C[7].3 (Description := "MTR/CL1T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_10_OUTSERV_REQ OF HMI_C[7].0 (Description := "MTR/CL1T-10 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_10_OVRIDE_REQ OF HMI_C[7].1 (Description := "MTR/CL1T-10 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_11_OUTSERV_REQ OF HMI_C[6].30 (Description := "MTR/CL1T-11 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_11_OVRIDE_REQ OF HMI_C[6].31 (Description := "MTR/CL1T-11 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_12_OUTSERV_REQ OF HMI_C[6].28 (Description := "MTR/CL1T-12 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_12_OVRIDE_REQ OF HMI_C[6].29 (Description := "MTR/CL1T-12 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_13_OUTSERV_REQ OF HMI_C[6].26 (Description := "MTR/CL1T-13 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_13_OVRIDE_REQ OF HMI_C[6].27 (Description := "MTR/CL1T-13 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_14_OUTSERV_REQ OF HMI_C[6].24 (Description := "MTR/CL1T-14 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_14_OVRIDE_REQ OF HMI_C[6].25 (Description := "MTR/CL1T-14 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_15_OUTSERV_REQ OF HMI_C[6].22 (Description := "MTR/CL1T-15 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_15_OVRIDE_REQ OF HMI_C[6].23 (Description := "MTR/CL1T-15 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_16_OUTSERV_REQ OF HMI_C[6].20 (Description := "MTR/CL1T-16 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_16_OVRIDE_REQ OF HMI_C[6].21 (Description := "MTR/CL1T-16 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_17_OUTSERV_REQ OF HMI_C[6].18 (Description := "MTR/CL1T-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_17_OVRIDE_REQ OF HMI_C[6].19 (Description := "MTR/CL1T-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_18_OUTSERV_REQ OF HMI_C[6].16 (Description := "MTR/CL1T-18 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_18_OVRIDE_REQ OF HMI_C[6].17 (Description := "MTR/CL1T-18 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_19_OUTSERV_REQ OF HMI_C[6].14 (Description := "MTR/CL1T-19 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_19_OVRIDE_REQ OF HMI_C[6].15 (Description := "MTR/CL1T-19 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_20_OUTSERV_REQ OF HMI_C[6].12 (Description := "MTR/CL1T-20 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_20_OVRIDE_REQ OF HMI_C[6].13 (Description := "MTR/CL1T-20 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_21_OUTSERV_REQ OF HMI_C[6].10 (Description := "MTR/CL1T-21 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_21_OVRIDE_REQ OF HMI_C[6].11 (Description := "MTR/CL1T-21 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_22_OUTSERV_REQ OF HMI_C[6].8 (Description := "MTR/CL1T-22 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_22_OVRIDE_REQ OF HMI_C[6].9 (Description := "MTR/CL1T-22 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_23_OUTSERV_REQ OF HMI_C[6].6 (Description := "MTR/CL1T-23 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_23_OVRIDE_REQ OF HMI_C[6].7 (Description := "MTR/CL1T-23 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_24_OUTSERV_REQ OF HMI_C[6].4 (Description := "MTR/CL1T-24 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_24_OVRIDE_REQ OF HMI_C[6].5 (Description := "MTR/CL1T-24 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_25_OUTSERV_REQ OF HMI_C[6].2 (Description := "MTR/CL1T-25 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_25_OVRIDE_REQ OF HMI_C[6].3 (Description := "MTR/CL1T-25 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL1T_26_OUTSERV_REQ OF HMI_C[6].0 (Description := "MTR/CL1T-26 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL1T_26_OVRIDE_REQ OF HMI_C[6].1 (Description := "MTR/CL1T-26 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_01_OUTSERV_REQ OF HMI_C[4].6 (Description := "MTR/CL2T-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_01_OVRIDE_REQ OF HMI_C[4].7 (Description := "MTR/CL2T-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_02_OUTSERV_REQ OF HMI_C[4].4 (Description := "MTR/CL2T-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_02_OVRIDE_REQ OF HMI_C[4].5 (Description := "MTR/CL2T-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_03_OUTSERV_REQ OF HMI_C[4].2 (Description := "MTR/CL2T-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_03_OVRIDE_REQ OF HMI_C[4].3 (Description := "MTR/CL2T-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_04_OUTSERV_REQ OF HMI_C[4].0 (Description := "MTR/CL2T-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_04_OVRIDE_REQ OF HMI_C[4].1 (Description := "MTR/CL2T-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_05_OUTSERV_REQ OF HMI_C[3].30 (Description := "MTR/CL2T-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_05_OVRIDE_REQ OF HMI_C[3].31 (Description := "MTR/CL2T-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_06_OUTSERV_REQ OF HMI_C[3].28 (Description := "MTR/CL2T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_06_OVRIDE_REQ OF HMI_C[3].29 (Description := "MTR/CL2T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_07_OUTSERV_REQ OF HMI_C[3].26 (Description := "MTR/CL2T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_07_OVRIDE_REQ OF HMI_C[3].27 (Description := "MTR/CL2T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_08_OUTSERV_REQ OF HMI_C[3].24 (Description := "MTR/CL2T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_08_OVRIDE_REQ OF HMI_C[3].25 (Description := "MTR/CL2T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL2T_09_OUTSERV_REQ OF HMI_C[3].22 (Description := "MTR/CL2T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL2T_09_OVRIDE_REQ OF HMI_C[3].23 (Description := "MTR/CL2T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_01_OUTSERV_REQ OF HMI_C[4].22 (Description := "MTR/CL3T-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_01_OVRIDE_REQ OF HMI_C[4].23 (Description := "MTR/CL3T-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_02_OUTSERV_REQ OF HMI_C[4].20 (Description := "MTR/CL3T-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_02_OVRIDE_REQ OF HMI_C[4].21 (Description := "MTR/CL3T-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_03_OUTSERV_REQ OF HMI_C[4].18 (Description := "MTR/CL3T-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_03_OVRIDE_REQ OF HMI_C[4].19 (Description := "MTR/CL3T-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_04_OUTSERV_REQ OF HMI_C[4].16 (Description := "MTR/CL3T-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_04_OVRIDE_REQ OF HMI_C[4].17 (Description := "MTR/CL3T-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_05_OUTSERV_REQ OF HMI_C[4].14 (Description := "MTR/CL3T-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_05_OVRIDE_REQ OF HMI_C[4].15 (Description := "MTR/CL3T-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_06_OUTSERV_REQ OF HMI_C[4].12 (Description := "MTR/CL3T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_06_OVRIDE_REQ OF HMI_C[4].13 (Description := "MTR/CL3T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_07_OUTSERV_REQ OF HMI_C[4].10 (Description := "MTR/CL3T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_07_OVRIDE_REQ OF HMI_C[4].11 (Description := "MTR/CL3T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_CL3T_08_OUTSERV_REQ OF HMI_C[4].8 (Description := "MTR/CL3T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_CL3T_08_OVRIDE_REQ OF HMI_C[4].9 (Description := "MTR/CL3T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_CTX : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_DOOR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_HCD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_HSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_HX1T_06_OUTSERV_REQ OF HMI_C[7].28 (Description := "MTR/HX1T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_06_OVRIDE_REQ OF HMI_C[7].29 (Description := "MTR/HX1T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_07_OUTSERV_REQ OF HMI_C[7].26 (Description := "MTR/HX1T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_07_OVRIDE_REQ OF HMI_C[7].27 (Description := "MTR/HX1T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_08_OUTSERV_REQ OF HMI_C[7].24 (Description := "MTR/HX1T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_08_OVRIDE_REQ OF HMI_C[7].25 (Description := "MTR/HX1T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_09_OUTSERV_REQ OF HMI_C[7].22 (Description := "MTR/HX1T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_09_OVRIDE_REQ OF HMI_C[7].23 (Description := "MTR/HX1T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_10A_OUTSERV_REQ OF HMI_C[5].30 (Description := "MTR/HX1T-10A Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_10A_OVRIDE_REQ OF HMI_C[5].31 (Description := "MTR/HX1T-10A HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_10_OUTSERV_REQ OF HMI_C[7].20 (Description := "MTR/HX1T-10 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_10_OVRIDE_REQ OF HMI_C[7].21 (Description := "MTR/HX1T-10 HMI Override Request",
		            RADIX := Decimal);
		HMI_HX1T_11_OUTSERV_REQ OF HMI_C[7].14 (Description := "MTR/HX1T-11 Out of Service Request",
		            RADIX := Decimal);
		HMI_HX1T_11_OVRIDE_REQ OF HMI_C[7].15 (Description := "MTR/HX1T-11 HMI Override Request",
		            RADIX := Decimal);
		HMI_ISD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_L3 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_MEC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_MU : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_O2T_04_OUTSERV_REQ OF HMI_C[3].8 (Description := "MTR/O2T-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_04_OVRIDE_REQ OF HMI_C[3].9 (Description := "MTR/O2T-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_05_OUTSERV_REQ OF HMI_C[3].6 (Description := "MTR/O2T-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_05_OVRIDE_REQ OF HMI_C[3].7 (Description := "MTR/O2T-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_06_OUTSERV_REQ OF HMI_C[3].4 (Description := "MTR/O2T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_06_OVRIDE_REQ OF HMI_C[3].5 (Description := "MTR/O2T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_07_OUTSERV_REQ OF HMI_C[3].2 (Description := "MTR/O2T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_07_OVRIDE_REQ OF HMI_C[3].3 (Description := "MTR/O2T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_08_OUTSERV_REQ OF HMI_C[3].0 (Description := "MTR/O2T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_08_OVRIDE_REQ OF HMI_C[3].1 (Description := "MTR/O2T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_09_OUTSERV_REQ OF HMI_C[2].30 (Description := "MTR/O2T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_09_OVRIDE_REQ OF HMI_C[2].31 (Description := "MTR/O2T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_10_OUTSERV_REQ OF HMI_C[2].28 (Description := "MTR/O2T-10 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_10_OVRIDE_REQ OF HMI_C[2].29 (Description := "MTR/O2T-10 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_11_OUTSERV_REQ OF HMI_C[2].26 (Description := "MTR/O2T-11 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_11_OVRIDE_REQ OF HMI_C[2].27 (Description := "MTR/O2T-11 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_12_OUTSERV_REQ OF HMI_C[2].24 (Description := "MTR/O2T-12 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_12_OVRIDE_REQ OF HMI_C[2].25 (Description := "MTR/O2T-12 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_13_OUTSERV_REQ OF HMI_C[2].22 (Description := "MTR/O2T-13 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_13_OVRIDE_REQ OF HMI_C[2].23 (Description := "MTR/O2T-13 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_14_OUTSERV_REQ OF HMI_C[2].20 (Description := "MTR/O2T-14 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_14_OVRIDE_REQ OF HMI_C[2].21 (Description := "MTR/O2T-14 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_15_OUTSERV_REQ OF HMI_C[2].18 (Description := "MTR/O2T-15 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_15_OVRIDE_REQ OF HMI_C[2].19 (Description := "MTR/O2T-15 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_16_OUTSERV_REQ OF HMI_C[2].16 (Description := "MTR/O2T-16 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_16_OVRIDE_REQ OF HMI_C[2].17 (Description := "MTR/O2T-16 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_17_OUTSERV_REQ OF HMI_C[2].14 (Description := "MTR/O2T-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_17_OVRIDE_REQ OF HMI_C[2].15 (Description := "MTR/O2T-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_O2T_18_OUTSERV_REQ OF HMI_C[2].12 (Description := "MTR/O2T-18 Out of Service Request",
		            RADIX := Decimal);
		HMI_O2T_18_OVRIDE_REQ OF HMI_C[2].13 (Description := "MTR/O2T-18 HMI Override Request",
		            RADIX := Decimal);
		HMI_O3T_17_OUTSERV_REQ OF HMI_C[8].20 (Description := "MTR/O3T-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_O3T_17_OVRIDE_REQ OF HMI_C[8].21 (Description := "MTR/O3T-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_O3T_18_OUTSERV_REQ OF HMI_C[8].18 (Description := "MTR/O3T-18 Out of Service Request",
		            RADIX := Decimal);
		HMI_O3T_18_OVRIDE_REQ OF HMI_C[8].19 (Description := "MTR/O3T-18 HMI Override Request",
		            RADIX := Decimal);
		HMI_O3T_19_OUTSERV_REQ OF HMI_C[8].16 (Description := "MTR/O3T-19 Out of Service Request",
		            RADIX := Decimal);
		HMI_O3T_19_OVRIDE_REQ OF HMI_C[8].17 (Description := "MTR/O3T-19 HMI Override Request",
		            RADIX := Decimal);
		HMI_O3T_20_OUTSERV_REQ OF HMI_C[8].14 (Description := "MTR/O3T-20 Out of Service Request",
		            RADIX := Decimal);
		HMI_O3T_20_OVRIDE_REQ OF HMI_C[8].15 (Description := "MTR/O3T-20 HMI Override Request",
		            RADIX := Decimal);
		HMI_O3T_21_OUTSERV_REQ OF HMI_C[8].12 (Description := "MTR/O3T-21 Out of Service Request",
		            RADIX := Decimal);
		HMI_O3T_21_OVRIDE_REQ OF HMI_C[8].13 (Description := "MTR/O3T-21 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_05_OUTSERV_REQ OF HMI_C[5].8 (Description := "MTR/O4T-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_05_OVRIDE_REQ OF HMI_C[5].9 (Description := "MTR/O4T-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_06_OUTSERV_REQ OF HMI_C[5].6 (Description := "MTR/O4T-06 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_06_OVRIDE_REQ OF HMI_C[5].7 (Description := "MTR/O4T-06 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_07_OUTSERV_REQ OF HMI_C[5].4 (Description := "MTR/O4T-07 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_07_OVRIDE_REQ OF HMI_C[5].5 (Description := "MTR/O4T-07 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_08_OUTSERV_REQ OF HMI_C[5].2 (Description := "MTR/O4T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_08_OVRIDE_REQ OF HMI_C[5].3 (Description := "MTR/O4T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_09_OUTSERV_REQ OF HMI_C[5].0 (Description := "MTR/O4T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_09_OVRIDE_REQ OF HMI_C[5].1 (Description := "MTR/O4T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_10_OUTSERV_REQ OF HMI_C[4].30 (Description := "MTR/O4T-10 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_10_OVRIDE_REQ OF HMI_C[4].31 (Description := "MTR/O4T-10 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_11_OUTSERV_REQ OF HMI_C[4].28 (Description := "MTR/O4T-11 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_11_OVRIDE_REQ OF HMI_C[4].29 (Description := "MTR/O4T-11 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_12_OUTSERV_REQ OF HMI_C[4].26 (Description := "MTR/O4T-12 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_12_OVRIDE_REQ OF HMI_C[4].27 (Description := "MTR/O4T-12 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_13_OUTSERV_REQ OF HMI_C[4].24 (Description := "MTR/O4T-13 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_13_OVRIDE_REQ OF HMI_C[4].25 (Description := "MTR/O4T-13 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_16_OUTSERV_REQ OF HMI_C[8].10 (Description := "MTR/O4T-16 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_16_OVRIDE_REQ OF HMI_C[8].11 (Description := "MTR/O4T-16 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_17_OUTSERV_REQ OF HMI_C[8].8 (Description := "MTR/O4T-17 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_17_OVRIDE_REQ OF HMI_C[8].9 (Description := "MTR/O4T-17 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_18_OUTSERV_REQ OF HMI_C[8].6 (Description := "MTR/O4T-18 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_18_OVRIDE_REQ OF HMI_C[8].7 (Description := "MTR/O4T-18 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_19_OUTSERV_REQ OF HMI_C[8].4 (Description := "MTR/O4T-19 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_19_OVRIDE_REQ OF HMI_C[8].5 (Description := "MTR/O4T-19 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_20_OUTSERV_REQ OF HMI_C[8].2 (Description := "MTR/O4T-20 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_20_OVRIDE_REQ OF HMI_C[8].3 (Description := "MTR/O4T-20 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_21_OUTSERV_REQ OF HMI_C[8].0 (Description := "MTR/O4T-21 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_21_OVRIDE_REQ OF HMI_C[8].1 (Description := "MTR/O4T-21 HMI Override Request",
		            RADIX := Decimal);
		HMI_O4T_22_OUTSERV_REQ OF HMI_C[7].30 (Description := "MTR/O4T-22 Out of Service Request",
		            RADIX := Decimal);
		HMI_O4T_22_OVRIDE_REQ OF HMI_C[7].31 (Description := "MTR/O4T-22 HMI Override Request",
		            RADIX := Decimal);
		HMI_P : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_PLC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_PLC_101_MAX_SCAN_RESET OF HMI_PLC[0].0 (Description := "CNTRL/PLC-101 HMI Request Max Scan Time Reset",
		            RADIX := Decimal);
		HMI_PLC_101_RES_CNTRL_MJR_FLT OF HMI_PLC[0].2 (Description := "CNTRL/PLC-101 HMI Request Major Controller Fault Reset",
		            RADIX := Decimal);
		HMI_PLC_101_RES_PRG_MJR_FLT OF HMI_PLC[0].1 (Description := "CNTRL/PLC-101 HMI Request Major Program Fault Reset",
		            RADIX := Decimal);
		HMI_T5T_08_OUTSERV_REQ OF HMI_C[5].18 (Description := "MTR/T5T-08 Out of Service Request",
		            RADIX := Decimal);
		HMI_T5T_08_OVRIDE_REQ OF HMI_C[5].19 (Description := "MTR/T5T-08 HMI Override Request",
		            RADIX := Decimal);
		HMI_T5T_09_OUTSERV_REQ OF HMI_C[5].16 (Description := "MTR/T5T-09 Out of Service Request",
		            RADIX := Decimal);
		HMI_T5T_09_OVRIDE_REQ OF HMI_C[5].17 (Description := "MTR/T5T-09 HMI Override Request",
		            RADIX := Decimal);
		HMI_VS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal) := [0,0,0,0,0,0,0,0,0,0];
		HMI_XO1_01_OUTSERV_REQ OF HMI_C[5].14 (Description := "MTR/XO1-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO1_01_OVRIDE_REQ OF HMI_C[5].15 (Description := "MTR/XO1-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO1_02_OUTSERV_REQ OF HMI_C[5].12 (Description := "MTR/XO1-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO1_02_OVRIDE_REQ OF HMI_C[5].13 (Description := "MTR/XO1-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO1_03_OUTSERV_REQ OF HMI_C[5].10 (Description := "MTR/XO1-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO1_03_OVRIDE_REQ OF HMI_C[5].11 (Description := "MTR/XO1-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO1_HSD_DIVERT_ALL_REQ OF HMI_HSD[0].5 (Description := "HSD/XO1- All Request",
		            RADIX := Decimal);
		HMI_XO1_HSD_DIVERT_HALF_REQ OF HMI_HSD[0].6 (Description := "HSD/XO1- Half Request",
		            RADIX := Decimal);
		HMI_XO1_HSD_OUTSERV_REQ OF HMI_HSD[0].4 (Description := "HSD/XO1- Out of Service Request",
		            RADIX := Decimal);
		HMI_XO1_HSD_PROX_OVR_REQ OF HMI_HSD[0].7 (Description := "HSD/XO1- Home Prox Override",
		            RADIX := Decimal);
		HMI_XO2_01_OUTSERV_REQ OF HMI_C[5].28 (Description := "MTR/XO2-01 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_01_OVRIDE_REQ OF HMI_C[5].29 (Description := "MTR/XO2-01 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO2_02_OUTSERV_REQ OF HMI_C[5].26 (Description := "MTR/XO2-02 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_02_OVRIDE_REQ OF HMI_C[5].27 (Description := "MTR/XO2-02 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO2_03_OUTSERV_REQ OF HMI_C[5].24 (Description := "MTR/XO2-03 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_03_OVRIDE_REQ OF HMI_C[5].25 (Description := "MTR/XO2-03 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO2_04_OUTSERV_REQ OF HMI_C[5].22 (Description := "MTR/XO2-04 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_04_OVRIDE_REQ OF HMI_C[5].23 (Description := "MTR/XO2-04 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO2_05_OUTSERV_REQ OF HMI_C[5].20 (Description := "MTR/XO2-05 Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_05_OVRIDE_REQ OF HMI_C[5].21 (Description := "MTR/XO2-05 HMI Override Request",
		            RADIX := Decimal);
		HMI_XO2_HSD_DIVERT_ALL_REQ OF HMI_HSD[0].1 (Description := "HSD/XO2- All Request",
		            RADIX := Decimal);
		HMI_XO2_HSD_DIVERT_HALF_REQ OF HMI_HSD[0].2 (Description := "HSD/XO2- Half Request",
		            RADIX := Decimal);
		HMI_XO2_HSD_OUTSERV_REQ OF HMI_HSD[0].0 (Description := "HSD/XO2- Out of Service Request",
		            RADIX := Decimal);
		HMI_XO2_HSD_PROX_OVR_REQ OF HMI_HSD[0].3 (Description := "HSD/XO2- Home Prox Override",
		            RADIX := Decimal);
		HX1T OF SYS[11] (ExternalAccess := Read Only);
		HX1T_06_MTR OF MTR[123] (ExternalAccess := Read Only);
		HX1T_06_MTRx OF MTRx[123] (ExternalAccess := Read Only);
		HX1T_06_PE OF PE[129] (ExternalAccess := Read Only);
		HX1T_06_VFD OF VFD[123] (ExternalAccess := Read Only);
		HX1T_07_MTR OF MTR[122] (ExternalAccess := Read Only);
		HX1T_07_MTRx OF MTRx[122] (ExternalAccess := Read Only);
		HX1T_07_PE OF PE[128] (ExternalAccess := Read Only);
		HX1T_07_VFD OF VFD[122] (ExternalAccess := Read Only);
		HX1T_08_MTR OF MTR[121] (ExternalAccess := Read Only);
		HX1T_08_MTRx OF MTRx[121] (ExternalAccess := Read Only);
		HX1T_08_PE OF PE[127] (ExternalAccess := Read Only);
		HX1T_08_VFD OF VFD[121] (ExternalAccess := Read Only);
		HX1T_09_BT OF BTP[11] (ExternalAccess := Read Only);
		HX1T_09_BTx OF BTx[11] (ExternalAccess := Read Only);
		HX1T_09_LEN OF LEN[5] (ExternalAccess := Read Only);
		HX1T_09_LENx OF LENx[5] (ExternalAccess := Read Only);
		HX1T_09_MTR OF MTR[120] (ExternalAccess := Read Only);
		HX1T_09_MTRx OF MTRx[120] (ExternalAccess := Read Only);
		HX1T_09_PE OF PE[126] (ExternalAccess := Read Only);
		HX1T_09_VFD OF VFD[120] (ExternalAccess := Read Only);
		HX1T_10A_MTR OF MTR[118] (ExternalAccess := Read Only);
		HX1T_10A_MTRx OF MTRx[118] (ExternalAccess := Read Only);
		HX1T_10A_PE OF PE[124] (ExternalAccess := Read Only);
		HX1T_10A_VFD OF VFD[118] (ExternalAccess := Read Only);
		HX1T_10_BT OF BTP[10] (ExternalAccess := Read Only);
		HX1T_10_BTx OF BTx[10] (ExternalAccess := Read Only);
		HX1T_10_EPB_ONS OF EPB_ONS[86] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		HX1T_10_MRG OF MRG[5] (ExternalAccess := Read Only);
		HX1T_10_MRGx OF MRGx[5] (ExternalAccess := Read Only);
		HX1T_10_MTR OF MTR[119] (ExternalAccess := Read Only);
		HX1T_10_MTRx OF MTRx[119] (ExternalAccess := Read Only);
		HX1T_10_PE OF PE[125] (ExternalAccess := Read Only);
		HX1T_10_VFD OF VFD[119] (ExternalAccess := Read Only);
		HXA_ZZ_MTRx OF MTRx[137] (ExternalAccess := Read Only);
		INT : INTERNAL (ExternalAccess := Read Only) := [7,64,0,0,10,0,0,0,0,0,0,0,0,0,0,12640,0,16,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[0,0,0,0,0],[-1072600617,1000,420],[1140727,1000,0],[1140877
				,500,0],[-1072600617,500,270],[0,0,0],0];
		I_BAL_BM1_27 OF MCP_BM1_RK2_S0:12:I.Data.12 (Description := "BAG ADVANCE LANYARD",
		            RADIX := Decimal);
		I_BAL_BM1_28 OF MCP_BM1_RK2_S0:12:I.Data.13 (Description := "BAG ADVANCE LANYARD",
		            RADIX := Decimal);
		I_BAL_BM1_29 OF MCP_BM1_RK2_S0:12:I.Data.14 (Description := "BAG ADVANCE LANYARD",
		            RADIX := Decimal);
		I_BAL_BM1_30 OF MCP_BM1_RK2_S0:12:I.Data.15 (Description := "BAG ADVANCE LANYARD",
		            RADIX := Decimal);
		I_CS1_BM1_14_EPB OF MCP_BM1_RK1_S16:3:I.Data.8 (Description := "BM1-14-A E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_14_RPBA OF MCP_BM1_RK1_S16:5:I.Data.6 (Description := "BM1-14-A RESET",
		            RADIX := Decimal);
		I_CS1_BM1_16_EPB OF MCP_BM1_RK1_S16:3:I.Data.11 (Description := "BM1-16-A E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_16_RPBA OF MCP_BM1_RK1_S16:5:I.Data.9 (Description := "BM1-16-A RESET",
		            RADIX := Decimal);
		I_CS1_BM1_17_EPB OF MCP_BM1_RK1_S16:3:I.Data.12 (Description := "BM1-17-B E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_17_RPBA OF MCP_BM1_RK1_S16:5:I.Data.10 (Description := "BM1-17-B RESET",
		            RADIX := Decimal);
		I_CS1_BM1_23_EPB OF MCP_03_RK1_S0:4:I.Data.12 (Description := "BM1-23-A E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_23_RPBA OF MCP_03_RK1_S0:4:I.Data.14 (Description := "BM1-23-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_BM1_23_SPBG OF MCP_03_RK1_S0:4:I.Data.13 (Description := "BM1-23-A START",
		            RADIX := Decimal);
		I_CS1_BM1_27_EPB OF MCP_BM1_RK1_S16:4:I.Data.4 (Description := "BM1-28-B E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_27_RPBA OF MCP_BM1_RK1_S16:6:I.Data.1 (Description := "BM1-28-B RESET",
		            RADIX := Decimal);
		I_CS1_BM1_28_EPB OF MCP_BM1_RK1_S16:4:I.Data.6 (Description := "BM1-29-B E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_28_RPBA OF MCP_BM1_RK1_S16:6:I.Data.2 (Description := "RESET",
		            RADIX := Decimal);
		I_CS1_BM1_29_EPB OF MCP_BM1_RK1_S16:4:I.Data.7 (Description := "BM1-29-A E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_29_RPBA OF MCP_BM1_RK1_S16:6:I.Data.3 (Description := "BM1-29-B RESET",
		            RADIX := Decimal);
		I_CS1_BM1_30_EPB OF MCP_BM1_RK1_S16:4:I.Data.9 (Description := "BM1-30-A E-STOP",
		            RADIX := Decimal);
		I_CS1_BM1_30_RPBA OF MCP_BM1_RK1_S16:6:I.Data.5 (Description := "BM1-30-A RESET",
		            RADIX := Decimal);
		I_CS1_CL1T_01_EPB OF MCP_03_RK1_S0:3:I.Data.5 (Description := "CL1T-01-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL1T_01_SPBG OF MCP_03_RK1_S0:3:I.Data.6 (Description := "CL1T-01-A START",
		            RADIX := Decimal);
		I_CS1_CL1T_02_EPB OF MCP_03_RK1_S0:3:I.Data.11 (Description := "CL1T-02-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL1T_02_RPBA OF MCP_03_RK1_S0:3:I.Data.13 (Description := "CL1T-02-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_CL1T_02_SPBG OF MCP_03_RK1_S0:3:I.Data.12 (Description := "CL1T-02-A START",
		            RADIX := Decimal);
		I_CS1_CL2T_01_EPB OF MCP_02_RK1_S0:3:I.Data.5 (Description := "CL2T-01-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL2T_01_SPBG OF MCP_02_RK1_S0:3:I.Data.6 (Description := "CL2T-01-A START",
		            RADIX := Decimal);
		I_CS1_CL2T_02_EPB OF MCP_02_RK1_S0:3:I.Data.9 (Description := "CL2T-02-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL2T_02_RPBA OF MCP_02_RK1_S0:3:I.Data.11 (Description := "CL2T-02-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_CL2T_02_SPBG OF MCP_02_RK1_S0:3:I.Data.10 (Description := "CL2T-02-A START",
		            RADIX := Decimal);
		I_CS1_CL2T_05_EPB OF MCP_02_RK1_S0:3:I.Data.19 (Description := "CL2T-05-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL2T_05_RPBA OF MCP_02_RK1_S0:3:I.Data.21 (Description := "CL2T-05-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_CL2T_05_SPBG OF MCP_02_RK1_S0:3:I.Data.20 (Description := "CL2T-05-A START",
		            RADIX := Decimal);
		I_CS1_CL3T_01_EPB OF MCP_02_RK1_S0:4:I.Data.10 (Description := "CL3T-01-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL3T_01_SPBG OF MCP_02_RK1_S0:4:I.Data.11 (Description := "CL3T-01-A START",
		            RADIX := Decimal);
		I_CS1_CL3T_02_EPB OF MCP_02_RK1_S0:4:I.Data.14 (Description := "CL3T-02-A E-STOP",
		            RADIX := Decimal);
		I_CS1_CL3T_02_RPBA OF MCP_02_RK1_S0:4:I.Data.16 (Description := "CL3T-02-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_CL3T_02_SPBG OF MCP_02_RK1_S0:4:I.Data.15 (Description := "CL3T-02-A START",
		            RADIX := Decimal);
		I_CS1_O3T_19_EPB OF MCP_16_RK1_S0:3:I.Data.8 (Description := "O3T-19-A E-STOP",
		            RADIX := Decimal);
		I_CS1_O3T_19_RPBA OF MCP_16_RK1_S0:3:I.Data.10 (Description := "O3T-19-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_O3T_19_SPBG OF MCP_16_RK1_S0:3:I.Data.9 (Description := "O3T-19-A START",
		            RADIX := Decimal);
		I_CS1_O4T_21_EPB OF MCP_16_RK1_S0:3:I.Data.17 (Description := "O4T-21-A E-STOP",
		            RADIX := Decimal);
		I_CS1_O4T_21_RPBA OF MCP_16_RK1_S0:3:I.Data.19 (Description := "O4T-21-A JAM RESET",
		            RADIX := Decimal);
		I_CS1_O4T_21_SPBG OF MCP_16_RK1_S0:3:I.Data.18 (Description := "O4T-21-A START",
		            RADIX := Decimal);
		I_CS2_BM1_14_EPB OF MCP_BM1_RK1_S16:3:I.Data.7 (Description := "BM1-14-B E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_14_RPBA OF MCP_BM1_RK1_S16:5:I.Data.5 (Description := "BM1-14-B RESET",
		            RADIX := Decimal);
		I_CS2_BM1_16_EPB OF MCP_BM1_RK1_S16:3:I.Data.10 (Description := "BM1-16-B E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_16_RPBA OF MCP_BM1_RK1_S16:5:I.Data.8 (Description := "BM1-16-B RESET",
		            RADIX := Decimal);
		I_CS2_BM1_17_EPB OF MCP_BM1_RK1_S16:3:I.Data.13 (Description := "BM1-17-A E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_17_RPBA OF MCP_BM1_RK1_S16:5:I.Data.10 (RADIX := Decimal);
		I_CS2_BM1_17_SPBG OF MCP_BM1_RK1_S16:7:I.Data.1 (Description := "BM1-17 START",
		            RADIX := Decimal);
		I_CS2_BM1_27_EPB OF MCP_BM1_RK1_S16:4:I.Data.3 (Description := "BM1-27 E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_27_RPBA OF MCP_BM1_RK1_S16:6:I.Data.0 (Description := "BM1-27 RESET",
		            RADIX := Decimal);
		I_CS2_BM1_28_EPB OF MCP_BM1_RK1_S16:4:I.Data.5 (Description := "BM1-28-A E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_28_RPBA OF MCP_BM1_RK1_S16:6:I.Data.2 (Description := "BM1-28-A RESET",
		            RADIX := Decimal);
		I_CS2_BM1_29_EPB OF MCP_BM1_RK2_S0:11:I.Data.9 (Description := "BM1-29-B E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_29_FWD OF MCP_BM1_RK2_S0:11:I.Data.21 (Description := "BM1-29-B FORWARD/REVERSE KSW",
		            RADIX := Decimal);
		I_CS2_BM1_29_RPBA OF MCP_BM1_RK2_S0:11:I.Data.17 (Description := "BM1-29-B RESET",
		            RADIX := Decimal);
		I_CS2_BM1_29_SPBG OF MCP_BM1_RK2_S0:11:I.Data.13 (Description := "BM1-29-B START",
		            RADIX := Decimal);
		I_CS2_BM1_30_EPB OF MCP_BM1_RK1_S16:4:I.Data.8 (Description := "BM1-30-B E-STOP",
		            RADIX := Decimal);
		I_CS2_BM1_30_RPBA OF MCP_BM1_RK1_S16:6:I.Data.4 (Description := "BM1-30-B RESET",
		            RADIX := Decimal);
		I_CS2_CL1T_01_EPB OF MCP_03_RK1_S0:3:I.Data.7 (Description := "CL1T-01-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL1T_01_SPBG OF MCP_03_RK1_S0:3:I.Data.8 (Description := "CL1T-01-B START",
		            RADIX := Decimal);
		I_CS2_CL1T_02_EPB OF MCP_03_RK1_S0:3:I.Data.14 (Description := "CL1T-02-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL1T_02_SPBG OF MCP_03_RK1_S0:3:I.Data.15 (Description := "CL1T-02-B START",
		            RADIX := Decimal);
		I_CS2_CL2T_01_EPB OF MCP_02_RK1_S0:3:I.Data.7 (Description := "CL2T-01-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL2T_01_SPBG OF MCP_02_RK1_S0:3:I.Data.8 (Description := "CL2T-01-B START",
		            RADIX := Decimal);
		I_CS2_CL2T_02_EPB OF MCP_02_RK1_S0:3:I.Data.12 (Description := "CL2T-02-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL2T_02_SPBG OF MCP_02_RK1_S0:3:I.Data.13 (Description := "CL2T-02-B START",
		            RADIX := Decimal);
		I_CS2_CL2T_05_EPB OF MCP_02_RK1_S0:3:I.Data.22 (Description := "CL2T-05-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL2T_05_RPBA OF MCP_02_RK1_S0:3:I.Data.24 (Description := "CL2T-05-B JAM RESET",
		            RADIX := Decimal);
		I_CS2_CL2T_05_SPBG OF MCP_02_RK1_S0:3:I.Data.23 (Description := "CL2T-05-B START",
		            RADIX := Decimal);
		I_CS2_CL3T_01_EPB OF MCP_02_RK1_S0:4:I.Data.12 (Description := "CL3T-01-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL3T_01_SPBG OF MCP_02_RK1_S0:4:I.Data.13 (Description := "CL3T-01-B START",
		            RADIX := Decimal);
		I_CS2_CL3T_02_EPB OF MCP_02_RK1_S0:4:I.Data.17 (Description := "CL3T-02-B E-STOP",
		            RADIX := Decimal);
		I_CS2_CL3T_02_SPBG OF MCP_02_RK1_S0:4:I.Data.18 (Description := "CL3T-02-B START",
		            RADIX := Decimal);
		I_CS2_O3T_19_EPB OF MCP_16_RK1_S0:3:I.Data.11 (Description := "O3T-19-B E-STOP",
		            RADIX := Decimal);
		I_CS2_O3T_19_RPBA OF MCP_16_RK1_S0:3:I.Data.13 (Description := "O3T-19-B JAM RESET",
		            RADIX := Decimal);
		I_CS2_O3T_19_SPBG OF MCP_16_RK1_S0:3:I.Data.12 (Description := "O3T-19-B START",
		            RADIX := Decimal);
		I_CS2_O4T_21_EPB OF MCP_16_RK1_S0:3:I.Data.20 (Description := "O4T-21-B E-STOP",
		            RADIX := Decimal);
		I_CS2_O4T_21_RPBA OF MCP_16_RK1_S0:3:I.Data.22 (Description := "O4T-21-B JAM RESET",
		            RADIX := Decimal);
		I_CS2_O4T_21_SPBG OF MCP_16_RK1_S0:3:I.Data.21 (Description := "O4T-21-B START",
		            RADIX := Decimal);
		I_CS3_BM1_27_EPB OF MCP_BM1_RK2_S0:11:I.Data.0 (Description := "BM1-27-C E-STOP",
		            RADIX := Decimal);
		I_CS3_BM1_28_EPB OF MCP_BM1_RK2_S0:11:I.Data.2 (Description := "BM1-28-C E-STOP",
		            RADIX := Decimal);
		I_CS3_BM1_29_EPB OF MCP_BM1_RK2_S0:11:I.Data.4 (Description := "BM1-29-C E-STOP",
		            RADIX := Decimal);
		I_CS3_BM1_30_EPB OF MCP_BM1_RK2_S0:11:I.Data.10 (Description := "BM1-30-C E-STOP",
		            RADIX := Decimal);
		I_CS3_BM1_30_FWD OF MCP_BM1_RK2_S0:11:I.Data.22 (Description := "BM1-30-C FORWARD/REVERSE KSW",
		            RADIX := Decimal);
		I_CS3_BM1_30_RPBA OF MCP_BM1_RK2_S0:11:I.Data.18 (Description := "BM1-30-C RESET",
		            RADIX := Decimal);
		I_CS3_BM1_30_SPBG OF MCP_BM1_RK2_S0:11:I.Data.14 (Description := "BM1-30-C START",
		            RADIX := Decimal);
		I_CS3_CL1T_01_EPB OF MCP_03_RK1_S0:3:I.Data.9 (Description := "CL1T-01-C E-STOP",
		            RADIX := Decimal);
		I_CS3_CL1T_01_SPBG OF MCP_03_RK1_S0:3:I.Data.10 (Description := "CL1T-01-C START",
		            RADIX := Decimal);
		I_CS3_CL1T_02_EPB OF MCP_03_RK1_S0:3:I.Data.16 (Description := "CL1T-02-C E-STOP",
		            RADIX := Decimal);
		I_CS3_CL1T_02_SPBG OF MCP_03_RK1_S0:3:I.Data.17 (Description := "CL1T-02-C START",
		            RADIX := Decimal);
		I_CS3_CL2T_02_EPB OF MCP_02_RK1_S0:3:I.Data.14 (Description := "CL2T-02-C E-STOP",
		            RADIX := Decimal);
		I_CS3_CL2T_02_SPBG OF MCP_02_RK1_S0:3:I.Data.15 (Description := "CL2T-02-C START",
		            RADIX := Decimal);
		I_CS3_CL3T_02_EPB OF MCP_02_RK1_S0:4:I.Data.19 (Description := "CL3T-02-C E-STOP",
		            RADIX := Decimal);
		I_CS3_CL3T_02_SPBG OF MCP_02_RK1_S0:4:I.Data.20 (Description := "CL3T-02-C START",
		            RADIX := Decimal);
		I_CS4_BM1_27_EPB OF MCP_BM1_RK2_S0:11:I.Data.1 (Description := "BM1-27-D E-STOP",
		            RADIX := Decimal);
		I_CS4_BM1_28_EPB OF MCP_BM1_RK2_S0:11:I.Data.3 (Description := "BM1-28-D E-STOP",
		            RADIX := Decimal);
		I_CS4_BM1_28_FWD OF MCP_BM1_RK2_S0:11:I.Data.20 (Description := "FORWARD/REVERSE KSW",
		            RADIX := Decimal);
		I_CS4_BM1_28_SPBG OF MCP_BM1_RK1_S16:7:I.Data.2 (Description := "BM1-29 START",
		            RADIX := Decimal);
		I_CS4_BM1_29_EPB OF MCP_BM1_RK2_S0:11:I.Data.5 (Description := "BM1-29-D E-STOP",
		            RADIX := Decimal);
		I_CS4_BM1_30_EPB OF MCP_BM1_RK2_S0:11:I.Data.6 (Description := "BM1-30-D E-STOP",
		            RADIX := Decimal);
		I_CS4_CL3T_02_EPB OF MCP_02_RK1_S0:4:I.Data.21 (Description := "CL3T-02-D E-STOP",
		            RADIX := Decimal);
		I_CS4_CL3T_02_RPBA OF MCP_02_RK1_S0:4:I.Data.23 (Description := "CL3T-02-D JAM RESET",
		            RADIX := Decimal);
		I_CS4_CL3T_02_SPBG OF MCP_02_RK1_S0:4:I.Data.22 (Description := "CL3T-02-D START",
		            RADIX := Decimal);
		I_CS5_BM1_27_EPB OF MCP_BM1_RK2_S0:11:I.Data.7 (Description := "BM1-27-E E-STOP",
		            RADIX := Decimal);
		I_CS5_BM1_27_FWD OF MCP_BM1_RK2_S0:11:I.Data.19 (Description := "BM1-27-E FORWARD/REVERSE KSW",
		            RADIX := Decimal);
		I_CS5_BM1_27_RPBA OF MCP_BM1_RK2_S0:11:I.Data.15 (Description := "BM1-27-E RESET",
		            RADIX := Decimal);
		I_CS5_BM1_27_SPBG OF MCP_BM1_RK2_S0:11:I.Data.11 (Description := "BM1-27-E START",
		            RADIX := Decimal);
		I_CS5_BM1_28_EPB OF MCP_BM1_RK2_S0:11:I.Data.8 (Description := "BM1-28-E E-STOP",
		            RADIX := Decimal);
		I_CS5_BM1_28_FWD OF MCP_BM1_RK2_S0:11:I.Data.20 (Description := "BM1-28-E FORWARD/REVERSE KSW",
		            RADIX := Decimal);
		I_CS5_BM1_28_RPBA OF MCP_BM1_RK2_S0:11:I.Data.16 (Description := "BM1-28-E RESET",
		            RADIX := Decimal);
		I_CS5_BM1_28_SPBG OF MCP_BM1_RK2_S0:11:I.Data.12 (Description := "BM1-28-E START",
		            RADIX := Decimal);
		I_CS_BM1_01_EPB OF MCP_BM1_RK1_S16:3:I.Data.1 (Description := "BM1-01 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_01_RPBA OF MCP_BM1_RK1_S16:5:I.Data.0 (Description := "BM1-01 RESET",
		            RADIX := Decimal);
		I_CS_BM1_02_EPB OF MCP_BM1_RK1_S16:3:I.Data.2 (Description := "BM1-02 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_02_RPBA OF MCP_BM1_RK1_S16:5:I.Data.1 (Description := "BM1-02 RESET",
		            RADIX := Decimal);
		I_CS_BM1_03_EPB OF MCP_BM1_RK1_S16:3:I.Data.3 (Description := "BM1-03 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_03_RPBA OF MCP_BM1_RK1_S16:5:I.Data.2 (Description := "BM1-03 RESET",
		            RADIX := Decimal);
		I_CS_BM1_06_EPB OF MCP_BM1_RK1_S16:3:I.Data.4 (Description := "BM1-06 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_06_RPBA OF MCP_BM1_RK1_S16:5:I.Data.3 (Description := "BM1-06 RESET",
		            RADIX := Decimal);
		I_CS_BM1_07_EPB OF MCP_BM1_RK1_S16:3:I.Data.5 (Description := "BM1-07 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_07_SPBG OF MCP_BM1_RK1_S16:7:I.Data.0 (Description := "BM1-07 START",
		            RADIX := Decimal);
		I_CS_BM1_13_EPB OF MCP_BM1_RK1_S16:3:I.Data.6 (Description := "BM1-13 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_13_JRB OF MCP_BM1_RK1_S16:7:I.Data.6 (Description := "BM1-13 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_BM1_13_RPBA OF MCP_BM1_RK1_S16:5:I.Data.4 (Description := "BM1-13 RESET",
		            RADIX := Decimal);
		I_CS_BM1_15_EPB OF MCP_BM1_RK1_S16:3:I.Data.9 (Description := "BM1-15 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_15_RPBA OF MCP_BM1_RK1_S16:5:I.Data.7 (Description := "BM1-15 RESET",
		            RADIX := Decimal);
		I_CS_BM1_17_SPBG OF MCP_BM1_RK1_S16:7:I.Data.1 (Description := "START",
		            RADIX := Decimal);
		I_CS_BM1_18_EPB OF MCP_BM1_RK1_S16:3:I.Data.14 (Description := "BM1-18 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_18_RPBA OF MCP_BM1_RK1_S16:5:I.Data.11 (Description := "BM1-18 RESET",
		            RADIX := Decimal);
		I_CS_BM1_19_EPB OF MCP_BM1_RK1_S16:3:I.Data.15 (Description := "BM1-19 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_19_RPBA OF MCP_BM1_RK1_S16:5:I.Data.12 (Description := "BM1-19 RESET",
		            RADIX := Decimal);
		I_CS_BM1_20_EPB OF MCP_BM1_RK1_S16:4:I.Data.0 (Description := "BM1-20 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_20_RPBA OF MCP_BM1_RK1_S16:5:I.Data.13 (Description := "BM1-20 RESET",
		            RADIX := Decimal);
		I_CS_BM1_23_EPB OF MCP_BM1_RK1_S16:4:I.Data.1 (Description := "BM1-23 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_23_RPBA OF MCP_BM1_RK1_S16:5:I.Data.14 (Description := "BM1-23 RESET",
		            RADIX := Decimal);
		I_CS_BM1_25_EPB OF MCP_BM1_RK1_S16:4:I.Data.2 (Description := "BM1-25 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_25_RPBA OF MCP_BM1_RK1_S16:5:I.Data.15 (Description := "BM1-25 RESET",
		            RADIX := Decimal);
		I_CS_BM1_34_EPB OF MCP_BM1_RK1_S16:4:I.Data.10 (Description := "BM1-34 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_34_RPBA OF MCP_BM1_RK1_S16:6:I.Data.6 (Description := "BM1-34 RESET",
		            RADIX := Decimal);
		I_CS_BM1_38_EPB OF MCP_BM1_RK1_S16:4:I.Data.11 (Description := "BM1-38 E-STOP",
		            RADIX := Decimal);
		I_CS_BM1_38_RPBA OF MCP_BM1_RK1_S16:6:I.Data.7 (Description := "BM1-38 RESET",
		            RADIX := Decimal);
		I_CS_BM1_MCP_RPBA OF MCP_BM1_RK1_S16:6:I.Data.9 (Description := "RESET",
		            RADIX := Decimal);
		I_CS_C2T_13_EPB OF MCP_01_RK1_S0:4:I.Data.25 (Description := "C2T-13 E-STOP",
		            RADIX := Decimal);
		I_CS_C2T_13_RPBA OF MCP_01_RK1_S0:4:I.Data.27 (Description := "C2T-13 JAM RESET",
		            RADIX := Decimal);
		I_CS_C2T_13_SPBG OF MCP_01_RK1_S0:4:I.Data.26 (Description := "C2T-13 START",
		            RADIX := Decimal);
		I_CS_C2T_17_AUTO OF MCP_01_RK1_S0:5:I.Data.0 (Description := "C2T-17 AUTO",
		            RADIX := Decimal);
		I_CS_C2T_17_EPB OF MCP_01_RK1_S0:4:I.Data.28 (Description := "C2T-17 E-STOP",
		            RADIX := Decimal);
		I_CS_C2T_17_JRB OF MCP_01_RK1_S0:4:I.Data.31 (Description := "C2T-17 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_C2T_17_RPBA OF MCP_01_RK1_S0:4:I.Data.30 (Description := "C2T-17 JAM RESET",
		            RADIX := Decimal);
		I_CS_C2T_17_SPBG OF MCP_01_RK1_S0:4:I.Data.29 (Description := "C2T-17 START",
		            RADIX := Decimal);
		I_CS_CL12T_36_AUTO OF MCP_16_RK1_S0:3:I.Data.27 (Description := "CL12T-36 AUTO",
		            RADIX := Decimal);
		I_CS_CL12T_36_EPB OF MCP_16_RK1_S0:3:I.Data.23 (Description := "CL12T-36 E-STOP",
		            RADIX := Decimal);
		I_CS_CL12T_36_JRB OF MCP_16_RK1_S0:3:I.Data.26 (Description := "CL12T-36 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_CL12T_36_RPBA OF MCP_16_RK1_S0:3:I.Data.25 (Description := "CL12T-36 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL12T_36_SPBG OF MCP_16_RK1_S0:3:I.Data.24 (Description := "CL12T-36 START",
		            RADIX := Decimal);
		I_CS_CL1T_05_EPB OF MCP_03_RK1_S0:3:I.Data.18 (Description := "CL1T-05 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_05_RPBA OF MCP_03_RK1_S0:3:I.Data.20 (Description := "CL1T-05 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_05_SPBG OF MCP_03_RK1_S0:3:I.Data.19 (Description := "CL1T-05 START",
		            RADIX := Decimal);
		I_CS_CL1T_09_EPB OF MCP_03_RK1_S0:3:I.Data.21 (Description := "CL1T-09 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_09_RPBA OF MCP_03_RK1_S0:3:I.Data.23 (Description := "CL1T-09 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_09_SPBG OF MCP_03_RK1_S0:3:I.Data.22 (Description := "CL1T-09 START",
		            RADIX := Decimal);
		I_CS_CL1T_11_EPB OF MCP_03_RK1_S0:3:I.Data.24 (Description := "CL1T-11 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_11_RPBA OF MCP_03_RK1_S0:3:I.Data.26 (Description := "CL1T-11 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_11_SPBG OF MCP_03_RK1_S0:3:I.Data.25 (Description := "CL1T-11 START",
		            RADIX := Decimal);
		I_CS_CL1T_12_EPB OF MCP_03_RK1_S0:3:I.Data.27 (Description := "CL1T-12 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_12_RPBA OF MCP_03_RK1_S0:3:I.Data.29 (Description := "CL1T-12 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_12_SPBG OF MCP_03_RK1_S0:3:I.Data.28 (Description := "CL1T-12 START",
		            RADIX := Decimal);
		I_CS_CL1T_16_EPB OF MCP_03_RK1_S0:3:I.Data.30 (Description := "CL1T-16 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_16_RPBA OF MCP_03_RK1_S0:4:I.Data.0 (Description := "CL1T-16 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_16_SPBG OF MCP_03_RK1_S0:3:I.Data.31 (Description := "CL1T-16 START",
		            RADIX := Decimal);
		I_CS_CL1T_20_EPB OF MCP_03_RK1_S0:4:I.Data.1 (Description := "CL1T-20 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_20_RPBA OF MCP_03_RK1_S0:4:I.Data.3 (Description := "CL1T-20 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_20_SPBG OF MCP_03_RK1_S0:4:I.Data.2 (Description := "CL1T-20 START",
		            RADIX := Decimal);
		I_CS_CL1T_24_EPB OF MCP_03_RK1_S0:4:I.Data.4 (Description := "CL1T-24 E-STOP",
		            RADIX := Decimal);
		I_CS_CL1T_24_RPBA OF MCP_03_RK1_S0:4:I.Data.6 (Description := "CL1T-24 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL1T_24_SPBG OF MCP_03_RK1_S0:4:I.Data.5 (Description := "CL1T-24 START",
		            RADIX := Decimal);
		I_CS_CL2T_04_EPB OF MCP_02_RK1_S0:3:I.Data.16 (Description := "CL2T-04 E-STOP",
		            RADIX := Decimal);
		I_CS_CL2T_04_RPBA OF MCP_02_RK1_S0:3:I.Data.18 (Description := "CL2T-04 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL2T_04_SPBG OF MCP_02_RK1_S0:3:I.Data.17 (Description := "CL2T-04 START",
		            RADIX := Decimal);
		I_CS_CL2T_09_EPB OF MCP_02_RK1_S0:3:I.Data.25 (Description := "CL2T-09 E-STOP",
		            RADIX := Decimal);
		I_CS_CL2T_09_RPBA OF MCP_02_RK1_S0:3:I.Data.27 (Description := "CL2T-09 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL2T_09_SPBG OF MCP_02_RK1_S0:3:I.Data.26 (Description := "CL2T-09 START",
		            RADIX := Decimal);
		I_CS_CL3T_03_EPB OF MCP_02_RK1_S0:4:I.Data.24 (Description := "CL3T-03 E-STOP",
		            RADIX := Decimal);
		I_CS_CL3T_03_RPBA OF MCP_02_RK1_S0:4:I.Data.26 (Description := "CL3T-03 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL3T_03_SPBG OF MCP_02_RK1_S0:4:I.Data.25 (Description := "CL3T-03 START",
		            RADIX := Decimal);
		I_CS_CL3T_04_EPB OF MCP_02_RK1_S0:4:I.Data.27 (Description := "CL3T-04 E-STOP",
		            RADIX := Decimal);
		I_CS_CL3T_04_RPBA OF MCP_02_RK1_S0:4:I.Data.29 (Description := "CL3T-04 JAM RESET",
		            RADIX := Decimal);
		I_CS_CL3T_04_SPBG OF MCP_02_RK1_S0:4:I.Data.28 (Description := "CL3T-04 START",
		            RADIX := Decimal);
		I_CS_HX1T_10_AUTO OF MCP_03_RK1_S0:4:I.Data.11 (Description := "HX1T-10 AUTO",
		            RADIX := Decimal);
		I_CS_HX1T_10_EPB OF MCP_03_RK1_S0:4:I.Data.7 (Description := "HX1T-10 E-STOP",
		            RADIX := Decimal);
		I_CS_HX1T_10_JRB OF MCP_03_RK1_S0:4:I.Data.10 (Description := "HX1T-10 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_HX1T_10_RPBA OF MCP_03_RK1_S0:4:I.Data.9 (Description := "HX1T-10 JAM RESET",
		            RADIX := Decimal);
		I_CS_HX1T_10_SPBG OF MCP_03_RK1_S0:4:I.Data.8 (Description := "HX1T-10 START",
		            RADIX := Decimal);
		I_CS_MCP_01_APB OF MCP_01_RK1_S0:4:I.Data.3 (Description := "MCP-01 ALARM SILENCE",
		            RADIX := Decimal);
		I_CS_MCP_01_EPB OF MCP_01_RK1_S0:4:I.Data.0 (Description := "MCP-01 E-STOP",
		            RADIX := Decimal);
		I_CS_MCP_01_SPBG OF MCP_01_RK1_S0:4:I.Data.1 (Description := "MCP-01 RESET/START",
		            RADIX := Decimal);
		I_CS_MCP_01_TPB OF MCP_01_RK1_S0:4:I.Data.2 (Description := "MCP-01 LAMP TEST",
		            RADIX := Decimal);
		I_CS_MCP_02_APB OF MCP_02_RK1_S0:3:I.Data.3 (Description := "MCP-02 ALARM SILENCE",
		            RADIX := Decimal);
		I_CS_MCP_02_EPB OF MCP_02_RK1_S0:3:I.Data.0 (Description := "MCP-02 E-STOP",
		            RADIX := Decimal);
		I_CS_MCP_02_SPBG OF MCP_02_RK1_S0:3:I.Data.1 (Description := "MCP-02 RESET/START",
		            RADIX := Decimal);
		I_CS_MCP_02_TPB OF MCP_02_RK1_S0:3:I.Data.2 (Description := "MCP-02 LAMP TEST",
		            RADIX := Decimal);
		I_CS_MCP_03_APB OF MCP_03_RK1_S0:3:I.Data.3 (Description := "MCP-03 ALARM SILENCE",
		            RADIX := Decimal);
		I_CS_MCP_03_EPB OF MCP_03_RK1_S0:3:I.Data.0 (Description := "MCP-03 E-STOP",
		            RADIX := Decimal);
		I_CS_MCP_03_SPBG OF MCP_03_RK1_S0:3:I.Data.1 (Description := "MCP-03 RESET/START",
		            RADIX := Decimal);
		I_CS_MCP_03_TPB OF MCP_03_RK1_S0:3:I.Data.2 (Description := "MCP-03 LAMP TEST",
		            RADIX := Decimal);
		I_CS_MCP_16_APB OF MCP_16_RK1_S0:3:I.Data.3 (Description := "MCP-16 ALARM SILENCE",
		            RADIX := Decimal);
		I_CS_MCP_16_EPB OF MCP_16_RK1_S0:3:I.Data.0 (Description := "MCP-16 E-STOP",
		            RADIX := Decimal);
		I_CS_MCP_16_SPBG OF MCP_16_RK1_S0:3:I.Data.1 (Description := "MCP-16 RESET/START",
		            RADIX := Decimal);
		I_CS_MCP_16_TPB OF MCP_16_RK1_S0:3:I.Data.2 (Description := "MCP-16 LAMP TEST",
		            RADIX := Decimal);
		I_CS_MCP_BM1_APB OF MCP_BM1_RK1_S16:6:I.Data.11 (Description := "MCP-BM1 ALARM SILENCE",
		            RADIX := Decimal);
		I_CS_MCP_BM1_EPB OF MCP_BM1_RK1_S16:3:I.Data.0 (Description := "MCP-BM1 E-STOP",
		            RADIX := Decimal);
		I_CS_MCP_BM1_SPBG OF MCP_BM1_RK1_S16:6:I.Data.9 (Description := "BM1-MCP RESET",
		            RADIX := Decimal);
		I_CS_MCP_BM1_TPB OF MCP_BM1_RK1_S16:6:I.Data.10 (Description := "MCP-BM1 LAMP TEST",
		            RADIX := Decimal);
		I_CS_O2T_04_EPB OF MCP_01_RK1_S0:4:I.Data.5 (Description := "O2T-04 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_04_RPBA OF MCP_01_RK1_S0:4:I.Data.7 (Description := "O2T-04 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_04_SPBG OF MCP_01_RK1_S0:4:I.Data.6 (Description := "O2T-04 START",
		            RADIX := Decimal);
		I_CS_O2T_06_EPB OF MCP_01_RK1_S0:4:I.Data.8 (Description := "O2T-06 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_06_RPBA OF MCP_01_RK1_S0:4:I.Data.10 (Description := "O2T-06 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_06_SPBG OF MCP_01_RK1_S0:4:I.Data.9 (Description := "O2T-06 START",
		            RADIX := Decimal);
		I_CS_O2T_10_EPB OF MCP_01_RK1_S0:4:I.Data.11 (Description := "O2T-10 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_10_RPBA OF MCP_01_RK1_S0:4:I.Data.13 (Description := "O2T-10 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_10_SPBG OF MCP_01_RK1_S0:4:I.Data.12 (Description := "O2T-10 START",
		            RADIX := Decimal);
		I_CS_O2T_12_EPB OF MCP_01_RK1_S0:4:I.Data.14 (Description := "O2T-12 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_12_RPBA OF MCP_01_RK1_S0:4:I.Data.16 (Description := "O2T-12 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_12_SPBG OF MCP_01_RK1_S0:4:I.Data.15 (Description := "O2T-12 START",
		            RADIX := Decimal);
		I_CS_O2T_14_EPB OF MCP_01_RK1_S0:4:I.Data.17 (Description := "O2T-14 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_14_RPBA OF MCP_01_RK1_S0:4:I.Data.19 (Description := "O2T-14 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_14_SPBG OF MCP_01_RK1_S0:4:I.Data.18 (Description := "O2T-14 START",
		            RADIX := Decimal);
		I_CS_O2T_18_AUTO OF MCP_01_RK1_S0:4:I.Data.24 (Description := "O2T-18 AUTO",
		            RADIX := Decimal);
		I_CS_O2T_18_EPB OF MCP_01_RK1_S0:4:I.Data.20 (Description := "O2T-18 E-STOP",
		            RADIX := Decimal);
		I_CS_O2T_18_JRB OF MCP_01_RK1_S0:4:I.Data.23 (Description := "O2T-18 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_O2T_18_RPBA OF MCP_01_RK1_S0:4:I.Data.22 (Description := "O2T-18 JAM RESET",
		            RADIX := Decimal);
		I_CS_O2T_18_SPBG OF MCP_01_RK1_S0:4:I.Data.21 (Description := "O2T-18 START",
		            RADIX := Decimal);
		I_CS_O3T_17_EPB OF MCP_16_RK1_S0:3:I.Data.5 (Description := "O3T-17 E-STOP",
		            RADIX := Decimal);
		I_CS_O3T_17_RPBA OF MCP_16_RK1_S0:3:I.Data.7 (Description := "O3T-17 JAM RESET",
		            RADIX := Decimal);
		I_CS_O3T_17_SPBG OF MCP_16_RK1_S0:3:I.Data.6 (Description := "O3T-17 START",
		            RADIX := Decimal);
		I_CS_O4T_06_EPB OF MCP_02_RK1_S0:4:I.Data.1 (Description := "O4T-06 E-STOP",
		            RADIX := Decimal);
		I_CS_O4T_06_RPBA OF MCP_02_RK1_S0:4:I.Data.3 (Description := "O4T-06 JAM RESET",
		            RADIX := Decimal);
		I_CS_O4T_06_SPBG OF MCP_02_RK1_S0:4:I.Data.2 (Description := "O4T-06 START",
		            RADIX := Decimal);
		I_CS_O4T_10_EPB OF MCP_02_RK1_S0:4:I.Data.4 (Description := "O4T-10 E-STOP",
		            RADIX := Decimal);
		I_CS_O4T_10_RPBA OF MCP_02_RK1_S0:4:I.Data.6 (Description := "O4T-10 JAM RESET",
		            RADIX := Decimal);
		I_CS_O4T_10_SPBG OF MCP_02_RK1_S0:4:I.Data.5 (Description := "O4T-10 START",
		            RADIX := Decimal);
		I_CS_O4T_16_EPB OF MCP_16_RK1_S0:3:I.Data.14 (Description := "O4T-16 E-STOP",
		            RADIX := Decimal);
		I_CS_O4T_16_RPBA OF MCP_16_RK1_S0:3:I.Data.16 (Description := "O4T-16 JAM RESET",
		            RADIX := Decimal);
		I_CS_O4T_16_SPBG OF MCP_16_RK1_S0:3:I.Data.15 (Description := "O4T-16 START",
		            RADIX := Decimal);
		I_CS_T5T_09_AUTO OF MCP_02_RK1_S0:4:I.Data.0 (Description := "T5T-09 AUTO",
		            RADIX := Decimal);
		I_CS_T5T_09_EPB OF MCP_02_RK1_S0:3:I.Data.28 (Description := "T5T-09 E-STOP",
		            RADIX := Decimal);
		I_CS_T5T_09_JRB OF MCP_02_RK1_S0:3:I.Data.31 (Description := "T5T-09 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_T5T_09_RPBA OF MCP_02_RK1_S0:3:I.Data.30 (Description := "T5T-09 JAM RESET",
		            RADIX := Decimal);
		I_CS_T5T_09_SPBG OF MCP_02_RK1_S0:3:I.Data.29 (Description := "T5T-09 START",
		            RADIX := Decimal);
		I_CS_XO1_01_EPB OF MCP_02_RK1_S0:4:I.Data.7 (Description := "XO1-01 E-STOP",
		            RADIX := Decimal);
		I_CS_XO1_01_RPBA OF MCP_02_RK1_S0:4:I.Data.9 (Description := "XO1-01 JAM RESET",
		            RADIX := Decimal);
		I_CS_XO1_01_SPBG OF MCP_02_RK1_S0:4:I.Data.8 (Description := "XO1-01 START",
		            RADIX := Decimal);
		I_CS_XO2_02_EPB OF MCP_03_RK1_S0:4:I.Data.15 (Description := "XO2-02 E-STOP",
		            RADIX := Decimal);
		I_CS_XO2_02_RPBA OF MCP_03_RK1_S0:4:I.Data.17 (Description := "XO2-02 JAM RESET",
		            RADIX := Decimal);
		I_CS_XO2_02_SPBG OF MCP_03_RK1_S0:4:I.Data.16 (Description := "XO2-02 START",
		            RADIX := Decimal);
		I_CS_XO2_05_AUTO OF MCP_03_RK1_S0:4:I.Data.22 (Description := "XO2-05 AUTO",
		            RADIX := Decimal);
		I_CS_XO2_05_EPB OF MCP_03_RK1_S0:4:I.Data.18 (Description := "XO2-05 E-STOP",
		            RADIX := Decimal);
		I_CS_XO2_05_JRB OF MCP_03_RK1_S0:4:I.Data.21 (Description := "XO2-05 JOG REVERSE",
		            RADIX := Decimal);
		I_CS_XO2_05_RPBA OF MCP_03_RK1_S0:4:I.Data.20 (Description := "XO2-05 JAM RESET",
		            RADIX := Decimal);
		I_CS_XO2_05_SPBG OF MCP_03_RK1_S0:4:I.Data.19 (Description := "XO2-05 START",
		            RADIX := Decimal);
		I_C_BM1_01 OF MCP_BM1_RK1_S16:7:I.Data.9 (Description := "BM1-01 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_02 OF MCP_BM1_RK1_S16:7:I.Data.10 (Description := "BM1-02 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_03 OF MCP_BM1_RK1_S16:7:I.Data.11 (Description := "BM1-03 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_04 OF MCP_BM1_RK1_S16:7:I.Data.12 (Description := "BM1-04 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_05 OF MCP_BM1_RK1_S16:7:I.Data.13 (Description := "BM1-05 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_06 OF MCP_BM1_RK1_S16:7:I.Data.14 (Description := "BM1-06 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_07 OF MCP_BM1_RK1_S16:7:I.Data.15 (Description := "BM1-07 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_08 OF MCP_BM1_RK1_S16:8:I.Data.0 (Description := "BM1-08 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_09 OF MCP_BM1_RK1_S16:8:I.Data.1 (Description := "BM1-09 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_10 OF MCP_BM1_RK1_S16:8:I.Data.2 (Description := "BM1-10 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_11 OF MCP_BM1_RK1_S16:8:I.Data.3 (Description := "BM1-11 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_12 OF MCP_BM1_RK1_S16:8:I.Data.4 (Description := "BM1-12 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_13 OF MCP_BM1_RK1_S16:8:I.Data.5 (Description := "BM1-13 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_13_FWD OF MCP_BM1_RK1_S16:8:I.Data.5 (Description := "BM1-13 MOTOR FORWARD",
		            RADIX := Decimal);
		I_C_BM1_13_REV OF MCP_BM1_RK1_S16:8:I.Data.6 (Description := "BM1-13 MOTOR REVERSE",
		            RADIX := Decimal);
		I_C_BM1_14 OF MCP_BM1_RK1_S16:8:I.Data.7 (Description := "BM1-14 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_15 OF MCP_BM1_RK1_S16:8:I.Data.8 (Description := "BM1-15 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_16 OF MCP_BM1_RK1_S16:8:I.Data.9 (Description := "BM1-16 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_17 OF MCP_BM1_RK1_S16:8:I.Data.10 (Description := "BM1-17 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_18 OF MCP_BM1_RK1_S16:8:I.Data.11 (Description := "BM1-18 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_19 OF MCP_BM1_RK1_S16:8:I.Data.12 (Description := "BM1-19 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_20 OF MCP_BM1_RK1_S16:8:I.Data.13 (Description := "BM1-20 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_21 OF MCP_BM1_RK1_S16:8:I.Data.14 (Description := "BM1-21 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_22 OF MCP_BM1_RK1_S16:8:I.Data.15 (Description := "BM1-22 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_23 OF MCP_BM1_RK1_S16:9:I.Data.0 (Description := "BM1-23 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_24 OF MCP_BM1_RK1_S16:9:I.Data.1 (Description := "BM1-24 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_25 OF MCP_BM1_RK1_S16:9:I.Data.2 (Description := "BM1-25 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_26 OF MCP_BM1_RK1_S16:9:I.Data.3 (Description := "BM1-26 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_27 OF MCP_BM1_RK1_S16:9:I.Data.4 (Description := "BM1-27 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_28 OF MCP_BM1_RK1_S16:9:I.Data.5 (Description := "BM1-28 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_29 OF MCP_BM1_RK1_S16:9:I.Data.6 (Description := "BM1-29 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_30 OF MCP_BM1_RK1_S16:9:I.Data.7 (Description := "BM1-30 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_31 OF MCP_BM1_RK1_S16:9:I.Data.8 (Description := "BM1-31 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_32 OF MCP_BM1_RK1_S16:9:I.Data.9 (Description := "BM1-32 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_33 OF MCP_BM1_RK1_S16:9:I.Data.10 (Description := "BM1-33 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_34 OF MCP_BM1_RK1_S16:9:I.Data.11 (Description := "BM1-34 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_35 OF MCP_BM1_RK1_S16:9:I.Data.12 (Description := "BM1-35 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_36 OF MCP_BM1_RK1_S16:9:I.Data.13 (Description := "BM1-36 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_37 OF MCP_BM1_RK1_S16:9:I.Data.14 (Description := "BM1-37 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_C_BM1_38 OF MCP_BM1_RK1_S16:9:I.Data.15 (Description := "BM1-38 CONTACTOR ENERGIZED",
		            RADIX := Decimal);
		I_ECR_BM1_01 OF MCP_BM1_RK1_S16:6:I.Data.13 (Description := "BM1-01 ESTOP CONTACTOR",
		            RADIX := Decimal);
		I_ECR_BM1_02 OF MCP_BM1_RK1_S16:6:I.Data.14 (Description := "BM1-02 ESTOP CONTACTOR",
		            RADIX := Decimal);
		I_ECR_BM1_03 OF MCP_BM1_RK1_S16:6:I.Data.15 (Description := "BM1-03 ESTOP CONTACTOR",
		            RADIX := Decimal);
		I_INT_C2T_12_RES OF MCP_01_RK1_S0:7:I.Data.30 (Description := "C2T-12 RESET SIGNAL",
		            RADIX := Decimal);
		I_INT_C2T_12_START OF MCP_01_RK1_S0:7:I.Data.28 (Description := "C2T-12 START SIGNAL",
		            RADIX := Decimal);
		I_INT_C2_11_JAM OF MCP_01_RK1_S0:7:I.Data.29 (Description := "C2-11 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_C4_09_RUN OF MCP_03_RK1_S0:8:I.Data.23 (Description := "C4-09 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_CL12T_35_RES OF MCP_16_RK1_S0:5:I.Data.27 (Description := "CL12T-35 FAULT RESET",
		            RADIX := Decimal);
		I_INT_CL12T_35_START OF MCP_16_RK1_S0:5:I.Data.25 (Description := "CL12T-35 START SIGNAL",
		            RADIX := Decimal);
		I_INT_CL12_34_JAM OF MCP_16_RK1_S0:5:I.Data.26 (Description := "CL12-34 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_HX1T_06_RES OF MCP_03_RK1_S0:8:I.Data.28 (Description := "HX1T-06 RESET SIGNAL",
		            RADIX := Decimal);
		I_INT_HX1T_06_START OF MCP_03_RK1_S0:8:I.Data.26 (Description := "HX1T-06 START SIGNAL",
		            RADIX := Decimal);
		I_INT_HX1_05_JAM OF MCP_03_RK1_S0:8:I.Data.27 (Description := "HX1-05 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_HX1_11_RUN OF MCP_03_RK1_S0:8:I.Data.30 (Description := "HX1-11 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_O2T_04_RES OF MCP_01_RK1_S0:7:I.Data.26 (Description := "O2T-04 RESET SIGNAL",
		            RADIX := Decimal);
		I_INT_O2T_04_START OF MCP_01_RK1_S0:7:I.Data.24 (Description := "O2T-04 START SIGNAL",
		            RADIX := Decimal);
		I_INT_O2_03_JAM OF MCP_01_RK1_S0:7:I.Data.25 (Description := "O2-03 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_O3T_17_START OF MCP_16_RK1_S0:5:I.Data.19 (Description := "O3T-17 START SIGNAL",
		            RADIX := Decimal);
		I_INT_O3T_21_RUN OF MCP_16_RK1_S0:5:I.Data.21 (Description := "O3T-21 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_O3_16_JAM OF MCP_16_RK1_S0:5:I.Data.20 (Description := "O3-16 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_O4T_05_RES OF MCP_02_RK1_S0:8:I.Data.22 (Description := "O4T-05 RESET SIGNAL",
		            RADIX := Decimal);
		I_INT_O4T_05_START OF MCP_02_RK1_S0:8:I.Data.20 (Description := "O4T-05 START SIGNAL",
		            RADIX := Decimal);
		I_INT_O4T_16_START OF MCP_16_RK1_S0:5:I.Data.22 (Description := "O4T-16 START SIGNAL",
		            RADIX := Decimal);
		I_INT_O4T_21_RUN OF MCP_16_RK1_S0:5:I.Data.24 (Description := "O4T-21 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_O4_03_MRG OF MCP_02_RK1_S0:8:I.Data.24 (Description := "O4-03 MERGE PE SIGNAL",
		            RADIX := Decimal);
		I_INT_O4_04_JAM OF MCP_02_RK1_S0:8:I.Data.21 (Description := "O4-04 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_O4_04_RUN OF MCP_02_RK1_S0:8:I.Data.23 (Description := "O4-04 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_O4_06_RUN OF MCP_02_RK1_S0:8:I.Data.19 (Description := "O4-06 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_INT_O4_15_JAM OF MCP_16_RK1_S0:5:I.Data.23 (Description := "O4-15 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_T5T_08_RES OF MCP_02_RK1_S0:8:I.Data.27 (Description := "T5T-08 RESET SIGNAL",
		            RADIX := Decimal);
		I_INT_T5T_08_START OF MCP_02_RK1_S0:8:I.Data.25 (Description := "T5T-08 START SIGNAL",
		            RADIX := Decimal);
		I_INT_T5_07_JAM OF MCP_02_RK1_S0:8:I.Data.26 (Description := "T5-07 JAM SIGNAL",
		            RADIX := Decimal);
		I_INT_T5_10_RUN OF MCP_02_RK1_S0:8:I.Data.28 (Description := "T5-10 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		I_MOL_BM1_01 OF MCP_BM1_RK1_S16:10:I.Data.0 (Description := "BM1-01 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_02 OF MCP_BM1_RK1_S16:10:I.Data.1 (Description := "BM1-02 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_03 OF MCP_BM1_RK1_S16:10:I.Data.2 (Description := "BM1-03 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_04 OF MCP_BM1_RK1_S16:10:I.Data.3 (Description := "BM1-04 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_05 OF MCP_BM1_RK1_S16:10:I.Data.4 (Description := "BM1-05 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_06 OF MCP_BM1_RK1_S16:10:I.Data.5 (Description := "BM1-06 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_07 OF MCP_BM1_RK1_S16:10:I.Data.6 (Description := "BM1-07 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_08 OF MCP_BM1_RK1_S16:10:I.Data.7 (Description := "BM1-08 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_09 OF MCP_BM1_RK1_S16:10:I.Data.8 (Description := "BM1-09 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_10 OF MCP_BM1_RK1_S16:10:I.Data.9 (Description := "BM1-10 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_11 OF MCP_BM1_RK1_S16:10:I.Data.10 (Description := "BM1-11 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_12 OF MCP_BM1_RK1_S16:10:I.Data.11 (Description := "BM1-12 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_13 OF MCP_BM1_RK1_S16:10:I.Data.12 (Description := "BM1-13 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_14 OF MCP_BM1_RK1_S16:10:I.Data.13 (Description := "BM1-14 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_15 OF MCP_BM1_RK1_S16:10:I.Data.14 (Description := "BM1-15 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_16 OF MCP_BM1_RK1_S16:10:I.Data.15 (Description := "BM1-16 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_17 OF MCP_BM1_RK1_S16:11:I.Data.0 (Description := "BM1-17 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_18 OF MCP_BM1_RK1_S16:11:I.Data.1 (Description := "BM1-18 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_19 OF MCP_BM1_RK1_S16:11:I.Data.2 (Description := "BM1-19 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_20 OF MCP_BM1_RK1_S16:11:I.Data.3 (Description := "BM1-20 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_21 OF MCP_BM1_RK1_S16:11:I.Data.4 (Description := "BM1-21 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_22 OF MCP_BM1_RK1_S16:11:I.Data.5 (Description := "BM1-22 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_23 OF MCP_BM1_RK1_S16:11:I.Data.6 (Description := "BM1-23 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_24 OF MCP_BM1_RK1_S16:11:I.Data.7 (Description := "BM1-24 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_25 OF MCP_BM1_RK1_S16:11:I.Data.8 (Description := "BM1-25 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_26 OF MCP_BM1_RK1_S16:11:I.Data.9 (Description := "BM1-26 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_27 OF MCP_BM1_RK1_S16:11:I.Data.10 (Description := "BM1-27 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_28 OF MCP_BM1_RK1_S16:11:I.Data.11 (Description := "BM1-28 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_29 OF MCP_BM1_RK1_S16:11:I.Data.12 (Description := "BM1-29 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_30 OF MCP_BM1_RK1_S16:11:I.Data.13 (Description := "BM1-30 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_31 OF MCP_BM1_RK1_S16:11:I.Data.14 (Description := "BM1-31 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_32 OF MCP_BM1_RK1_S16:11:I.Data.15 (Description := "BM1-32 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_33 OF MCP_BM1_RK1_S16:12:I.Data.0 (Description := "BM1-33 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_34 OF MCP_BM1_RK1_S16:12:I.Data.1 (Description := "BM1-34 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_35 OF MCP_BM1_RK1_S16:12:I.Data.2 (Description := "BM1-35 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_36 OF MCP_BM1_RK1_S16:12:I.Data.3 (Description := "BM1-36 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_37 OF MCP_BM1_RK1_S16:12:I.Data.4 (Description := "BM1-37 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MOL_BM1_38 OF MCP_BM1_RK1_S16:12:I.Data.5 (Description := "BM1-38 MOTOR OVERLOAD",
		            RADIX := Decimal);
		I_MSD_BM1_01 OF MCP_BM1_RK1_S16:12:I.Data.10 (Description := "BM1-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_02 OF MCP_BM1_RK1_S16:12:I.Data.11 (Description := "BM1-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_03 OF MCP_BM1_RK1_S16:12:I.Data.12 (Description := "BM1-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_04 OF MCP_BM1_RK1_S16:12:I.Data.13 (Description := "BM1-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_05 OF MCP_BM1_RK1_S16:12:I.Data.14 (Description := "BM1-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_06 OF MCP_BM1_RK1_S16:12:I.Data.15 (Description := "BM1-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_07 OF MCP_BM1_RK1_S16:13:I.Data.0 (Description := "BM1-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_08 OF MCP_BM1_RK1_S16:13:I.Data.1 (Description := "BM1-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_09 OF MCP_BM1_RK1_S16:13:I.Data.2 (Description := "BM1-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_10 OF MCP_BM1_RK1_S16:13:I.Data.3 (Description := "BM1-10 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_11 OF MCP_BM1_RK1_S16:13:I.Data.4 (Description := "BM1-11 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_12 OF MCP_BM1_RK1_S16:13:I.Data.5 (Description := "BM1-12 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_13 OF MCP_BM1_RK1_S16:13:I.Data.6 (Description := "BM1-13 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_14 OF MCP_BM1_RK1_S16:13:I.Data.7 (Description := "BM1-14 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_15 OF MCP_BM1_RK1_S16:13:I.Data.8 (Description := "BM1-15 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_16 OF MCP_BM1_RK1_S16:13:I.Data.9 (Description := "BM1-16 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_17 OF MCP_BM1_RK1_S16:13:I.Data.10 (Description := "BM1-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_18 OF MCP_BM1_RK1_S16:13:I.Data.11 (Description := "BM1-18 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_19 OF MCP_BM1_RK1_S16:13:I.Data.12 (Description := "BM1-19 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_20 OF MCP_BM1_RK1_S16:13:I.Data.13 (Description := "BM1-20 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_21 OF MCP_BM1_RK1_S16:13:I.Data.14 (Description := "BM1-21 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_22 OF MCP_BM1_RK1_S16:13:I.Data.15 (Description := "BM1-22 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_23 OF MCP_BM1_RK2_S0:10:I.Data.0 (Description := "BM1-23 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_24 OF MCP_BM1_RK2_S0:10:I.Data.1 (Description := "BM1-24 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_25 OF MCP_BM1_RK2_S0:10:I.Data.2 (Description := "BM1-25 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_26 OF MCP_BM1_RK2_S0:10:I.Data.3 (Description := "BM1-26 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_27 OF MCP_BM1_RK2_S0:10:I.Data.4 (Description := "BM1-27 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_28 OF MCP_BM1_RK2_S0:10:I.Data.5 (Description := "BM1-28 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_29 OF MCP_BM1_RK2_S0:10:I.Data.6 (Description := "BM1-29 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_30 OF MCP_BM1_RK2_S0:10:I.Data.7 (Description := "BM1-30 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_31 OF MCP_BM1_RK2_S0:10:I.Data.8 (Description := "BM1-31 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_32 OF MCP_BM1_RK2_S0:10:I.Data.9 (Description := "BM1-32 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_33 OF MCP_BM1_RK2_S0:10:I.Data.10 (Description := "BM1-33 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_34 OF MCP_BM1_RK2_S0:10:I.Data.11 (Description := "BM1-34 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_35 OF MCP_BM1_RK2_S0:10:I.Data.12 (Description := "BM1-35 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_36 OF MCP_BM1_RK2_S0:10:I.Data.13 (Description := "BM1-36 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_37 OF MCP_BM1_RK2_S0:10:I.Data.14 (Description := "BM1-37 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_BM1_38 OF MCP_BM1_RK2_S0:10:I.Data.15 (Description := "BM1-38 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_12 OF MCP_01_RK1_S0:5:I.Data.31 (Description := "C2T-12 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_13 OF MCP_01_RK1_S0:6:I.Data.0 (Description := "C2T-13 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_14 OF MCP_01_RK1_S0:6:I.Data.1 (Description := "C2T-14 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_15 OF MCP_01_RK1_S0:6:I.Data.2 (Description := "C2T-15 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_16 OF MCP_01_RK1_S0:6:I.Data.3 (Description := "C2T-16 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_C2T_17 OF MCP_01_RK1_S0:6:I.Data.4 (Description := "C2T-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL12T_35 OF MCP_16_RK1_S0:4:I.Data.11 (Description := "CL12T-35 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL12T_36 OF MCP_16_RK1_S0:4:I.Data.12 (Description := "CL12T-36 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_01 OF MCP_03_RK1_S0:5:I.Data.5 (Description := "CL1T-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_02 OF MCP_03_RK1_S0:5:I.Data.6 (Description := "CL1T-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_03 OF MCP_03_RK1_S0:5:I.Data.7 (Description := "CL1T-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_04 OF MCP_03_RK1_S0:5:I.Data.8 (Description := "CL1T-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_05 OF MCP_03_RK1_S0:5:I.Data.9 (Description := "CL1T-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_06 OF MCP_03_RK1_S0:5:I.Data.10 (Description := "CL1T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_07 OF MCP_03_RK1_S0:5:I.Data.11 (Description := "CL1T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_08 OF MCP_03_RK1_S0:5:I.Data.12 (Description := "CL1T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_09 OF MCP_03_RK1_S0:5:I.Data.13 (Description := "CL1T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_10 OF MCP_03_RK1_S0:5:I.Data.14 (Description := "CL1T-10 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_11 OF MCP_03_RK1_S0:5:I.Data.15 (Description := "CL1T-11 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_12 OF MCP_03_RK1_S0:5:I.Data.16 (Description := "CL1T-12 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_13 OF MCP_03_RK1_S0:5:I.Data.17 (Description := "CL1T-13 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_14 OF MCP_03_RK1_S0:5:I.Data.18 (Description := "CL1T-14 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_15 OF MCP_03_RK1_S0:5:I.Data.19 (Description := "CL1T-15 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_16 OF MCP_03_RK1_S0:5:I.Data.20 (Description := "CL1T-16 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_17 OF MCP_03_RK1_S0:5:I.Data.21 (Description := "CL1T-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_18 OF MCP_03_RK1_S0:5:I.Data.22 (Description := "CL1T-18 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_19 OF MCP_03_RK1_S0:5:I.Data.23 (Description := "CL1T-19 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_20 OF MCP_03_RK1_S0:5:I.Data.24 (Description := "CL1T-20 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_21 OF MCP_03_RK1_S0:5:I.Data.25 (Description := "CL1T-21 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_23 OF MCP_03_RK1_S0:5:I.Data.26 (Description := "CL1T-23 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_24 OF MCP_03_RK1_S0:5:I.Data.27 (Description := "CL1T-24 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL1T_26 OF MCP_03_RK1_S0:5:I.Data.28 (Description := "CL1T-26 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_01 OF MCP_02_RK1_S0:5:I.Data.16 (Description := "CL2T-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_02 OF MCP_02_RK1_S0:5:I.Data.17 (Description := "CL2T-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_03 OF MCP_02_RK1_S0:5:I.Data.18 (Description := "CL2T-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_04 OF MCP_02_RK1_S0:5:I.Data.19 (Description := "CL2T-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_05 OF MCP_02_RK1_S0:5:I.Data.20 (Description := "CL2T-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_06 OF MCP_02_RK1_S0:5:I.Data.21 (Description := "CL2T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_07 OF MCP_02_RK1_S0:5:I.Data.22 (Description := "CL2T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_08 OF MCP_02_RK1_S0:5:I.Data.23 (Description := "CL2T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL2T_09 OF MCP_02_RK1_S0:5:I.Data.24 (Description := "CL2T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_01 OF MCP_02_RK1_S0:5:I.Data.25 (Description := "CL3T-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_02 OF MCP_02_RK1_S0:5:I.Data.26 (Description := "CL3T-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_03 OF MCP_02_RK1_S0:5:I.Data.27 (Description := "CL3T-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_04 OF MCP_02_RK1_S0:5:I.Data.28 (Description := "CL3T-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_05 OF MCP_02_RK1_S0:5:I.Data.29 (Description := "CL3T-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_06 OF MCP_02_RK1_S0:5:I.Data.30 (Description := "CL3T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_07 OF MCP_02_RK1_S0:5:I.Data.31 (Description := "CL3T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_CL3T_08 OF MCP_02_RK1_S0:6:I.Data.0 (Description := "CL3T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_06 OF MCP_03_RK1_S0:5:I.Data.29 (Description := "HX1T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_07 OF MCP_03_RK1_S0:5:I.Data.30 (Description := "HX1T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_08 OF MCP_03_RK1_S0:5:I.Data.31 (Description := "HX1T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_09 OF MCP_03_RK1_S0:6:I.Data.0 (Description := "HX1T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_10 OF MCP_03_RK1_S0:6:I.Data.1 (Description := "HX1T-10 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_HX1T_10A OF MCP_03_RK1_S0:6:I.Data.2 (Description := "HX1T-10A MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_04 OF MCP_01_RK1_S0:5:I.Data.16 (Description := "O2T-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_05 OF MCP_01_RK1_S0:5:I.Data.17 (Description := "O2T-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_06 OF MCP_01_RK1_S0:5:I.Data.18 (Description := "O2T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_07 OF MCP_01_RK1_S0:5:I.Data.19 (Description := "O2T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_08 OF MCP_01_RK1_S0:5:I.Data.20 (Description := "O2T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_09 OF MCP_01_RK1_S0:5:I.Data.21 (Description := "O2T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_10 OF MCP_01_RK1_S0:5:I.Data.22 (Description := "O2T-10 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_11 OF MCP_01_RK1_S0:5:I.Data.23 (Description := "O2T-11 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_12 OF MCP_01_RK1_S0:5:I.Data.24 (Description := "O2T-12 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_13 OF MCP_01_RK1_S0:5:I.Data.25 (Description := "O2T-13 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_14 OF MCP_01_RK1_S0:5:I.Data.26 (Description := "O2T-14 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_15 OF MCP_01_RK1_S0:5:I.Data.27 (Description := "O2T-15 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_16 OF MCP_01_RK1_S0:5:I.Data.28 (Description := "O2T-16 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_17 OF MCP_01_RK1_S0:5:I.Data.29 (Description := "O2T-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O2T_18 OF MCP_01_RK1_S0:5:I.Data.30 (Description := "O2T-18 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O3T_17 OF MCP_16_RK1_S0:4:I.Data.0 (Description := "O3T-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O3T_18 OF MCP_16_RK1_S0:4:I.Data.1 (Description := "O3T-18 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O3T_19 OF MCP_16_RK1_S0:4:I.Data.2 (Description := "O3T-19 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O3T_20 OF MCP_16_RK1_S0:4:I.Data.3 (Description := "O3T-20 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_05 OF MCP_02_RK1_S0:6:I.Data.1 (Description := "O4T-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_06 OF MCP_02_RK1_S0:6:I.Data.2 (Description := "O4T-06 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_07 OF MCP_02_RK1_S0:6:I.Data.3 (Description := "O4T-07 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_08 OF MCP_02_RK1_S0:6:I.Data.4 (Description := "O4T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_09 OF MCP_02_RK1_S0:6:I.Data.5 (Description := "O4T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_10 OF MCP_02_RK1_S0:6:I.Data.6 (Description := "O4T-10 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_11 OF MCP_02_RK1_S0:6:I.Data.7 (Description := "O4T-11 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_12 OF MCP_02_RK1_S0:6:I.Data.8 (Description := "O4T-12 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_13 OF MCP_02_RK1_S0:6:I.Data.9 (Description := "O4T-13 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_16 OF MCP_16_RK1_S0:4:I.Data.4 (Description := "O4T-16 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_17 OF MCP_16_RK1_S0:4:I.Data.5 (Description := "O4T-17 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_18 OF MCP_16_RK1_S0:4:I.Data.6 (Description := "O4T-18 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_19 OF MCP_16_RK1_S0:4:I.Data.7 (Description := "O4T-19 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_20 OF MCP_16_RK1_S0:4:I.Data.8 (Description := "O4T-20 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_21 OF MCP_16_RK1_S0:4:I.Data.9 (Description := "O4T-21 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_O4T_22 OF MCP_16_RK1_S0:4:I.Data.10 (Description := "O4T-22 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_T5T_08 OF MCP_02_RK1_S0:6:I.Data.10 (Description := "T5T-08 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_T5T_09 OF MCP_02_RK1_S0:6:I.Data.11 (Description := "T5T-09 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO1_01 OF MCP_02_RK1_S0:6:I.Data.12 (Description := "XO1-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO1_02 OF MCP_02_RK1_S0:6:I.Data.13 (Description := "XO1-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO1_03 OF MCP_02_RK1_S0:6:I.Data.14 (Description := "XO1-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO2_01 OF MCP_03_RK1_S0:5:I.Data.0 (Description := "XO2-01 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO2_02 OF MCP_03_RK1_S0:5:I.Data.1 (Description := "XO2-02 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO2_03 OF MCP_03_RK1_S0:5:I.Data.2 (Description := "XO2-03 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO2_04 OF MCP_03_RK1_S0:5:I.Data.3 (Description := "XO2-04 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_MSD_XO2_05 OF MCP_03_RK1_S0:5:I.Data.4 (Description := "XO2-05 MOTOR SAFETY DISCONNECT",
		            RADIX := Decimal);
		I_PE1_BM1_06 OF MCP_BM1_RK1_S16:1:I.Data.1 (Description := "BM1-06-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_14 OF MCP_BM1_RK2_S0:11:I.Data.30 (Description := "BM1-14-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_19 OF MCP_BM1_RK1_S16:1:I.Data.11 (Description := "BM1-19-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_23 OF MCP_03_RK1_S0:7:I.Data.14 (Description := "BM1-23-A JAM, DIVERT",
		            RADIX := Decimal);
		I_PE1_BM1_27 OF MCP_BM1_RK2_S0:11:I.Data.28 (Description := "BM1-27-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_28 OF MCP_BM1_RK2_S0:11:I.Data.26 (Description := "BM1-28-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_29 OF MCP_BM1_RK2_S0:11:I.Data.24 (Description := "BM1-29-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_BM1_30 OF MCP_BM1_RK1_S16:2:I.Data.4 (Description := "BM1-30-A PHOTOEYE",
		            RADIX := Decimal);
		I_PE1_CL1T_26 OF MCP_03_RK1_S0:7:I.Data.12 (Description := "CL1T-26-A HEAD END, JAM",
		            RADIX := Decimal);
		I_PE1_O4T_10 OF MCP_02_RK1_S0:7:I.Data.22 (Description := "O4T-10-A HEAD END, JAM",
		            RADIX := Decimal);
		I_PE1_XO1_01 OF MCP_02_RK1_S0:7:I.Data.29 (Description := "XO1-01-A HEAD END, JAM",
		            RADIX := Decimal);
		I_PE2_BM1_06 OF MCP_BM1_RK1_S16:1:I.Data.0 (Description := "BM1-06-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_14 OF MCP_BM1_RK1_S16:1:I.Data.9 (Description := "BM1-14-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_19 OF MCP_BM1_RK1_S16:1:I.Data.10 (Description := "BM1-19-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_23 OF MCP_03_RK1_S0:7:I.Data.15 (Description := "BM1-23-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_27 OF MCP_BM1_RK2_S0:11:I.Data.29 (Description := "BM1-27-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_28 OF MCP_BM1_RK2_S0:11:I.Data.27 (Description := "BM1-28-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_29 OF MCP_BM1_RK2_S0:11:I.Data.25 (Description := "BM1-29-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_BM1_30 OF MCP_BM1_RK1_S16:2:I.Data.3 (Description := "BM1-30-B PHOTOEYE",
		            RADIX := Decimal);
		I_PE2_CL1T_26 OF MCP_03_RK1_S0:7:I.Data.13 (Description := "CL1T-26-B JAM, MERGE CONTROL",
		            RADIX := Decimal);
		I_PE2_O4T_10 OF MCP_02_RK1_S0:7:I.Data.23 (Description := "O4T-10-B JAM, DIVERT",
		            RADIX := Decimal);
		I_PE2_XO1_01 OF MCP_02_RK1_S0:7:I.Data.30 (Description := "XO1-01-B JAM, DIVERT",
		            RADIX := Decimal);
		I_PE3_BM1_30 OF MCP_BM1_RK2_S0:11:I.Data.23 (Description := "BM1-30-C PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_07 OF MCP_BM1_RK1_S16:1:I.Data.2 (Description := "BM1-07 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_08 OF MCP_BM1_RK1_S16:1:I.Data.3 (Description := "BM1-08 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_09 OF MCP_BM1_RK1_S16:1:I.Data.4 (Description := "BM1-09 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_10 OF MCP_BM1_RK1_S16:1:I.Data.5 (Description := "BM1-10 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_11 OF MCP_BM1_RK1_S16:1:I.Data.6 (Description := "BM1-11 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_12 OF MCP_BM1_RK1_S16:1:I.Data.7 (Description := "BM1-12 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_13 OF MCP_BM1_RK1_S16:1:I.Data.8 (Description := "BM1-13 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_15 OF MCP_BM1_RK2_S0:11:I.Data.26 (Description := "BM1-15 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_16 OF MCP_BM1_RK2_S0:11:I.Data.27 (Description := "BM1-16 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_17 OF MCP_BM1_RK2_S0:11:I.Data.28 (Description := "BM1-17 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_18 OF MCP_BM1_RK1_S16:6:I.Data.8 (Description := "BM1-18 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_20 OF MCP_BM1_RK1_S16:1:I.Data.12 (Description := "BM1-20 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_21 OF MCP_BM1_RK1_S16:1:I.Data.13 (Description := "BM1-21 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_22 OF MCP_BM1_RK1_S16:1:I.Data.14 (Description := "BM1-22 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_23 OF MCP_BM1_RK1_S16:1:I.Data.15 (Description := "BM1-23  HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_BM1_24 OF MCP_BM1_RK1_S16:2:I.Data.0 (Description := "BM1-24 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_25 OF MCP_BM1_RK1_S16:2:I.Data.1 (Description := "BM1-25 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_26 OF MCP_BM1_RK1_S16:2:I.Data.2 (Description := "BM1-26 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_31 OF MCP_BM1_RK1_S16:2:I.Data.5 (Description := "BM1-31 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_32 OF MCP_BM1_RK1_S16:2:I.Data.6 (Description := "BM1-32 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_33 OF MCP_BM1_RK1_S16:2:I.Data.7 (Description := "BM1-33 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_34 OF MCP_BM1_RK1_S16:2:I.Data.8 (Description := "BM1-34 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_35 OF MCP_BM1_RK1_S16:2:I.Data.9 (Description := "BM1-35 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_36 OF MCP_BM1_RK1_S16:2:I.Data.10 (Description := "BM1-36 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_37 OF MCP_BM1_RK1_S16:2:I.Data.11 (Description := "BM1-37 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_BM1_38 OF MCP_BM1_RK1_S16:2:I.Data.12 (Description := "BM1-38 PHOTOEYE",
		            RADIX := Decimal);
		I_PE_C2T_12 OF MCP_01_RK1_S0:7:I.Data.15 (Description := "C2T-12 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C2T_13 OF MCP_01_RK1_S0:7:I.Data.16 (Description := "C2T-13 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C2T_14 OF MCP_01_RK1_S0:7:I.Data.17 (Description := "C2T-14 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C2T_15 OF MCP_01_RK1_S0:7:I.Data.18 (Description := "C2T-15 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C2T_16 OF MCP_01_RK1_S0:7:I.Data.19 (Description := "C2T-16 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C2T_17 OF MCP_01_RK1_S0:7:I.Data.20 (Description := "C2T-17 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_C4_08 OF MCP_03_RK1_S0:7:I.Data.16 (Description := "C4-08 JAM, MERGE",
		            RADIX := Decimal);
		I_PE_CL12T_35 OF MCP_16_RK1_S0:5:I.Data.11 (Description := "CL12T-35 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL12T_36 OF MCP_16_RK1_S0:5:I.Data.12 (Description := "CL12T-36 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_01 OF MCP_03_RK1_S0:6:I.Data.21 (Description := "CL1T-01 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_02 OF MCP_03_RK1_S0:6:I.Data.22 (Description := "CL1T-02 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_03 OF MCP_03_RK1_S0:6:I.Data.23 (Description := "CL1T-03 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_04 OF MCP_03_RK1_S0:6:I.Data.24 (Description := "CL1T-04 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_05 OF MCP_03_RK1_S0:6:I.Data.25 (Description := "CL1T-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_06 OF MCP_03_RK1_S0:6:I.Data.26 (Description := "CL1T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_07 OF MCP_03_RK1_S0:6:I.Data.27 (Description := "CL1T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_08 OF MCP_03_RK1_S0:6:I.Data.28 (Description := "CL1T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_09 OF MCP_03_RK1_S0:6:I.Data.29 (Description := "CL1T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_10 OF MCP_03_RK1_S0:6:I.Data.30 (Description := "CL1T-10 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_11 OF MCP_03_RK1_S0:6:I.Data.31 (Description := "CL1T-11 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_12 OF MCP_03_RK1_S0:7:I.Data.0 (Description := "CL1T-12 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_13 OF MCP_03_RK1_S0:7:I.Data.1 (Description := "CL1T-13 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_14 OF MCP_03_RK1_S0:7:I.Data.2 (Description := "CL1T-14 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_15 OF MCP_03_RK1_S0:7:I.Data.3 (Description := "CL1T-15 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_16 OF MCP_03_RK1_S0:7:I.Data.4 (Description := "CL1T-16 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_17 OF MCP_03_RK1_S0:7:I.Data.5 (Description := "CL1T-17 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_18 OF MCP_03_RK1_S0:7:I.Data.6 (Description := "CL1T-18 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_19 OF MCP_03_RK1_S0:7:I.Data.7 (Description := "CL1T-19 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_20 OF MCP_03_RK1_S0:7:I.Data.8 (Description := "CL1T-20 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_21 OF MCP_03_RK1_S0:7:I.Data.9 (Description := "CL1T-21 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_23 OF MCP_03_RK1_S0:7:I.Data.10 (Description := "CL1T-23 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL1T_24 OF MCP_03_RK1_S0:7:I.Data.11 (Description := "CL1T-24 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_01 OF MCP_02_RK1_S0:7:I.Data.0 (Description := "CL2T-01 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_02 OF MCP_02_RK1_S0:7:I.Data.1 (Description := "CL2T-02 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_03 OF MCP_02_RK1_S0:7:I.Data.2 (Description := "CL2T-03 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_04 OF MCP_02_RK1_S0:7:I.Data.3 (Description := "CL2T-04 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_05 OF MCP_02_RK1_S0:7:I.Data.4 (Description := "CL2T-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_06 OF MCP_02_RK1_S0:7:I.Data.5 (Description := "CL2T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_07 OF MCP_02_RK1_S0:7:I.Data.6 (Description := "CL2T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_08 OF MCP_02_RK1_S0:7:I.Data.7 (Description := "CL2T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL2T_09 OF MCP_02_RK1_S0:7:I.Data.8 (Description := "CL2T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_01 OF MCP_02_RK1_S0:7:I.Data.9 (Description := "CL3T-01 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_02 OF MCP_02_RK1_S0:7:I.Data.10 (Description := "CL3T-02 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_03 OF MCP_02_RK1_S0:7:I.Data.11 (Description := "CL3T-03 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_04 OF MCP_02_RK1_S0:7:I.Data.12 (Description := "CL3T-04 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_05 OF MCP_02_RK1_S0:7:I.Data.13 (Description := "CL3T-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_06 OF MCP_02_RK1_S0:7:I.Data.14 (Description := "CL3T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_07 OF MCP_02_RK1_S0:7:I.Data.15 (Description := "CL3T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_CL3T_08 OF MCP_02_RK1_S0:7:I.Data.16 (Description := "CL3T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_06 OF MCP_03_RK1_S0:7:I.Data.17 (Description := "HX1T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_07 OF MCP_03_RK1_S0:7:I.Data.18 (Description := "HX1T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_08 OF MCP_03_RK1_S0:7:I.Data.19 (Description := "HX1T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_09 OF MCP_03_RK1_S0:7:I.Data.20 (Description := "HX1T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_10 OF MCP_03_RK1_S0:7:I.Data.21 (Description := "HX1T-10 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_HX1T_10A OF MCP_03_RK1_S0:7:I.Data.22 (Description := "HX1T-10A HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_04 OF MCP_01_RK1_S0:7:I.Data.0 (Description := "O2T-04 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_05 OF MCP_01_RK1_S0:7:I.Data.1 (Description := "O2T-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_06 OF MCP_01_RK1_S0:7:I.Data.2 (Description := "O2T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_07 OF MCP_01_RK1_S0:7:I.Data.3 (Description := "O2T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_08 OF MCP_01_RK1_S0:7:I.Data.4 (Description := "O2T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_09 OF MCP_01_RK1_S0:7:I.Data.5 (Description := "O2T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_10 OF MCP_01_RK1_S0:7:I.Data.6 (Description := "O2T-10 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_11 OF MCP_01_RK1_S0:7:I.Data.7 (Description := "O2T-11 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_12 OF MCP_01_RK1_S0:7:I.Data.8 (Description := "O2T-12 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_13 OF MCP_01_RK1_S0:7:I.Data.9 (Description := "O2T-13 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_14 OF MCP_01_RK1_S0:7:I.Data.10 (Description := "O2T-14 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_15 OF MCP_01_RK1_S0:7:I.Data.11 (Description := "O2T-15 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_16 OF MCP_01_RK1_S0:7:I.Data.12 (Description := "O2T-16 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_17 OF MCP_01_RK1_S0:7:I.Data.13 (Description := "O2T-17 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O2T_18 OF MCP_01_RK1_S0:7:I.Data.14 (Description := "O2T-18 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O3T_17 OF MCP_16_RK1_S0:5:I.Data.0 (Description := "O3T-17 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O3T_18 OF MCP_16_RK1_S0:5:I.Data.1 (Description := "O3T-18 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O3T_19 OF MCP_16_RK1_S0:5:I.Data.2 (Description := "O3T-19 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O3T_20 OF MCP_16_RK1_S0:5:I.Data.3 (Description := "O3T-20 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_05 OF MCP_02_RK1_S0:7:I.Data.17 (Description := "O4T-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_06 OF MCP_02_RK1_S0:7:I.Data.18 (Description := "O4T-06 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_07 OF MCP_02_RK1_S0:7:I.Data.19 (Description := "O4T-07 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_08 OF MCP_02_RK1_S0:7:I.Data.20 (Description := "O4T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_09 OF MCP_02_RK1_S0:7:I.Data.21 (Description := "O4T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_11 OF MCP_02_RK1_S0:7:I.Data.24 (Description := "O4T-11 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_12 OF MCP_02_RK1_S0:7:I.Data.25 (Description := "O4T-12 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_13 OF MCP_02_RK1_S0:7:I.Data.26 (Description := "O4T-13 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_16 OF MCP_16_RK1_S0:5:I.Data.4 (Description := "O4T-16 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_17 OF MCP_16_RK1_S0:5:I.Data.5 (Description := "O4T-17 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_18 OF MCP_16_RK1_S0:5:I.Data.6 (Description := "O4T-18 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_19 OF MCP_16_RK1_S0:5:I.Data.7 (Description := "O4T-19 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_20 OF MCP_16_RK1_S0:5:I.Data.8 (Description := "O4T-20 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_21 OF MCP_16_RK1_S0:5:I.Data.9 (Description := "O4T-21 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_O4T_22 OF MCP_16_RK1_S0:5:I.Data.10 (Description := "O4T-22 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_T5T_08 OF MCP_02_RK1_S0:7:I.Data.27 (Description := "T5T-08 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_T5T_09 OF MCP_02_RK1_S0:7:I.Data.28 (Description := "T5T-09 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO1_02 OF MCP_02_RK1_S0:7:I.Data.31 (Description := "XO1-02 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO1_03 OF MCP_02_RK1_S0:8:I.Data.0 (Description := "XO1-03 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO2_01 OF MCP_03_RK1_S0:6:I.Data.16 (Description := "XO2-01 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO2_02 OF MCP_03_RK1_S0:6:I.Data.17 (Description := "XO2-02 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO2_03 OF MCP_03_RK1_S0:6:I.Data.18 (Description := "XO2-03 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO2_04 OF MCP_03_RK1_S0:6:I.Data.19 (Description := "XO2-04 HEAD END, JAM",
		            RADIX := Decimal);
		I_PE_XO2_05 OF MCP_03_RK1_S0:6:I.Data.20 (Description := "XO2-05 HEAD END, JAM",
		            RADIX := Decimal);
		I_SD_XO1_AUTO OF MCP_02_RK1_S0:6:I.Data.29 (Description := "XO1 AUTO/MAINTENANCE",
		            RADIX := Decimal);
		I_SD_XO1_CUR OF MCP_02_RK1_S0:6:I.Data.31 (Description := "XO1 CONTROL UNIT READY",
		            RADIX := Decimal);
		I_SD_XO1_DS OF MCP_02_RK1_S0:6:I.Data.25 (Description := "XO1 PANEL DISCONNECT",
		            RADIX := Decimal);
		I_SD_XO1_EXT OF MCP_02_RK1_S0:6:I.Data.27 (Description := "XO1 PADDLE POSITION EXTENDED",
		            RADIX := Decimal);
		I_SD_XO1_FLT OF MCP_02_RK1_S0:6:I.Data.26 (Description := "XO1 FAULT",
		            RADIX := Decimal);
		I_SD_XO1_SLMR OF MCP_02_RK1_S0:6:I.Data.30 (Description := "XO1 SMART LINE MODULE READY",
		            RADIX := Decimal);
		I_SD_XO1_ZERO OF MCP_02_RK1_S0:6:I.Data.28 (Description := "XO1 PADDLE POSITION ZERO",
		            RADIX := Decimal);
		I_SD_XO2_AUTO OF MCP_03_RK1_S0:8:I.Data.4 (Description := "XO2 AUTO/MAINTENANCE",
		            RADIX := Decimal);
		I_SD_XO2_CUR OF MCP_03_RK1_S0:8:I.Data.6 (Description := "XO2 CONTROL UNIT READY",
		            RADIX := Decimal);
		I_SD_XO2_DS OF MCP_03_RK1_S0:8:I.Data.0 (Description := "XO2 PANEL DISCONNECT",
		            RADIX := Decimal);
		I_SD_XO2_EXT OF MCP_03_RK1_S0:8:I.Data.2 (Description := "XO2 PADDLE POSITION EXTENDED",
		            RADIX := Decimal);
		I_SD_XO2_FLT OF MCP_03_RK1_S0:8:I.Data.1 (Description := "XO2 FAULT",
		            RADIX := Decimal);
		I_SD_XO2_SLMR OF MCP_03_RK1_S0:8:I.Data.5 (Description := "XO2 SMART LINE MODULE READY",
		            RADIX := Decimal);
		I_SD_XO2_ZERO OF MCP_03_RK1_S0:8:I.Data.3 (Description := "XO2 PADDLE POSITION ZERO",
		            RADIX := Decimal);
		I_SE_BM1_14 OF MCP_BM1_RK1_S16:6:I.Data.12 (Description := "BM1-14 SHAFT ENCODER",
		            RADIX := Decimal);
		I_SE_BM1_23 OF MCP_03_RK1_S0:2:I.Data.16 (Description := "BM1-23 SHAFT ENCODER",
		            RADIX := Decimal);
		I_SE_C4_09 OF MCP_03_RK1_S0:2:I.Data.31 (RADIX := Decimal);
		I_SE_CL1T_26 OF MCP_03_RK1_S0:2:I.Data.17 (Description := "CL1T-26 SHAFT ENCODER",
		            RADIX := Decimal);
		I_SE_O2T_10 OF MCP_01_RK1_S0:1:I.Data.31 (Description := "O2T-10 SHAFT ENCODER",
		            RADIX := Decimal);
		I_SE_O4T_10 OF MCP_02_RK1_S0:2:I.Data.31 (Description := "O4T-10 SHAFT ENCODER",
		            RADIX := Decimal);
		I_SE_O4T_20 OF MCP_16_RK1_S0:1:I.Data.31 (RADIX := Decimal);
		I_SE_O4_04 OF MCP_02_RK1_S0:2:I.Data.30 (RADIX := Decimal);
		I_TS_MCP_01_ALM OF MCP_01_RK1_S0:4:I.Data.4 (Description := "MCP-01 MCP HIGH TEMPERATURE",
		            RADIX := Decimal);
		I_TS_MCP_02_ALM OF MCP_02_RK1_S0:3:I.Data.4 (Description := "MCP-02 MCP HIGH TEMPERATURE",
		            RADIX := Decimal);
		I_TS_MCP_03_ALM OF MCP_03_RK1_S0:3:I.Data.4 (Description := "MCP-03 MCP HIGH TEMPERATURE",
		            RADIX := Decimal);
		I_TS_MCP_16_ALM OF MCP_16_RK1_S0:3:I.Data.4 (Description := "MCP-16 MCP HIGH TEMPERATURE",
		            RADIX := Decimal);
		I_VFD_BM1_27_RDY OF MCP_BM1_RK1_S16:9:I.Data.4 (Description := "BM1-27 VFD READY",
		            RADIX := Decimal);
		I_VFD_BM1_28_RDY OF MCP_BM1_RK1_S16:9:I.Data.5 (Description := "BM1-28 VFD READY",
		            RADIX := Decimal);
		I_VFD_BM1_29_RDY OF MCP_BM1_RK1_S16:9:I.Data.6 (Description := "BM1-29 VFD READY",
		            RADIX := Decimal);
		I_VFD_BM1_30_RDY OF MCP_BM1_RK1_S16:9:I.Data.7 (Description := "BM1-30 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_12_RDY OF MCP_01_RK1_S0:1:I.Data.15 (Description := "C2T-12 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_13_RDY OF MCP_01_RK1_S0:1:I.Data.16 (Description := "C2T-13 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_14_RDY OF MCP_01_RK1_S0:1:I.Data.17 (Description := "C2T-14 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_15_RDY OF MCP_01_RK1_S0:1:I.Data.18 (Description := "C2T-15 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_16_RDY OF MCP_01_RK1_S0:1:I.Data.19 (Description := "C2T-16 VFD READY",
		            RADIX := Decimal);
		I_VFD_C2T_17_RDY OF MCP_01_RK1_S0:1:I.Data.20 (Description := "C2T-17 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL12T_35_RDY OF MCP_16_RK1_S0:1:I.Data.11 (Description := "CL12T-35 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL12T_36_RDY OF MCP_16_RK1_S0:1:I.Data.12 (Description := "CL12T-36 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_01_RDY OF MCP_03_RK1_S0:1:I.Data.5 (Description := "CL1T-01 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_02_RDY OF MCP_03_RK1_S0:1:I.Data.6 (Description := "CL1T-02 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_03_RDY OF MCP_03_RK1_S0:1:I.Data.7 (Description := "CL1T-03 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_04_RDY OF MCP_03_RK1_S0:1:I.Data.8 (Description := "CL1T-04 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_05_RDY OF MCP_03_RK1_S0:1:I.Data.9 (Description := "CL1T-05 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_06_RDY OF MCP_03_RK1_S0:1:I.Data.10 (Description := "CL1T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_07_RDY OF MCP_03_RK1_S0:1:I.Data.11 (Description := "CL1T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_08_RDY OF MCP_03_RK1_S0:1:I.Data.12 (Description := "CL1T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_09_RDY OF MCP_03_RK1_S0:1:I.Data.13 (Description := "CL1T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_10_RDY OF MCP_03_RK1_S0:1:I.Data.14 (Description := "CL1T-10 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_11_RDY OF MCP_03_RK1_S0:1:I.Data.15 (Description := "CL1T-11 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_12_RDY OF MCP_03_RK1_S0:1:I.Data.16 (Description := "CL1T-12 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_13_RDY OF MCP_03_RK1_S0:1:I.Data.17 (Description := "CL1T-13 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_14_RDY OF MCP_03_RK1_S0:1:I.Data.18 (Description := "CL1T-14 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_15_RDY OF MCP_03_RK1_S0:1:I.Data.19 (Description := "CL1T-15 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_16_RDY OF MCP_03_RK1_S0:1:I.Data.20 (Description := "CL1T-16 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_17_RDY OF MCP_03_RK1_S0:1:I.Data.21 (Description := "CL1T-17 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_18_RDY OF MCP_03_RK1_S0:1:I.Data.22 (Description := "CL1T-18 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_19_RDY OF MCP_03_RK1_S0:1:I.Data.23 (Description := "CL1T-19 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_20_RDY OF MCP_03_RK1_S0:1:I.Data.24 (Description := "CL1T-20 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_21_RDY OF MCP_03_RK1_S0:1:I.Data.25 (Description := "CL1T-21 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_23_RDY OF MCP_03_RK1_S0:1:I.Data.26 (Description := "CL1T-23 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_24_RDY OF MCP_03_RK1_S0:1:I.Data.27 (Description := "CL1T-24 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL1T_26_RDY OF MCP_03_RK1_S0:1:I.Data.28 (Description := "CL1T-26 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_01_RDY OF MCP_02_RK1_S0:1:I.Data.0 (Description := "CL2T-01 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_02_RDY OF MCP_02_RK1_S0:1:I.Data.1 (Description := "CL2T-02 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_03_RDY OF MCP_02_RK1_S0:1:I.Data.2 (Description := "CL2T-03 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_04_RDY OF MCP_02_RK1_S0:1:I.Data.3 (Description := "CL2T-04 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_05_RDY OF MCP_02_RK1_S0:1:I.Data.4 (Description := "CL2T-05 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_06_RDY OF MCP_02_RK1_S0:1:I.Data.5 (Description := "CL2T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_07_RDY OF MCP_02_RK1_S0:1:I.Data.6 (Description := "CL2T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_08_RDY OF MCP_02_RK1_S0:1:I.Data.7 (Description := "CL2T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL2T_09_RDY OF MCP_02_RK1_S0:1:I.Data.8 (Description := "CL2T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_01_RDY OF MCP_02_RK1_S0:1:I.Data.9 (Description := "CL3T-01 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_02_RDY OF MCP_02_RK1_S0:1:I.Data.10 (Description := "CL3T-02 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_03_RDY OF MCP_02_RK1_S0:1:I.Data.11 (Description := "CL3T-03 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_04_RDY OF MCP_02_RK1_S0:1:I.Data.12 (Description := "CL3T-04 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_05_RDY OF MCP_02_RK1_S0:1:I.Data.13 (Description := "CL3T-05 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_06_RDY OF MCP_02_RK1_S0:1:I.Data.14 (Description := "CL3T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_07_RDY OF MCP_02_RK1_S0:1:I.Data.15 (Description := "CL3T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_CL3T_08_RDY OF MCP_02_RK1_S0:1:I.Data.16 (Description := "CL3T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_06_RDY OF MCP_03_RK1_S0:2:I.Data.0 (Description := "HX1T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_07_RDY OF MCP_03_RK1_S0:2:I.Data.1 (Description := "HX1T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_08_RDY OF MCP_03_RK1_S0:2:I.Data.2 (Description := "HX1T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_09_RDY OF MCP_03_RK1_S0:2:I.Data.3 (Description := "HX1T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_10A_RDY OF MCP_03_RK1_S0:2:I.Data.5 (Description := "HX1T-10A VFD READY",
		            RADIX := Decimal);
		I_VFD_HX1T_10_RDY OF MCP_03_RK1_S0:2:I.Data.4 (Description := "HX1T-10 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_04_RDY OF MCP_01_RK1_S0:1:I.Data.0 (Description := "O2T-04 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_05_RDY OF MCP_01_RK1_S0:1:I.Data.1 (Description := "O2T-05 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_06_RDY OF MCP_01_RK1_S0:1:I.Data.2 (Description := "O2T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_07_RDY OF MCP_01_RK1_S0:1:I.Data.3 (Description := "O2T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_08_RDY OF MCP_01_RK1_S0:1:I.Data.4 (Description := "O2T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_09_RDY OF MCP_01_RK1_S0:1:I.Data.5 (Description := "O2T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_10_RDY OF MCP_01_RK1_S0:1:I.Data.6 (Description := "O2T-10 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_11_RDY OF MCP_01_RK1_S0:1:I.Data.7 (Description := "O2T-11 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_12_RDY OF MCP_01_RK1_S0:1:I.Data.8 (Description := "O2T-12 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_13_RDY OF MCP_01_RK1_S0:1:I.Data.9 (Description := "O2T-13 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_14_RDY OF MCP_01_RK1_S0:1:I.Data.10 (Description := "O2T-14 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_15_RDY OF MCP_01_RK1_S0:1:I.Data.11 (Description := "O2T-15 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_16_RDY OF MCP_01_RK1_S0:1:I.Data.12 (Description := "O2T-16 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_17_RDY OF MCP_01_RK1_S0:1:I.Data.13 (Description := "O2T-17 VFD READY",
		            RADIX := Decimal);
		I_VFD_O2T_18_RDY OF MCP_01_RK1_S0:1:I.Data.14 (Description := "O2T-18 VFD READY",
		            RADIX := Decimal);
		I_VFD_O3T_17_RDY OF MCP_16_RK1_S0:1:I.Data.0 (Description := "O3T-17 VFD READY",
		            RADIX := Decimal);
		I_VFD_O3T_18_RDY OF MCP_16_RK1_S0:1:I.Data.1 (Description := "O3T-18 VFD READY",
		            RADIX := Decimal);
		I_VFD_O3T_19_RDY OF MCP_16_RK1_S0:1:I.Data.2 (Description := "O3T-19 VFD READY",
		            RADIX := Decimal);
		I_VFD_O3T_20_RDY OF MCP_16_RK1_S0:1:I.Data.3 (Description := "O3T-20 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_05_RDY OF MCP_02_RK1_S0:2:I.Data.0 (Description := "O4T-05 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_06_RDY OF MCP_02_RK1_S0:2:I.Data.1 (Description := "O4T-06 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_07_RDY OF MCP_02_RK1_S0:2:I.Data.2 (Description := "O4T-07 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_08_RDY OF MCP_02_RK1_S0:2:I.Data.3 (Description := "O4T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_09_RDY OF MCP_02_RK1_S0:2:I.Data.4 (Description := "O4T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_10_RDY OF MCP_02_RK1_S0:2:I.Data.5 (Description := "O4T-10 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_11_RDY OF MCP_02_RK1_S0:2:I.Data.6 (Description := "O4T-11 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_12_RDY OF MCP_02_RK1_S0:2:I.Data.7 (Description := "O4T-12 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_13_RDY OF MCP_02_RK1_S0:2:I.Data.8 (Description := "O4T-13 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_16_RDY OF MCP_16_RK1_S0:1:I.Data.4 (Description := "O4T-16 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_17_RDY OF MCP_16_RK1_S0:1:I.Data.5 (Description := "O4T-17 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_18_RDY OF MCP_16_RK1_S0:1:I.Data.6 (Description := "O4T-18 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_19_RDY OF MCP_16_RK1_S0:1:I.Data.7 (Description := "O4T-19 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_20_RDY OF MCP_16_RK1_S0:1:I.Data.8 (Description := "O4T-20 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_21_RDY OF MCP_16_RK1_S0:1:I.Data.9 (Description := "O4T-21 VFD READY",
		            RADIX := Decimal);
		I_VFD_O4T_22_RDY OF MCP_16_RK1_S0:1:I.Data.10 (Description := "O4T-22 VFD READY",
		            RADIX := Decimal);
		I_VFD_T5T_08_RDY OF MCP_02_RK1_S0:2:I.Data.9 (Description := "T5T-08 VFD READY",
		            RADIX := Decimal);
		I_VFD_T5T_09_RDY OF MCP_02_RK1_S0:2:I.Data.10 (Description := "T5T-09 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO1_01_RDY OF MCP_02_RK1_S0:2:I.Data.11 (Description := "XO1-01 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO1_02_RDY OF MCP_02_RK1_S0:2:I.Data.12 (Description := "XO1-02 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO1_03_RDY OF MCP_02_RK1_S0:2:I.Data.13 (Description := "XO1-03 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO2_01_RDY OF MCP_03_RK1_S0:1:I.Data.0 (Description := "XO2-01 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO2_02_RDY OF MCP_03_RK1_S0:1:I.Data.1 (Description := "XO2-02 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO2_03_RDY OF MCP_03_RK1_S0:1:I.Data.2 (Description := "XO2-03 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO2_04_RDY OF MCP_03_RK1_S0:1:I.Data.3 (Description := "XO2-04 VFD READY",
		            RADIX := Decimal);
		I_VFD_XO2_05_RDY OF MCP_03_RK1_S0:1:I.Data.4 (Description := "XO2-05 VFD READY",
		            RADIX := Decimal);
		LAST_MAJOR_FAULT : FAULTRECORD (ExternalAccess := Read Only) := [-808528325,205748,4,20,[1,46883,53783,7347280,0,0,0,0]];
		LEN : LEN[7] (ExternalAccess := Read Only) := [[0,0,0,0,2,0],[0,0,0,0,2,0],[0,0,0,0,2,0],[0,0,0,0,2,0],[0,0,0,0,2,0],[0,0,0,0,2,0],[0,0,0,0,0,0]];
		LENx : LENx[7] (ExternalAccess := Read Only) := [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]];
		LTA_FLASH : BOOL[128] (Description := "LTA FLASH ARRAY",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		LTW_FLASH : BOOL[64] (Description := "LTW FLASH ARRAY",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		MAJOR_FAULT_DISCARD : FAULTRECORD (ExternalAccess := Read Only) := [0,0,0,0,[0,0,0,0,0,0,0,0]];
		MAJOR_FAULT_FIFO : FAULTRECORD[10] (ExternalAccess := Read Only) := [[1848425607,205732,4,83,[1,46883,53783,7347284,0,0,0,0]],[1848425699,205732,4,20,[1,46883,53783,7347368,0,0,0
				,0]],[1848425930,205732,4,83,[1,46883,53783,7347284,0,0,0,0]],[1848425996,205732,4,20,[1,46883,53783,7347368,0,0
				,0,0]],[1848440167,205732,4,31,[1,46883,34146,7343992,0,0,0,0]],[1848441310,205732,4,31,[1,46883,34146,7343992,0
				,0,0,0]],[1848441488,205732,4,31,[1,46883,34146,7343992,0,0,0,0]],[1848441804,205732,4,31,[1,46883,34146,7343992
				,0,0,0,0]],[-808528325,205748,4,20,[1,46883,53783,7347280,0,0,0,0]],[0,0,0,0,[0,0,0,0,0,0,0,0]]];
		MAJOR_FAULT_FIFO_CONTROL : CONTROL (Description := "Major Fault Fifo Control",
		            ExternalAccess := Read Only) := [-1073741824,10,9];
		MaxLengthSetupCount : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 7;
		MCP_01 OF SYS[1] (ExternalAccess := Read Only);
		MCP_01_EPB_ONS OF EPB_ONS[39] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		MCP_01_RK1_S0_STATUS OF COM_STATUS[3] (ExternalAccess := Read Only);
		MCP_01_RK2_S0_STATUS OF COM_STATUS[4] (ExternalAccess := Read Only);
		MCP_02 OF SYS[2] (ExternalAccess := Read Only);
		MCP_02_EPB_ONS OF EPB_ONS[40] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		MCP_02_RK1_S0_STATUS OF COM_STATUS[5] (ExternalAccess := Read Only);
		MCP_02_RK2_S0_STATUS OF COM_STATUS[6] (ExternalAccess := Read Only);
		MCP_03 OF SYS[3] (ExternalAccess := Read Only);
		MCP_03_EPB_ONS OF EPB_ONS[41] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		MCP_03_RK1_S0_STATUS OF COM_STATUS[7] (ExternalAccess := Read Only);
		MCP_03_RK2_S0_STATUS OF COM_STATUS[8] (ExternalAccess := Read Only);
		MCP_16 OF SYS[4] (ExternalAccess := Read Only);
		MCP_16_EPB_ONS OF EPB_ONS[42] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		MCP_16_RK1_S0_STATUS OF COM_STATUS[9] (ExternalAccess := Read Only);
		MCP_16_RK2_S0_STATUS OF COM_STATUS[10] (ExternalAccess := Read Only);
		MCP_BM1 OF SYS[0] (ExternalAccess := Read Only);
		MCP_BM1_EPB_ONS OF EPB_ONS[0] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		MCP_BM1_RK1_S16_STATUS OF COM_STATUS[1] (ExternalAccess := Read Only);
		MCP_BM1_RK2_S0_STATUS OF COM_STATUS[2] (ExternalAccess := Read Only);
		Merge_mask_size : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 96;
		Merge_mask_size_adjusted : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 95;
		Merge_UDTs : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 7;
		MRG : MRG[7] (ExternalAccess := Read Only) := [[[-1609471408,1000,1020],[0,10000,0],[0,30000,0],[0,30000,0],[538548996,400,420],[0,0,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0
				],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,64,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64,0],1,1],[[-1609471407,1000,1020],[0,10000,0],[0,30000,0],[0,30000,0],[0,400,0
				],[0,0,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,64,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64,0],1,1],[[-1609471406,1000,1020
				],[0,10000,0],[0,30000,0],[0,30000,0],[0,400,0],[0,32768,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,0,0,0,0,0,0,0,0,0,0
				,[0,64,0],[0,64,0],1,1],[[-1609471405,1000,1020],[538636269,10000,10020],[0,30000,0],[0,30000,0],[538636269,400,420],[0,32768
				,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,0,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64,0],1,1],[[-1609471375,1000,1020],[0,10000
				,0],[0,30000,0],[0,30000,0],[0,400,0],[0,32768,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,0,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64
				,0],1,1],[[-1609471374,1000,1020],[0,10000,0],[0,30000,0],[0,30000,0],[0,400,0],[0,0,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0
				,0,0,0],0,0,22,0,64,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64,0],1,1],[[859449,1000,0],[0,10000,0],[-1609471373,30000,30000],[795459,30000,5040
				],[537666371,400,420],[0,0,0,0,0,0,0,0,0,0],[4194303,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],0,0,22,0,64,0,0,0,0,0,0,0,0,0,[0,64,0],[0,64,0],13,5]];
		MrgLenMask1 : DINT[96] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151
				,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647
				,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
				,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
		MrgLenMask2 : DINT[96] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535
				,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455
				,536870911,1073741823,2147483647,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
				,-1,-1,-1,-1,-1,-1];
		MrgLenMask3 : DINT[96] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,7,15,31,63,127,255,511
				,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215
				,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647];
		MrgSetupCount : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 95;
		MrgSetupShiftControl : CONTROL (ExternalAccess := Read Only) := [-1610612736,96,96];
		MrgSetupTempRegs : DINT[3] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [-1,-1,2147483647];
		MRGx : MRGx[7] (ExternalAccess := Read Only) := [[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95],[0,0,0,0,0,0,54,95]];
		MRG_array_index : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 7;
		MRG_array_size : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 7;
		MsgConst : MSG_CONST (ExternalAccess := Read Only) := [0,-1,1,10,11,12,20,21,30,31,32,40,50,60,2001,2002,2003,2101,2102,1000,1001,1003,1002,3101,3102,3103,3104,3105
				,3201,3200,3106,6003,6002,4000,5006,5001,5002,5005,5003,5004,5008,5007,5009,20000,20004,20008,20010,20011
				,20007,20002,20003,20001,20015,20005,20006,20009,20016,20012,20013,20014,20017,20000,21002,21001,21003
				,21004,21005,21006,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,31001,31002,31003,31004
				,60001,60003,60002,60004,60005,50005,50001,50004,50003,50002,50007,50007,50009,50006,50008,50010,50014
				,50011,50013,50012,10001,10002,10003,10004,10005,10006,10007,10008];
		MSG_QUEUE : MSG_P2UL_SMH[50] (ExternalAccess := Read Only) := [[101,1,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,1,0,0,0,0
				,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,1,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[101,1,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,1,0,0,0,0
				,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101056,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101009,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101041,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101126,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101093,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101095,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[101,50,0,0,0,101142,5003
				,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]];
		MSG_TO_UL : MSG_P2UL_SMH[10] (ExternalAccess := Read Only) := [[101,50,0,0,0,101142,5003,-1,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
				]],[0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]];
		MSG_TO_UL_Add : MSG_P2UL_SMH (ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']];
		MSG_TO_UL_DN OF R_MSG_TO_UL.FLAGS.5 (Description := "Msg status Bit5 - Transfer Done",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		MSG_TO_UL_EN OF R_MSG_TO_UL.FLAGS.7 (Description := "Msg status Bit7 - Transfer Enable",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		MSG_TO_UL_ER OF R_MSG_TO_UL.FLAGS.4 (Description := "Msg status Bit4 - Transfer Error",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		MSG_TO_UL_EW OF R_MSG_TO_UL.FLAGS.2 (Description := "Msg status Bit2 - Enable Waiting",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		MSG_TO_UL_QUEUE : MSG_P2UL_QUEUE (ExternalAccess := Read Only) := [0,42,41,50,49,1,10];
		MSG_TO_UL_ST OF R_MSG_TO_UL.FLAGS.6 (Description := "Msg status Bit6 - Transfer Executing",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		MTR : MTR[300] (ExternalAccess := Read Only) := [[[2167355,8000,0],[2167355,500,0],[-1609471227,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[539038297,2353,2370],0,0,2293773,1
				,4,-128,-128,0,[0,0,0]],[[2167355,8000,0],[2167355,500,0],[-1609471227,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[539038297,2326,2340
				],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[2167355,8000,0],[2167355,500,0],[-1609471227,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[539038297
				,2353,2370],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[2167355,8000,0],[2167355,500,0],[-1609471227,1000,1020],[0,1000,0],[0,0,0],[0,0
				,0],[539038297,2273,2280],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1678055
				,0,0],[1678234,1000,0],[0,0,0],[0,0,0],[0,2326,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1678565
				,0,0],[1678744,1000,0],[0,200,0],[-1609471227,1395,1410],[0,2247,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227
				,500,510],[1679075,0,0],[1679224,1000,0],[0,200,0],[-1609471227,1348,1350],[0,2222,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[1671155
				,8000,0],[0,500,0],[-1609471227,0,12],[0,1000,0],[0,200,0],[-1609471227,1333,1350],[0,2247,0],0,0,2293773,0,4,0,0,0,[0,0,0]],[[-1609471227
				,8000,8010],[-1609471227,500,510],[1678055,0,0],[1678234,1000,0],[0,200,0],[0,2022,0],[0,2299,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227
				,8000,8010],[-1609471227,500,510],[1678565,0,0],[1678744,1000,0],[0,200,0],[-1609471227,2069,2070],[0,2247,0],0,0,3932175
				,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1679075,0,0],[1679224,1000,0],[0,200,0],[-1609471227
				,2022,2040],[0,2273,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1679585,0,0],[1679794
				,1000,0],[0,200,0],[-1609471227,1364,1380],[0,2105,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227
				,500,510],[1680095,0,0],[1680304,1000,0],[0,200,0],[-1609471227,1263,1290],[0,2105,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227
				,8000,8010],[-1609471227,500,510],[1680605,0,0],[1680784,1000,0],[0,200,0],[-1609471227,1263,1290],[0,2500,0],0,0,3932175
				,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1681115,0,0],[1681294,1000,0],[0,200,0],[-1609471227
				,1500,1500],[0,2128,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471227,8000,8010],[-1609471227,500,510],[1681625,0,0],[1681744
				,1000,0],[0,200,0],[-1609471227,1277,1290],[0,2222,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471197,8000,8010],[-1609471197
				,500,510],[1682135,0,0],[1682284,1000,0],[0,200,0],[-1609471197,1333,1350],[0,2151,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471197
				,8000,8010],[-1609471197,500,510],[1682645,0,0],[1682794,1000,0],[0,200,0],[-1609471197,1290,1290],[0,2326,0],0,0,3932175
				,7,0,4,0,0,[0,0,0]],[[-1609471197,8000,8010],[-1609471197,500,510],[1683155,0,0],[1683304,1000,0],[0,200,0],[-1609471197
				,1395,1410],[0,2299,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471197,8000,8010],[-1609471197,500,510],[1683665,0,0],[1683784
				,1000,0],[0,200,0],[-1609471197,1379,1380],[0,2128,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471197,8000,8010],[-1609471197
				,500,510],[1684175,0,0],[1684294,1000,0],[0,200,0],[-1609471197,1277,1290],[0,2222,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471197
				,8000,8010],[-1609471197,500,510],[1684685,0,0],[1684924,1000,0],[0,200,0],[-1609471197,1333,1350],[0,2381,0],0,0,3932175
				,7,0,4,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198,0,12],[-1609471198,1000,1020],[0,200,0],[-1609471198
				,1290,1290],[0,1695,0],0,0,720902,3,4,64,0,8,[-1609471198,10000,30]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,0,12],[1678234,1000,0],[0,200,0],[0,1017,0],[0,2151,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,0,12],[1678234,1000,0],[0,200,0],[0,1290,0],[0,2222,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,0,12],[1678234,1000,0],[0,200,0],[0,1333,0],[0,2439,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[2417034,500,0],[-1609471198
				,0,11],[1678234,1000,0],[0,200,0],[0,1463,0],[0,2105,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,0,11],[1678234,1000,0],[0,200,0],[0,1263,0],[0,2326,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,0,11],[1678234,1000,0],[0,200,0],[0,1395,0],[0,2222,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[2413824,500,0],[-1609471198
				,1000,1001],[2413854,1000,0],[0,0,0],[0,0,0],[0,2273,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198
				,1000,1001],[0,1000,0],[0,0,0],[0,0,0],[0,2222,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198,1000
				,1001],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198,1000,1001
				],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198,1000,1001],[0,1000
				,0],[0,0,0],[0,0,0],[0,1000,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[-1609471198,8000,8010],[0,500,0],[-1609471198,1000,1001],[0,1000,0],[0,0
				,0],[0,0,0],[0,1000,0],0,0,393227,3,0,64,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[-1609471196,1290,1290
				],[0,1000,0],0,0,4456462,1,12,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462
				,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000
				,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196
				,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0
				],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462
				,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000
				,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196
				,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0
				],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462
				,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471196,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000
				,0],[0,500,0],[-1609471166,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166
				,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166,0,12],[0,1000,0],[0,200,0
				],[0,600,0],[0,1000,0],0,0,4456462,1,8,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462
				,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000
				,0],[0,500,0],[-1609471166,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166
				,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471166,0,11],[0,1000,0],[0,200,0
				],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,0,30],[0,1000,0],[0,200,0],[0,-1
				,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,0,30],[0,1000,0],[0,200,0],[538639808
				,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,0,30],[0,1000,0],[0,200,0],[538639808
				,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,0,30],[0,1000,0],[0,200,0],[538639808
				,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,1000,1020],[0,1000,0],[0
				,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,1000,1020],[0,1000,0],[0,0
				,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,1000,1020],[0,1000,0],[0,0,0
				],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,1000,1020],[0,1000,0],[0,0,0],[0
				,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768896,8000,0],[1768896,500,0],[-1609471166,1000,1020],[0,1000,0],[0,0,0],[0,0
				,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,0,30],[0,1000,0],[0,200,0],[0,-1,0],[0,1000
				,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,0,30],[0,1000,0],[0,200,0],[538639299,600
				,629],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,0,30],[0,1000,0],[0,200,0],[538639299
				,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,0,30],[0,1000,0],[0,200,0],[538639299
				,600,629],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,1000,1020],[0,1000,0],[0
				,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,1000,1020],[0,1000,0],[0,0
				,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,1000,1020],[0,1000,0],[0,0,0
				],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1768387,8000,0],[1768387,500,0],[-1609471165,1000,1020],[0,1000,0],[0,0,0],[0
				,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[-1609471163,8000,8010],[-1609471163,500,510],[725469,1000,0],[0,1000,0
				],[0,200,0],[0,1412,0],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471163,8000,8010],[-1609471163,500,510],[725979,0,0],[0,1000
				,0],[0,200,0],[-1609471163,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471163,8000,8010],[-1609471163,500,510
				],[726489,0,0],[0,1000,0],[0,200,0],[-1609471163,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[1777299,8000,0],[1777299,500
				,0],[-1609471133,0,30],[0,1000,0],[0,200,0],[-1609471133,600,600],[0,1000,0],0,0,2293773,0,4,0,0,0,[0,0,0]],[[-1609471133,8000
				,8010],[-1609471133,500,510],[725469,0,0],[0,1000,0],[0,200,0],[538648211,900,900],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471133
				,8000,8010],[-1609471133,500,510],[725979,0,0],[0,1000,0],[0,200,0],[-1609471133,900,900],[0,1000,0],0,0,3932175,7,0,4,0,0
				,[0,0,0]],[[-1609471133,8000,8010],[-1609471133,500,510],[726489,0,0],[0,1000,0],[0,200,0],[-1609471133,900,900],[0,1000,0
				],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471133,8000,8010],[-1609471133,500,510],[726999,0,0],[0,1000,0],[0,200,0],[-1609471133
				,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471133,8000,8010],[-1609471133,500,510],[727509,0,0],[0,1000,0],[0,200
				,0],[-1609471133,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[1765839,8000,0],[1765839,500,0],[-1609471133,0,30],[0,1000
				,0],[0,200,0],[-1609471133,1429,1440],[0,1000,0],0,0,4456462,1,4,-128,0,0,[0,0,0]],[[1765839,8000,0],[1765839,500,0],[-1609471133
				,0,30],[0,1000,0],[0,200,0],[538636751,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1765839,8000,0],[1765839,500,0],[-1609471133
				,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1765327,8000,0],[1765327,500,0],[-1609471135,0
				,30],[0,1000,0],[0,200,0],[0,-1,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1765327,8000,0],[1765327,500,0],[-1609471135,0,30],[0
				,1000,0],[0,200,0],[538636239,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471135,0,12],[0,1000
				,0],[0,200,0],[0,-1,0],[0,1000,0],0,0,4456462,1,8,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471135,0,12],[0,1000,0],[0,200,0],[0,600,0],[0,1000
				,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471135,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128
				,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471135,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500
				,0],[-1609471135,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549674,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134,0
				,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134,0
				,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471134
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104
				,0,30],[0,1000,0],[0,200,0],[540549644,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104
				,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104,1000
				,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104,1000,1020
				],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[3678732,8000,0],[3678732,500,0],[-1609471104,1000,1020],[0
				,1000,0],[0,200,0],[0,-1,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471104,0,11],[0,1000,0],[0,200,0],[540549644
				,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471104,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0
				,4456462,1,0,-128,0,0,[0,0,0]],[[2406988,8000,0],[2406988,500,0],[-1609471104,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462
				,1,0,-128,0,0,[0,0,0]],[[0,8000,0],[0,500,0],[-1609471104,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[0,8000
				,0],[0,500,0],[-1609471104,0,11],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[-1609471103,8000,8010
				],[-1609471103,500,510],[1344969,1000,0],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471103,8000,8010
				],[-1609471103,500,510],[1345479,1000,0],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471103,8000
				,8010],[-1609471103,500,510],[1345989,0,0],[0,1000,0],[0,200,0],[-1609471103,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0
				]],[[-1609471103,8000,8010],[-1609471103,500,510],[1346499,0,0],[0,1000,0],[0,200,0],[-1609471103,600,600],[0,1000,0],0,0
				,3932175,7,0,4,0,0,[0,0,0]],[[-1609471103,8000,8010],[-1609471103,500,510],[1347009,0,0],[0,1000,0],[0,200,0],[-1609471103
				,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471103,8000,8010],[-1609471103,500,510],[1347519,0,0],[0,1000,0],[0
				,200,0],[-1609471103,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[-1609471103,8000,8010],[-1609471103,500,510],[1348029
				,0,0],[0,1000,0],[0,200,0],[-1609471103,600,600],[0,1000,0],0,0,3932175,7,0,4,0,0,[0,0,0]],[[1829378,8000,0],[1829378,500,0],[-1609471104
				,1000,1020],[0,1000,0],[0,0,0],[0,0,0],[0,1000,0],0,0,4456462,1,4,-128,0,0,[0,0,0]],[[1829378,8000,0],[1829378,500,0],[-1609471104,0
				,30],[0,1000,0],[0,200,0],[538700290,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1829378,8000,0],[1829378,500,0],[-1609471104
				,0,30],[0,1000,0],[0,200,0],[538700290,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[1829378,8000,0],[1829378,500,0],[-1609471104
				,0,30],[0,1000,0],[0,200,0],[538700290,600,600],[0,1000,0],0,0,4456462,1,0,-128,0,0,[0,0,0]],[[795429,8000,0],[795429,500,0],[-1609471103
				,0,30],[0,1000,0],[0,200,0],[-1609471103,600,600],[0,1000,0],0,0,2621447,0,4,0,2,0,[0,0,0]],[[-1609471103,8000,8010],[795429,500
				,0],[-1609471103,0,30],[0,1000,0],[0,200,0],[537666341,600,600],[0,1000,0],0,0,458763,3,8,64,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0
				,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0
				,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0
				,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0
				,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0
				,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0
				,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0
				,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0
				,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0
				,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0
				,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0
				]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0
				,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0
				,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0
				,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0
				,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0
				,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0
				,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0
				,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0
				,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0
				,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0
				,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0
				]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],0,0,0,0,0,0,0,0,[0,0,0]]];
		MTRx : MTRx[300] (ExternalAccess := Read Only) := [[85,0,0,0,0],[86,0,0,0,0],[85,0,0,0,0],[88,0,0,0,0],[86,0,0,0,0],[89,0,24,0,12],[90,0,24,0,12],[89,0,24,0,12],[87,0,36,0,18],[89,0,36,0,18],[88,0,36,0,18],[95,0
				,24,0,12],[95,0,24,0,12],[80,0,24,0,12],[94,0,24,0,12],[90,0,24,0,12],[93,0,24,0,12],[86,0,24,0,12],[87,0,24,0,12],[94,0,24,0,12],[90,0,24,0,12],[84,0,24
				,0,12],[118,0,24,0,12],[93,0,24,0,12],[90,0,24,0,12],[82,0,24,0,12],[95,0,24,0,12],[86,0,24,0,12],[90,0,24,0,12],[88,0,0,0,0],[90,0,0,0,0],[200,0,0,0,0],[200
				,0,0,0,0],[200,0,0,0,0],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12
				],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12
				],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12
				],[200,0,0,0,0],[200,0,0,0,0],[200,0,0,0,0],[200,0,0,0,0],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200
				,0,0,0,0],[200,0,0,0,0],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,36,0,18],[200,0,36,0,18],[200,0,36,0,18
				],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200
				,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0
				,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0
				,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,0,0,0],[200
				,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0
				,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,0,0,0],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12],[200,0,24,0,12
				],[200,0,24,0,12],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0
				,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0
				,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0
				,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0
				],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0
				,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0
				,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0
				,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0
				,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0
				],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0
				,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]];
		NET_MON_PLC_101 : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 0;
		O2T OF SYS[3] (ExternalAccess := Read Only);
		O2T_04_EPB_ONS OF EPB_ONS[43] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_04_MTR OF MTR[49] (ExternalAccess := Read Only);
		O2T_04_MTRx OF MTRx[49] (ExternalAccess := Read Only);
		O2T_04_PE OF PE[54] (ExternalAccess := Read Only);
		O2T_04_VFD OF VFD[49] (ExternalAccess := Read Only);
		O2T_05_MTR OF MTR[48] (ExternalAccess := Read Only);
		O2T_05_MTRx OF MTRx[48] (ExternalAccess := Read Only);
		O2T_05_PE OF PE[53] (ExternalAccess := Read Only);
		O2T_05_VFD OF VFD[48] (ExternalAccess := Read Only);
		O2T_06_EPB_ONS OF EPB_ONS[44] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_06_MTR OF MTR[47] (ExternalAccess := Read Only);
		O2T_06_MTRx OF MTRx[47] (ExternalAccess := Read Only);
		O2T_06_PE OF PE[52] (ExternalAccess := Read Only);
		O2T_06_VFD OF VFD[47] (ExternalAccess := Read Only);
		O2T_07_MTR OF MTR[46] (ExternalAccess := Read Only);
		O2T_07_MTRx OF MTRx[46] (ExternalAccess := Read Only);
		O2T_07_PE OF PE[51] (ExternalAccess := Read Only);
		O2T_07_VFD OF VFD[46] (ExternalAccess := Read Only);
		O2T_08_MTR OF MTR[45] (ExternalAccess := Read Only);
		O2T_08_MTRx OF MTRx[45] (ExternalAccess := Read Only);
		O2T_08_PE OF PE[50] (ExternalAccess := Read Only);
		O2T_08_VFD OF VFD[45] (ExternalAccess := Read Only);
		O2T_09_MTR OF MTR[44] (ExternalAccess := Read Only);
		O2T_09_MTRx OF MTRx[44] (ExternalAccess := Read Only);
		O2T_09_PE OF PE[49] (ExternalAccess := Read Only);
		O2T_09_VFD OF VFD[44] (ExternalAccess := Read Only);
		O2T_10_BT OF BTP[8] (ExternalAccess := Read Only);
		O2T_10_BTx OF BTx[8] (ExternalAccess := Read Only);
		O2T_10_EPB_ONS OF EPB_ONS[45] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_10_MTR OF MTR[43] (ExternalAccess := Read Only);
		O2T_10_MTRx OF MTRx[43] (ExternalAccess := Read Only);
		O2T_10_PE OF PE[48] (ExternalAccess := Read Only);
		O2T_10_VFD OF VFD[43] (ExternalAccess := Read Only);
		O2T_11_MTR OF MTR[42] (ExternalAccess := Read Only);
		O2T_11_MTRx OF MTRx[42] (ExternalAccess := Read Only);
		O2T_11_PE OF PE[47] (ExternalAccess := Read Only);
		O2T_11_VFD OF VFD[42] (ExternalAccess := Read Only);
		O2T_12_EPB_ONS OF EPB_ONS[46] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_12_MTR OF MTR[41] (ExternalAccess := Read Only);
		O2T_12_MTRx OF MTRx[41] (ExternalAccess := Read Only);
		O2T_12_PE OF PE[46] (ExternalAccess := Read Only);
		O2T_12_VFD OF VFD[41] (ExternalAccess := Read Only);
		O2T_13_MTR OF MTR[40] (ExternalAccess := Read Only);
		O2T_13_MTRx OF MTRx[40] (ExternalAccess := Read Only);
		O2T_13_PE OF PE[45] (ExternalAccess := Read Only);
		O2T_13_VFD OF VFD[40] (ExternalAccess := Read Only);
		O2T_14_EPB_ONS OF EPB_ONS[47] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_14_MTR OF MTR[39] (ExternalAccess := Read Only);
		O2T_14_MTRx OF MTRx[39] (ExternalAccess := Read Only);
		O2T_14_PE OF PE[44] (ExternalAccess := Read Only);
		O2T_14_VFD OF VFD[39] (ExternalAccess := Read Only);
		O2T_15_MTR OF MTR[38] (ExternalAccess := Read Only);
		O2T_15_MTRx OF MTRx[38] (ExternalAccess := Read Only);
		O2T_15_PE OF PE[43] (ExternalAccess := Read Only);
		O2T_15_VFD OF VFD[38] (ExternalAccess := Read Only);
		O2T_16_MTR OF MTR[37] (ExternalAccess := Read Only);
		O2T_16_MTRx OF MTRx[37] (ExternalAccess := Read Only);
		O2T_16_PE OF PE[42] (ExternalAccess := Read Only);
		O2T_16_VFD OF VFD[37] (ExternalAccess := Read Only);
		O2T_17_BT OF BTP[5] (ExternalAccess := Read Only);
		O2T_17_BTx OF BTx[5] (ExternalAccess := Read Only);
		O2T_17_LEN OF LEN[1] (ExternalAccess := Read Only);
		O2T_17_LENx OF LENx[1] (ExternalAccess := Read Only);
		O2T_17_MTR OF MTR[36] (ExternalAccess := Read Only);
		O2T_17_MTRx OF MTRx[36] (ExternalAccess := Read Only);
		O2T_17_PE OF PE[41] (ExternalAccess := Read Only);
		O2T_17_VFD OF VFD[36] (ExternalAccess := Read Only);
		O2T_18_BT OF BTP[4] (ExternalAccess := Read Only);
		O2T_18_BTx OF BTx[4] (ExternalAccess := Read Only);
		O2T_18_EPB_ONS OF EPB_ONS[48] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O2T_18_MRG OF MRG[1] (ExternalAccess := Read Only);
		O2T_18_MRGx OF MRGx[1] (ExternalAccess := Read Only);
		O2T_18_MTR OF MTR[35] (ExternalAccess := Read Only);
		O2T_18_MTRx OF MTRx[35] (ExternalAccess := Read Only);
		O2T_18_PE OF PE[40] (ExternalAccess := Read Only);
		O2T_18_VFD OF VFD[35] (ExternalAccess := Read Only);
		O3T OF SYS[12] (ExternalAccess := Read Only);
		O3T_17_EPB_ONS OF EPB_ONS[87] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O3T_17_MTR OF MTR[134] (ExternalAccess := Read Only);
		O3T_17_MTRx OF MTRx[134] (ExternalAccess := Read Only);
		O3T_17_PE OF PE[140] (ExternalAccess := Read Only);
		O3T_17_VFD OF VFD[134] (ExternalAccess := Read Only);
		O3T_18_MTR OF MTR[133] (ExternalAccess := Read Only);
		O3T_18_MTRx OF MTRx[133] (ExternalAccess := Read Only);
		O3T_18_PE OF PE[139] (ExternalAccess := Read Only);
		O3T_18_VFD OF VFD[133] (ExternalAccess := Read Only);
		O3T_19_EPB1_ONS OF EPB_ONS[88] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O3T_19_EPB2_ONS OF EPB_ONS[89] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O3T_19_MTR OF MTR[132] (ExternalAccess := Read Only);
		O3T_19_MTRx OF MTRx[132] (ExternalAccess := Read Only);
		O3T_19_PE OF PE[138] (ExternalAccess := Read Only);
		O3T_19_VFD OF VFD[132] (ExternalAccess := Read Only);
		O3T_20_MTR OF MTR[131] (ExternalAccess := Read Only);
		O3T_20_MTRx OF MTRx[131] (ExternalAccess := Read Only);
		O3T_20_PE OF PE[137] (ExternalAccess := Read Only);
		O3T_20_VFD OF VFD[131] (ExternalAccess := Read Only);
		O3T_21_MTR OF MTR[130] (ExternalAccess := Read Only);
		O3T_21_MTRx OF MTRx[130] (ExternalAccess := Read Only);
		O3T_21_VFD OF VFD[130] (ExternalAccess := Read Only);
		O4T OF SYS[13] (ExternalAccess := Read Only);
		O4T_05_MTR OF MTR[81] (ExternalAccess := Read Only);
		O4T_05_MTRx OF MTRx[81] (ExternalAccess := Read Only);
		O4T_05_PE OF PE[87] (ExternalAccess := Read Only);
		O4T_05_VFD OF VFD[81] (ExternalAccess := Read Only);
		O4T_06_EPB_ONS OF EPB_ONS[67] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O4T_06_MTR OF MTR[80] (ExternalAccess := Read Only);
		O4T_06_MTRx OF MTRx[80] (ExternalAccess := Read Only);
		O4T_06_PE OF PE[86] (ExternalAccess := Read Only);
		O4T_06_VFD OF VFD[80] (ExternalAccess := Read Only);
		O4T_07_MTR OF MTR[79] (ExternalAccess := Read Only);
		O4T_07_MTRx OF MTRx[79] (ExternalAccess := Read Only);
		O4T_07_PE OF PE[85] (ExternalAccess := Read Only);
		O4T_07_VFD OF VFD[79] (ExternalAccess := Read Only);
		O4T_08_MTR OF MTR[78] (ExternalAccess := Read Only);
		O4T_08_MTRx OF MTRx[78] (ExternalAccess := Read Only);
		O4T_08_PE OF PE[84] (ExternalAccess := Read Only);
		O4T_08_VFD OF VFD[78] (ExternalAccess := Read Only);
		O4T_09_BT OF BTP[17] (ExternalAccess := Read Only);
		O4T_09_BTx OF BTx[17] (ExternalAccess := Read Only);
		O4T_09_MTR OF MTR[77] (ExternalAccess := Read Only);
		O4T_09_MTRx OF MTRx[77] (ExternalAccess := Read Only);
		O4T_09_PE OF PE[83] (ExternalAccess := Read Only);
		O4T_09_VFD OF VFD[77] (ExternalAccess := Read Only);
		O4T_10A_TD : Non_Tracked_Div  := [0,1,[[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0]],0,0,0,0];
		O4T_10_BT OF BTP[16] (ExternalAccess := Read Only);
		O4T_10_BTx OF BTx[16] (ExternalAccess := Read Only);
		O4T_10_EPB_ONS OF EPB_ONS[68] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O4T_10_MTR OF MTR[76] (ExternalAccess := Read Only);
		O4T_10_MTRx OF MTRx[76] (ExternalAccess := Read Only);
		O4T_10_PE1 OF PE[81] (ExternalAccess := Read Only);
		O4T_10_PE2 OF PE[82] (ExternalAccess := Read Only);
		O4T_10_VFD OF VFD[76] (ExternalAccess := Read Only);
		O4T_11_MTR OF MTR[75] (ExternalAccess := Read Only);
		O4T_11_MTRx OF MTRx[75] (ExternalAccess := Read Only);
		O4T_11_PE OF PE[80] (ExternalAccess := Read Only);
		O4T_11_VFD OF VFD[75] (ExternalAccess := Read Only);
		O4T_12_MTR OF MTR[74] (ExternalAccess := Read Only);
		O4T_12_MTRx OF MTRx[74] (ExternalAccess := Read Only);
		O4T_12_PE OF PE[79] (ExternalAccess := Read Only);
		O4T_12_VFD OF VFD[74] (ExternalAccess := Read Only);
		O4T_13_MTR OF MTR[73] (ExternalAccess := Read Only);
		O4T_13_MTRx OF MTRx[73] (ExternalAccess := Read Only);
		O4T_13_PE OF PE[78] (ExternalAccess := Read Only);
		O4T_13_VFD OF VFD[73] (ExternalAccess := Read Only);
		O4T_16_EPB_ONS OF EPB_ONS[90] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O4T_16_MTR OF MTR[130] (ExternalAccess := Read Only);
		O4T_16_MTRx OF MTRx[130] (ExternalAccess := Read Only);
		O4T_16_PE OF PE[136] (ExternalAccess := Read Only);
		O4T_16_VFD OF VFD[130] (ExternalAccess := Read Only);
		O4T_17_MTR OF MTR[129] (ExternalAccess := Read Only);
		O4T_17_MTRx OF MTRx[129] (ExternalAccess := Read Only);
		O4T_17_PE OF PE[135] (ExternalAccess := Read Only);
		O4T_17_VFD OF VFD[129] (ExternalAccess := Read Only);
		O4T_18_MTR OF MTR[128] (ExternalAccess := Read Only);
		O4T_18_MTRx OF MTRx[128] (ExternalAccess := Read Only);
		O4T_18_PE OF PE[134] (ExternalAccess := Read Only);
		O4T_18_VFD OF VFD[128] (ExternalAccess := Read Only);
		O4T_19_MTR OF MTR[127] (ExternalAccess := Read Only);
		O4T_19_MTRx OF MTRx[127] (ExternalAccess := Read Only);
		O4T_19_PE OF PE[133] (ExternalAccess := Read Only);
		O4T_19_VFD OF VFD[127] (ExternalAccess := Read Only);
		O4T_2 OF SYS[7] (ExternalAccess := Read Only);
		O4T_20_BT OF BTP[22] (ExternalAccess := Read Only);
		O4T_20_BTx OF BTx[22] (ExternalAccess := Read Only);
		O4T_20_MTR OF MTR[126] (ExternalAccess := Read Only);
		O4T_20_MTRx OF MTRx[126] (ExternalAccess := Read Only);
		O4T_20_PE OF PE[132] (ExternalAccess := Read Only);
		O4T_20_VFD OF VFD[126] (ExternalAccess := Read Only);
		O4T_21_EPB1_ONS OF EPB_ONS[91] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O4T_21_EPB2_ONS OF EPB_ONS[92] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		O4T_21_MTR OF MTR[125] (ExternalAccess := Read Only);
		O4T_21_MTRx OF MTRx[125] (ExternalAccess := Read Only);
		O4T_21_PE OF PE[131] (ExternalAccess := Read Only);
		O4T_21_VFD OF VFD[125] (ExternalAccess := Read Only);
		O4T_22_MTR OF MTR[124] (ExternalAccess := Read Only);
		O4T_22_MTRx OF MTRx[124] (ExternalAccess := Read Only);
		O4T_22_PE OF PE[130] (ExternalAccess := Read Only);
		O4T_22_VFD OF VFD[124] (ExternalAccess := Read Only);
		O4_03_PE OF PE[144] (ExternalAccess := Read Only);
		O4_04ZZ_MTRx OF MTRx[139] (ExternalAccess := Read Only);
		O4_04_BT OF BTP[21] (ExternalAccess := Read Only);
		O4_04_BTx OF BTx[21] (ExternalAccess := Read Only);
		O4_06ZZ_MTRx OF MTRx[141] (ExternalAccess := Read Only);
		O_CBP_BM1_07_TRIG OF MCP_BM1_RK2_S0:3:O.Data.0 (Description := "BM1-07 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_08_TRIG OF MCP_BM1_RK2_S0:3:O.Data.1 (Description := "BM1-08 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_09_TRIG OF MCP_BM1_RK2_S0:3:O.Data.2 (Description := "BM1-09 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_10_TRIG OF MCP_BM1_RK2_S0:3:O.Data.3 (Description := "BM1-10 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_11_TRIG OF MCP_BM1_RK2_S0:3:O.Data.4 (Description := "BM1-11 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_12_TRIG OF MCP_BM1_RK2_S0:3:O.Data.5 (Description := "BM1-12 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CBP_BM1_13_TRIG OF MCP_BM1_RK2_S0:3:O.Data.6 (Description := "BM1-13 CLUTCH/BRAKE",
		            RADIX := Decimal);
		O_CS1_BM1_14_EPB OF MCP_BM1_RK2_S0:8:O.Data.8 (Description := "BM1-14-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_14_RPBA OF MCP_BM1_RK2_S0:4:O.Data.6 (Description := "BM1-14-A JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_16_EPB OF MCP_BM1_RK2_S0:8:O.Data.11 (Description := "BM1-16-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_16_RPBA OF MCP_BM1_RK2_S0:4:O.Data.9 (Description := "BM1-16-A JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_17_EPB OF MCP_BM1_RK2_S0:8:O.Data.12 (Description := "BM1-17-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_17_RPBA OF MCP_BM1_RK2_S0:6:O.Data.1 (Description := "BM1-17-B JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_23_EPB OF MCP_03_RK2_S0:6:O.Data.12 (Description := "BM1-23-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_23_RPBA OF MCP_03_RK2_S0:6:O.Data.14 (Description := "BM1-23-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_23_SPBG OF MCP_03_RK2_S0:6:O.Data.13 (Description := "BM1-23-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_27_EPB OF MCP_BM1_RK2_S0:9:O.Data.4 (Description := "BM1-28-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_27_RPBA OF MCP_BM1_RK2_S0:5:O.Data.1 (Description := "BM1-28-B JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_28_EPB OF MCP_BM1_RK2_S0:9:O.Data.6 (Description := "BM1-29-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_28_LTW OF MCP_BM1_RK2_S0:5:O.Data.14 (Description := "BM1-29 Oversize$N",
		            RADIX := Decimal);
		O_CS1_BM1_28_RPBA OF MCP_BM1_RK2_S0:6:O.Data.2 (Description := "BM1-29-B JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_28_SPBG : BOOL (RADIX := Decimal) := 0;
		O_CS1_BM1_29_EPB OF MCP_BM1_RK2_S0:9:O.Data.7 (Description := "BM1-29-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_29_LTB OF MCP_BM1_RK2_S0:5:O.Data.14 (Description := "MOTOR FAULT LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_29_RPBA OF MCP_BM1_RK2_S0:5:O.Data.3 (Description := "BM1-29-A JAM RESET",
		            RADIX := Decimal);
		O_CS1_BM1_30_EPB OF MCP_BM1_RK2_S0:9:O.Data.9 (Description := "BM1-30-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_BM1_30_LTW OF MCP_BM1_RK2_S0:5:O.Data.15 (Description := "BM1-30 Oversize$N",
		            RADIX := Decimal);
		O_CS1_BM1_30_RPBA OF MCP_BM1_RK2_S0:5:O.Data.5 (Description := "BM1-30-A JAM RESET",
		            RADIX := Decimal);
		O_CS1_CL1T_01_EPB OF MCP_03_RK2_S0:4:O.Data.5 (Description := "CL1T-01-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL1T_01_SPBG OF MCP_03_RK2_S0:4:O.Data.6 (Description := "CL1T-01-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL1T_02_EPB OF MCP_03_RK2_S0:4:O.Data.11 (Description := "CL1T-02-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL1T_02_RPBA OF MCP_03_RK2_S0:4:O.Data.13 (Description := "CL1T-02-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_CL1T_02_SPBG OF MCP_03_RK2_S0:4:O.Data.12 (Description := "CL1T-02-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_01_EPB OF MCP_02_RK2_S0:3:O.Data.5 (Description := "CL2T-01-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_01_SPBG OF MCP_02_RK2_S0:3:O.Data.6 (Description := "CL2T-01-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_02_EPB OF MCP_02_RK2_S0:3:O.Data.9 (Description := "CL2T-02-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_02_RPBA OF MCP_02_RK2_S0:3:O.Data.11 (Description := "CL2T-02-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_02_SPBG OF MCP_02_RK2_S0:3:O.Data.10 (Description := "CL2T-02-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_05_EPB OF MCP_02_RK2_S0:4:O.Data.3 (Description := "CL2T-05-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_05_RPBA OF MCP_02_RK2_S0:4:O.Data.5 (Description := "CL2T-05-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_CL2T_05_SPBG OF MCP_02_RK2_S0:4:O.Data.4 (Description := "CL2T-05-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL3T_01_EPB OF MCP_02_RK2_S0:5:O.Data.9 (Description := "CL3T-01-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL3T_01_SPBG OF MCP_02_RK2_S0:5:O.Data.10 (Description := "CL3T-01-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_CL3T_02_EPB OF MCP_02_RK2_S0:5:O.Data.13 (Description := "CL3T-02-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_CL3T_02_RPBA OF MCP_02_RK2_S0:5:O.Data.15 (Description := "CL3T-02-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_CL3T_02_SPBG OF MCP_02_RK2_S0:5:O.Data.14 (Description := "CL3T-02-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_O3T_19_EPB OF MCP_16_RK1_S0:6:O.Data.8 (Description := "O3T-19-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_O3T_19_RPBA OF MCP_16_RK1_S0:6:O.Data.10 (Description := "O3T-19-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_O3T_19_SPBG OF MCP_16_RK1_S0:6:O.Data.9 (Description := "O3T-19-A START LIGHT",
		            RADIX := Decimal);
		O_CS1_O4T_21_EPB OF MCP_16_RK1_S0:7:O.Data.1 (Description := "O4T-21-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS1_O4T_21_RPBA OF MCP_16_RK1_S0:7:O.Data.3 (Description := "O4T-21-A JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS1_O4T_21_SPBG OF MCP_16_RK1_S0:7:O.Data.2 (Description := "O4T-21-A START LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_14_EPB OF MCP_BM1_RK2_S0:8:O.Data.7 (Description := "BM1-14-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_14_RPBA OF MCP_BM1_RK2_S0:4:O.Data.5 (Description := "BM1-14-B JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_16_EPB OF MCP_BM1_RK2_S0:8:O.Data.10 (Description := "BM1-16-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_16_RPBA OF MCP_BM1_RK2_S0:4:O.Data.8 (Description := "BM1-16-B JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_17_EPB OF MCP_BM1_RK2_S0:8:O.Data.13 (Description := "BM1-17-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_17_LTB OF MCP_BM1_RK2_S0:5:O.Data.12 (Description := "BM1-17 MOTOR FAULT LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_17_RPBA OF MCP_BM1_RK2_S0:6:O.Data.1 (Description := "JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_17_SPBG OF MCP_BM1_RK2_S0:5:O.Data.9 (Description := "BM1-17 START/RESET",
		            RADIX := Decimal);
		O_CS2_BM1_27_EPB OF MCP_BM1_RK2_S0:9:O.Data.3 (Description := "BM1-27 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_27_RPBA OF MCP_BM1_RK2_S0:5:O.Data.0 (Description := "BM1-27 JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_28_EPB OF MCP_BM1_RK2_S0:9:O.Data.5 (Description := "BM1-28-A E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_28_RPBA OF MCP_BM1_RK2_S0:5:O.Data.2 (Description := "BM1-28-A JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_29_EPB OF MCP_BM1_RK2_S0:2:O.Data.13 (Description := "BM1-29-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_29_RPBA OF MCP_BM1_RK2_S0:6:O.Data.5 (Description := "BM1-29-B JAM RESET",
		            RADIX := Decimal);
		O_CS2_BM1_29_SPBG OF MCP_BM1_RK2_S0:9:O.Data.14 (Description := "BM1-29-B START/RESET",
		            RADIX := Decimal);
		O_CS2_BM1_30_EPB OF MCP_BM1_RK2_S0:9:O.Data.8 (Description := "BM1-30-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_BM1_30_RPBA OF MCP_BM1_RK2_S0:5:O.Data.4 (Description := "BM1-30-B JAM RESET",
		            RADIX := Decimal);
		O_CS2_CL1T_01_EPB OF MCP_03_RK2_S0:4:O.Data.7 (Description := "CL1T-01-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL1T_01_SPBG OF MCP_03_RK2_S0:4:O.Data.8 (Description := "CL1T-01-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL1T_02_EPB OF MCP_03_RK2_S0:4:O.Data.14 (Description := "CL1T-02-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL1T_02_SPBG OF MCP_03_RK2_S0:4:O.Data.15 (Description := "CL1T-02-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_01_EPB OF MCP_02_RK2_S0:3:O.Data.7 (Description := "CL2T-01-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_01_SPBG OF MCP_02_RK2_S0:3:O.Data.8 (Description := "CL2T-01-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_02_EPB OF MCP_02_RK2_S0:3:O.Data.12 (Description := "CL2T-02-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_02_SPBG OF MCP_02_RK2_S0:3:O.Data.13 (Description := "CL2T-02-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_05_EPB OF MCP_02_RK2_S0:4:O.Data.6 (Description := "CL2T-05-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_05_RPBA OF MCP_02_RK2_S0:4:O.Data.8 (Description := "CL2T-05-B JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS2_CL2T_05_SPBG OF MCP_02_RK2_S0:4:O.Data.7 (Description := "CL2T-05-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL3T_01_EPB OF MCP_02_RK2_S0:5:O.Data.11 (Description := "CL3T-01-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL3T_01_SPBG OF MCP_02_RK2_S0:5:O.Data.12 (Description := "CL3T-01-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_CL3T_02_EPB OF MCP_02_RK2_S0:6:O.Data.0 (Description := "CL3T-02-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_CL3T_02_SPBG OF MCP_02_RK2_S0:6:O.Data.1 (Description := "CL3T-02-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_O3T_19_EPB OF MCP_16_RK1_S0:6:O.Data.11 (Description := "O3T-19-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_O3T_19_RPBA OF MCP_16_RK1_S0:6:O.Data.13 (Description := "O3T-19-B JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS2_O3T_19_SPBG OF MCP_16_RK1_S0:6:O.Data.12 (Description := "O3T-19-B START LIGHT",
		            RADIX := Decimal);
		O_CS2_O4T_21_EPB OF MCP_16_RK1_S0:7:O.Data.4 (Description := "O4T-21-B E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS2_O4T_21_RPBA OF MCP_16_RK1_S0:7:O.Data.6 (Description := "O4T-21-B JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS2_O4T_21_SPBG OF MCP_16_RK1_S0:7:O.Data.5 (Description := "O4T-21-B START LIGHT",
		            RADIX := Decimal);
		O_CS3_BM1_27_EPB OF MCP_BM1_RK2_S0:3:O.Data.7 (Description := "BM1-27-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_BM1_28_EPB OF MCP_BM1_RK2_S0:3:O.Data.9 (Description := "BM1-28-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_BM1_29_EPB OF MCP_BM1_RK2_S0:3:O.Data.11 (Description := "BM1-29-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_BM1_30_EPB OF MCP_BM1_RK2_S0:2:O.Data.14 (Description := "BM1-30-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_BM1_30_RPBA OF MCP_BM1_RK2_S0:6:O.Data.6 (Description := "BM1-30-C JAM RESET",
		            RADIX := Decimal);
		O_CS3_BM1_30_SPBG OF MCP_BM1_RK2_S0:9:O.Data.15 (Description := "BM1-30-C START/RESET",
		            RADIX := Decimal);
		O_CS3_CL1T_01_EPB OF MCP_03_RK2_S0:4:O.Data.9 (Description := "CL1T-01-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_CL1T_01_SPBG OF MCP_03_RK2_S0:4:O.Data.10 (Description := "CL1T-01-C START LIGHT",
		            RADIX := Decimal);
		O_CS3_CL1T_02_EPB OF MCP_03_RK2_S0:5:O.Data.0 (Description := "CL1T-02-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_CL1T_02_SPBG OF MCP_03_RK2_S0:5:O.Data.1 (Description := "CL1T-02-C START LIGHT",
		            RADIX := Decimal);
		O_CS3_CL2T_02_EPB OF MCP_02_RK2_S0:3:O.Data.14 (Description := "CL2T-02-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_CL2T_02_SPBG OF MCP_02_RK2_S0:3:O.Data.15 (Description := "CL2T-02-C START LIGHT",
		            RADIX := Decimal);
		O_CS3_CL3T_02_EPB OF MCP_02_RK2_S0:6:O.Data.2 (Description := "CL3T-02-C E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS3_CL3T_02_SPBG OF MCP_02_RK2_S0:6:O.Data.3 (Description := "CL3T-02-C START LIGHT",
		            RADIX := Decimal);
		O_CS4_BM1_27_EPB OF MCP_BM1_RK2_S0:3:O.Data.8 (Description := "BM1-27-D E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS4_BM1_28_EPB OF MCP_BM1_RK2_S0:3:O.Data.10 (Description := "BM1-28-D E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS4_BM1_28_RPBA : BOOL (RADIX := Decimal) := 0;
		O_CS4_BM1_28_SPBG OF MCP_BM1_RK2_S0:5:O.Data.10 (Description := "BM1-29 START/RESET",
		            RADIX := Decimal);
		O_CS4_BM1_29_EPB OF MCP_BM1_RK2_S0:3:O.Data.12 (Description := "BM1-29-D E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS4_BM1_30_EPB OF MCP_BM1_RK2_S0:3:O.Data.13 (Description := "BM1-30-D E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS4_CL3T_02_EPB OF MCP_02_RK2_S0:6:O.Data.4 (Description := "CL3T-02-D E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS4_CL3T_02_RPBA OF MCP_02_RK2_S0:6:O.Data.6 (Description := "CL3T-02-D JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS4_CL3T_02_SPBG OF MCP_02_RK2_S0:6:O.Data.5 (Description := "CL3T-02-D START LIGHT",
		            RADIX := Decimal);
		O_CS5_BM1_27_EPB OF MCP_BM1_RK1_S16:14:O.Data.14 (Description := "BM1-27-E E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS5_BM1_27_RPBA OF MCP_BM1_RK2_S0:6:O.Data.3 (Description := "BM1-27-E JAM RESET",
		            RADIX := Decimal);
		O_CS5_BM1_27_SPBG OF MCP_BM1_RK2_S0:9:O.Data.12 (Description := "BM1-27-E START/RESET",
		            RADIX := Decimal);
		O_CS5_BM1_28_EPB OF MCP_BM1_RK1_S16:14:O.Data.15 (Description := "BM1-28-E E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS5_BM1_28_RPBA OF MCP_BM1_RK2_S0:6:O.Data.4 (Description := "BM1-28-E JAM RESET",
		            RADIX := Decimal);
		O_CS5_BM1_28_SPBG OF MCP_BM1_RK2_S0:9:O.Data.13 (Description := "BM1-28-E START/RESET",
		            RADIX := Decimal);
		O_CS_BM1_01_EPB OF MCP_BM1_RK2_S0:8:O.Data.2 (Description := "BM1-01 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_01_RPBA OF MCP_BM1_RK2_S0:4:O.Data.0 (Description := "BM1-01 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_02_EPB OF MCP_BM1_RK2_S0:8:O.Data.3 (Description := "BM1-02 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_02_RPBA OF MCP_BM1_RK2_S0:4:O.Data.1 (Description := "BM1-02 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_03_EPB OF MCP_BM1_RK2_S0:8:O.Data.4 (Description := "BM1-03 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_03_RPBA OF MCP_BM1_RK2_S0:4:O.Data.2 (Description := "BM1-03 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_06_EPB OF MCP_BM1_RK2_S0:8:O.Data.5 (Description := "BM1-06 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_06_RPBA OF MCP_BM1_RK2_S0:4:O.Data.3 (Description := "BM1-06 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_07_EPB OF MCP_BM1_RK2_S0:8:O.Data.6 (Description := "BM1-07 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_07_LTW OF MCP_BM1_RK2_S0:5:O.Data.11 (Description := "BM1-07 Oversize",
		            RADIX := Decimal);
		O_CS_BM1_07_RPBA OF MCP_BM1_RK2_S0:6:O.Data.0 (Description := "BM1-07 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_07_SPBG OF MCP_BM1_RK2_S0:5:O.Data.8 (Description := "BM1-07 START/RESET",
		            RADIX := Decimal);
		O_CS_BM1_13_EPB OF MCP_BM1_RK2_S0:8:O.Data.1 (Description := "BM1-13 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_13_RPBA OF MCP_BM1_RK2_S0:4:O.Data.4 (Description := "BM1-13 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_15_EPB OF MCP_BM1_RK2_S0:8:O.Data.9 (Description := "BM1-15 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_15_RPBA OF MCP_BM1_RK2_S0:4:O.Data.7 (Description := "BM1-15 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_17_LTB OF MCP_BM1_RK2_S0:5:O.Data.12 (Description := "MOTOR FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_17_SPBG OF MCP_BM1_RK2_S0:5:O.Data.9 (Description := "START/RESET",
		            RADIX := Decimal);
		O_CS_BM1_18_EPB OF MCP_BM1_RK2_S0:8:O.Data.14 (Description := "BM1-18 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_18_RPBA OF MCP_BM1_RK2_S0:4:O.Data.11 (Description := "BM1-18 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_19_EPB OF MCP_BM1_RK2_S0:8:O.Data.15 (Description := "BM1-19 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_19_RPBA OF MCP_BM1_RK2_S0:4:O.Data.12 (Description := "BM1-19 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_20_EPB OF MCP_BM1_RK2_S0:9:O.Data.0 (Description := "BM1-20 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_20_LTW OF MCP_BM1_RK2_S0:5:O.Data.13 (Description := "BM1-20 Oversize$N",
		            RADIX := Decimal);
		O_CS_BM1_20_RPBA OF MCP_BM1_RK2_S0:4:O.Data.13 (Description := "BM1-20 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_23_EPB OF MCP_BM1_RK2_S0:9:O.Data.1 (Description := "BM1-23 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_23_RPBA OF MCP_BM1_RK2_S0:4:O.Data.14 (Description := "BM1-23 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_25_EPB OF MCP_BM1_RK2_S0:9:O.Data.2 (Description := "BM1-25 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_25_RPBA OF MCP_BM1_RK2_S0:4:O.Data.15 (Description := "BM1-25 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_34_EPB OF MCP_BM1_RK2_S0:9:O.Data.10 (Description := "BM1-34 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_34_RPBA OF MCP_BM1_RK2_S0:5:O.Data.6 (Description := "BM1-34 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_38_EPB OF MCP_BM1_RK2_S0:9:O.Data.11 (Description := "BM1-38 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_38_RPBA OF MCP_BM1_RK2_S0:5:O.Data.7 (Description := "BM1-38 JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_MCP_EPB OF MCP_BM1_RK2_S0:8:O.Data.0 (Description := "BM1-MCP E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_MCP_LTB OF MCP_BM1_RK2_S0:6:O.Data.8 (Description := "BM1-MCP MOTOR FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_BM1_MCP_LTG OF MCP_BM1_RK2_S0:6:O.Data.9 (Description := "BM1-MCP READY",
		            RADIX := Decimal);
		O_CS_BM1_MCP_RPBA OF MCP_BM1_RK2_S0:6:O.Data.7 (Description := "BM1-MCP JAM RESET",
		            RADIX := Decimal);
		O_CS_BM1_MCP_SPBG OF MCP_BM1_RK2_S0:6:O.Data.9 (Description := "BM1-MCP START/RESET",
		            RADIX := Decimal);
		O_CS_C2T_13_EPB OF MCP_01_RK1_S0:9:O.Data.7 (Description := "C2T-13 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_C2T_13_RPBA OF MCP_01_RK1_S0:9:O.Data.9 (Description := "C2T-13 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_C2T_13_SPBG OF MCP_01_RK1_S0:9:O.Data.8 (Description := "C2T-13 START LIGHT",
		            RADIX := Decimal);
		O_CS_C2T_17_EPB OF MCP_01_RK1_S0:9:O.Data.10 (Description := "C2T-17 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_C2T_17_RPBA OF MCP_01_RK1_S0:9:O.Data.12 (Description := "C2T-17 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_C2T_17_SPBG OF MCP_01_RK1_S0:9:O.Data.11 (Description := "C2T-17 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL12T_36_EPB OF MCP_16_RK1_S0:7:O.Data.7 (Description := "CL12T-36 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL12T_36_RPBA OF MCP_16_RK1_S0:7:O.Data.9 (Description := "CL12T-36 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL12T_36_SPBG OF MCP_16_RK1_S0:7:O.Data.8 (Description := "CL12T-36 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_05_EPB OF MCP_03_RK2_S0:5:O.Data.2 (Description := "CL1T-05 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_05_RPBA OF MCP_03_RK2_S0:5:O.Data.4 (Description := "CL1T-05 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_05_SPBG OF MCP_03_RK2_S0:5:O.Data.3 (Description := "CL1T-05 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_09_EPB OF MCP_03_RK2_S0:5:O.Data.5 (Description := "CL1T-09 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_09_RPBA OF MCP_03_RK2_S0:5:O.Data.7 (Description := "CL1T-09 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_09_SPBG OF MCP_03_RK2_S0:5:O.Data.6 (Description := "CL1T-09 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_11_EPB OF MCP_03_RK2_S0:5:O.Data.8 (Description := "CL1T-11 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_11_RPBA OF MCP_03_RK2_S0:5:O.Data.10 (Description := "CL1T-11 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_11_SPBG OF MCP_03_RK2_S0:5:O.Data.9 (Description := "CL1T-11 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_12_EPB OF MCP_03_RK2_S0:5:O.Data.11 (Description := "CL1T-12 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_12_RPBA OF MCP_03_RK2_S0:5:O.Data.13 (Description := "CL1T-12 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_12_SPBG OF MCP_03_RK2_S0:5:O.Data.12 (Description := "CL1T-12 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_16_EPB OF MCP_03_RK2_S0:6:O.Data.0 (Description := "CL1T-16 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_16_RPBA OF MCP_03_RK2_S0:6:O.Data.2 (Description := "CL1T-16 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_16_SPBG OF MCP_03_RK2_S0:6:O.Data.1 (Description := "CL1T-16 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_20_EPB OF MCP_03_RK2_S0:6:O.Data.3 (Description := "CL1T-20 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_20_RPBA OF MCP_03_RK2_S0:6:O.Data.5 (Description := "CL1T-20 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_20_SPBG OF MCP_03_RK2_S0:6:O.Data.4 (Description := "CL1T-20 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_24_EPB OF MCP_03_RK2_S0:6:O.Data.6 (Description := "CL1T-24 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_24_RPBA OF MCP_03_RK2_S0:6:O.Data.8 (Description := "CL1T-24 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL1T_24_SPBG OF MCP_03_RK2_S0:6:O.Data.7 (Description := "CL1T-24 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_04_EPB OF MCP_02_RK2_S0:4:O.Data.0 (Description := "CL2T-04 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_04_RPBA OF MCP_02_RK2_S0:4:O.Data.2 (Description := "CL2T-04 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_04_SPBG OF MCP_02_RK2_S0:4:O.Data.1 (Description := "CL2T-04 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_09_EPB OF MCP_02_RK2_S0:4:O.Data.9 (Description := "CL2T-09 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_09_RPBA OF MCP_02_RK2_S0:4:O.Data.11 (Description := "CL2T-09 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL2T_09_SPBG OF MCP_02_RK2_S0:4:O.Data.10 (Description := "CL2T-09 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_03_EPB OF MCP_02_RK2_S0:6:O.Data.7 (Description := "CL3T-03 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_03_RPBA OF MCP_02_RK2_S0:6:O.Data.9 (Description := "CL3T-03 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_03_SPBG OF MCP_02_RK2_S0:6:O.Data.8 (Description := "CL3T-03 START LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_04_EPB OF MCP_02_RK2_S0:6:O.Data.10 (Description := "CL3T-04 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_04_RPBA OF MCP_02_RK2_S0:6:O.Data.12 (Description := "CL3T-04 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_CL3T_04_SPBG OF MCP_02_RK2_S0:6:O.Data.11 (Description := "CL3T-04 START LIGHT",
		            RADIX := Decimal);
		O_CS_HX1T_10_EPB OF MCP_03_RK2_S0:6:O.Data.9 (Description := "HX1T-10 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_HX1T_10_RPBA OF MCP_03_RK2_S0:6:O.Data.11 (Description := "HX1T-10 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_HX1T_10_SPBG OF MCP_03_RK2_S0:6:O.Data.10 (Description := "HX1T-10 START LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_01_EPB OF MCP_01_RK1_S0:8:O.Data.0 (Description := "MCP-01 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_01_HM OF MCP_BM1_RK2_S0:6:O.Data.10 (Description := "HOUR METER",
		            RADIX := Decimal);
		O_CS_MCP_01_LTA OF MCP_01_RK1_S0:8:O.Data.4 (Description := "MCP-01 JAM LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_01_LTB OF MCP_01_RK1_S0:8:O.Data.3 (Description := "MCP-01 VFD FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_01_LTG OF MCP_01_RK1_S0:8:O.Data.2 (Description := "MCP-01 SYSTEM READY LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_01_SPBG OF MCP_01_RK1_S0:8:O.Data.1 (Description := "MCP-01 RESET/START LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_02_EPB OF MCP_02_RK2_S0:3:O.Data.0 (Description := "MCP-02 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_02_LTA OF MCP_02_RK2_S0:3:O.Data.4 (Description := "MCP-02 JAM LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_02_LTB OF MCP_02_RK2_S0:3:O.Data.3 (Description := "MCP-02 VFD FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_02_LTG OF MCP_02_RK2_S0:3:O.Data.2 (Description := "MCP-02 SYSTEM READY LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_02_SPBG OF MCP_02_RK2_S0:3:O.Data.1 (Description := "MCP-02 RESET/START LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_03_EPB OF MCP_03_RK2_S0:4:O.Data.0 (Description := "MCP-03 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_03_LTA OF MCP_03_RK2_S0:4:O.Data.4 (Description := "MCP-03 JAM LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_03_LTB OF MCP_03_RK2_S0:4:O.Data.3 (Description := "MCP-03 VFD FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_03_LTG OF MCP_03_RK2_S0:4:O.Data.2 (Description := "MCP-03 SYSTEM READY LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_03_SPBG OF MCP_03_RK2_S0:4:O.Data.1 (Description := "MCP-03 RESET/START LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_16_EPB OF MCP_16_RK1_S0:6:O.Data.0 (Description := "MCP-16 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_16_LTA OF MCP_16_RK1_S0:6:O.Data.4 (Description := "MCP-16 JAM LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_16_LTB OF MCP_16_RK1_S0:6:O.Data.3 (Description := "MCP-16 VFD FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_16_LTG OF MCP_16_RK1_S0:6:O.Data.2 (Description := "MCP-16 SYSTEM READY LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_16_SPBG OF MCP_16_RK1_S0:6:O.Data.1 (Description := "MCP-16 RESET/START LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_BM1_EPB OF MCP_BM1_RK2_S0:8:O.Data.0 (Description := "BM1-MCP E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_BM1_HM OF MCP_BM1_RK2_S0:6:O.Data.10 (Description := "MCP-01 HOUR METER",
		            RADIX := Decimal);
		O_CS_MCP_BM1_LTB OF MCP_BM1_RK2_S0:6:O.Data.8 (Description := "BM1-MCP MOTOR FAULT LIGHT",
		            RADIX := Decimal);
		O_CS_MCP_BM1_RPBA OF MCP_BM1_RK2_S0:6:O.Data.7 (Description := "BM1-MCP JAM RESET",
		            RADIX := Decimal);
		O_CS_MCP_BM1_SPBG OF MCP_BM1_RK2_S0:6:O.Data.9 (Description := "BM1-MCP START/RESET",
		            RADIX := Decimal);
		O_CS_O2T_04_EPB OF MCP_01_RK1_S0:8:O.Data.5 (Description := "O2T-04 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_04_RPBA OF MCP_01_RK1_S0:8:O.Data.7 (Description := "O2T-04 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_04_SPBG OF MCP_01_RK1_S0:8:O.Data.6 (Description := "O2T-04 START LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_06_EPB OF MCP_01_RK1_S0:8:O.Data.8 (Description := "O2T-06 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_06_RPBA OF MCP_01_RK1_S0:8:O.Data.10 (Description := "O2T-06 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_06_SPBG OF MCP_01_RK1_S0:8:O.Data.9 (Description := "O2T-06 START LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_10_EPB OF MCP_01_RK1_S0:8:O.Data.11 (Description := "O2T-10 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_10_RPBA OF MCP_01_RK1_S0:8:O.Data.13 (Description := "O2T-10 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_10_SPBG OF MCP_01_RK1_S0:8:O.Data.12 (Description := "O2T-10 START LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_12_EPB OF MCP_01_RK1_S0:8:O.Data.14 (Description := "O2T-12 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_12_RPBA OF MCP_01_RK1_S0:9:O.Data.0 (Description := "O2T-12 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_12_SPBG OF MCP_01_RK1_S0:8:O.Data.15 (Description := "O2T-12 START LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_14_EPB OF MCP_01_RK1_S0:9:O.Data.1 (Description := "O2T-14 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_14_RPBA OF MCP_01_RK1_S0:9:O.Data.3 (Description := "O2T-14 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_14_SPBG OF MCP_01_RK1_S0:9:O.Data.2 (Description := "O2T-14 START LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_18_EPB OF MCP_01_RK1_S0:9:O.Data.4 (Description := "O2T-18 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_18_RPBA OF MCP_01_RK1_S0:9:O.Data.6 (Description := "O2T-18 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O2T_18_SPBG OF MCP_01_RK1_S0:9:O.Data.5 (Description := "O2T-18 START LIGHT",
		            RADIX := Decimal);
		O_CS_O3T_17_EPB OF MCP_16_RK1_S0:6:O.Data.5 (Description := "O3T-17 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O3T_17_RPBA OF MCP_16_RK1_S0:6:O.Data.7 (Description := "O3T-17 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O3T_17_SPBG OF MCP_16_RK1_S0:6:O.Data.6 (Description := "O3T-17 START LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_06_EPB OF MCP_02_RK2_S0:5:O.Data.0 (Description := "O4T-06 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_06_RPBA OF MCP_02_RK2_S0:5:O.Data.2 (Description := "O4T-06 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_06_SPBG OF MCP_02_RK2_S0:5:O.Data.1 (Description := "O4T-06 START LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_10_EPB OF MCP_02_RK2_S0:5:O.Data.3 (Description := "O4T-10 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_10_RPBA OF MCP_02_RK2_S0:5:O.Data.5 (Description := "O4T-10 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_10_SPBG OF MCP_02_RK2_S0:5:O.Data.4 (Description := "O4T-10 START LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_16_EPB OF MCP_16_RK1_S0:6:O.Data.14 (Description := "O4T-16 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_16_RPBA OF MCP_16_RK1_S0:7:O.Data.0 (Description := "O4T-16 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_O4T_16_SPBG OF MCP_16_RK1_S0:6:O.Data.15 (Description := "O4T-16 START LIGHT",
		            RADIX := Decimal);
		O_CS_T5T_09_EPB OF MCP_02_RK2_S0:4:O.Data.12 (Description := "T5T-09 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_T5T_09_RPBA OF MCP_02_RK2_S0:4:O.Data.14 (Description := "T5T-09 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_T5T_09_SPBG OF MCP_02_RK2_S0:4:O.Data.13 (Description := "T5T-09 START LIGHT",
		            RADIX := Decimal);
		O_CS_XO1_01_EPB OF MCP_02_RK2_S0:5:O.Data.6 (Description := "XO1-01 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_XO1_01_RPBA OF MCP_02_RK2_S0:5:O.Data.8 (Description := "XO1-01 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_XO1_01_SPBG OF MCP_02_RK2_S0:5:O.Data.7 (Description := "XO1-01 START LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_02_EPB OF MCP_03_RK2_S0:6:O.Data.15 (Description := "XO2-02 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_02_RPBA OF MCP_03_RK2_S0:7:O.Data.1 (Description := "XO2-02 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_02_SPBG OF MCP_03_RK2_S0:7:O.Data.0 (Description := "XO2-02 START LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_05_EPB OF MCP_03_RK2_S0:7:O.Data.2 (Description := "XO2-05 E-STOP LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_05_RPBA OF MCP_03_RK2_S0:7:O.Data.4 (Description := "XO2-05 JAM RESET LIGHT",
		            RADIX := Decimal);
		O_CS_XO2_05_SPBG OF MCP_03_RK2_S0:7:O.Data.3 (Description := "XO2-05 START LIGHT",
		            RADIX := Decimal);
		O_C_BM1_01 OF MCP_BM1_RK1_S16:14:O.Data.0 (Description := "BM1-01 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_02 OF MCP_BM1_RK1_S16:14:O.Data.1 (Description := "BM1-02 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_03 OF MCP_BM1_RK1_S16:14:O.Data.2 (Description := "BM1-03 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_04 OF MCP_BM1_RK1_S16:14:O.Data.3 (Description := "BM1-04 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_05 OF MCP_BM1_RK1_S16:14:O.Data.4 (Description := "BM1-05 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_06 OF MCP_BM1_RK1_S16:14:O.Data.5 (Description := "BM1-06 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_07 OF MCP_BM1_RK1_S16:14:O.Data.6 (Description := "BM1-07 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_08 OF MCP_BM1_RK1_S16:14:O.Data.7 (Description := "BM1-08 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_09 OF MCP_BM1_RK1_S16:14:O.Data.8 (Description := "BM1-09 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_10 OF MCP_BM1_RK1_S16:14:O.Data.9 (Description := "BM1-10 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_11 OF MCP_BM1_RK1_S16:14:O.Data.10 (Description := "BM1-11 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_12 OF MCP_BM1_RK1_S16:14:O.Data.11 (Description := "BM1-12 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_13_FWD OF MCP_BM1_RK1_S16:14:O.Data.12 (Description := "BM1-13 MOTOR FORWARD",
		            RADIX := Decimal);
		O_C_BM1_13_REV OF MCP_BM1_RK1_S16:14:O.Data.13 (Description := "BM1-13 MOTOR REVERSE",
		            RADIX := Decimal);
		O_C_BM1_14 OF MCP_BM1_RK2_S0:1:O.Data.0 (Description := "BM1-14 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_15 OF MCP_BM1_RK2_S0:1:O.Data.1 (Description := "BM1-15 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_16 OF MCP_BM1_RK2_S0:1:O.Data.2 (Description := "BM1-16 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_17 OF MCP_BM1_RK2_S0:1:O.Data.3 (Description := "BM1-17 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_18 OF MCP_BM1_RK2_S0:1:O.Data.4 (Description := "BM1-18 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_19 OF MCP_BM1_RK2_S0:1:O.Data.5 (Description := "BM1-19 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_20 OF MCP_BM1_RK2_S0:1:O.Data.6 (Description := "BM1-20 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_21 OF MCP_BM1_RK2_S0:1:O.Data.7 (Description := "BM1-21 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_22 OF MCP_BM1_RK2_S0:1:O.Data.8 (Description := "BM1-22 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_23 OF MCP_BM1_RK2_S0:1:O.Data.9 (Description := "BM1-23 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_24 OF MCP_BM1_RK2_S0:1:O.Data.10 (Description := "BM1-24 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_25 OF MCP_BM1_RK2_S0:1:O.Data.11 (Description := "BM1-25 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_26 OF MCP_BM1_RK2_S0:1:O.Data.12 (Description := "BM1-26 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_27 OF MCP_BM1_RK2_S0:1:O.Data.13 (Description := "BM1-27 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_28 OF MCP_BM1_RK2_S0:1:O.Data.14 (Description := "BM1-28 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_29 OF MCP_BM1_RK2_S0:1:O.Data.15 (Description := "BM1-29 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_30 OF MCP_BM1_RK2_S0:2:O.Data.0 (Description := "BM1-30 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_31 OF MCP_BM1_RK2_S0:2:O.Data.1 (Description := "BM1-31 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_32 OF MCP_BM1_RK2_S0:2:O.Data.2 (Description := "BM1-32 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_33 OF MCP_BM1_RK2_S0:2:O.Data.3 (Description := "BM1-33 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_34 OF MCP_BM1_RK2_S0:2:O.Data.4 (Description := "BM1-34 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_35 OF MCP_BM1_RK2_S0:2:O.Data.5 (Description := "BM1-35 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_36 OF MCP_BM1_RK2_S0:2:O.Data.6 (Description := "BM1-36 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_37 OF MCP_BM1_RK2_S0:2:O.Data.7 (Description := "BM1-37 MOTOR STARTER",
		            RADIX := Decimal);
		O_C_BM1_38 OF MCP_BM1_RK2_S0:2:O.Data.8 (Description := "BM1-38 MOTOR STARTER",
		            RADIX := Decimal);
		O_INT_C2T_12_RUN OF MCP_01_RK1_S0:11:O.Data.13 (Description := "C2T-12 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_C4_08_MRG OF MCP_03_RK2_S0:10:O.Data.8 (Description := "C4-08 MERGE HOLD SIGNAL",
		            RADIX := Decimal);
		O_INT_C4_09_RES OF MCP_03_RK2_S0:10:O.Data.7 (Description := "C4-09 RESET SIGNAL",
		            RADIX := Decimal);
		O_INT_C4_09_START OF MCP_03_RK2_S0:10:O.Data.5 (Description := "C4-09 START SIGNAL",
		            RADIX := Decimal);
		O_INT_CL12T_35_RUN OF MCP_16_RK1_S0:8:O.Data.11 (Description := "CL12T-35 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_CL1T_26_JAM OF MCP_03_RK2_S0:10:O.Data.13 (Description := "CL1T-26 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_CL2T_09_JAM OF MCP_02_RK2_S0:9:O.Data.1 (Description := "CL2T-09 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_CL3T_8_JAM OF MCP_02_RK2_S0:9:O.Data.10 (Description := "CL3T-8 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_HX1T_06_RUN OF MCP_03_RK2_S0:10:O.Data.10 (Description := "HX1T-06 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_HX1_11_RES OF MCP_03_RK2_S0:10:O.Data.14 (Description := "HX1-11 RESET SIGNAL",
		            RADIX := Decimal);
		O_INT_HX1_11_START OF MCP_03_RK2_S0:10:O.Data.12 (Description := "HX1-11 START SIGNAL",
		            RADIX := Decimal);
		O_INT_O2T_04_RUN OF MCP_01_RK1_S0:11:O.Data.10 (Description := "O2T-04 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_O3T_17_RUN OF MCP_16_RK1_S0:8:O.Data.5 (Description := "O3T-17 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_O3T_20_JAM OF MCP_16_RK1_S0:8:O.Data.7 (Description := "O3T-20 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_O3_54_START OF MCP_16_RK1_S0:8:O.Data.6 (Description := "O3-54 START SIGNAL",
		            RADIX := Decimal);
		O_INT_O4T_05_RUN OF MCP_02_RK2_S0:9:O.Data.3 (Description := "O4T-05 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_O4T_16_RUN OF MCP_16_RK1_S0:8:O.Data.8 (Description := "O4T-16 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_O4T_22_JAM OF MCP_16_RK1_S0:8:O.Data.10 (Description := "O4T-22 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_03_MRG OF MCP_02_RK2_S0:9:O.Data.7 (Description := "O4-03 MERGE HOLD SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_04_RES OF MCP_02_RK2_S0:9:O.Data.6 (Description := "O4-04 RESET SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_04_START OF MCP_02_RK2_S0:9:O.Data.4 (Description := "O4-04 START SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_06_RES OF MCP_02_RK2_S0:9:O.Data.2 (Description := "O4-06 RESET SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_06_START OF MCP_02_RK2_S0:9:O.Data.0 (Description := "O4-06 START SIGNAL",
		            RADIX := Decimal);
		O_INT_O4_54_START OF MCP_16_RK1_S0:8:O.Data.9 (Description := "O4-54 START SIGNAL",
		            RADIX := Decimal);
		O_INT_T5T_08_RUN OF MCP_02_RK2_S0:9:O.Data.8 (Description := "T5T-08 CONVEYOR RUNNING SIGNAL",
		            RADIX := Decimal);
		O_INT_T5T_09_JAM OF MCP_02_RK2_S0:9:O.Data.5 (Description := "T5T-09 JAM SIGNAL",
		            RADIX := Decimal);
		O_INT_T5T_10_RES OF MCP_02_RK2_S0:9:O.Data.11 (Description := "T5T-10 RESET SIGNAL",
		            RADIX := Decimal);
		O_INT_T5T_10_START OF MCP_02_RK2_S0:9:O.Data.9 (Description := "T5T-10 START SIGNAL",
		            RADIX := Decimal);
		O_INT_XO2_05_JAM OF MCP_03_RK2_S0:10:O.Data.6 (Description := "XO2-05 JAM SIGNAL",
		            RADIX := Decimal);
		O_SD_XO1_EN OF MCP_02_RK2_S0:7:O.Data.11 (Description := "XO1 MOTOR ENABLE",
		            RADIX := Decimal);
		O_SD_XO1_EXT OF MCP_02_RK2_S0:7:O.Data.12 (Description := "XO1 PADDLE POSITION EXTEND",
		            RADIX := Decimal);
		O_SD_XO1_RES OF MCP_02_RK2_S0:7:O.Data.15 (Description := "XO1 RESET",
		            RADIX := Decimal);
		O_SD_XO1_RET OF MCP_02_RK2_S0:7:O.Data.13 (Description := "XO1 PADDLE POSITION RETRACT",
		            RADIX := Decimal);
		O_SD_XO1_RUN OF MCP_02_RK2_S0:7:O.Data.14 (Description := "XO1 PADDLE BELT RUN",
		            RADIX := Decimal);
		O_SD_XO2_EN OF MCP_03_RK2_S0:9:O.Data.0 (Description := "XO2 MOTOR ENABLE",
		            RADIX := Decimal);
		O_SD_XO2_EXT OF MCP_03_RK2_S0:9:O.Data.1 (Description := "XO2 PADDLE POSITION EXTEND",
		            RADIX := Decimal);
		O_SD_XO2_RES OF MCP_03_RK2_S0:9:O.Data.4 (Description := "XO2 RESET",
		            RADIX := Decimal);
		O_SD_XO2_RET OF MCP_03_RK2_S0:9:O.Data.2 (Description := "XO2 PADDLE POSITION RETRACT",
		            RADIX := Decimal);
		O_SD_XO2_RUN OF MCP_03_RK2_S0:9:O.Data.3 (Description := "XO2 PADDLE BELT RUN",
		            RADIX := Decimal);
		O_VFD_BM1_27_FWD OF MCP_BM1_RK2_S0:1:O.Data.13 (Description := "BM1-27 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_BM1_27_REV OF MCP_BM1_RK2_S0:2:O.Data.9 (Description := "BM1-27 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_BM1_28_FWD OF MCP_BM1_RK2_S0:1:O.Data.14 (Description := "BM1-28 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_BM1_28_REV OF MCP_BM1_RK2_S0:2:O.Data.10 (Description := "BM1-28 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_BM1_29_FWD OF MCP_BM1_RK2_S0:1:O.Data.15 (Description := "BM1-29 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_BM1_29_REV OF MCP_BM1_RK2_S0:2:O.Data.11 (Description := "BM1-29 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_BM1_30_FWD OF MCP_BM1_RK2_S0:2:O.Data.0 (Description := "BM1-30 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_BM1_30_REV OF MCP_BM1_RK2_S0:2:O.Data.12 (Description := "BM1-30 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_C2T_12_FWD OF MCP_01_RK1_S0:2:O.Data.15 (Description := "C2T-12 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_13_FWD OF MCP_01_RK1_S0:3:O.Data.0 (Description := "C2T-13 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_14_FWD OF MCP_01_RK1_S0:3:O.Data.1 (Description := "C2T-14 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_15_FWD OF MCP_01_RK1_S0:3:O.Data.2 (Description := "C2T-15 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_16_FWD OF MCP_01_RK1_S0:3:O.Data.3 (Description := "C2T-16 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_17_FWD OF MCP_01_RK1_S0:3:O.Data.4 (Description := "C2T-17 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_C2T_17_REV OF MCP_01_RK1_S0:3:O.Data.5 (Description := "C2T-17 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_CL12T_35_FWD OF MCP_16_RK1_S0:2:O.Data.11 (Description := "CL12T-35 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL12T_36_FWD OF MCP_16_RK1_S0:2:O.Data.12 (Description := "CL12T-36 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL12T_36_REV OF MCP_16_RK1_S0:2:O.Data.13 (Description := "CL12T-36 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_CL1T_01_FWD OF MCP_03_RK2_S0:1:O.Data.5 (Description := "CL1T-01 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_02_FWD OF MCP_03_RK2_S0:1:O.Data.6 (Description := "CL1T-02 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_03_FWD OF MCP_03_RK2_S0:1:O.Data.7 (Description := "CL1T-03 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_04_FWD OF MCP_03_RK2_S0:1:O.Data.8 (Description := "CL1T-04 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_05_FWD OF MCP_03_RK2_S0:1:O.Data.9 (Description := "CL1T-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_06_FWD OF MCP_03_RK2_S0:1:O.Data.10 (Description := "CL1T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_07_FWD OF MCP_03_RK2_S0:1:O.Data.11 (Description := "CL1T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_08_FWD OF MCP_03_RK2_S0:1:O.Data.12 (Description := "CL1T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_09_FWD OF MCP_03_RK2_S0:1:O.Data.13 (Description := "CL1T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_10_FWD OF MCP_03_RK2_S0:1:O.Data.14 (Description := "CL1T-10 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_11_FWD OF MCP_03_RK2_S0:1:O.Data.15 (Description := "CL1T-11 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_12_FWD OF MCP_03_RK2_S0:2:O.Data.0 (Description := "CL1T-12 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_13_FWD OF MCP_03_RK2_S0:2:O.Data.1 (Description := "CL1T-13 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_14_FWD OF MCP_03_RK2_S0:2:O.Data.2 (Description := "CL1T-14 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_15_FWD OF MCP_03_RK2_S0:2:O.Data.3 (Description := "CL1T-15 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_16_FWD OF MCP_03_RK2_S0:2:O.Data.4 (Description := "CL1T-16 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_17_FWD OF MCP_03_RK2_S0:2:O.Data.5 (Description := "CL1T-17 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_18_FWD OF MCP_03_RK2_S0:2:O.Data.6 (Description := "CL1T-18 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_19_FWD OF MCP_03_RK2_S0:2:O.Data.7 (Description := "CL1T-19 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_20_FWD OF MCP_03_RK2_S0:2:O.Data.8 (Description := "CL1T-20 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_21_FWD OF MCP_03_RK2_S0:2:O.Data.9 (Description := "CL1T-21 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_23_FWD OF MCP_03_RK2_S0:2:O.Data.10 (Description := "CL1T-23 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_24_FWD OF MCP_03_RK2_S0:2:O.Data.11 (Description := "CL1T-24 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL1T_26_FWD OF MCP_03_RK2_S0:2:O.Data.12 (Description := "CL1T-26 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_01_FWD OF MCP_02_RK2_S0:1:O.Data.0 (Description := "CL2T-01 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_02_FWD OF MCP_02_RK2_S0:1:O.Data.1 (Description := "CL2T-02 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_03_FWD OF MCP_02_RK2_S0:1:O.Data.2 (Description := "CL2T-03 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_04_FWD OF MCP_02_RK2_S0:1:O.Data.3 (Description := "CL2T-04 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_05_FWD OF MCP_02_RK2_S0:1:O.Data.4 (Description := "CL2T-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_06_FWD OF MCP_02_RK2_S0:1:O.Data.5 (Description := "CL2T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_07_FWD OF MCP_02_RK2_S0:1:O.Data.6 (Description := "CL2T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_08_FWD OF MCP_02_RK2_S0:1:O.Data.7 (Description := "CL2T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL2T_09_FWD OF MCP_02_RK2_S0:1:O.Data.8 (Description := "CL2T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_01_FWD OF MCP_02_RK2_S0:1:O.Data.9 (Description := "CL3T-01 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_02_FWD OF MCP_02_RK2_S0:1:O.Data.10 (Description := "CL3T-02 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_03_FWD OF MCP_02_RK2_S0:1:O.Data.11 (Description := "CL3T-03 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_04_FWD OF MCP_02_RK2_S0:1:O.Data.12 (Description := "CL3T-04 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_05_FWD OF MCP_02_RK2_S0:1:O.Data.13 (Description := "CL3T-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_06_FWD OF MCP_02_RK2_S0:1:O.Data.14 (Description := "CL3T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_07_FWD OF MCP_02_RK2_S0:1:O.Data.15 (Description := "CL3T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_CL3T_08_FWD OF MCP_02_RK2_S0:2:O.Data.0 (Description := "CL3T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_06_FWD OF MCP_03_RK2_S0:3:O.Data.0 (Description := "HX1T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_07_FWD OF MCP_03_RK2_S0:3:O.Data.1 (Description := "HX1T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_08_FWD OF MCP_03_RK2_S0:3:O.Data.2 (Description := "HX1T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_09_FWD OF MCP_03_RK2_S0:3:O.Data.3 (Description := "HX1T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_10A_FWD OF MCP_03_RK2_S0:3:O.Data.6 (Description := "HX1T-10A VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_10_FWD OF MCP_03_RK2_S0:3:O.Data.4 (Description := "HX1T-10 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_HX1T_10_REV OF MCP_03_RK2_S0:3:O.Data.5 (Description := "HX1T-10 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_O2T_04_FWD OF MCP_01_RK1_S0:2:O.Data.0 (Description := "O2T-04 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_05_FWD OF MCP_01_RK1_S0:2:O.Data.1 (Description := "O2T-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_06_FWD OF MCP_01_RK1_S0:2:O.Data.2 (Description := "O2T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_07_FWD OF MCP_01_RK1_S0:2:O.Data.3 (Description := "O2T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_08_FWD OF MCP_01_RK1_S0:2:O.Data.4 (Description := "O2T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_09_FWD OF MCP_01_RK1_S0:2:O.Data.5 (Description := "O2T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_10_FWD OF MCP_01_RK1_S0:2:O.Data.6 (Description := "O2T-10 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_11_FWD OF MCP_01_RK1_S0:2:O.Data.7 (Description := "O2T-11 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_12_FWD OF MCP_01_RK1_S0:2:O.Data.8 (Description := "O2T-12 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_13_FWD OF MCP_01_RK1_S0:2:O.Data.9 (Description := "O2T-13 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_14_FWD OF MCP_01_RK1_S0:2:O.Data.10 (Description := "O2T-14 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_15_FWD OF MCP_01_RK1_S0:2:O.Data.11 (Description := "O2T-15 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_16_FWD OF MCP_01_RK1_S0:2:O.Data.12 (Description := "O2T-16 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_17_FWD OF MCP_01_RK1_S0:2:O.Data.13 (Description := "O2T-17 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_18_FWD OF MCP_01_RK1_S0:2:O.Data.14 (Description := "O2T-18 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O2T_18_REV OF MCP_01_RK1_S0:3:O.Data.6 (Description := "O2T-18 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_O3T_17_FWD OF MCP_16_RK1_S0:2:O.Data.0 (Description := "O3T-17 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O3T_18_FWD OF MCP_16_RK1_S0:2:O.Data.1 (Description := "O3T-18 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O3T_19_FWD OF MCP_16_RK1_S0:2:O.Data.2 (Description := "O3T-19 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O3T_20_FWD OF MCP_16_RK1_S0:2:O.Data.3 (Description := "O3T-20 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_05_FWD OF MCP_02_RK2_S0:2:O.Data.1 (Description := "O4T-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_06_FWD OF MCP_02_RK2_S0:2:O.Data.2 (Description := "O4T-06 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_07_FWD OF MCP_02_RK2_S0:2:O.Data.3 (Description := "O4T-07 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_08_FWD OF MCP_02_RK2_S0:2:O.Data.4 (Description := "O4T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_09_FWD OF MCP_02_RK2_S0:2:O.Data.5 (Description := "O4T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_10_FWD OF MCP_02_RK2_S0:2:O.Data.6 (Description := "O4T-10 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_11_FWD OF MCP_02_RK2_S0:2:O.Data.7 (Description := "O4T-11 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_12_FWD OF MCP_02_RK2_S0:2:O.Data.8 (Description := "O4T-12 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_13_FWD OF MCP_02_RK2_S0:2:O.Data.9 (Description := "O4T-13 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_16_FWD OF MCP_16_RK1_S0:2:O.Data.4 (Description := "O4T-16 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_17_FWD OF MCP_16_RK1_S0:2:O.Data.5 (Description := "O4T-17 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_18_FWD OF MCP_16_RK1_S0:2:O.Data.6 (Description := "O4T-18 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_19_FWD OF MCP_16_RK1_S0:2:O.Data.7 (Description := "O4T-19 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_20_FWD OF MCP_16_RK1_S0:2:O.Data.8 (Description := "O4T-20 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_21_FWD OF MCP_16_RK1_S0:2:O.Data.9 (Description := "O4T-21 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_O4T_22_FWD OF MCP_16_RK1_S0:2:O.Data.10 (Description := "O4T-22 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_T5T_08_FWD OF MCP_02_RK2_S0:2:O.Data.10 (Description := "T5T-08 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_T5T_09_FWD OF MCP_02_RK2_S0:2:O.Data.11 (Description := "T5T-09 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_T5T_09_REV OF MCP_02_RK2_S0:2:O.Data.12 (Description := "T5T-09 VFD REVERSE",
		            RADIX := Decimal);
		O_VFD_XO1_01_FWD OF MCP_02_RK2_S0:2:O.Data.13 (Description := "XO1-01 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO1_02_FWD OF MCP_02_RK2_S0:2:O.Data.14 (Description := "XO1-02 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO1_03_FWD OF MCP_02_RK2_S0:2:O.Data.15 (Description := "XO1-03 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_01_FWD OF MCP_03_RK2_S0:1:O.Data.0 (Description := "XO2-01 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_02_FWD OF MCP_03_RK2_S0:1:O.Data.1 (Description := "XO2-02 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_03_FWD OF MCP_03_RK2_S0:1:O.Data.2 (Description := "XO2-03 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_04_FWD OF MCP_03_RK2_S0:1:O.Data.3 (Description := "XO2-04 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_05_FWD OF MCP_03_RK2_S0:1:O.Data.4 (Description := "XO2-05 VFD FORWARD",
		            RADIX := Decimal);
		O_VFD_XO2_05_REV OF MCP_03_RK2_S0:3:O.Data.7 (Description := "XO2-05 VFD REVERSE",
		            RADIX := Decimal);
		O_WA_BM1_01_ALM OF MCP_BM1_RK2_S0:7:O.Data.12 (Description := "BM1-01 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_01_LTR OF MCP_BM1_RK2_S0:7:O.Data.4 (Description := "BM1-01 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_03_ALM OF MCP_BM1_RK2_S0:7:O.Data.13 (Description := "BM1-03 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_03_LTR OF MCP_BM1_RK2_S0:7:O.Data.5 (Description := "BM1-03 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_06_ALM OF MCP_BM1_RK2_S0:7:O.Data.8 (Description := "BM1-06 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_06_LTR OF MCP_BM1_RK2_S0:7:O.Data.0 (Description := "BM1-06 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_15_ALM OF MCP_BM1_RK2_S0:7:O.Data.9 (Description := "BM1-15 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_15_LTR OF MCP_BM1_RK2_S0:7:O.Data.1 (Description := "BM1-15 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_16_ALM OF MCP_BM1_RK2_S0:7:O.Data.10 (Description := "BM1-16 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_16_LTR OF MCP_BM1_RK2_S0:7:O.Data.2 (Description := "BM1-16 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_18_ALM OF MCP_BM1_RK2_S0:7:O.Data.11 (Description := "BM1-18 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_18_LTR OF MCP_BM1_RK2_S0:7:O.Data.3 (Description := "BM1-18 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_23_ALM OF MCP_03_RK2_S0:8:O.Data.12 (Description := "BM1-23 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_BM1_23_LTA OF MCP_03_RK2_S0:8:O.Data.14 (Description := "BM1-23 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_BM1_23_LTR OF MCP_03_RK2_S0:8:O.Data.13 (Description := "BM1-23 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_BM1_28_ALM OF MCP_BM1_RK2_S0:7:O.Data.14 (Description := "BM1-28 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_28_LTR OF MCP_BM1_RK2_S0:7:O.Data.6 (Description := "BM1-28 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_30_ALM OF MCP_BM1_RK2_S0:7:O.Data.15 (Description := "BM1-30 ALARM",
		            RADIX := Decimal);
		O_WA_BM1_30_LTR OF MCP_BM1_RK2_S0:7:O.Data.7 (Description := "BM1-30 RED BEACON",
		            RADIX := Decimal);
		O_WA_BM1_MCP_ALM OF MCP_BM1_RK2_S0:6:O.Data.13 (Description := "BM1-MCP ALARM",
		            RADIX := Decimal);
		O_WA_BM1_MCP_LTA OF MCP_BM1_RK2_S0:6:O.Data.12 (Description := "BM1-MCP AMBER BEACON",
		            RADIX := Decimal);
		O_WA_BM1_MCP_LTR OF MCP_BM1_RK2_S0:6:O.Data.11 (Description := "BM1-MCP RED BEACON",
		            RADIX := Decimal);
		O_WA_C2T_13_ALM OF MCP_01_RK1_S0:10:O.Data.9 (Description := "C2T-13 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_C2T_13_LTA OF MCP_01_RK1_S0:10:O.Data.11 (Description := "C2T-13 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_C2T_13_LTR OF MCP_01_RK1_S0:10:O.Data.10 (Description := "C2T-13 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_01_ALM OF MCP_03_RK2_S0:8:O.Data.3 (Description := "CL1T-01 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL1T_01_LTA OF MCP_03_RK2_S0:8:O.Data.5 (Description := "CL1T-01 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_01_LTR OF MCP_03_RK2_S0:8:O.Data.4 (Description := "CL1T-01 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_09_ALM OF MCP_03_RK2_S0:8:O.Data.6 (Description := "CL1T-09 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL1T_09_LTA OF MCP_03_RK2_S0:8:O.Data.8 (Description := "CL1T-09 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_09_LTR OF MCP_03_RK2_S0:8:O.Data.7 (Description := "CL1T-09 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_20_ALM OF MCP_03_RK2_S0:8:O.Data.9 (Description := "CL1T-20 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL1T_20_LTA OF MCP_03_RK2_S0:8:O.Data.11 (Description := "CL1T-20 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL1T_20_LTR OF MCP_03_RK2_S0:8:O.Data.10 (Description := "CL1T-20 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL2T_02_ALM OF MCP_02_RK2_S0:8:O.Data.3 (Description := "CL2T-02 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL2T_02_LTA OF MCP_02_RK2_S0:8:O.Data.5 (Description := "CL2T-02 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL2T_02_LTR OF MCP_02_RK2_S0:8:O.Data.4 (Description := "CL2T-02 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL2T_05_ALM OF MCP_02_RK2_S0:8:O.Data.6 (Description := "CL2T-05 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL2T_05_LTA OF MCP_02_RK2_S0:8:O.Data.8 (Description := "CL2T-05 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL2T_05_LTR OF MCP_02_RK2_S0:8:O.Data.7 (Description := "CL2T-05 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_CL3T_03_ALM OF MCP_02_RK2_S0:8:O.Data.9 (Description := "CL3T-03 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_CL3T_03_LTA OF MCP_02_RK2_S0:8:O.Data.11 (Description := "CL3T-03 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_CL3T_03_LTR OF MCP_02_RK2_S0:8:O.Data.10 (Description := "CL3T-03 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_MCP_01_ALM OF MCP_01_RK1_S0:10:O.Data.0 (Description := "MCP-01 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_MCP_01_LTA OF MCP_01_RK1_S0:10:O.Data.2 (Description := "MCP-01 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_MCP_01_LTR OF MCP_01_RK1_S0:10:O.Data.1 (Description := "MCP-01 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_MCP_02_ALM OF MCP_02_RK2_S0:8:O.Data.0 (Description := "MCP-02 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_MCP_02_LTA OF MCP_02_RK2_S0:8:O.Data.2 (Description := "MCP-02 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_MCP_02_LTR OF MCP_02_RK2_S0:8:O.Data.1 (Description := "MCP-02 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_MCP_03_ALM OF MCP_03_RK2_S0:8:O.Data.0 (Description := "MCP-03 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_MCP_03_LTA OF MCP_03_RK2_S0:8:O.Data.2 (Description := "MCP-03 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_MCP_03_LTR OF MCP_03_RK2_S0:8:O.Data.1 (Description := "MCP-03 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_MCP_16_ALM OF MCP_16_RK1_S0:8:O.Data.0 (Description := "MCP-16 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_MCP_16_LTA OF MCP_16_RK1_S0:8:O.Data.2 (Description := "MCP-16 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_MCP_16_LTR OF MCP_16_RK1_S0:8:O.Data.1 (Description := "MCP-16 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_MCP_BM1_ALM OF MCP_BM1_RK2_S0:6:O.Data.13 (Description := "BM1-MCP ALARM",
		            RADIX := Decimal);
		O_WA_MCP_BM1_LTA OF MCP_BM1_RK2_S0:6:O.Data.12 (Description := "BM1-MCP AMBER BEACON",
		            RADIX := Decimal);
		O_WA_MCP_BM1_LTR OF MCP_BM1_RK2_S0:6:O.Data.11 (Description := "BM1-MCP RED BEACON",
		            RADIX := Decimal);
		O_WA_O2T_06_ALM OF MCP_01_RK1_S0:10:O.Data.3 (Description := "O2T-06 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_O2T_06_LTA OF MCP_01_RK1_S0:10:O.Data.5 (Description := "O2T-06 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_O2T_06_LTR OF MCP_01_RK1_S0:10:O.Data.4 (Description := "O2T-06 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_O2T_18_ALM OF MCP_01_RK1_S0:10:O.Data.6 (Description := "O2T-18 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_O2T_18_LTA OF MCP_01_RK1_S0:10:O.Data.8 (Description := "O2T-18 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_O2T_18_LTR OF MCP_01_RK1_S0:10:O.Data.7 (Description := "O2T-18 E-STOP BEACON",
		            RADIX := Decimal);
		O_WA_O4T_10_ALM OF MCP_02_RK2_S0:8:O.Data.12 (Description := "O4T-10 STARTUP/FAULT ALARM",
		            RADIX := Decimal);
		O_WA_O4T_10_LTA OF MCP_02_RK2_S0:8:O.Data.14 (Description := "O4T-10 STARTUP/FAULT BEACON",
		            RADIX := Decimal);
		O_WA_O4T_10_LTR OF MCP_02_RK2_S0:8:O.Data.13 (Description := "O4T-10 E-STOP BEACON",
		            RADIX := Decimal);
		PE : PE[160] (ExternalAccess := Read Only) := [[[0,11364,0],[1141898,227,240],[3730002,227,0],8,0],[[0,11364,0],[1141898,227,240],[3730002,227,0],8,0],[[0,11111,0],[1141898,222
				,240],[3730032,222,0],8,0],[[0,11628,0],[1141898,233,240],[3730032,233,0],8,0],[[0,10526,0],[1141898,211,240],[3730032,211,0],8
				,0],[[0,12195,0],[1141898,244,270],[3730062,244,0],8,0],[[0,11111,0],[1141898,222,240],[3730032,222,0],8,0],[[0,10753,0],[1141898
				,215,240],[3730032,215,0],8,0],[[0,8475,0],[1141898,169,180],[3729972,169,0],8,0],[[0,10753,0],[1141899,215,240],[3730003,215
				,0],8,0],[[0,10753,0],[1141899,215,240],[3730003,215,0],8,0],[[0,11111,0],[1141899,222,240],[3730003,222,0],8,0],[[0,10638,0],[1141899
				,213,240],[3730033,213,0],8,0],[[0,12500,0],[1141899,250,270],[3730033,250,0],8,0],[[0,10526,0],[1141899,211,240],[3730033,211
				,0],8,0],[[0,10526,0],[1141899,211,240],[3730003,211,0],8,0],[[0,10526,0],[1141899,211,240],[3730003,211,0],8,0],[[0,11364,0],[1141899
				,227,240],[3730033,227,0],8,0],[[0,11236,0],[1141899,225,240],[3730033,225,0],8,0],[[0,11494,0],[1141899,230,240],[3730033,230
				,0],8,0],[[0,11236,0],[1141899,225,240],[3730003,225,0],8,0],[[0,11236,0],[1141899,225,240],[3730003,225,0],8,0],[[0,11236,0],[1141899
				,225,240],[3730033,225,0],8,0],[[0,11111,0],[1141899,222,240],[3730063,222,0],8,0],[[0,11236,0],[1141899,225,240],[3730063,225
				,0],8,0],[[0,11628,0],[1141899,233,240],[3730063,233,0],8,0],[[0,11364,0],[1141899,227,240],[3730003,227,0],8,0],[[0,11364,0],[1141899
				,227,240],[3730003,227,0],8,0],[[0,11765,0],[1141899,235,240],[3730033,235,0],8,0],[[0,11765,0],[1141899,235,240],[3730003,235
				,0],8,0],[[0,11628,0],[1141899,233,240],[3730033,233,0],8,0],[[0,11628,0],[1141899,233,240],[3730003,233,0],8,0],[[0,11765,0],[1141899
				,235,240],[3730033,235,0],8,0],[[0,11765,0],[1141899,235,240],[3730033,235,0],8,0],[[0,11765,0],[1141899,235,240],[3730003,235
				,0],8,0],[[0,11905,0],[1141899,238,240],[3730063,238,0],8,0],[[0,11111,0],[1141899,222,240],[3730063,222,0],8,0],[[0,10638,0],[1141899
				,213,240],[3730063,213,0],8,0],[[0,11494,0],[1141899,230,240],[3730063,230,0],8,0],[[0,11628,0],[1141899,233,240],[3730063,233
				,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100
				,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0
				,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120
				],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000
				,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034
				,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730034,100,0],8,0],[[0,5000,0],[1141900
				,100,120],[3729944,100,0],8,0],[[0,5000,0],[1141900,100,120],[3729944,100,0],8,0],[[0,5000,0],[1141900,100,120],[3729944,100,0
				],8,0],[[0,5000,0],[1141900,100,120],[3729944,100,0],8,0],[[0,5000,0],[1141900,100,120],[3729944,100,0],8,0],[[0,5000,0],[1141900,100
				,120],[3729944,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0
				,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120
				],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000
				,0],[1141900,100,120],[3730004,100,0],8,0],[[0,5000,0],[1141900,100,120],[3729974,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005
				,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141931
				,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0
				],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730005,100,0],8,0],[[0,5000,0],[1141933,100
				,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0
				,5000,0],[1141933,100,120],[3729887,100,0],8,0],[[0,5000,0],[1141933,100,120],[3729917,100,0],8,0],[[0,5000,0],[1141933,100,120
				],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730037,100,0],8,0],[[0,5000
				,0],[1141933,100,120],[3730037,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730037,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067
				,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3729887,100,0],8,0],[[0,5000,0],[1141933
				,100,120],[3729917,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730065,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730065,100,0
				],8,0],[[0,5000,0],[1141931,100,120],[3730095,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730065,100,0],8,0],[[0,5000,0],[1141931,100
				,120],[3730065,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730065,100,0],8,0],[[0,5000,0],[1141931,100,120],[3730065,100,0],8,0],[[0
				,5000,0],[1141932,100,120],[3729886,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729916,100,0],8,0],[[0,5000,0],[1141932,100,120
				],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000
				,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976
				,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932
				,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0
				],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100
				,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729976,100,0],8,0],[[0
				,5000,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120
				],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000
				,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120],[3729946,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730006
				,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730006,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730006,100,0],8,0],[[0,5000,0],[1141932
				,100,120],[3730006,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730006,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730006,100,0
				],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100
				,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0
				,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141933,100,120],[3730067,100,0],8,0],[[0,5000,0],[1141932,100,120
				],[3730036,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730036,100,0],8,0],[[0,5000,0],[1141932,100,120],[3730036,100,0],8,0],[[0,5000
				,0],[1141932,100,120],[1243388,100,0],8,0],[[537666371,5000,5010],[-1609753317,100,0],[-1609470803,100,101],33,0],[[795459
				,5000,4530],[-1609753317,100,0],[-1609470803,100,101],-95,0],[[0,0,0],[-1609753390,0,0],[-1609470805,0,11],-95,0],[[0,0,0
				],[-1609753391,0,0],[-1609470805,0,12],-95,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0
				],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0
				,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0],[[0,0,0],[0,0,0],[0,0,0],0,0]];
		PE2_BM1_23_TD : Non_Tracked_Div  := [0,1,[[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0]],1,0,0,0];
		PICS_IN : BOOL[960] (RADIX := Decimal) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0
				,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0
				,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		PICS_I_BAL_BM1_27 OF PICS_IN[202] (RADIX := Decimal);
		PICS_I_BAL_BM1_28 OF PICS_IN[203] (RADIX := Decimal);
		PICS_I_BAL_BM1_29 OF PICS_IN[204] (RADIX := Decimal);
		PICS_I_BAL_BM1_30 OF PICS_IN[205] (RADIX := Decimal);
		PICS_I_CS1_BM1_14_EPB OF PICS_IN[374] (RADIX := Decimal);
		PICS_I_CS1_BM1_14_RPBA OF PICS_IN[375] (RADIX := Decimal);
		PICS_I_CS1_BM1_16_EPB OF PICS_IN[376] (RADIX := Decimal);
		PICS_I_CS1_BM1_16_RPBA OF PICS_IN[377] (RADIX := Decimal);
		PICS_I_CS1_BM1_17_EPB OF PICS_IN[378] (RADIX := Decimal);
		PICS_I_CS1_BM1_17_RPBA OF PICS_IN[67] (RADIX := Decimal);
		PICS_I_CS1_BM1_27_EPB OF PICS_IN[379] (RADIX := Decimal);
		PICS_I_CS1_BM1_27_RPBA OF PICS_IN[380] (RADIX := Decimal);
		PICS_I_CS1_BM1_28_EPB OF PICS_IN[381] (RADIX := Decimal);
		PICS_I_CS1_BM1_28_RPBA OF PICS_IN[382] (RADIX := Decimal);
		PICS_I_CS1_BM1_29_EPB OF PICS_IN[384] (RADIX := Decimal);
		PICS_I_CS1_BM1_29_RPBA OF PICS_IN[385] (RADIX := Decimal);
		PICS_I_CS1_BM1_30_EPB OF PICS_IN[386] (RADIX := Decimal);
		PICS_I_CS1_BM1_30_RPBA OF PICS_IN[387] (RADIX := Decimal);
		PICS_I_CS1_CL1T_01_EPB OF PICS_IN[388] (RADIX := Decimal);
		PICS_I_CS1_CL1T_01_SPBG OF PICS_IN[389] (RADIX := Decimal);
		PICS_I_CS1_CL1T_02_EPB OF PICS_IN[390] (RADIX := Decimal);
		PICS_I_CS1_CL1T_02_RPBA OF PICS_IN[391] (RADIX := Decimal);
		PICS_I_CS1_CL1T_02_SPBG OF PICS_IN[392] (RADIX := Decimal);
		PICS_I_CS1_CL2T_01_EPB OF PICS_IN[393] (RADIX := Decimal);
		PICS_I_CS1_CL2T_01_SPBG OF PICS_IN[394] (RADIX := Decimal);
		PICS_I_CS1_CL2T_02_EPB OF PICS_IN[395] (RADIX := Decimal);
		PICS_I_CS1_CL2T_02_RPBA OF PICS_IN[396] (RADIX := Decimal);
		PICS_I_CS1_CL2T_02_SPBG OF PICS_IN[397] (RADIX := Decimal);
		PICS_I_CS1_CL2T_05_EPB OF PICS_IN[398] (RADIX := Decimal);
		PICS_I_CS1_CL2T_05_RPBA OF PICS_IN[399] (RADIX := Decimal);
		PICS_I_CS1_CL2T_05_SPBG OF PICS_IN[400] (RADIX := Decimal);
		PICS_I_CS1_CL3T_01_EPB OF PICS_IN[401] (RADIX := Decimal);
		PICS_I_CS1_CL3T_01_SPBG OF PICS_IN[402] (RADIX := Decimal);
		PICS_I_CS1_CL3T_02_EPB OF PICS_IN[403] (RADIX := Decimal);
		PICS_I_CS1_CL3T_02_RPBA OF PICS_IN[404] (RADIX := Decimal);
		PICS_I_CS1_CL3T_02_SPBG OF PICS_IN[405] (RADIX := Decimal);
		PICS_I_CS1_O3T_19_EPB OF PICS_OUT[642] (RADIX := Decimal);
		PICS_I_CS1_O3T_19_RPBA OF PICS_OUT[644] (RADIX := Decimal);
		PICS_I_CS1_O3T_19_SPBG OF PICS_OUT[643] (RADIX := Decimal);
		PICS_I_CS1_O4T_21_EPB OF PICS_OUT[651] (RADIX := Decimal);
		PICS_I_CS1_O4T_21_RPBA OF PICS_OUT[653] (RADIX := Decimal);
		PICS_I_CS1_O4T_21_SPBG OF PICS_OUT[652] (RADIX := Decimal);
		PICS_I_CS2_BM1_14_EPB OF PICS_IN[406] (RADIX := Decimal);
		PICS_I_CS2_BM1_14_RPBA OF PICS_IN[407] (RADIX := Decimal);
		PICS_I_CS2_BM1_16_EPB OF PICS_IN[408] (RADIX := Decimal);
		PICS_I_CS2_BM1_16_RPBA OF PICS_IN[409] (RADIX := Decimal);
		PICS_I_CS2_BM1_17_EPB OF PICS_IN[410] (RADIX := Decimal);
		PICS_I_CS2_BM1_17_RPBA OF PICS_IN[411] (RADIX := Decimal);
		PICS_I_CS2_BM1_23_EPB OF PICS_IN[421] (RADIX := Decimal);
		PICS_I_CS2_BM1_23_RPBA OF PICS_IN[422] (RADIX := Decimal);
		PICS_I_CS2_BM1_23_SPBG OF PICS_IN[423] (RADIX := Decimal);
		PICS_I_CS2_BM1_27_EPB OF PICS_IN[412] (RADIX := Decimal);
		PICS_I_CS2_BM1_27_RPBA OF PICS_IN[413] (RADIX := Decimal);
		PICS_I_CS2_BM1_28_EPB OF PICS_IN[414] (RADIX := Decimal);
		PICS_I_CS2_BM1_28_RPBA OF PICS_IN[74] (RADIX := Decimal);
		PICS_I_CS2_BM1_29_EPB OF PICS_IN[415] (RADIX := Decimal);
		PICS_I_CS2_BM1_29_FWD OF PICS_IN[416] (RADIX := Decimal);
		PICS_I_CS2_BM1_29_RPBA OF PICS_IN[417] (RADIX := Decimal);
		PICS_I_CS2_BM1_29_SPBG OF PICS_IN[418] (RADIX := Decimal);
		PICS_I_CS2_BM1_30_EPB OF PICS_IN[419] (RADIX := Decimal);
		PICS_I_CS2_BM1_30_RPBA OF PICS_IN[420] (RADIX := Decimal);
		PICS_I_CS2_CL1T_01_EPB OF PICS_IN[424] (RADIX := Decimal);
		PICS_I_CS2_CL1T_01_SPBG OF PICS_IN[425] (RADIX := Decimal);
		PICS_I_CS2_CL1T_02_EPB OF PICS_IN[426] (RADIX := Decimal);
		PICS_I_CS2_CL1T_02_SPBG OF PICS_IN[427] (RADIX := Decimal);
		PICS_I_CS2_CL2T_01_EPB OF PICS_IN[428] (RADIX := Decimal);
		PICS_I_CS2_CL2T_01_SPBG OF PICS_IN[429] (RADIX := Decimal);
		PICS_I_CS2_CL2T_02_EPB OF PICS_IN[430] (RADIX := Decimal);
		PICS_I_CS2_CL2T_02_SPBG OF PICS_IN[431] (RADIX := Decimal);
		PICS_I_CS2_CL2T_05_EPB OF PICS_IN[432] (RADIX := Decimal);
		PICS_I_CS2_CL2T_05_RPBA OF PICS_IN[433] (RADIX := Decimal);
		PICS_I_CS2_CL2T_05_SPBG OF PICS_IN[434] (RADIX := Decimal);
		PICS_I_CS2_CL3T_01_EPB OF PICS_IN[435] (RADIX := Decimal);
		PICS_I_CS2_CL3T_01_SPBG OF PICS_IN[436] (RADIX := Decimal);
		PICS_I_CS2_CL3T_02_EPB OF PICS_IN[437] (RADIX := Decimal);
		PICS_I_CS2_CL3T_02_SPBG OF PICS_IN[438] (RADIX := Decimal);
		PICS_I_CS2_O3T_19_EPB OF PICS_OUT[645] (RADIX := Decimal);
		PICS_I_CS2_O3T_19_RPBA OF PICS_OUT[647] (RADIX := Decimal);
		PICS_I_CS2_O3T_19_SPBG OF PICS_OUT[646] (RADIX := Decimal);
		PICS_I_CS2_O4T_21_EPB OF PICS_OUT[654] (RADIX := Decimal);
		PICS_I_CS2_O4T_21_RPBA OF PICS_OUT[656] (RADIX := Decimal);
		PICS_I_CS2_O4T_21_SPBG OF PICS_OUT[655] (RADIX := Decimal);
		PICS_I_CS3_BM1_27_EPB OF PICS_IN[439] (RADIX := Decimal);
		PICS_I_CS3_BM1_28_EPB OF PICS_IN[440] (RADIX := Decimal);
		PICS_I_CS3_BM1_29_EPB OF PICS_IN[441] (RADIX := Decimal);
		PICS_I_CS3_BM1_30_EPB OF PICS_IN[442] (RADIX := Decimal);
		PICS_I_CS3_BM1_30_FWD OF PICS_IN[443] (RADIX := Decimal);
		PICS_I_CS3_BM1_30_RPBA OF PICS_IN[444] (RADIX := Decimal);
		PICS_I_CS3_BM1_30_SPBG OF PICS_IN[445] (RADIX := Decimal);
		PICS_I_CS3_CL1T_01_EPB OF PICS_IN[446] (RADIX := Decimal);
		PICS_I_CS3_CL1T_01_SPBG OF PICS_IN[447] (RADIX := Decimal);
		PICS_I_CS3_CL1T_02_EPB OF PICS_IN[448] (RADIX := Decimal);
		PICS_I_CS3_CL1T_02_SPBG OF PICS_IN[449] (RADIX := Decimal);
		PICS_I_CS3_CL2T_02_EPB OF PICS_IN[450] (RADIX := Decimal);
		PICS_I_CS3_CL2T_02_SPBG OF PICS_IN[451] (RADIX := Decimal);
		PICS_I_CS3_CL3T_02_EPB OF PICS_IN[452] (RADIX := Decimal);
		PICS_I_CS3_CL3T_02_SPBG OF PICS_IN[453] (RADIX := Decimal);
		PICS_I_CS4_BM1_27_EPB OF PICS_IN[454] (RADIX := Decimal);
		PICS_I_CS4_BM1_28_EPB OF PICS_IN[455] (RADIX := Decimal);
		PICS_I_CS4_BM1_28_FWD OF PICS_IN[456] (RADIX := Decimal);
		PICS_I_CS4_BM1_28_SPBG OF PICS_IN[383] (RADIX := Decimal);
		PICS_I_CS4_BM1_29_EPB OF PICS_IN[457] (RADIX := Decimal);
		PICS_I_CS4_BM1_30_EPB OF PICS_IN[458] (RADIX := Decimal);
		PICS_I_CS4_CL3T_02_EPB OF PICS_IN[459] (RADIX := Decimal);
		PICS_I_CS4_CL3T_02_RPBA OF PICS_IN[460] (RADIX := Decimal);
		PICS_I_CS4_CL3T_02_SPBG OF PICS_IN[461] (RADIX := Decimal);
		PICS_I_CS5_BM1_27_EPB OF PICS_IN[462] (RADIX := Decimal);
		PICS_I_CS5_BM1_27_FWD OF PICS_IN[463] (RADIX := Decimal);
		PICS_I_CS5_BM1_27_RPBA OF PICS_IN[464] (RADIX := Decimal);
		PICS_I_CS5_BM1_27_SPBG OF PICS_IN[465] (RADIX := Decimal);
		PICS_I_CS5_BM1_28_EPB OF PICS_IN[466] (RADIX := Decimal);
		PICS_I_CS5_BM1_28_RPBA OF PICS_IN[467] (RADIX := Decimal);
		PICS_I_CS5_BM1_28_SPBG OF PICS_IN[468] (RADIX := Decimal);
		PICS_I_CS_BM1_01_EPB OF PICS_IN[240] (RADIX := Decimal);
		PICS_I_CS_BM1_01_RPBA OF PICS_IN[241] (RADIX := Decimal);
		PICS_I_CS_BM1_02_EPB OF PICS_IN[242] (RADIX := Decimal);
		PICS_I_CS_BM1_02_RPBA OF PICS_IN[243] (RADIX := Decimal);
		PICS_I_CS_BM1_03_EPB OF PICS_IN[244] (RADIX := Decimal);
		PICS_I_CS_BM1_03_RPBA OF PICS_IN[245] (RADIX := Decimal);
		PICS_I_CS_BM1_06_EPB OF PICS_IN[246] (RADIX := Decimal);
		PICS_I_CS_BM1_06_RPBA OF PICS_IN[247] (RADIX := Decimal);
		PICS_I_CS_BM1_07_EPB OF PICS_IN[248] (RADIX := Decimal);
		PICS_I_CS_BM1_07_SPBG OF PICS_IN[249] (RADIX := Decimal);
		PICS_I_CS_BM1_13_EPB OF PICS_IN[250] (RADIX := Decimal);
		PICS_I_CS_BM1_13_JRB OF PICS_IN[251] (RADIX := Decimal);
		PICS_I_CS_BM1_13_RPBA OF PICS_IN[252] (RADIX := Decimal);
		PICS_I_CS_BM1_15_EPB OF PICS_IN[253] (RADIX := Decimal);
		PICS_I_CS_BM1_15_RPBA OF PICS_IN[254] (RADIX := Decimal);
		PICS_I_CS_BM1_17_SPBG OF PICS_IN[255] (RADIX := Decimal);
		PICS_I_CS_BM1_18_EPB OF PICS_IN[256] (RADIX := Decimal);
		PICS_I_CS_BM1_18_RPBA OF PICS_IN[257] (RADIX := Decimal);
		PICS_I_CS_BM1_19_EPB OF PICS_IN[258] (RADIX := Decimal);
		PICS_I_CS_BM1_19_RPBA OF PICS_IN[259] (RADIX := Decimal);
		PICS_I_CS_BM1_20_EPB OF PICS_IN[260] (RADIX := Decimal);
		PICS_I_CS_BM1_20_RPBA OF PICS_IN[261] (RADIX := Decimal);
		PICS_I_CS_BM1_23_EPB OF PICS_IN[262] (RADIX := Decimal);
		PICS_I_CS_BM1_23_RPBA OF PICS_IN[263] (RADIX := Decimal);
		PICS_I_CS_BM1_25_EPB OF PICS_IN[264] (RADIX := Decimal);
		PICS_I_CS_BM1_25_RPBA OF PICS_IN[265] (RADIX := Decimal);
		PICS_I_CS_BM1_34_EPB OF PICS_IN[266] (RADIX := Decimal);
		PICS_I_CS_BM1_34_RPBA OF PICS_IN[267] (RADIX := Decimal);
		PICS_I_CS_BM1_38_EPB OF PICS_IN[268] (RADIX := Decimal);
		PICS_I_CS_BM1_38_RPBA OF PICS_IN[269] (RADIX := Decimal);
		PICS_I_CS_BM1_MCP_APB OF PICS_IN[83] (RADIX := Decimal);
		PICS_I_CS_BM1_MCP_EPB OF PICS_IN[29] (RADIX := Decimal);
		PICS_I_CS_BM1_MCP_RPBA OF PICS_IN[270] (RADIX := Decimal);
		PICS_I_CS_BM1_MCP_TPB OF PICS_IN[82] (RADIX := Decimal);
		PICS_I_CS_C2T_13_EPB OF PICS_IN[271] (RADIX := Decimal);
		PICS_I_CS_C2T_13_RPBA OF PICS_IN[272] (RADIX := Decimal);
		PICS_I_CS_C2T_13_SPBG OF PICS_IN[273] (RADIX := Decimal);
		PICS_I_CS_C2T_17_AUTO OF PICS_IN[274] (RADIX := Decimal);
		PICS_I_CS_C2T_17_EPB OF PICS_IN[275] (RADIX := Decimal);
		PICS_I_CS_C2T_17_JRB OF PICS_IN[276] (RADIX := Decimal);
		PICS_I_CS_C2T_17_RPBA OF PICS_IN[277] (RADIX := Decimal);
		PICS_I_CS_C2T_17_SPBG OF PICS_IN[278] (RADIX := Decimal);
		PICS_I_CS_CL12T_36_AUTO OF PICS_OUT[661] (RADIX := Decimal);
		PICS_I_CS_CL12T_36_EPB OF PICS_OUT[657] (RADIX := Decimal);
		PICS_I_CS_CL12T_36_JRB OF PICS_OUT[660] (RADIX := Decimal);
		PICS_I_CS_CL12T_36_RPBA OF PICS_OUT[659] (RADIX := Decimal);
		PICS_I_CS_CL12T_36_SPBG OF PICS_OUT[658] (RADIX := Decimal);
		PICS_I_CS_CL1T_05_EPB OF PICS_IN[279] (RADIX := Decimal);
		PICS_I_CS_CL1T_05_RPBA OF PICS_IN[280] (RADIX := Decimal);
		PICS_I_CS_CL1T_05_SPBG OF PICS_IN[281] (RADIX := Decimal);
		PICS_I_CS_CL1T_09_EPB OF PICS_IN[282] (RADIX := Decimal);
		PICS_I_CS_CL1T_09_RPBA OF PICS_IN[283] (RADIX := Decimal);
		PICS_I_CS_CL1T_09_SPBG OF PICS_IN[284] (RADIX := Decimal);
		PICS_I_CS_CL1T_11_EPB OF PICS_IN[285] (RADIX := Decimal);
		PICS_I_CS_CL1T_11_RPBA OF PICS_IN[286] (RADIX := Decimal);
		PICS_I_CS_CL1T_11_SPBG OF PICS_IN[287] (RADIX := Decimal);
		PICS_I_CS_CL1T_12_EPB OF PICS_IN[288] (RADIX := Decimal);
		PICS_I_CS_CL1T_12_RPBA OF PICS_IN[289] (RADIX := Decimal);
		PICS_I_CS_CL1T_12_SPBG OF PICS_IN[290] (RADIX := Decimal);
		PICS_I_CS_CL1T_16_EPB OF PICS_IN[291] (RADIX := Decimal);
		PICS_I_CS_CL1T_16_RPBA OF PICS_IN[292] (RADIX := Decimal);
		PICS_I_CS_CL1T_16_SPBG OF PICS_IN[293] (RADIX := Decimal);
		PICS_I_CS_CL1T_20_EPB OF PICS_IN[294] (RADIX := Decimal);
		PICS_I_CS_CL1T_20_RPBA OF PICS_IN[295] (RADIX := Decimal);
		PICS_I_CS_CL1T_20_SPBG OF PICS_IN[296] (RADIX := Decimal);
		PICS_I_CS_CL1T_24_EPB OF PICS_IN[297] (RADIX := Decimal);
		PICS_I_CS_CL1T_24_RPBA OF PICS_IN[298] (RADIX := Decimal);
		PICS_I_CS_CL1T_24_SPBG OF PICS_IN[299] (RADIX := Decimal);
		PICS_I_CS_CL2T_04_EPB OF PICS_IN[300] (RADIX := Decimal);
		PICS_I_CS_CL2T_04_RPBA OF PICS_IN[301] (RADIX := Decimal);
		PICS_I_CS_CL2T_04_SPBG OF PICS_IN[302] (RADIX := Decimal);
		PICS_I_CS_CL2T_09_EPB OF PICS_IN[303] (RADIX := Decimal);
		PICS_I_CS_CL2T_09_RPBA OF PICS_IN[304] (RADIX := Decimal);
		PICS_I_CS_CL2T_09_SPBG OF PICS_IN[305] (RADIX := Decimal);
		PICS_I_CS_CL3T_03_EPB OF PICS_IN[306] (RADIX := Decimal);
		PICS_I_CS_CL3T_03_RPBA OF PICS_IN[307] (RADIX := Decimal);
		PICS_I_CS_CL3T_03_SPBG OF PICS_IN[308] (RADIX := Decimal);
		PICS_I_CS_CL3T_04_EPB OF PICS_IN[309] (RADIX := Decimal);
		PICS_I_CS_CL3T_04_RPBA OF PICS_IN[310] (RADIX := Decimal);
		PICS_I_CS_CL3T_04_SPBG OF PICS_IN[311] (RADIX := Decimal);
		PICS_I_CS_HX1T_10_AUTO OF PICS_IN[312] (RADIX := Decimal);
		PICS_I_CS_HX1T_10_EPB OF PICS_IN[313] (RADIX := Decimal);
		PICS_I_CS_HX1T_10_JRB OF PICS_IN[314] (RADIX := Decimal);
		PICS_I_CS_HX1T_10_RPBA OF PICS_IN[315] (RADIX := Decimal);
		PICS_I_CS_HX1T_10_SPBG OF PICS_IN[316] (RADIX := Decimal);
		PICS_I_CS_MCP_01_APB OF PICS_IN[317] (RADIX := Decimal);
		PICS_I_CS_MCP_01_EPB OF PICS_IN[318] (RADIX := Decimal);
		PICS_I_CS_MCP_01_SPBG OF PICS_IN[319] (RADIX := Decimal);
		PICS_I_CS_MCP_01_TPB OF PICS_IN[320] (RADIX := Decimal);
		PICS_I_CS_MCP_02_APB OF PICS_IN[321] (RADIX := Decimal);
		PICS_I_CS_MCP_02_EPB OF PICS_IN[322] (RADIX := Decimal);
		PICS_I_CS_MCP_02_SPBG OF PICS_IN[323] (RADIX := Decimal);
		PICS_I_CS_MCP_02_TPB OF PICS_IN[324] (RADIX := Decimal);
		PICS_I_CS_MCP_03_APB OF PICS_IN[325] (RADIX := Decimal);
		PICS_I_CS_MCP_03_EPB OF PICS_IN[326] (RADIX := Decimal);
		PICS_I_CS_MCP_03_SPBG OF PICS_IN[327] (RADIX := Decimal);
		PICS_I_CS_MCP_03_TPB OF PICS_IN[328] (RADIX := Decimal);
		PICS_I_CS_MCP_16_APB OF PICS_OUT[637] (RADIX := Decimal);
		PICS_I_CS_MCP_16_EPB OF PICS_OUT[634] (RADIX := Decimal);
		PICS_I_CS_MCP_16_SPBG OF PICS_OUT[635] (RADIX := Decimal);
		PICS_I_CS_MCP_16_TPB OF PICS_OUT[636] (RADIX := Decimal);
		PICS_I_CS_MCP_BM1_APB OF PICS_IN[329] (RADIX := Decimal);
		PICS_I_CS_MCP_BM1_EPB OF PICS_IN[330] (RADIX := Decimal);
		PICS_I_CS_MCP_BM1_TPB OF PICS_IN[331] (RADIX := Decimal);
		PICS_I_CS_O2T_04_EPB OF PICS_IN[332] (RADIX := Decimal);
		PICS_I_CS_O2T_04_RPBA OF PICS_IN[333] (RADIX := Decimal);
		PICS_I_CS_O2T_04_SPBG OF PICS_IN[334] (RADIX := Decimal);
		PICS_I_CS_O2T_06_EPB OF PICS_IN[335] (RADIX := Decimal);
		PICS_I_CS_O2T_06_RPBA OF PICS_IN[336] (RADIX := Decimal);
		PICS_I_CS_O2T_06_SPBG OF PICS_IN[337] (RADIX := Decimal);
		PICS_I_CS_O2T_10_EPB OF PICS_IN[338] (RADIX := Decimal);
		PICS_I_CS_O2T_10_RPBA OF PICS_IN[339] (RADIX := Decimal);
		PICS_I_CS_O2T_10_SPBG OF PICS_IN[340] (RADIX := Decimal);
		PICS_I_CS_O2T_12_EPB OF PICS_IN[341] (RADIX := Decimal);
		PICS_I_CS_O2T_12_RPBA OF PICS_IN[342] (RADIX := Decimal);
		PICS_I_CS_O2T_12_SPBG OF PICS_IN[343] (RADIX := Decimal);
		PICS_I_CS_O2T_14_EPB OF PICS_IN[344] (RADIX := Decimal);
		PICS_I_CS_O2T_14_RPBA OF PICS_IN[345] (RADIX := Decimal);
		PICS_I_CS_O2T_14_SPBG OF PICS_IN[346] (RADIX := Decimal);
		PICS_I_CS_O2T_18_AUTO OF PICS_IN[347] (RADIX := Decimal);
		PICS_I_CS_O2T_18_EPB OF PICS_IN[348] (RADIX := Decimal);
		PICS_I_CS_O2T_18_JRB OF PICS_IN[349] (RADIX := Decimal);
		PICS_I_CS_O2T_18_RPBA OF PICS_IN[350] (RADIX := Decimal);
		PICS_I_CS_O2T_18_SPBG OF PICS_IN[351] (RADIX := Decimal);
		PICS_I_CS_O3T_17_EPB OF PICS_OUT[639] (RADIX := Decimal);
		PICS_I_CS_O3T_17_RPBA OF PICS_OUT[641] (RADIX := Decimal);
		PICS_I_CS_O3T_17_SPBG OF PICS_OUT[640] (RADIX := Decimal);
		PICS_I_CS_O4T_06_EPB OF PICS_IN[352] (RADIX := Decimal);
		PICS_I_CS_O4T_06_RPBA OF PICS_IN[353] (RADIX := Decimal);
		PICS_I_CS_O4T_06_SPBG OF PICS_IN[354] (RADIX := Decimal);
		PICS_I_CS_O4T_10_EPB OF PICS_IN[355] (RADIX := Decimal);
		PICS_I_CS_O4T_10_RPBA OF PICS_IN[356] (RADIX := Decimal);
		PICS_I_CS_O4T_10_SPBG OF PICS_IN[357] (RADIX := Decimal);
		PICS_I_CS_O4T_16_EPB OF PICS_OUT[648] (RADIX := Decimal);
		PICS_I_CS_O4T_16_RPBA OF PICS_OUT[650] (RADIX := Decimal);
		PICS_I_CS_O4T_16_SPBG OF PICS_OUT[649] (RADIX := Decimal);
		PICS_I_CS_T5T_09_AUTO OF PICS_IN[358] (RADIX := Decimal);
		PICS_I_CS_T5T_09_EPB OF PICS_IN[359] (RADIX := Decimal);
		PICS_I_CS_T5T_09_JRB OF PICS_IN[360] (RADIX := Decimal);
		PICS_I_CS_T5T_09_RPBA OF PICS_IN[361] (RADIX := Decimal);
		PICS_I_CS_T5T_09_SPBG OF PICS_IN[362] (RADIX := Decimal);
		PICS_I_CS_XO1_01_EPB OF PICS_IN[363] (RADIX := Decimal);
		PICS_I_CS_XO1_01_RPBA OF PICS_IN[364] (RADIX := Decimal);
		PICS_I_CS_XO1_01_SPBG OF PICS_IN[365] (RADIX := Decimal);
		PICS_I_CS_XO2_02_EPB OF PICS_IN[366] (RADIX := Decimal);
		PICS_I_CS_XO2_02_RPBA OF PICS_IN[367] (RADIX := Decimal);
		PICS_I_CS_XO2_02_SPBG OF PICS_IN[368] (RADIX := Decimal);
		PICS_I_CS_XO2_05_AUTO OF PICS_IN[369] (RADIX := Decimal);
		PICS_I_CS_XO2_05_EPB OF PICS_IN[370] (RADIX := Decimal);
		PICS_I_CS_XO2_05_JRB OF PICS_IN[371] (RADIX := Decimal);
		PICS_I_CS_XO2_05_RPBA OF PICS_IN[372] (RADIX := Decimal);
		PICS_I_CS_XO2_05_SPBG OF PICS_IN[373] (RADIX := Decimal);
		PICS_I_C_BM1_01 OF PICS_IN[206] (RADIX := Decimal);
		PICS_I_C_BM1_02 OF PICS_IN[207] (RADIX := Decimal);
		PICS_I_C_BM1_03 OF PICS_IN[208] (RADIX := Decimal);
		PICS_I_C_BM1_04 OF PICS_IN[209] (RADIX := Decimal);
		PICS_I_C_BM1_05 OF PICS_IN[210] (RADIX := Decimal);
		PICS_I_C_BM1_06 OF PICS_IN[211] (RADIX := Decimal);
		PICS_I_C_BM1_07 OF PICS_IN[212] (RADIX := Decimal);
		PICS_I_C_BM1_08 OF PICS_IN[213] (RADIX := Decimal);
		PICS_I_C_BM1_09 OF PICS_IN[214] (RADIX := Decimal);
		PICS_I_C_BM1_10 OF PICS_IN[215] (RADIX := Decimal);
		PICS_I_C_BM1_11 OF PICS_IN[216] (RADIX := Decimal);
		PICS_I_C_BM1_12 OF PICS_IN[217] (RADIX := Decimal);
		PICS_I_C_BM1_13 OF PICS_IN[218] (RADIX := Decimal);
		PICS_I_C_BM1_14 OF PICS_IN[219] (RADIX := Decimal);
		PICS_I_C_BM1_15 OF PICS_IN[220] (RADIX := Decimal);
		PICS_I_C_BM1_16 OF PICS_IN[221] (RADIX := Decimal);
		PICS_I_C_BM1_17 OF PICS_IN[222] (RADIX := Decimal);
		PICS_I_C_BM1_18 OF PICS_IN[223] (RADIX := Decimal);
		PICS_I_C_BM1_19 OF PICS_IN[224] (RADIX := Decimal);
		PICS_I_C_BM1_20 OF PICS_IN[225] (RADIX := Decimal);
		PICS_I_C_BM1_21 OF PICS_IN[226] (RADIX := Decimal);
		PICS_I_C_BM1_22 OF PICS_IN[227] (RADIX := Decimal);
		PICS_I_C_BM1_23 OF PICS_IN[228] (RADIX := Decimal);
		PICS_I_C_BM1_24 OF PICS_IN[229] (RADIX := Decimal);
		PICS_I_C_BM1_25 OF PICS_IN[230] (RADIX := Decimal);
		PICS_I_C_BM1_26 OF PICS_IN[231] (RADIX := Decimal);
		PICS_I_C_BM1_27 OF PICS_IN[114] (RADIX := Decimal);
		PICS_I_C_BM1_28 OF PICS_IN[115] (RADIX := Decimal);
		PICS_I_C_BM1_29 OF PICS_IN[116] (RADIX := Decimal);
		PICS_I_C_BM1_30 OF PICS_IN[117] (RADIX := Decimal);
		PICS_I_C_BM1_31 OF PICS_IN[232] (RADIX := Decimal);
		PICS_I_C_BM1_32 OF PICS_IN[233] (RADIX := Decimal);
		PICS_I_C_BM1_33 OF PICS_IN[234] (RADIX := Decimal);
		PICS_I_C_BM1_34 OF PICS_IN[235] (RADIX := Decimal);
		PICS_I_C_BM1_35 OF PICS_IN[236] (RADIX := Decimal);
		PICS_I_C_BM1_36 OF PICS_IN[237] (RADIX := Decimal);
		PICS_I_C_BM1_37 OF PICS_IN[238] (RADIX := Decimal);
		PICS_I_C_BM1_38 OF PICS_IN[239] (RADIX := Decimal);
		PICS_I_C_BM2_13 OF PICS_IN[100] (RADIX := Decimal);
		PICS_I_ECR_BM1_01 OF PICS_IN[469] (RADIX := Decimal);
		PICS_I_ECR_BM1_02 OF PICS_IN[470] (RADIX := Decimal);
		PICS_I_ECR_BM1_03 OF PICS_IN[471] (RADIX := Decimal);
		PICS_I_INT_C2T_12_RES OF PICS_IN[473] (RADIX := Decimal);
		PICS_I_INT_C2T_12_START OF PICS_IN[474] (RADIX := Decimal);
		PICS_I_INT_C2_11_JAM OF PICS_IN[472] (RADIX := Decimal);
		PICS_I_INT_C4_09_RUN OF PICS_IN[475] (RADIX := Decimal);
		PICS_I_INT_CL12T_35_RES OF PICS_OUT[696] (RADIX := Decimal);
		PICS_I_INT_CL12T_35_START OF PICS_OUT[694] (RADIX := Decimal);
		PICS_I_INT_CL12_34_JAM OF PICS_OUT[695] (RADIX := Decimal);
		PICS_I_INT_HX1T_06_RES OF PICS_IN[478] (RADIX := Decimal);
		PICS_I_INT_HX1T_06_START OF PICS_IN[479] (RADIX := Decimal);
		PICS_I_INT_HX1_05_JAM OF PICS_IN[476] (RADIX := Decimal);
		PICS_I_INT_HX1_11_RUN OF PICS_IN[477] (RADIX := Decimal);
		PICS_I_INT_O2T_04_RES OF PICS_IN[481] (RADIX := Decimal);
		PICS_I_INT_O2T_04_START OF PICS_IN[482] (RADIX := Decimal);
		PICS_I_INT_O2_03_JAM OF PICS_IN[480] (RADIX := Decimal);
		PICS_I_INT_O3T_17_START OF PICS_OUT[688] (RADIX := Decimal);
		PICS_I_INT_O3T_21_RUN OF PICS_OUT[690] (RADIX := Decimal);
		PICS_I_INT_O3_16_JAM OF PICS_OUT[689] (RADIX := Decimal);
		PICS_I_INT_O4T_05_RES OF PICS_IN[487] (RADIX := Decimal);
		PICS_I_INT_O4T_05_START OF PICS_IN[488] (RADIX := Decimal);
		PICS_I_INT_O4T_16_START OF PICS_OUT[691] (RADIX := Decimal);
		PICS_I_INT_O4T_21_RUN OF PICS_OUT[693] (RADIX := Decimal);
		PICS_I_INT_O4_03_MRG OF PICS_IN[483] (RADIX := Decimal);
		PICS_I_INT_O4_04_JAM OF PICS_IN[484] (RADIX := Decimal);
		PICS_I_INT_O4_04_RUN OF PICS_IN[485] (RADIX := Decimal);
		PICS_I_INT_O4_06_RUN OF PICS_IN[486] (RADIX := Decimal);
		PICS_I_INT_O4_15_JAM OF PICS_OUT[692] (RADIX := Decimal);
		PICS_I_INT_T5T_08_RES OF PICS_IN[491] (RADIX := Decimal);
		PICS_I_INT_T5T_08_START OF PICS_IN[492] (RADIX := Decimal);
		PICS_I_INT_T5_07_JAM OF PICS_IN[489] (RADIX := Decimal);
		PICS_I_INT_T5_10_RUN OF PICS_IN[490] (RADIX := Decimal);
		PICS_I_MOL_BM1_01 OF PICS_IN[493] (RADIX := Decimal);
		PICS_I_MOL_BM1_02 OF PICS_IN[494] (RADIX := Decimal);
		PICS_I_MOL_BM1_03 OF PICS_IN[495] (RADIX := Decimal);
		PICS_I_MOL_BM1_04 OF PICS_IN[496] (RADIX := Decimal);
		PICS_I_MOL_BM1_05 OF PICS_IN[497] (RADIX := Decimal);
		PICS_I_MOL_BM1_06 OF PICS_IN[498] (RADIX := Decimal);
		PICS_I_MOL_BM1_07 OF PICS_IN[499] (RADIX := Decimal);
		PICS_I_MOL_BM1_08 OF PICS_IN[500] (RADIX := Decimal);
		PICS_I_MOL_BM1_09 OF PICS_IN[501] (RADIX := Decimal);
		PICS_I_MOL_BM1_10 OF PICS_IN[502] (RADIX := Decimal);
		PICS_I_MOL_BM1_11 OF PICS_IN[503] (RADIX := Decimal);
		PICS_I_MOL_BM1_12 OF PICS_IN[504] (RADIX := Decimal);
		PICS_I_MOL_BM1_13 OF PICS_IN[505] (RADIX := Decimal);
		PICS_I_MOL_BM1_14 OF PICS_IN[506] (RADIX := Decimal);
		PICS_I_MOL_BM1_15 OF PICS_IN[507] (RADIX := Decimal);
		PICS_I_MOL_BM1_16 OF PICS_IN[508] (RADIX := Decimal);
		PICS_I_MOL_BM1_17 OF PICS_IN[509] (RADIX := Decimal);
		PICS_I_MOL_BM1_18 OF PICS_IN[510] (RADIX := Decimal);
		PICS_I_MOL_BM1_19 OF PICS_IN[511] (RADIX := Decimal);
		PICS_I_MOL_BM1_20 OF PICS_IN[512] (RADIX := Decimal);
		PICS_I_MOL_BM1_21 OF PICS_IN[513] (RADIX := Decimal);
		PICS_I_MOL_BM1_22 OF PICS_IN[514] (RADIX := Decimal);
		PICS_I_MOL_BM1_23 OF PICS_IN[515] (RADIX := Decimal);
		PICS_I_MOL_BM1_24 OF PICS_IN[516] (RADIX := Decimal);
		PICS_I_MOL_BM1_25 OF PICS_IN[517] (RADIX := Decimal);
		PICS_I_MOL_BM1_26 OF PICS_IN[518] (RADIX := Decimal);
		PICS_I_MOL_BM1_27 OF PICS_IN[519] (RADIX := Decimal);
		PICS_I_MOL_BM1_28 OF PICS_IN[520] (RADIX := Decimal);
		PICS_I_MOL_BM1_29 OF PICS_IN[521] (RADIX := Decimal);
		PICS_I_MOL_BM1_30 OF PICS_IN[522] (RADIX := Decimal);
		PICS_I_MOL_BM1_31 OF PICS_IN[523] (RADIX := Decimal);
		PICS_I_MOL_BM1_32 OF PICS_IN[524] (RADIX := Decimal);
		PICS_I_MOL_BM1_33 OF PICS_IN[525] (RADIX := Decimal);
		PICS_I_MOL_BM1_34 OF PICS_IN[526] (RADIX := Decimal);
		PICS_I_MOL_BM1_35 OF PICS_IN[527] (RADIX := Decimal);
		PICS_I_MOL_BM1_36 OF PICS_IN[528] (RADIX := Decimal);
		PICS_I_MOL_BM1_37 OF PICS_IN[529] (RADIX := Decimal);
		PICS_I_MOL_BM1_38 OF PICS_IN[530] (RADIX := Decimal);
		PICS_I_MSD_BM1_01 OF PICS_IN[531] (RADIX := Decimal);
		PICS_I_MSD_BM1_02 OF PICS_IN[532] (RADIX := Decimal);
		PICS_I_MSD_BM1_03 OF PICS_IN[533] (RADIX := Decimal);
		PICS_I_MSD_BM1_04 OF PICS_IN[534] (RADIX := Decimal);
		PICS_I_MSD_BM1_05 OF PICS_IN[535] (RADIX := Decimal);
		PICS_I_MSD_BM1_06 OF PICS_IN[536] (RADIX := Decimal);
		PICS_I_MSD_BM1_07 OF PICS_IN[537] (RADIX := Decimal);
		PICS_I_MSD_BM1_08 OF PICS_IN[538] (RADIX := Decimal);
		PICS_I_MSD_BM1_09 OF PICS_IN[539] (RADIX := Decimal);
		PICS_I_MSD_BM1_10 OF PICS_IN[540] (RADIX := Decimal);
		PICS_I_MSD_BM1_11 OF PICS_IN[541] (RADIX := Decimal);
		PICS_I_MSD_BM1_12 OF PICS_IN[542] (RADIX := Decimal);
		PICS_I_MSD_BM1_13 OF PICS_IN[543] (RADIX := Decimal);
		PICS_I_MSD_BM1_14 OF PICS_IN[544] (RADIX := Decimal);
		PICS_I_MSD_BM1_15 OF PICS_IN[545] (RADIX := Decimal);
		PICS_I_MSD_BM1_16 OF PICS_IN[546] (RADIX := Decimal);
		PICS_I_MSD_BM1_17 OF PICS_IN[547] (RADIX := Decimal);
		PICS_I_MSD_BM1_18 OF PICS_IN[548] (RADIX := Decimal);
		PICS_I_MSD_BM1_19 OF PICS_IN[549] (RADIX := Decimal);
		PICS_I_MSD_BM1_20 OF PICS_IN[550] (RADIX := Decimal);
		PICS_I_MSD_BM1_21 OF PICS_IN[551] (RADIX := Decimal);
		PICS_I_MSD_BM1_22 OF PICS_IN[552] (RADIX := Decimal);
		PICS_I_MSD_BM1_23 OF PICS_IN[553] (RADIX := Decimal);
		PICS_I_MSD_BM1_24 OF PICS_IN[554] (RADIX := Decimal);
		PICS_I_MSD_BM1_25 OF PICS_IN[555] (RADIX := Decimal);
		PICS_I_MSD_BM1_26 OF PICS_IN[556] (RADIX := Decimal);
		PICS_I_MSD_BM1_27 OF PICS_IN[557] (RADIX := Decimal);
		PICS_I_MSD_BM1_28 OF PICS_IN[558] (RADIX := Decimal);
		PICS_I_MSD_BM1_29 OF PICS_IN[559] (RADIX := Decimal);
		PICS_I_MSD_BM1_30 OF PICS_IN[560] (RADIX := Decimal);
		PICS_I_MSD_BM1_31 OF PICS_IN[561] (RADIX := Decimal);
		PICS_I_MSD_BM1_32 OF PICS_IN[562] (RADIX := Decimal);
		PICS_I_MSD_BM1_33 OF PICS_IN[563] (RADIX := Decimal);
		PICS_I_MSD_BM1_34 OF PICS_IN[564] (RADIX := Decimal);
		PICS_I_MSD_BM1_35 OF PICS_IN[565] (RADIX := Decimal);
		PICS_I_MSD_BM1_36 OF PICS_IN[566] (RADIX := Decimal);
		PICS_I_MSD_BM1_37 OF PICS_IN[567] (RADIX := Decimal);
		PICS_I_MSD_BM1_38 OF PICS_IN[568] (RADIX := Decimal);
		PICS_I_MSD_C2T_12 OF PICS_IN[569] (RADIX := Decimal);
		PICS_I_MSD_C2T_13 OF PICS_IN[570] (RADIX := Decimal);
		PICS_I_MSD_C2T_14 OF PICS_IN[571] (RADIX := Decimal);
		PICS_I_MSD_C2T_15 OF PICS_IN[572] (RADIX := Decimal);
		PICS_I_MSD_C2T_16 OF PICS_IN[573] (RADIX := Decimal);
		PICS_I_MSD_C2T_17 OF PICS_IN[574] (RADIX := Decimal);
		PICS_I_MSD_CL12T_35 OF PICS_OUT[673] (RADIX := Decimal);
		PICS_I_MSD_CL12T_36 OF PICS_OUT[674] (RADIX := Decimal);
		PICS_I_MSD_CL1T_01 OF PICS_IN[575] (RADIX := Decimal);
		PICS_I_MSD_CL1T_02 OF PICS_IN[576] (RADIX := Decimal);
		PICS_I_MSD_CL1T_03 OF PICS_IN[577] (RADIX := Decimal);
		PICS_I_MSD_CL1T_04 OF PICS_IN[578] (RADIX := Decimal);
		PICS_I_MSD_CL1T_05 OF PICS_IN[579] (RADIX := Decimal);
		PICS_I_MSD_CL1T_06 OF PICS_IN[580] (RADIX := Decimal);
		PICS_I_MSD_CL1T_07 OF PICS_IN[581] (RADIX := Decimal);
		PICS_I_MSD_CL1T_08 OF PICS_IN[582] (RADIX := Decimal);
		PICS_I_MSD_CL1T_09 OF PICS_IN[583] (RADIX := Decimal);
		PICS_I_MSD_CL1T_10 OF PICS_IN[584] (RADIX := Decimal);
		PICS_I_MSD_CL1T_11 OF PICS_IN[585] (RADIX := Decimal);
		PICS_I_MSD_CL1T_12 OF PICS_IN[586] (RADIX := Decimal);
		PICS_I_MSD_CL1T_13 OF PICS_IN[587] (RADIX := Decimal);
		PICS_I_MSD_CL1T_14 OF PICS_IN[588] (RADIX := Decimal);
		PICS_I_MSD_CL1T_15 OF PICS_IN[589] (RADIX := Decimal);
		PICS_I_MSD_CL1T_16 OF PICS_IN[590] (RADIX := Decimal);
		PICS_I_MSD_CL1T_17 OF PICS_IN[591] (RADIX := Decimal);
		PICS_I_MSD_CL1T_18 OF PICS_IN[592] (RADIX := Decimal);
		PICS_I_MSD_CL1T_19 OF PICS_IN[593] (RADIX := Decimal);
		PICS_I_MSD_CL1T_20 OF PICS_IN[594] (RADIX := Decimal);
		PICS_I_MSD_CL1T_21 OF PICS_IN[595] (RADIX := Decimal);
		PICS_I_MSD_CL1T_23 OF PICS_IN[596] (RADIX := Decimal);
		PICS_I_MSD_CL1T_24 OF PICS_IN[597] (RADIX := Decimal);
		PICS_I_MSD_CL1T_26 OF PICS_IN[598] (RADIX := Decimal);
		PICS_I_MSD_CL2T_01 OF PICS_IN[599] (RADIX := Decimal);
		PICS_I_MSD_CL2T_02 OF PICS_IN[600] (RADIX := Decimal);
		PICS_I_MSD_CL2T_03 OF PICS_IN[601] (RADIX := Decimal);
		PICS_I_MSD_CL2T_04 OF PICS_IN[602] (RADIX := Decimal);
		PICS_I_MSD_CL2T_05 OF PICS_IN[603] (RADIX := Decimal);
		PICS_I_MSD_CL2T_06 OF PICS_IN[604] (RADIX := Decimal);
		PICS_I_MSD_CL2T_07 OF PICS_IN[605] (RADIX := Decimal);
		PICS_I_MSD_CL2T_08 OF PICS_IN[606] (RADIX := Decimal);
		PICS_I_MSD_CL2T_09 OF PICS_IN[607] (RADIX := Decimal);
		PICS_I_MSD_CL3T_01 OF PICS_IN[608] (RADIX := Decimal);
		PICS_I_MSD_CL3T_02 OF PICS_IN[609] (RADIX := Decimal);
		PICS_I_MSD_CL3T_03 OF PICS_IN[610] (RADIX := Decimal);
		PICS_I_MSD_CL3T_04 OF PICS_IN[611] (RADIX := Decimal);
		PICS_I_MSD_CL3T_05 OF PICS_IN[612] (RADIX := Decimal);
		PICS_I_MSD_CL3T_06 OF PICS_IN[613] (RADIX := Decimal);
		PICS_I_MSD_CL3T_07 OF PICS_IN[614] (RADIX := Decimal);
		PICS_I_MSD_CL3T_08 OF PICS_IN[615] (RADIX := Decimal);
		PICS_I_MSD_HX1T_06 OF PICS_IN[616] (RADIX := Decimal);
		PICS_I_MSD_HX1T_07 OF PICS_IN[617] (RADIX := Decimal);
		PICS_I_MSD_HX1T_08 OF PICS_IN[618] (RADIX := Decimal);
		PICS_I_MSD_HX1T_09 OF PICS_IN[619] (RADIX := Decimal);
		PICS_I_MSD_HX1T_10 OF PICS_IN[620] (RADIX := Decimal);
		PICS_I_MSD_HX1T_10A OF PICS_IN[621] (RADIX := Decimal);
		PICS_I_MSD_O2T_04 OF PICS_IN[622] (RADIX := Decimal);
		PICS_I_MSD_O2T_05 OF PICS_IN[623] (RADIX := Decimal);
		PICS_I_MSD_O2T_06 OF PICS_IN[624] (RADIX := Decimal);
		PICS_I_MSD_O2T_07 OF PICS_IN[625] (RADIX := Decimal);
		PICS_I_MSD_O2T_08 OF PICS_IN[626] (RADIX := Decimal);
		PICS_I_MSD_O2T_09 OF PICS_IN[627] (RADIX := Decimal);
		PICS_I_MSD_O2T_10 OF PICS_IN[628] (RADIX := Decimal);
		PICS_I_MSD_O2T_11 OF PICS_IN[629] (RADIX := Decimal);
		PICS_I_MSD_O2T_12 OF PICS_IN[630] (RADIX := Decimal);
		PICS_I_MSD_O2T_13 OF PICS_IN[631] (RADIX := Decimal);
		PICS_I_MSD_O2T_14 OF PICS_IN[632] (RADIX := Decimal);
		PICS_I_MSD_O2T_15 OF PICS_IN[633] (RADIX := Decimal);
		PICS_I_MSD_O2T_16 OF PICS_IN[634] (RADIX := Decimal);
		PICS_I_MSD_O2T_17 OF PICS_IN[635] (RADIX := Decimal);
		PICS_I_MSD_O2T_18 OF PICS_IN[636] (RADIX := Decimal);
		PICS_I_MSD_O3T_17 OF PICS_OUT[662] (RADIX := Decimal);
		PICS_I_MSD_O3T_18 OF PICS_OUT[663] (RADIX := Decimal);
		PICS_I_MSD_O3T_19 OF PICS_OUT[664] (RADIX := Decimal);
		PICS_I_MSD_O3T_20 OF PICS_OUT[665] (RADIX := Decimal);
		PICS_I_MSD_O4T_05 OF PICS_IN[637] (RADIX := Decimal);
		PICS_I_MSD_O4T_06 OF PICS_IN[638] (RADIX := Decimal);
		PICS_I_MSD_O4T_07 OF PICS_IN[639] (RADIX := Decimal);
		PICS_I_MSD_O4T_08 OF PICS_IN[640] (RADIX := Decimal);
		PICS_I_MSD_O4T_09 OF PICS_IN[641] (RADIX := Decimal);
		PICS_I_MSD_O4T_10 OF PICS_IN[642] (RADIX := Decimal);
		PICS_I_MSD_O4T_11 OF PICS_IN[643] (RADIX := Decimal);
		PICS_I_MSD_O4T_12 OF PICS_IN[644] (RADIX := Decimal);
		PICS_I_MSD_O4T_13 OF PICS_IN[645] (RADIX := Decimal);
		PICS_I_MSD_O4T_16 OF PICS_OUT[666] (RADIX := Decimal);
		PICS_I_MSD_O4T_17 OF PICS_OUT[667] (RADIX := Decimal);
		PICS_I_MSD_O4T_18 OF PICS_OUT[668] (RADIX := Decimal);
		PICS_I_MSD_O4T_19 OF PICS_OUT[669] (RADIX := Decimal);
		PICS_I_MSD_O4T_20 OF PICS_OUT[670] (RADIX := Decimal);
		PICS_I_MSD_O4T_21 OF PICS_OUT[671] (RADIX := Decimal);
		PICS_I_MSD_O4T_22 OF PICS_OUT[672] (RADIX := Decimal);
		PICS_I_MSD_T5T_08 OF PICS_IN[646] (RADIX := Decimal);
		PICS_I_MSD_T5T_09 OF PICS_IN[647] (RADIX := Decimal);
		PICS_I_MSD_XO1_01 OF PICS_IN[648] (RADIX := Decimal);
		PICS_I_MSD_XO1_02 OF PICS_IN[649] (RADIX := Decimal);
		PICS_I_MSD_XO1_03 OF PICS_IN[650] (RADIX := Decimal);
		PICS_I_MSD_XO2_01 OF PICS_IN[651] (RADIX := Decimal);
		PICS_I_MSD_XO2_02 OF PICS_IN[652] (RADIX := Decimal);
		PICS_I_MSD_XO2_03 OF PICS_IN[653] (RADIX := Decimal);
		PICS_I_MSD_XO2_04 OF PICS_IN[654] (RADIX := Decimal);
		PICS_I_MSD_XO2_05 OF PICS_IN[655] (RADIX := Decimal);
		PICS_I_PE1_BM1_06 OF PICS_IN[767] (RADIX := Decimal);
		PICS_I_PE1_BM1_14 OF PICS_IN[768] (RADIX := Decimal);
		PICS_I_PE1_BM1_19 OF PICS_IN[769] (RADIX := Decimal);
		PICS_I_PE1_BM1_23 OF PICS_IN[774] (RADIX := Decimal);
		PICS_I_PE1_BM1_27 OF PICS_IN[770] (RADIX := Decimal);
		PICS_I_PE1_BM1_28 OF PICS_IN[771] (RADIX := Decimal);
		PICS_I_PE1_BM1_29 OF PICS_IN[772] (RADIX := Decimal);
		PICS_I_PE1_BM1_30 OF PICS_IN[773] (RADIX := Decimal);
		PICS_I_PE1_CL1T_26 OF PICS_IN[775] (RADIX := Decimal);
		PICS_I_PE1_O4T_10 OF PICS_IN[776] (RADIX := Decimal);
		PICS_I_PE1_XO1_01 OF PICS_IN[777] (RADIX := Decimal);
		PICS_I_PE2_BM1_06 OF PICS_IN[778] (RADIX := Decimal);
		PICS_I_PE2_BM1_14 OF PICS_IN[779] (RADIX := Decimal);
		PICS_I_PE2_BM1_19 OF PICS_IN[780] (RADIX := Decimal);
		PICS_I_PE2_BM1_23 OF PICS_IN[785] (RADIX := Decimal);
		PICS_I_PE2_BM1_27 OF PICS_IN[781] (RADIX := Decimal);
		PICS_I_PE2_BM1_28 OF PICS_IN[782] (RADIX := Decimal);
		PICS_I_PE2_BM1_29 OF PICS_IN[783] (RADIX := Decimal);
		PICS_I_PE2_BM1_30 OF PICS_IN[784] (RADIX := Decimal);
		PICS_I_PE2_CL1T_26 OF PICS_IN[786] (RADIX := Decimal);
		PICS_I_PE2_O4T_10 OF PICS_IN[787] (RADIX := Decimal);
		PICS_I_PE2_XO1_01 OF PICS_IN[788] (RADIX := Decimal);
		PICS_I_PE3_BM1_30 OF PICS_IN[789] (RADIX := Decimal);
		PICS_I_PE_BM1 : BOOL (RADIX := Decimal) := 0;
		PICS_I_PE_BM1_07 OF PICS_IN[656] (RADIX := Decimal);
		PICS_I_PE_BM1_08 OF PICS_IN[657] (RADIX := Decimal);
		PICS_I_PE_BM1_09 OF PICS_IN[658] (RADIX := Decimal);
		PICS_I_PE_BM1_10 OF PICS_IN[659] (RADIX := Decimal);
		PICS_I_PE_BM1_11 OF PICS_IN[660] (RADIX := Decimal);
		PICS_I_PE_BM1_12 OF PICS_IN[661] (RADIX := Decimal);
		PICS_I_PE_BM1_13 OF PICS_IN[662] (RADIX := Decimal);
		PICS_I_PE_BM1_15 OF PICS_IN[663] (RADIX := Decimal);
		PICS_I_PE_BM1_16 OF PICS_IN[664] (RADIX := Decimal);
		PICS_I_PE_BM1_17 OF PICS_IN[665] (RADIX := Decimal);
		PICS_I_PE_BM1_18 OF PICS_IN[666] (RADIX := Decimal);
		PICS_I_PE_BM1_20 OF PICS_IN[667] (RADIX := Decimal);
		PICS_I_PE_BM1_21 OF PICS_IN[668] (RADIX := Decimal);
		PICS_I_PE_BM1_22 OF PICS_IN[669] (RADIX := Decimal);
		PICS_I_PE_BM1_23 OF PICS_IN[670] (RADIX := Decimal);
		PICS_I_PE_BM1_24 OF PICS_IN[671] (RADIX := Decimal);
		PICS_I_PE_BM1_25 OF PICS_IN[672] (RADIX := Decimal);
		PICS_I_PE_BM1_26 OF PICS_IN[673] (RADIX := Decimal);
		PICS_I_PE_BM1_31 OF PICS_IN[674] (RADIX := Decimal);
		PICS_I_PE_BM1_32 OF PICS_IN[675] (RADIX := Decimal);
		PICS_I_PE_BM1_33 OF PICS_IN[676] (RADIX := Decimal);
		PICS_I_PE_BM1_34 OF PICS_IN[677] (RADIX := Decimal);
		PICS_I_PE_BM1_35 OF PICS_IN[678] (RADIX := Decimal);
		PICS_I_PE_BM1_36 OF PICS_IN[679] (RADIX := Decimal);
		PICS_I_PE_BM1_37 OF PICS_IN[680] (RADIX := Decimal);
		PICS_I_PE_BM1_38 OF PICS_IN[681] (RADIX := Decimal);
		PICS_I_PE_C2T_12 OF PICS_IN[682] (RADIX := Decimal);
		PICS_I_PE_C2T_13 OF PICS_IN[683] (RADIX := Decimal);
		PICS_I_PE_C2T_14 OF PICS_IN[684] (RADIX := Decimal);
		PICS_I_PE_C2T_15 OF PICS_IN[685] (RADIX := Decimal);
		PICS_I_PE_C2T_16 OF PICS_IN[686] (RADIX := Decimal);
		PICS_I_PE_C2T_17 OF PICS_IN[687] (RADIX := Decimal);
		PICS_I_PE_C4_08 OF PICS_IN[688] (RADIX := Decimal);
		PICS_I_PE_CL12T_35 OF PICS_OUT[686] (RADIX := Decimal);
		PICS_I_PE_CL12T_36 OF PICS_OUT[687] (RADIX := Decimal);
		PICS_I_PE_CL1T_01 OF PICS_IN[689] (RADIX := Decimal);
		PICS_I_PE_CL1T_02 OF PICS_IN[690] (RADIX := Decimal);
		PICS_I_PE_CL1T_03 OF PICS_IN[691] (RADIX := Decimal);
		PICS_I_PE_CL1T_04 OF PICS_IN[692] (RADIX := Decimal);
		PICS_I_PE_CL1T_05 OF PICS_IN[693] (RADIX := Decimal);
		PICS_I_PE_CL1T_06 OF PICS_IN[694] (RADIX := Decimal);
		PICS_I_PE_CL1T_07 OF PICS_IN[695] (RADIX := Decimal);
		PICS_I_PE_CL1T_08 OF PICS_IN[696] (RADIX := Decimal);
		PICS_I_PE_CL1T_09 OF PICS_IN[697] (RADIX := Decimal);
		PICS_I_PE_CL1T_10 OF PICS_IN[698] (RADIX := Decimal);
		PICS_I_PE_CL1T_11 OF PICS_IN[699] (RADIX := Decimal);
		PICS_I_PE_CL1T_12 OF PICS_IN[700] (RADIX := Decimal);
		PICS_I_PE_CL1T_13 OF PICS_IN[701] (RADIX := Decimal);
		PICS_I_PE_CL1T_14 OF PICS_IN[702] (RADIX := Decimal);
		PICS_I_PE_CL1T_15 OF PICS_IN[703] (RADIX := Decimal);
		PICS_I_PE_CL1T_16 OF PICS_IN[704] (RADIX := Decimal);
		PICS_I_PE_CL1T_17 OF PICS_IN[705] (RADIX := Decimal);
		PICS_I_PE_CL1T_18 OF PICS_IN[706] (RADIX := Decimal);
		PICS_I_PE_CL1T_19 OF PICS_IN[707] (RADIX := Decimal);
		PICS_I_PE_CL1T_20 OF PICS_IN[708] (RADIX := Decimal);
		PICS_I_PE_CL1T_21 OF PICS_IN[709] (RADIX := Decimal);
		PICS_I_PE_CL1T_23 OF PICS_IN[710] (RADIX := Decimal);
		PICS_I_PE_CL1T_24 OF PICS_IN[711] (RADIX := Decimal);
		PICS_I_PE_CL2T_01 OF PICS_IN[712] (RADIX := Decimal);
		PICS_I_PE_CL2T_02 OF PICS_IN[713] (RADIX := Decimal);
		PICS_I_PE_CL2T_03 OF PICS_IN[714] (RADIX := Decimal);
		PICS_I_PE_CL2T_04 OF PICS_IN[715] (RADIX := Decimal);
		PICS_I_PE_CL2T_05 OF PICS_IN[716] (RADIX := Decimal);
		PICS_I_PE_CL2T_06 OF PICS_IN[717] (RADIX := Decimal);
		PICS_I_PE_CL2T_07 OF PICS_IN[718] (RADIX := Decimal);
		PICS_I_PE_CL2T_08 OF PICS_IN[719] (RADIX := Decimal);
		PICS_I_PE_CL2T_09 OF PICS_IN[720] (RADIX := Decimal);
		PICS_I_PE_CL3T_01 OF PICS_IN[721] (RADIX := Decimal);
		PICS_I_PE_CL3T_02 OF PICS_IN[722] (RADIX := Decimal);
		PICS_I_PE_CL3T_03 OF PICS_IN[723] (RADIX := Decimal);
		PICS_I_PE_CL3T_04 OF PICS_IN[724] (RADIX := Decimal);
		PICS_I_PE_CL3T_05 OF PICS_IN[725] (RADIX := Decimal);
		PICS_I_PE_CL3T_06 OF PICS_IN[726] (RADIX := Decimal);
		PICS_I_PE_CL3T_07 OF PICS_IN[727] (RADIX := Decimal);
		PICS_I_PE_CL3T_08 OF PICS_IN[728] (RADIX := Decimal);
		PICS_I_PE_HX1T_06 OF PICS_IN[729] (RADIX := Decimal);
		PICS_I_PE_HX1T_07 OF PICS_IN[730] (RADIX := Decimal);
		PICS_I_PE_HX1T_08 OF PICS_IN[731] (RADIX := Decimal);
		PICS_I_PE_HX1T_09 OF PICS_IN[732] (RADIX := Decimal);
		PICS_I_PE_HX1T_10 OF PICS_IN[733] (RADIX := Decimal);
		PICS_I_PE_HX1T_10A OF PICS_IN[734] (RADIX := Decimal);
		PICS_I_PE_O2T_04 OF PICS_IN[735] (RADIX := Decimal);
		PICS_I_PE_O2T_05 OF PICS_IN[736] (RADIX := Decimal);
		PICS_I_PE_O2T_06 OF PICS_IN[737] (RADIX := Decimal);
		PICS_I_PE_O2T_07 OF PICS_IN[738] (RADIX := Decimal);
		PICS_I_PE_O2T_08 OF PICS_IN[739] (RADIX := Decimal);
		PICS_I_PE_O2T_09 OF PICS_IN[740] (RADIX := Decimal);
		PICS_I_PE_O2T_10 OF PICS_IN[741] (RADIX := Decimal);
		PICS_I_PE_O2T_11 OF PICS_IN[742] (RADIX := Decimal);
		PICS_I_PE_O2T_12 OF PICS_IN[743] (RADIX := Decimal);
		PICS_I_PE_O2T_13 OF PICS_IN[744] (RADIX := Decimal);
		PICS_I_PE_O2T_14 OF PICS_IN[745] (RADIX := Decimal);
		PICS_I_PE_O2T_15 OF PICS_IN[746] (RADIX := Decimal);
		PICS_I_PE_O2T_16 OF PICS_IN[747] (RADIX := Decimal);
		PICS_I_PE_O2T_17 OF PICS_IN[748] (RADIX := Decimal);
		PICS_I_PE_O2T_18 OF PICS_IN[749] (RADIX := Decimal);
		PICS_I_PE_O3T_17 OF PICS_OUT[675] (RADIX := Decimal);
		PICS_I_PE_O3T_18 OF PICS_OUT[676] (RADIX := Decimal);
		PICS_I_PE_O3T_19 OF PICS_OUT[677] (RADIX := Decimal);
		PICS_I_PE_O3T_20 OF PICS_OUT[678] (RADIX := Decimal);
		PICS_I_PE_O4T_05 OF PICS_IN[750] (RADIX := Decimal);
		PICS_I_PE_O4T_06 OF PICS_IN[751] (RADIX := Decimal);
		PICS_I_PE_O4T_07 OF PICS_IN[752] (RADIX := Decimal);
		PICS_I_PE_O4T_08 OF PICS_IN[753] (RADIX := Decimal);
		PICS_I_PE_O4T_09 OF PICS_IN[754] (RADIX := Decimal);
		PICS_I_PE_O4T_11 OF PICS_IN[755] (RADIX := Decimal);
		PICS_I_PE_O4T_12 OF PICS_IN[756] (RADIX := Decimal);
		PICS_I_PE_O4T_13 OF PICS_IN[757] (RADIX := Decimal);
		PICS_I_PE_O4T_16 OF PICS_OUT[679] (RADIX := Decimal);
		PICS_I_PE_O4T_17 OF PICS_OUT[680] (RADIX := Decimal);
		PICS_I_PE_O4T_18 OF PICS_OUT[681] (RADIX := Decimal);
		PICS_I_PE_O4T_19 OF PICS_OUT[682] (RADIX := Decimal);
		PICS_I_PE_O4T_20 OF PICS_OUT[683] (RADIX := Decimal);
		PICS_I_PE_O4T_21 OF PICS_OUT[684] (RADIX := Decimal);
		PICS_I_PE_O4T_22 OF PICS_OUT[685] (RADIX := Decimal);
		PICS_I_PE_T5T_08 OF PICS_IN[758] (RADIX := Decimal);
		PICS_I_PE_T5T_09 OF PICS_IN[759] (RADIX := Decimal);
		PICS_I_PE_XO1_02 OF PICS_IN[760] (RADIX := Decimal);
		PICS_I_PE_XO1_03 OF PICS_IN[761] (RADIX := Decimal);
		PICS_I_PE_XO2_01 OF PICS_IN[762] (RADIX := Decimal);
		PICS_I_PE_XO2_02 OF PICS_IN[763] (RADIX := Decimal);
		PICS_I_PE_XO2_03 OF PICS_IN[764] (RADIX := Decimal);
		PICS_I_PE_XO2_04 OF PICS_IN[765] (RADIX := Decimal);
		PICS_I_PE_XO2_05 OF PICS_IN[766] (RADIX := Decimal);
		PICS_I_SD_XO1_AUTO OF PICS_IN[790] (RADIX := Decimal);
		PICS_I_SD_XO1_CUR OF PICS_IN[791] (RADIX := Decimal);
		PICS_I_SD_XO1_DS OF PICS_IN[792] (RADIX := Decimal);
		PICS_I_SD_XO1_EXT OF PICS_IN[793] (RADIX := Decimal);
		PICS_I_SD_XO1_FLT OF PICS_IN[794] (RADIX := Decimal);
		PICS_I_SD_XO1_SLMR OF PICS_IN[795] (RADIX := Decimal);
		PICS_I_SD_XO1_ZERO OF PICS_IN[796] (RADIX := Decimal);
		PICS_I_SD_XO2_AUTO OF PICS_IN[797] (RADIX := Decimal);
		PICS_I_SD_XO2_CUR OF PICS_IN[798] (RADIX := Decimal);
		PICS_I_SD_XO2_DS OF PICS_IN[799] (RADIX := Decimal);
		PICS_I_SD_XO2_EXT OF PICS_IN[800] (RADIX := Decimal);
		PICS_I_SD_XO2_FLT OF PICS_IN[801] (RADIX := Decimal);
		PICS_I_SD_XO2_SLMR OF PICS_IN[802] (RADIX := Decimal);
		PICS_I_SD_XO2_ZERO OF PICS_IN[803] (RADIX := Decimal);
		PICS_I_SE_BM1_14 OF PICS_IN[804] (RADIX := Decimal);
		PICS_I_SE_BM1_23 OF PICS_IN[805] (RADIX := Decimal);
		PICS_I_SE_C4_09 OF PICS_IN[806] (RADIX := Decimal);
		PICS_I_SE_CL1T_26 OF PICS_IN[807] (RADIX := Decimal);
		PICS_I_SE_O2T_10 OF PICS_IN[808] (RADIX := Decimal);
		PICS_I_SE_O4T_10 OF PICS_IN[810] (RADIX := Decimal);
		PICS_I_SE_O4T_20 OF PICS_OUT[619] (RADIX := Decimal);
		PICS_I_SE_O4_04 OF PICS_IN[809] (RADIX := Decimal);
		PICS_I_TS_MCP_01_ALM OF PICS_IN[811] (RADIX := Decimal);
		PICS_I_TS_MCP_02_ALM OF PICS_IN[812] (RADIX := Decimal);
		PICS_I_TS_MCP_03_ALM OF PICS_IN[813] (RADIX := Decimal);
		PICS_I_TS_MCP_16_ALM OF PICS_OUT[638] (RADIX := Decimal);
		PICS_I_VFD_BM1_27_RDY OF PICS_IN[814] (RADIX := Decimal);
		PICS_I_VFD_BM1_28_RDY OF PICS_IN[815] (RADIX := Decimal);
		PICS_I_VFD_BM1_29_RDY OF PICS_IN[816] (RADIX := Decimal);
		PICS_I_VFD_BM1_30_RDY OF PICS_IN[817] (RADIX := Decimal);
		PICS_I_VFD_C2T_12_RDY OF PICS_IN[818] (RADIX := Decimal);
		PICS_I_VFD_C2T_13_RDY OF PICS_IN[819] (RADIX := Decimal);
		PICS_I_VFD_C2T_14_RDY OF PICS_IN[820] (RADIX := Decimal);
		PICS_I_VFD_C2T_15_RDY OF PICS_IN[821] (RADIX := Decimal);
		PICS_I_VFD_C2T_16_RDY OF PICS_IN[822] (RADIX := Decimal);
		PICS_I_VFD_C2T_17_RDY OF PICS_IN[823] (RADIX := Decimal);
		PICS_I_VFD_CL12T_35_RDY OF PICS_OUT[617] (RADIX := Decimal);
		PICS_I_VFD_CL12T_36_RDY OF PICS_OUT[618] (RADIX := Decimal);
		PICS_I_VFD_CL1T_01_RDY OF PICS_IN[824] (RADIX := Decimal);
		PICS_I_VFD_CL1T_02_RDY OF PICS_IN[825] (RADIX := Decimal);
		PICS_I_VFD_CL1T_03_RDY OF PICS_IN[826] (RADIX := Decimal);
		PICS_I_VFD_CL1T_04_RDY OF PICS_IN[827] (RADIX := Decimal);
		PICS_I_VFD_CL1T_05_RDY OF PICS_IN[828] (RADIX := Decimal);
		PICS_I_VFD_CL1T_06_RDY OF PICS_IN[829] (RADIX := Decimal);
		PICS_I_VFD_CL1T_07_RDY OF PICS_IN[830] (RADIX := Decimal);
		PICS_I_VFD_CL1T_08_RDY OF PICS_IN[831] (RADIX := Decimal);
		PICS_I_VFD_CL1T_09_RDY OF PICS_IN[832] (RADIX := Decimal);
		PICS_I_VFD_CL1T_10_RDY OF PICS_IN[833] (RADIX := Decimal);
		PICS_I_VFD_CL1T_11_RDY OF PICS_IN[834] (RADIX := Decimal);
		PICS_I_VFD_CL1T_12_RDY OF PICS_IN[835] (RADIX := Decimal);
		PICS_I_VFD_CL1T_13_RDY OF PICS_IN[836] (RADIX := Decimal);
		PICS_I_VFD_CL1T_14_RDY OF PICS_IN[837] (RADIX := Decimal);
		PICS_I_VFD_CL1T_15_RDY OF PICS_IN[838] (RADIX := Decimal);
		PICS_I_VFD_CL1T_16_RDY OF PICS_IN[839] (RADIX := Decimal);
		PICS_I_VFD_CL1T_17_RDY OF PICS_IN[840] (RADIX := Decimal);
		PICS_I_VFD_CL1T_18_RDY OF PICS_IN[841] (RADIX := Decimal);
		PICS_I_VFD_CL1T_19_RDY OF PICS_IN[842] (RADIX := Decimal);
		PICS_I_VFD_CL1T_20_RDY OF PICS_IN[843] (RADIX := Decimal);
		PICS_I_VFD_CL1T_21_RDY OF PICS_IN[844] (RADIX := Decimal);
		PICS_I_VFD_CL1T_23_RDY OF PICS_IN[845] (RADIX := Decimal);
		PICS_I_VFD_CL1T_24_RDY OF PICS_IN[846] (RADIX := Decimal);
		PICS_I_VFD_CL1T_26_RDY OF PICS_IN[847] (RADIX := Decimal);
		PICS_I_VFD_CL2T_01_RDY OF PICS_IN[848] (RADIX := Decimal);
		PICS_I_VFD_CL2T_02_RDY OF PICS_IN[849] (RADIX := Decimal);
		PICS_I_VFD_CL2T_03_RDY OF PICS_IN[850] (RADIX := Decimal);
		PICS_I_VFD_CL2T_04_RDY OF PICS_IN[851] (RADIX := Decimal);
		PICS_I_VFD_CL2T_05_RDY OF PICS_IN[852] (RADIX := Decimal);
		PICS_I_VFD_CL2T_06_RDY OF PICS_IN[853] (RADIX := Decimal);
		PICS_I_VFD_CL2T_07_RDY OF PICS_IN[854] (RADIX := Decimal);
		PICS_I_VFD_CL2T_08_RDY OF PICS_IN[855] (RADIX := Decimal);
		PICS_I_VFD_CL2T_09_RDY OF PICS_IN[856] (RADIX := Decimal);
		PICS_I_VFD_CL3T_01_RDY OF PICS_IN[857] (RADIX := Decimal);
		PICS_I_VFD_CL3T_02_RDY OF PICS_IN[858] (RADIX := Decimal);
		PICS_I_VFD_CL3T_03_RDY OF PICS_IN[859] (RADIX := Decimal);
		PICS_I_VFD_CL3T_04_RDY OF PICS_IN[860] (RADIX := Decimal);
		PICS_I_VFD_CL3T_05_RDY OF PICS_IN[861] (RADIX := Decimal);
		PICS_I_VFD_CL3T_06_RDY OF PICS_IN[862] (RADIX := Decimal);
		PICS_I_VFD_CL3T_07_RDY OF PICS_IN[863] (RADIX := Decimal);
		PICS_I_VFD_CL3T_08_RDY OF PICS_IN[864] (RADIX := Decimal);
		PICS_I_VFD_HX1T_06_RDY OF PICS_IN[865] (RADIX := Decimal);
		PICS_I_VFD_HX1T_07_RDY OF PICS_IN[866] (RADIX := Decimal);
		PICS_I_VFD_HX1T_08_RDY OF PICS_IN[867] (RADIX := Decimal);
		PICS_I_VFD_HX1T_09_RDY OF PICS_IN[868] (RADIX := Decimal);
		PICS_I_VFD_HX1T_10A_RDY OF PICS_IN[870] (RADIX := Decimal);
		PICS_I_VFD_HX1T_10_RDY OF PICS_IN[869] (RADIX := Decimal);
		PICS_I_VFD_O2T_04_RDY OF PICS_IN[871] (RADIX := Decimal);
		PICS_I_VFD_O2T_05_RDY OF PICS_IN[872] (RADIX := Decimal);
		PICS_I_VFD_O2T_06_RDY OF PICS_IN[873] (RADIX := Decimal);
		PICS_I_VFD_O2T_07_RDY OF PICS_IN[874] (RADIX := Decimal);
		PICS_I_VFD_O2T_08_RDY OF PICS_IN[875] (RADIX := Decimal);
		PICS_I_VFD_O2T_09_RDY OF PICS_IN[876] (RADIX := Decimal);
		PICS_I_VFD_O2T_10_RDY OF PICS_IN[877] (RADIX := Decimal);
		PICS_I_VFD_O2T_11_RDY OF PICS_IN[878] (RADIX := Decimal);
		PICS_I_VFD_O2T_12_RDY OF PICS_IN[879] (RADIX := Decimal);
		PICS_I_VFD_O2T_13_RDY OF PICS_IN[880] (RADIX := Decimal);
		PICS_I_VFD_O2T_14_RDY OF PICS_IN[881] (RADIX := Decimal);
		PICS_I_VFD_O2T_15_RDY OF PICS_IN[882] (RADIX := Decimal);
		PICS_I_VFD_O2T_16_RDY OF PICS_IN[883] (RADIX := Decimal);
		PICS_I_VFD_O2T_17_RDY OF PICS_IN[884] (RADIX := Decimal);
		PICS_I_VFD_O2T_18_RDY OF PICS_IN[885] (RADIX := Decimal);
		PICS_I_VFD_O3T_17_RDY OF PICS_OUT[606] (RADIX := Decimal);
		PICS_I_VFD_O3T_18_RDY OF PICS_OUT[607] (RADIX := Decimal);
		PICS_I_VFD_O3T_19_RDY OF PICS_OUT[608] (RADIX := Decimal);
		PICS_I_VFD_O3T_20_RDY OF PICS_OUT[609] (RADIX := Decimal);
		PICS_I_VFD_O4T_05_RDY OF PICS_IN[886] (RADIX := Decimal);
		PICS_I_VFD_O4T_06_RDY OF PICS_IN[887] (RADIX := Decimal);
		PICS_I_VFD_O4T_07_RDY OF PICS_IN[888] (RADIX := Decimal);
		PICS_I_VFD_O4T_08_RDY OF PICS_IN[889] (RADIX := Decimal);
		PICS_I_VFD_O4T_09_RDY OF PICS_IN[890] (RADIX := Decimal);
		PICS_I_VFD_O4T_10_RDY OF PICS_IN[891] (RADIX := Decimal);
		PICS_I_VFD_O4T_11_RDY OF PICS_IN[892] (RADIX := Decimal);
		PICS_I_VFD_O4T_12_RDY OF PICS_IN[893] (RADIX := Decimal);
		PICS_I_VFD_O4T_13_RDY OF PICS_IN[894] (RADIX := Decimal);
		PICS_I_VFD_O4T_16_RDY OF PICS_OUT[610] (RADIX := Decimal);
		PICS_I_VFD_O4T_17_RDY OF PICS_OUT[611] (RADIX := Decimal);
		PICS_I_VFD_O4T_18_RDY OF PICS_OUT[612] (RADIX := Decimal);
		PICS_I_VFD_O4T_19_RDY OF PICS_OUT[613] (RADIX := Decimal);
		PICS_I_VFD_O4T_20_RDY OF PICS_OUT[614] (RADIX := Decimal);
		PICS_I_VFD_O4T_21_RDY OF PICS_OUT[615] (RADIX := Decimal);
		PICS_I_VFD_O4T_22_RDY OF PICS_OUT[616] (RADIX := Decimal);
		PICS_I_VFD_T5T_08_RDY OF PICS_IN[895] (RADIX := Decimal);
		PICS_I_VFD_T5T_09_RDY OF PICS_IN[896] (RADIX := Decimal);
		PICS_I_VFD_XO1_01_RDY OF PICS_IN[897] (RADIX := Decimal);
		PICS_I_VFD_XO1_02_RDY OF PICS_IN[898] (RADIX := Decimal);
		PICS_I_VFD_XO1_03_RDY OF PICS_IN[899] (RADIX := Decimal);
		PICS_I_VFD_XO2_01_RDY OF PICS_IN[900] (RADIX := Decimal);
		PICS_I_VFD_XO2_02_RDY OF PICS_IN[901] (RADIX := Decimal);
		PICS_I_VFD_XO2_03_RDY OF PICS_IN[902] (RADIX := Decimal);
		PICS_I_VFD_XO2_04_RDY OF PICS_IN[903] (RADIX := Decimal);
		PICS_I_VFD_XO2_05_RDY OF PICS_IN[904] (RADIX := Decimal);
		PICS_OUT : BOOL[768] (RADIX := Decimal) := [2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#1,2#1
				,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0
				,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1
				,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
				,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0];
		PICS_O_BM1_2_02_15 OF PICS_OUT[140] (RADIX := Decimal);
		PICS_O_BM1_2_03_14 OF PICS_OUT[141] (RADIX := Decimal);
		PICS_O_BM1_2_03_15 OF PICS_OUT[142] (RADIX := Decimal);
		PICS_O_BM1_2_06_14 OF PICS_OUT[143] (RADIX := Decimal);
		PICS_O_BM1_2_06_15 OF PICS_OUT[144] (RADIX := Decimal);
		PICS_O_CBP_BM1_07_TRIG OF PICS_OUT[145] (RADIX := Decimal);
		PICS_O_CBP_BM1_08_TRIG OF PICS_OUT[146] (RADIX := Decimal);
		PICS_O_CBP_BM1_09_TRIG OF PICS_OUT[147] (RADIX := Decimal);
		PICS_O_CBP_BM1_10_TRIG OF PICS_OUT[148] (RADIX := Decimal);
		PICS_O_CBP_BM1_11_TRIG OF PICS_OUT[149] (RADIX := Decimal);
		PICS_O_CBP_BM1_12_TRIG OF PICS_OUT[150] (RADIX := Decimal);
		PICS_O_CBP_BM1_13_TRIG OF PICS_OUT[151] (RADIX := Decimal);
		PICS_O_CS1_BM1_14_EPB OF PICS_OUT[283] (RADIX := Decimal);
		PICS_O_CS1_BM1_14_RPBA OF PICS_OUT[284] (RADIX := Decimal);
		PICS_O_CS1_BM1_16_EPB OF PICS_OUT[285] (RADIX := Decimal);
		PICS_O_CS1_BM1_16_RPBA OF PICS_OUT[286] (RADIX := Decimal);
		PICS_O_CS1_BM1_17_EPB OF PICS_OUT[287] (RADIX := Decimal);
		PICS_O_CS1_BM1_17_RPBA OF PICS_OUT[79] (RADIX := Decimal);
		PICS_O_CS1_BM1_27_EPB OF PICS_OUT[288] (RADIX := Decimal);
		PICS_O_CS1_BM1_27_RPBA OF PICS_OUT[289] (RADIX := Decimal);
		PICS_O_CS1_BM1_28_EPB OF PICS_OUT[290] (RADIX := Decimal);
		PICS_O_CS1_BM1_28_RPBA OF PICS_OUT[292] (RADIX := Decimal);
		PICS_O_CS1_BM1_29_EPB OF PICS_OUT[294] (RADIX := Decimal);
		PICS_O_CS1_BM1_29_LTB OF PICS_OUT[295] (RADIX := Decimal);
		PICS_O_CS1_BM1_29_RPBA OF PICS_OUT[296] (RADIX := Decimal);
		PICS_O_CS1_BM1_30_EPB OF PICS_OUT[297] (RADIX := Decimal);
		PICS_O_CS1_BM1_30_LTB OF PICS_OUT[298] (RADIX := Decimal);
		PICS_O_CS1_BM1_30_RPBA OF PICS_OUT[299] (RADIX := Decimal);
		PICS_O_CS1_CL1T_01_EPB OF PICS_OUT[300] (RADIX := Decimal);
		PICS_O_CS1_CL1T_01_SPBG OF PICS_OUT[301] (RADIX := Decimal);
		PICS_O_CS1_CL1T_02_EPB OF PICS_OUT[302] (RADIX := Decimal);
		PICS_O_CS1_CL1T_02_RPBA OF PICS_OUT[303] (RADIX := Decimal);
		PICS_O_CS1_CL1T_02_SPBG OF PICS_OUT[304] (RADIX := Decimal);
		PICS_O_CS1_CL2T_01_EPB OF PICS_OUT[305] (RADIX := Decimal);
		PICS_O_CS1_CL2T_01_SPBG OF PICS_OUT[306] (RADIX := Decimal);
		PICS_O_CS1_CL2T_02_EPB OF PICS_OUT[307] (RADIX := Decimal);
		PICS_O_CS1_CL2T_02_RPBA OF PICS_OUT[308] (RADIX := Decimal);
		PICS_O_CS1_CL2T_02_SPBG OF PICS_OUT[309] (RADIX := Decimal);
		PICS_O_CS1_CL2T_05_EPB OF PICS_OUT[310] (RADIX := Decimal);
		PICS_O_CS1_CL2T_05_RPBA OF PICS_OUT[311] (RADIX := Decimal);
		PICS_O_CS1_CL2T_05_SPBG OF PICS_OUT[312] (RADIX := Decimal);
		PICS_O_CS1_CL3T_01_EPB OF PICS_OUT[313] (RADIX := Decimal);
		PICS_O_CS1_CL3T_01_SPBG OF PICS_OUT[314] (RADIX := Decimal);
		PICS_O_CS1_CL3T_02_EPB OF PICS_OUT[315] (RADIX := Decimal);
		PICS_O_CS1_CL3T_02_RPBA OF PICS_OUT[316] (RADIX := Decimal);
		PICS_O_CS1_CL3T_02_SPBG OF PICS_OUT[317] (RADIX := Decimal);
		PICS_O_CS1_O3T_19_EPB OF PICS_OUT[705] (RADIX := Decimal);
		PICS_O_CS1_O3T_19_RPBA OF PICS_OUT[707] (RADIX := Decimal);
		PICS_O_CS1_O3T_19_SPBG OF PICS_OUT[706] (RADIX := Decimal);
		PICS_O_CS1_O4T_21_EPB OF PICS_OUT[714] (RADIX := Decimal);
		PICS_O_CS1_O4T_21_RPBA OF PICS_OUT[716] (RADIX := Decimal);
		PICS_O_CS1_O4T_21_SPBG OF PICS_OUT[715] (RADIX := Decimal);
		PICS_O_CS2_BM1_14_EPB OF PICS_OUT[318] (RADIX := Decimal);
		PICS_O_CS2_BM1_14_RPBA OF PICS_OUT[319] (RADIX := Decimal);
		PICS_O_CS2_BM1_16_EPB OF PICS_OUT[320] (RADIX := Decimal);
		PICS_O_CS2_BM1_16_RPBA OF PICS_OUT[321] (RADIX := Decimal);
		PICS_O_CS2_BM1_17_EPB OF PICS_OUT[322] (RADIX := Decimal);
		PICS_O_CS2_BM1_17_RPBA OF PICS_OUT[324] (RADIX := Decimal);
		PICS_O_CS2_BM1_23_EPB OF PICS_OUT[333] (RADIX := Decimal);
		PICS_O_CS2_BM1_23_RPBA OF PICS_OUT[334] (RADIX := Decimal);
		PICS_O_CS2_BM1_23_SPBG OF PICS_OUT[335] (RADIX := Decimal);
		PICS_O_CS2_BM1_27_EPB OF PICS_OUT[325] (RADIX := Decimal);
		PICS_O_CS2_BM1_27_RPBA OF PICS_OUT[326] (RADIX := Decimal);
		PICS_O_CS2_BM1_28_EPB OF PICS_OUT[327] (RADIX := Decimal);
		PICS_O_CS2_BM1_28_RPBA OF PICS_OUT[63] (RADIX := Decimal);
		PICS_O_CS2_BM1_29_EPB OF PICS_OUT[328] (RADIX := Decimal);
		PICS_O_CS2_BM1_29_RPBA OF PICS_OUT[329] (RADIX := Decimal);
		PICS_O_CS2_BM1_29_SPBG OF PICS_OUT[330] (RADIX := Decimal);
		PICS_O_CS2_BM1_30_EPB OF PICS_OUT[331] (RADIX := Decimal);
		PICS_O_CS2_BM1_30_RPBA OF PICS_OUT[332] (RADIX := Decimal);
		PICS_O_CS2_CL1T_01_EPB OF PICS_OUT[336] (RADIX := Decimal);
		PICS_O_CS2_CL1T_01_SPBG OF PICS_OUT[337] (RADIX := Decimal);
		PICS_O_CS2_CL1T_02_EPB OF PICS_OUT[338] (RADIX := Decimal);
		PICS_O_CS2_CL1T_02_SPBG OF PICS_OUT[339] (RADIX := Decimal);
		PICS_O_CS2_CL2T_01_EPB OF PICS_OUT[340] (RADIX := Decimal);
		PICS_O_CS2_CL2T_01_SPBG OF PICS_OUT[341] (RADIX := Decimal);
		PICS_O_CS2_CL2T_02_EPB OF PICS_OUT[342] (RADIX := Decimal);
		PICS_O_CS2_CL2T_02_SPBG OF PICS_OUT[343] (RADIX := Decimal);
		PICS_O_CS2_CL2T_05_EPB OF PICS_OUT[344] (RADIX := Decimal);
		PICS_O_CS2_CL2T_05_RPBA OF PICS_OUT[345] (RADIX := Decimal);
		PICS_O_CS2_CL2T_05_SPBG OF PICS_OUT[346] (RADIX := Decimal);
		PICS_O_CS2_CL3T_01_EPB OF PICS_OUT[347] (RADIX := Decimal);
		PICS_O_CS2_CL3T_01_SPBG OF PICS_OUT[348] (RADIX := Decimal);
		PICS_O_CS2_CL3T_02_EPB OF PICS_OUT[349] (RADIX := Decimal);
		PICS_O_CS2_CL3T_02_SPBG OF PICS_OUT[350] (RADIX := Decimal);
		PICS_O_CS2_O3T_19_EPB OF PICS_OUT[708] (RADIX := Decimal);
		PICS_O_CS2_O3T_19_RPBA OF PICS_OUT[710] (RADIX := Decimal);
		PICS_O_CS2_O3T_19_SPBG OF PICS_OUT[709] (RADIX := Decimal);
		PICS_O_CS2_O4T_21_EPB OF PICS_OUT[717] (RADIX := Decimal);
		PICS_O_CS2_O4T_21_RPBA OF PICS_OUT[719] (RADIX := Decimal);
		PICS_O_CS2_O4T_21_SPBG OF PICS_OUT[718] (RADIX := Decimal);
		PICS_O_CS3_BM1_27_EPB OF PICS_OUT[351] (RADIX := Decimal);
		PICS_O_CS3_BM1_28_EPB OF PICS_OUT[352] (RADIX := Decimal);
		PICS_O_CS3_BM1_29_EPB OF PICS_OUT[353] (RADIX := Decimal);
		PICS_O_CS3_BM1_30_EPB OF PICS_OUT[354] (RADIX := Decimal);
		PICS_O_CS3_BM1_30_RPBA OF PICS_OUT[355] (RADIX := Decimal);
		PICS_O_CS3_BM1_30_SPBG OF PICS_OUT[356] (RADIX := Decimal);
		PICS_O_CS3_CL1T_01_EPB OF PICS_OUT[357] (RADIX := Decimal);
		PICS_O_CS3_CL1T_01_SPBG OF PICS_OUT[358] (RADIX := Decimal);
		PICS_O_CS3_CL1T_02_EPB OF PICS_OUT[359] (RADIX := Decimal);
		PICS_O_CS3_CL1T_02_SPBG OF PICS_OUT[360] (RADIX := Decimal);
		PICS_O_CS3_CL2T_02_EPB OF PICS_OUT[361] (RADIX := Decimal);
		PICS_O_CS3_CL2T_02_SPBG OF PICS_OUT[362] (RADIX := Decimal);
		PICS_O_CS3_CL3T_02_EPB OF PICS_OUT[363] (RADIX := Decimal);
		PICS_O_CS3_CL3T_02_SPBG OF PICS_OUT[364] (RADIX := Decimal);
		PICS_O_CS4_BM1_27_EPB OF PICS_OUT[365] (RADIX := Decimal);
		PICS_O_CS4_BM1_28_EPB OF PICS_OUT[366] (RADIX := Decimal);
		PICS_O_CS4_BM1_28_SPBG OF PICS_OUT[293] (RADIX := Decimal);
		PICS_O_CS4_BM1_29_EPB OF PICS_OUT[367] (RADIX := Decimal);
		PICS_O_CS4_BM1_30_EPB OF PICS_OUT[368] (RADIX := Decimal);
		PICS_O_CS4_CL3T_02_EPB OF PICS_OUT[369] (RADIX := Decimal);
		PICS_O_CS4_CL3T_02_RPBA OF PICS_OUT[370] (RADIX := Decimal);
		PICS_O_CS4_CL3T_02_SPBG OF PICS_OUT[371] (RADIX := Decimal);
		PICS_O_CS5_BM1_27_EPB OF PICS_OUT[372] (RADIX := Decimal);
		PICS_O_CS5_BM1_27_RPBA OF PICS_OUT[373] (RADIX := Decimal);
		PICS_O_CS5_BM1_27_SPBG OF PICS_OUT[374] (RADIX := Decimal);
		PICS_O_CS5_BM1_28_EPB OF PICS_OUT[375] (RADIX := Decimal);
		PICS_O_CS5_BM1_28_RPBA OF PICS_OUT[376] (RADIX := Decimal);
		PICS_O_CS5_BM1_28_SPBG OF PICS_OUT[377] (RADIX := Decimal);
		PICS_O_CS_BM1_01_EPB OF PICS_OUT[152] (RADIX := Decimal);
		PICS_O_CS_BM1_01_RPBA OF PICS_OUT[153] (RADIX := Decimal);
		PICS_O_CS_BM1_02_EPB OF PICS_OUT[154] (RADIX := Decimal);
		PICS_O_CS_BM1_02_RPBA OF PICS_OUT[155] (RADIX := Decimal);
		PICS_O_CS_BM1_03_EPB OF PICS_OUT[156] (RADIX := Decimal);
		PICS_O_CS_BM1_03_RPBA OF PICS_OUT[157] (RADIX := Decimal);
		PICS_O_CS_BM1_06_EPB OF PICS_OUT[158] (RADIX := Decimal);
		PICS_O_CS_BM1_06_RPBA OF PICS_OUT[159] (RADIX := Decimal);
		PICS_O_CS_BM1_07_EPB OF PICS_OUT[160] (RADIX := Decimal);
		PICS_O_CS_BM1_07_LTB OF PICS_OUT[161] (RADIX := Decimal);
		PICS_O_CS_BM1_07_RPBA OF PICS_OUT[162] (RADIX := Decimal);
		PICS_O_CS_BM1_07_SPBG OF PICS_OUT[163] (RADIX := Decimal);
		PICS_O_CS_BM1_13_EPB OF PICS_OUT[164] (RADIX := Decimal);
		PICS_O_CS_BM1_13_RPBA OF PICS_OUT[165] (RADIX := Decimal);
		PICS_O_CS_BM1_14_EPB OF PICS_OUT[111] (RADIX := Decimal);
		PICS_O_CS_BM1_15_EPB OF PICS_OUT[166] (RADIX := Decimal);
		PICS_O_CS_BM1_15_RPBA OF PICS_OUT[167] (RADIX := Decimal);
		PICS_O_CS_BM1_17_LTB OF PICS_OUT[168] (RADIX := Decimal);
		PICS_O_CS_BM1_17_SPBG OF PICS_OUT[169] (RADIX := Decimal);
		PICS_O_CS_BM1_18_EPB OF PICS_OUT[170] (RADIX := Decimal);
		PICS_O_CS_BM1_18_RPBA OF PICS_OUT[171] (RADIX := Decimal);
		PICS_O_CS_BM1_19_EPB OF PICS_OUT[172] (RADIX := Decimal);
		PICS_O_CS_BM1_19_RPBA OF PICS_OUT[173] (RADIX := Decimal);
		PICS_O_CS_BM1_20_EPB OF PICS_OUT[174] (RADIX := Decimal);
		PICS_O_CS_BM1_20_LTB OF PICS_OUT[175] (RADIX := Decimal);
		PICS_O_CS_BM1_20_RPBA OF PICS_OUT[176] (RADIX := Decimal);
		PICS_O_CS_BM1_23_EPB OF PICS_OUT[177] (RADIX := Decimal);
		PICS_O_CS_BM1_23_RPBA OF PICS_OUT[178] (RADIX := Decimal);
		PICS_O_CS_BM1_25_EPB OF PICS_OUT[179] (RADIX := Decimal);
		PICS_O_CS_BM1_25_RPBA OF PICS_OUT[180] (RADIX := Decimal);
		PICS_O_CS_BM1_29_LTB OF PICS_OUT[76] (RADIX := Decimal);
		PICS_O_CS_BM1_30_LTB OF PICS_OUT[77] (RADIX := Decimal);
		PICS_O_CS_BM1_34_EPB OF PICS_OUT[181] (RADIX := Decimal);
		PICS_O_CS_BM1_34_RPBA OF PICS_OUT[182] (RADIX := Decimal);
		PICS_O_CS_BM1_38_EPB OF PICS_OUT[183] (RADIX := Decimal);
		PICS_O_CS_BM1_38_RPBA OF PICS_OUT[184] (RADIX := Decimal);
		PICS_O_CS_BM1_MCP_EPB OF PICS_OUT[104] (RADIX := Decimal);
		PICS_O_CS_BM1_MCP_LTA OF PICS_OUT[81] (RADIX := Decimal);
		PICS_O_CS_BM1_MCP_LTB OF PICS_OUT[82] (RADIX := Decimal);
		PICS_O_CS_BM1_MCP_LTG OF PICS_OUT[83] (RADIX := Decimal);
		PICS_O_CS_C2T_13_EPB OF PICS_OUT[185] (RADIX := Decimal);
		PICS_O_CS_C2T_13_RPBA OF PICS_OUT[186] (RADIX := Decimal);
		PICS_O_CS_C2T_13_SPBG OF PICS_OUT[187] (RADIX := Decimal);
		PICS_O_CS_C2T_17_EPB OF PICS_OUT[188] (RADIX := Decimal);
		PICS_O_CS_C2T_17_RPBA OF PICS_OUT[189] (RADIX := Decimal);
		PICS_O_CS_C2T_17_SPBG OF PICS_OUT[190] (RADIX := Decimal);
		PICS_O_CS_CL12T_36_EPB OF PICS_OUT[720] (RADIX := Decimal);
		PICS_O_CS_CL12T_36_RPBA OF PICS_OUT[722] (RADIX := Decimal);
		PICS_O_CS_CL12T_36_SPBG OF PICS_OUT[721] (RADIX := Decimal);
		PICS_O_CS_CL1T_05_EPB OF PICS_OUT[191] (RADIX := Decimal);
		PICS_O_CS_CL1T_05_RPBA OF PICS_OUT[192] (RADIX := Decimal);
		PICS_O_CS_CL1T_05_SPBG OF PICS_OUT[193] (RADIX := Decimal);
		PICS_O_CS_CL1T_09_EPB OF PICS_OUT[194] (RADIX := Decimal);
		PICS_O_CS_CL1T_09_RPBA OF PICS_OUT[195] (RADIX := Decimal);
		PICS_O_CS_CL1T_09_SPBG OF PICS_OUT[196] (RADIX := Decimal);
		PICS_O_CS_CL1T_11_EPB OF PICS_OUT[197] (RADIX := Decimal);
		PICS_O_CS_CL1T_11_RPBA OF PICS_OUT[198] (RADIX := Decimal);
		PICS_O_CS_CL1T_11_SPBG OF PICS_OUT[199] (RADIX := Decimal);
		PICS_O_CS_CL1T_12_EPB OF PICS_OUT[200] (RADIX := Decimal);
		PICS_O_CS_CL1T_12_RPBA OF PICS_OUT[201] (RADIX := Decimal);
		PICS_O_CS_CL1T_12_SPBG OF PICS_OUT[202] (RADIX := Decimal);
		PICS_O_CS_CL1T_16_EPB OF PICS_OUT[203] (RADIX := Decimal);
		PICS_O_CS_CL1T_16_RPBA OF PICS_OUT[204] (RADIX := Decimal);
		PICS_O_CS_CL1T_16_SPBG OF PICS_OUT[205] (RADIX := Decimal);
		PICS_O_CS_CL1T_20_EPB OF PICS_OUT[206] (RADIX := Decimal);
		PICS_O_CS_CL1T_20_RPBA OF PICS_OUT[207] (RADIX := Decimal);
		PICS_O_CS_CL1T_20_SPBG OF PICS_OUT[208] (RADIX := Decimal);
		PICS_O_CS_CL1T_24_EPB OF PICS_OUT[209] (RADIX := Decimal);
		PICS_O_CS_CL1T_24_RPBA OF PICS_OUT[210] (RADIX := Decimal);
		PICS_O_CS_CL1T_24_SPBG OF PICS_OUT[211] (RADIX := Decimal);
		PICS_O_CS_CL2T_04_EPB OF PICS_OUT[212] (RADIX := Decimal);
		PICS_O_CS_CL2T_04_RPBA OF PICS_OUT[213] (RADIX := Decimal);
		PICS_O_CS_CL2T_04_SPBG OF PICS_OUT[214] (RADIX := Decimal);
		PICS_O_CS_CL2T_09_EPB OF PICS_OUT[215] (RADIX := Decimal);
		PICS_O_CS_CL2T_09_RPBA OF PICS_OUT[216] (RADIX := Decimal);
		PICS_O_CS_CL2T_09_SPBG OF PICS_OUT[217] (RADIX := Decimal);
		PICS_O_CS_CL3T_03_EPB OF PICS_OUT[218] (RADIX := Decimal);
		PICS_O_CS_CL3T_03_RPBA OF PICS_OUT[219] (RADIX := Decimal);
		PICS_O_CS_CL3T_03_SPBG OF PICS_OUT[220] (RADIX := Decimal);
		PICS_O_CS_CL3T_04_EPB OF PICS_OUT[221] (RADIX := Decimal);
		PICS_O_CS_CL3T_04_RPBA OF PICS_OUT[222] (RADIX := Decimal);
		PICS_O_CS_CL3T_04_SPBG OF PICS_OUT[223] (RADIX := Decimal);
		PICS_O_CS_HX1T_10_EPB OF PICS_OUT[224] (RADIX := Decimal);
		PICS_O_CS_HX1T_10_RPBA OF PICS_OUT[225] (RADIX := Decimal);
		PICS_O_CS_HX1T_10_SPBG OF PICS_OUT[226] (RADIX := Decimal);
		PICS_O_CS_MCP_01_EPB OF PICS_OUT[227] (RADIX := Decimal);
		PICS_O_CS_MCP_01_HM OF PICS_OUT[228] (RADIX := Decimal);
		PICS_O_CS_MCP_01_LTA OF PICS_OUT[229] (RADIX := Decimal);
		PICS_O_CS_MCP_01_LTB OF PICS_OUT[230] (RADIX := Decimal);
		PICS_O_CS_MCP_01_LTG OF PICS_OUT[231] (RADIX := Decimal);
		PICS_O_CS_MCP_01_SPBG OF PICS_OUT[232] (RADIX := Decimal);
		PICS_O_CS_MCP_02_EPB OF PICS_OUT[233] (RADIX := Decimal);
		PICS_O_CS_MCP_02_LTA OF PICS_OUT[234] (RADIX := Decimal);
		PICS_O_CS_MCP_02_LTB OF PICS_OUT[235] (RADIX := Decimal);
		PICS_O_CS_MCP_02_LTG OF PICS_OUT[236] (RADIX := Decimal);
		PICS_O_CS_MCP_02_SPBG OF PICS_OUT[237] (RADIX := Decimal);
		PICS_O_CS_MCP_03_EPB OF PICS_OUT[238] (RADIX := Decimal);
		PICS_O_CS_MCP_03_LTA OF PICS_OUT[239] (RADIX := Decimal);
		PICS_O_CS_MCP_03_LTB OF PICS_OUT[240] (RADIX := Decimal);
		PICS_O_CS_MCP_03_LTG OF PICS_OUT[241] (RADIX := Decimal);
		PICS_O_CS_MCP_03_SPBG OF PICS_OUT[242] (RADIX := Decimal);
		PICS_O_CS_MCP_16_EPB OF PICS_OUT[697] (RADIX := Decimal);
		PICS_O_CS_MCP_16_LTA OF PICS_OUT[701] (RADIX := Decimal);
		PICS_O_CS_MCP_16_LTB OF PICS_OUT[700] (RADIX := Decimal);
		PICS_O_CS_MCP_16_LTG OF PICS_OUT[699] (RADIX := Decimal);
		PICS_O_CS_MCP_16_SPBG OF PICS_OUT[698] (RADIX := Decimal);
		PICS_O_CS_MCP_BM1_EPB OF PICS_OUT[243] (RADIX := Decimal);
		PICS_O_CS_MCP_BM1_HM OF PICS_OUT[84] (RADIX := Decimal);
		PICS_O_CS_MCP_BM1_LTA OF PICS_OUT[244] (RADIX := Decimal);
		PICS_O_CS_MCP_BM1_LTB OF PICS_OUT[245] (RADIX := Decimal);
		PICS_O_CS_MCP_BM1_LTG OF PICS_OUT[246] (RADIX := Decimal);
		PICS_O_CS_O2T_04_EPB OF PICS_OUT[247] (RADIX := Decimal);
		PICS_O_CS_O2T_04_RPBA OF PICS_OUT[248] (RADIX := Decimal);
		PICS_O_CS_O2T_04_SPBG OF PICS_OUT[249] (RADIX := Decimal);
		PICS_O_CS_O2T_06_EPB OF PICS_OUT[250] (RADIX := Decimal);
		PICS_O_CS_O2T_06_RPBA OF PICS_OUT[251] (RADIX := Decimal);
		PICS_O_CS_O2T_06_SPBG OF PICS_OUT[252] (RADIX := Decimal);
		PICS_O_CS_O2T_10_EPB OF PICS_OUT[253] (RADIX := Decimal);
		PICS_O_CS_O2T_10_RPBA OF PICS_OUT[254] (RADIX := Decimal);
		PICS_O_CS_O2T_10_SPBG OF PICS_OUT[255] (RADIX := Decimal);
		PICS_O_CS_O2T_12_EPB OF PICS_OUT[256] (RADIX := Decimal);
		PICS_O_CS_O2T_12_RPBA OF PICS_OUT[257] (RADIX := Decimal);
		PICS_O_CS_O2T_12_SPBG OF PICS_OUT[258] (RADIX := Decimal);
		PICS_O_CS_O2T_14_EPB OF PICS_OUT[259] (RADIX := Decimal);
		PICS_O_CS_O2T_14_RPBA OF PICS_OUT[260] (RADIX := Decimal);
		PICS_O_CS_O2T_14_SPBG OF PICS_OUT[261] (RADIX := Decimal);
		PICS_O_CS_O2T_18_EPB OF PICS_OUT[262] (RADIX := Decimal);
		PICS_O_CS_O2T_18_RPBA OF PICS_OUT[263] (RADIX := Decimal);
		PICS_O_CS_O2T_18_SPBG OF PICS_OUT[264] (RADIX := Decimal);
		PICS_O_CS_O3T_17_EPB OF PICS_OUT[702] (RADIX := Decimal);
		PICS_O_CS_O3T_17_RPBA OF PICS_OUT[704] (RADIX := Decimal);
		PICS_O_CS_O3T_17_SPBG OF PICS_OUT[703] (RADIX := Decimal);
		PICS_O_CS_O4T_06_EPB OF PICS_OUT[265] (RADIX := Decimal);
		PICS_O_CS_O4T_06_RPBA OF PICS_OUT[266] (RADIX := Decimal);
		PICS_O_CS_O4T_06_SPBG OF PICS_OUT[267] (RADIX := Decimal);
		PICS_O_CS_O4T_10_EPB OF PICS_OUT[268] (RADIX := Decimal);
		PICS_O_CS_O4T_10_RPBA OF PICS_OUT[269] (RADIX := Decimal);
		PICS_O_CS_O4T_10_SPBG OF PICS_OUT[270] (RADIX := Decimal);
		PICS_O_CS_O4T_16_EPB OF PICS_OUT[711] (RADIX := Decimal);
		PICS_O_CS_O4T_16_RPBA OF PICS_OUT[713] (RADIX := Decimal);
		PICS_O_CS_O4T_16_SPBG OF PICS_OUT[712] (RADIX := Decimal);
		PICS_O_CS_T5T_09_EPB OF PICS_OUT[271] (RADIX := Decimal);
		PICS_O_CS_T5T_09_RPBA OF PICS_OUT[272] (RADIX := Decimal);
		PICS_O_CS_T5T_09_SPBG OF PICS_OUT[273] (RADIX := Decimal);
		PICS_O_CS_XO1_01_EPB OF PICS_OUT[274] (RADIX := Decimal);
		PICS_O_CS_XO1_01_RPBA OF PICS_OUT[275] (RADIX := Decimal);
		PICS_O_CS_XO1_01_SPBG OF PICS_OUT[276] (RADIX := Decimal);
		PICS_O_CS_XO2_02_EPB OF PICS_OUT[277] (RADIX := Decimal);
		PICS_O_CS_XO2_02_RPBA OF PICS_OUT[278] (RADIX := Decimal);
		PICS_O_CS_XO2_02_SPBG OF PICS_OUT[279] (RADIX := Decimal);
		PICS_O_CS_XO2_05_EPB OF PICS_OUT[280] (RADIX := Decimal);
		PICS_O_CS_XO2_05_RPBA OF PICS_OUT[281] (RADIX := Decimal);
		PICS_O_CS_XO2_05_SPBG OF PICS_OUT[282] (RADIX := Decimal);
		PICS_O_C_BM1_01 OF PICS_OUT[400] (RADIX := Decimal);
		PICS_O_C_BM1_02 OF PICS_OUT[401] (RADIX := Decimal);
		PICS_O_C_BM1_03 OF PICS_OUT[402] (RADIX := Decimal);
		PICS_O_C_BM1_04 OF PICS_OUT[403] (RADIX := Decimal);
		PICS_O_C_BM1_05 OF PICS_OUT[404] (RADIX := Decimal);
		PICS_O_C_BM1_06 OF PICS_OUT[405] (RADIX := Decimal);
		PICS_O_C_BM1_07 OF PICS_OUT[406] (RADIX := Decimal);
		PICS_O_C_BM1_08 OF PICS_OUT[407] (RADIX := Decimal);
		PICS_O_C_BM1_09 OF PICS_OUT[408] (RADIX := Decimal);
		PICS_O_C_BM1_10 OF PICS_OUT[409] (RADIX := Decimal);
		PICS_O_C_BM1_11 OF PICS_OUT[410] (RADIX := Decimal);
		PICS_O_C_BM1_12 OF PICS_OUT[411] (RADIX := Decimal);
		PICS_O_C_BM1_13_FWD OF PICS_OUT[412] (RADIX := Decimal);
		PICS_O_C_BM1_13_REV OF PICS_OUT[413] (RADIX := Decimal);
		PICS_O_C_BM1_14 OF PICS_OUT[414] (RADIX := Decimal);
		PICS_O_C_BM1_15 OF PICS_OUT[415] (RADIX := Decimal);
		PICS_O_C_BM1_16 OF PICS_OUT[416] (RADIX := Decimal);
		PICS_O_C_BM1_17 OF PICS_OUT[417] (RADIX := Decimal);
		PICS_O_C_BM1_18 OF PICS_OUT[418] (RADIX := Decimal);
		PICS_O_C_BM1_19 OF PICS_OUT[419] (RADIX := Decimal);
		PICS_O_C_BM1_20 OF PICS_OUT[420] (RADIX := Decimal);
		PICS_O_C_BM1_21 OF PICS_OUT[421] (RADIX := Decimal);
		PICS_O_C_BM1_22 OF PICS_OUT[422] (RADIX := Decimal);
		PICS_O_C_BM1_23 OF PICS_OUT[423] (RADIX := Decimal);
		PICS_O_C_BM1_24 OF PICS_OUT[424] (RADIX := Decimal);
		PICS_O_C_BM1_25 OF PICS_OUT[425] (RADIX := Decimal);
		PICS_O_C_BM1_26 OF PICS_OUT[426] (RADIX := Decimal);
		PICS_O_C_BM1_27 OF PICS_OUT[27] (RADIX := Decimal);
		PICS_O_C_BM1_28 OF PICS_OUT[28] (RADIX := Decimal);
		PICS_O_C_BM1_29 OF PICS_OUT[29] (RADIX := Decimal);
		PICS_O_C_BM1_30 OF PICS_OUT[30] (RADIX := Decimal);
		PICS_O_C_BM1_31 OF PICS_OUT[427] (RADIX := Decimal);
		PICS_O_C_BM1_32 OF PICS_OUT[428] (RADIX := Decimal);
		PICS_O_C_BM1_33 OF PICS_OUT[429] (RADIX := Decimal);
		PICS_O_C_BM1_34 OF PICS_OUT[430] (RADIX := Decimal);
		PICS_O_C_BM1_35 OF PICS_OUT[431] (RADIX := Decimal);
		PICS_O_C_BM1_36 OF PICS_OUT[432] (RADIX := Decimal);
		PICS_O_C_BM1_37 OF PICS_OUT[433] (RADIX := Decimal);
		PICS_O_C_BM1_38 OF PICS_OUT[434] (RADIX := Decimal);
		PICS_O_INT_C2T_12_RUN OF PICS_OUT[378] (RADIX := Decimal);
		PICS_O_INT_C4_08_MRG OF PICS_OUT[379] (RADIX := Decimal);
		PICS_O_INT_C4_09_RES OF PICS_OUT[380] (RADIX := Decimal);
		PICS_O_INT_C4_09_START OF PICS_OUT[381] (RADIX := Decimal);
		PICS_O_INT_CL12T_35_RUN OF PICS_OUT[732] (RADIX := Decimal);
		PICS_O_INT_CL1T_26_JAM OF PICS_OUT[382] (RADIX := Decimal);
		PICS_O_INT_CL2T_09_JAM OF PICS_OUT[383] (RADIX := Decimal);
		PICS_O_INT_CL3T_8_JAM OF PICS_OUT[384] (RADIX := Decimal);
		PICS_O_INT_HX1T_06_RUN OF PICS_OUT[387] (RADIX := Decimal);
		PICS_O_INT_HX1_11_RES OF PICS_OUT[385] (RADIX := Decimal);
		PICS_O_INT_HX1_11_START OF PICS_OUT[386] (RADIX := Decimal);
		PICS_O_INT_O2T_04_RUN OF PICS_OUT[388] (RADIX := Decimal);
		PICS_O_INT_O3T_17_RUN OF PICS_OUT[726] (RADIX := Decimal);
		PICS_O_INT_O3T_20_JAM OF PICS_OUT[728] (RADIX := Decimal);
		PICS_O_INT_O3_54_START OF PICS_OUT[727] (RADIX := Decimal);
		PICS_O_INT_O4T_05_RUN OF PICS_OUT[394] (RADIX := Decimal);
		PICS_O_INT_O4T_16_RUN OF PICS_OUT[729] (RADIX := Decimal);
		PICS_O_INT_O4T_22_JAM OF PICS_OUT[731] (RADIX := Decimal);
		PICS_O_INT_O4_03_MRG OF PICS_OUT[389] (RADIX := Decimal);
		PICS_O_INT_O4_04_RES OF PICS_OUT[390] (RADIX := Decimal);
		PICS_O_INT_O4_04_START OF PICS_OUT[391] (RADIX := Decimal);
		PICS_O_INT_O4_06_RES OF PICS_OUT[392] (RADIX := Decimal);
		PICS_O_INT_O4_06_START OF PICS_OUT[393] (RADIX := Decimal);
		PICS_O_INT_O4_54_START OF PICS_OUT[730] (RADIX := Decimal);
		PICS_O_INT_T5T_08_RUN OF PICS_OUT[395] (RADIX := Decimal);
		PICS_O_INT_T5T_09_JAM OF PICS_OUT[396] (RADIX := Decimal);
		PICS_O_INT_T5T_10_RES OF PICS_OUT[397] (RADIX := Decimal);
		PICS_O_INT_T5T_10_START OF PICS_OUT[398] (RADIX := Decimal);
		PICS_O_INT_XO2_05_JAM OF PICS_OUT[399] (RADIX := Decimal);
		PICS_O_SD_XO1_EN OF PICS_OUT[435] (RADIX := Decimal);
		PICS_O_SD_XO1_EXT OF PICS_OUT[436] (RADIX := Decimal);
		PICS_O_SD_XO1_RES OF PICS_OUT[437] (RADIX := Decimal);
		PICS_O_SD_XO1_RET OF PICS_OUT[438] (RADIX := Decimal);
		PICS_O_SD_XO1_RUN OF PICS_OUT[439] (RADIX := Decimal);
		PICS_O_SD_XO2_EN OF PICS_OUT[440] (RADIX := Decimal);
		PICS_O_SD_XO2_EXT OF PICS_OUT[441] (RADIX := Decimal);
		PICS_O_SD_XO2_RES OF PICS_OUT[442] (RADIX := Decimal);
		PICS_O_SD_XO2_RET OF PICS_OUT[443] (RADIX := Decimal);
		PICS_O_SD_XO2_RUN OF PICS_OUT[444] (RADIX := Decimal);
		PICS_O_VFD_BM1_27_FWD OF PICS_OUT[445] (RADIX := Decimal);
		PICS_O_VFD_BM1_27_REV OF PICS_OUT[446] (RADIX := Decimal);
		PICS_O_VFD_BM1_28_FWD OF PICS_OUT[447] (RADIX := Decimal);
		PICS_O_VFD_BM1_28_REV OF PICS_OUT[448] (RADIX := Decimal);
		PICS_O_VFD_BM1_29_FWD OF PICS_OUT[449] (RADIX := Decimal);
		PICS_O_VFD_BM1_29_REV OF PICS_OUT[450] (RADIX := Decimal);
		PICS_O_VFD_BM1_30_FWD OF PICS_OUT[451] (RADIX := Decimal);
		PICS_O_VFD_BM1_30_REV OF PICS_OUT[452] (RADIX := Decimal);
		PICS_O_VFD_C2T_12_FWD OF PICS_OUT[453] (RADIX := Decimal);
		PICS_O_VFD_C2T_13_FWD OF PICS_OUT[454] (RADIX := Decimal);
		PICS_O_VFD_C2T_14_FWD OF PICS_OUT[455] (RADIX := Decimal);
		PICS_O_VFD_C2T_15_FWD OF PICS_OUT[456] (RADIX := Decimal);
		PICS_O_VFD_C2T_16_FWD OF PICS_OUT[457] (RADIX := Decimal);
		PICS_O_VFD_C2T_17_FWD OF PICS_OUT[458] (RADIX := Decimal);
		PICS_O_VFD_C2T_17_REV OF PICS_OUT[459] (RADIX := Decimal);
		PICS_O_VFD_CL12T_35_FWD OF PICS_OUT[631] (RADIX := Decimal);
		PICS_O_VFD_CL12T_36_FWD OF PICS_OUT[632] (RADIX := Decimal);
		PICS_O_VFD_CL12T_36_REV OF PICS_OUT[633] (RADIX := Decimal);
		PICS_O_VFD_CL1T_01_FWD OF PICS_OUT[460] (RADIX := Decimal);
		PICS_O_VFD_CL1T_02_FWD OF PICS_OUT[461] (RADIX := Decimal);
		PICS_O_VFD_CL1T_03_FWD OF PICS_OUT[462] (RADIX := Decimal);
		PICS_O_VFD_CL1T_04_FWD OF PICS_OUT[463] (RADIX := Decimal);
		PICS_O_VFD_CL1T_05_FWD OF PICS_OUT[464] (RADIX := Decimal);
		PICS_O_VFD_CL1T_06_FWD OF PICS_OUT[465] (RADIX := Decimal);
		PICS_O_VFD_CL1T_07_FWD OF PICS_OUT[466] (RADIX := Decimal);
		PICS_O_VFD_CL1T_08_FWD OF PICS_OUT[467] (RADIX := Decimal);
		PICS_O_VFD_CL1T_09_FWD OF PICS_OUT[468] (RADIX := Decimal);
		PICS_O_VFD_CL1T_10_FWD OF PICS_OUT[469] (RADIX := Decimal);
		PICS_O_VFD_CL1T_11_FWD OF PICS_OUT[470] (RADIX := Decimal);
		PICS_O_VFD_CL1T_12_FWD OF PICS_OUT[471] (RADIX := Decimal);
		PICS_O_VFD_CL1T_13_FWD OF PICS_OUT[472] (RADIX := Decimal);
		PICS_O_VFD_CL1T_14_FWD OF PICS_OUT[473] (RADIX := Decimal);
		PICS_O_VFD_CL1T_15_FWD OF PICS_OUT[474] (RADIX := Decimal);
		PICS_O_VFD_CL1T_16_FWD OF PICS_OUT[475] (RADIX := Decimal);
		PICS_O_VFD_CL1T_17_FWD OF PICS_OUT[476] (RADIX := Decimal);
		PICS_O_VFD_CL1T_18_FWD OF PICS_OUT[477] (RADIX := Decimal);
		PICS_O_VFD_CL1T_19_FWD OF PICS_OUT[478] (RADIX := Decimal);
		PICS_O_VFD_CL1T_20_FWD OF PICS_OUT[479] (RADIX := Decimal);
		PICS_O_VFD_CL1T_21_FWD OF PICS_OUT[480] (RADIX := Decimal);
		PICS_O_VFD_CL1T_23_FWD OF PICS_OUT[481] (RADIX := Decimal);
		PICS_O_VFD_CL1T_24_FWD OF PICS_OUT[482] (RADIX := Decimal);
		PICS_O_VFD_CL1T_26_FWD OF PICS_OUT[483] (RADIX := Decimal);
		PICS_O_VFD_CL2T_01_FWD OF PICS_OUT[484] (RADIX := Decimal);
		PICS_O_VFD_CL2T_02_FWD OF PICS_OUT[485] (RADIX := Decimal);
		PICS_O_VFD_CL2T_03_FWD OF PICS_OUT[486] (RADIX := Decimal);
		PICS_O_VFD_CL2T_04_FWD OF PICS_OUT[487] (RADIX := Decimal);
		PICS_O_VFD_CL2T_05_FWD OF PICS_OUT[488] (RADIX := Decimal);
		PICS_O_VFD_CL2T_06_FWD OF PICS_OUT[489] (RADIX := Decimal);
		PICS_O_VFD_CL2T_07_FWD OF PICS_OUT[490] (RADIX := Decimal);
		PICS_O_VFD_CL2T_08_FWD OF PICS_OUT[491] (RADIX := Decimal);
		PICS_O_VFD_CL2T_09_FWD OF PICS_OUT[492] (RADIX := Decimal);
		PICS_O_VFD_CL3T_01_FWD OF PICS_OUT[493] (RADIX := Decimal);
		PICS_O_VFD_CL3T_02_FWD OF PICS_OUT[494] (RADIX := Decimal);
		PICS_O_VFD_CL3T_03_FWD OF PICS_OUT[495] (RADIX := Decimal);
		PICS_O_VFD_CL3T_04_FWD OF PICS_OUT[496] (RADIX := Decimal);
		PICS_O_VFD_CL3T_05_FWD OF PICS_OUT[497] (RADIX := Decimal);
		PICS_O_VFD_CL3T_06_FWD OF PICS_OUT[498] (RADIX := Decimal);
		PICS_O_VFD_CL3T_07_FWD OF PICS_OUT[499] (RADIX := Decimal);
		PICS_O_VFD_CL3T_08_FWD OF PICS_OUT[500] (RADIX := Decimal);
		PICS_O_VFD_HX1T_06_FWD OF PICS_OUT[501] (RADIX := Decimal);
		PICS_O_VFD_HX1T_07_FWD OF PICS_OUT[502] (RADIX := Decimal);
		PICS_O_VFD_HX1T_08_FWD OF PICS_OUT[503] (RADIX := Decimal);
		PICS_O_VFD_HX1T_09_FWD OF PICS_OUT[504] (RADIX := Decimal);
		PICS_O_VFD_HX1T_10A_FWD OF PICS_OUT[507] (RADIX := Decimal);
		PICS_O_VFD_HX1T_10_FWD OF PICS_OUT[505] (RADIX := Decimal);
		PICS_O_VFD_HX1T_10_REV OF PICS_OUT[506] (RADIX := Decimal);
		PICS_O_VFD_O2T_04_FWD OF PICS_OUT[508] (RADIX := Decimal);
		PICS_O_VFD_O2T_05_FWD OF PICS_OUT[509] (RADIX := Decimal);
		PICS_O_VFD_O2T_06_FWD OF PICS_OUT[510] (RADIX := Decimal);
		PICS_O_VFD_O2T_07_FWD OF PICS_OUT[511] (RADIX := Decimal);
		PICS_O_VFD_O2T_08_FWD OF PICS_OUT[512] (RADIX := Decimal);
		PICS_O_VFD_O2T_09_FWD OF PICS_OUT[513] (RADIX := Decimal);
		PICS_O_VFD_O2T_10_FWD OF PICS_OUT[514] (RADIX := Decimal);
		PICS_O_VFD_O2T_11_FWD OF PICS_OUT[515] (RADIX := Decimal);
		PICS_O_VFD_O2T_12_FWD OF PICS_OUT[516] (RADIX := Decimal);
		PICS_O_VFD_O2T_13_FWD OF PICS_OUT[517] (RADIX := Decimal);
		PICS_O_VFD_O2T_14_FWD OF PICS_OUT[518] (RADIX := Decimal);
		PICS_O_VFD_O2T_15_FWD OF PICS_OUT[519] (RADIX := Decimal);
		PICS_O_VFD_O2T_16_FWD OF PICS_OUT[520] (RADIX := Decimal);
		PICS_O_VFD_O2T_17_FWD OF PICS_OUT[521] (RADIX := Decimal);
		PICS_O_VFD_O2T_18_FWD OF PICS_OUT[522] (RADIX := Decimal);
		PICS_O_VFD_O2T_18_REV OF PICS_OUT[523] (RADIX := Decimal);
		PICS_O_VFD_O3T_17_FWD OF PICS_OUT[620] (RADIX := Decimal);
		PICS_O_VFD_O3T_18_FWD OF PICS_OUT[621] (RADIX := Decimal);
		PICS_O_VFD_O3T_19_FWD OF PICS_OUT[622] (RADIX := Decimal);
		PICS_O_VFD_O3T_20_FWD OF PICS_OUT[623] (RADIX := Decimal);
		PICS_O_VFD_O4T_05_FWD OF PICS_OUT[524] (RADIX := Decimal);
		PICS_O_VFD_O4T_06_FWD OF PICS_OUT[525] (RADIX := Decimal);
		PICS_O_VFD_O4T_07_FWD OF PICS_OUT[526] (RADIX := Decimal);
		PICS_O_VFD_O4T_08_FWD OF PICS_OUT[527] (RADIX := Decimal);
		PICS_O_VFD_O4T_09_FWD OF PICS_OUT[528] (RADIX := Decimal);
		PICS_O_VFD_O4T_10_FWD OF PICS_OUT[529] (RADIX := Decimal);
		PICS_O_VFD_O4T_11_FWD OF PICS_OUT[530] (RADIX := Decimal);
		PICS_O_VFD_O4T_12_FWD OF PICS_OUT[531] (RADIX := Decimal);
		PICS_O_VFD_O4T_13_FWD OF PICS_OUT[532] (RADIX := Decimal);
		PICS_O_VFD_O4T_16_FWD OF PICS_OUT[624] (RADIX := Decimal);
		PICS_O_VFD_O4T_17_FWD OF PICS_OUT[625] (RADIX := Decimal);
		PICS_O_VFD_O4T_18_FWD OF PICS_OUT[626] (RADIX := Decimal);
		PICS_O_VFD_O4T_19_FWD OF PICS_OUT[627] (RADIX := Decimal);
		PICS_O_VFD_O4T_20_FWD OF PICS_OUT[628] (RADIX := Decimal);
		PICS_O_VFD_O4T_21_FWD OF PICS_OUT[629] (RADIX := Decimal);
		PICS_O_VFD_O4T_22_FWD OF PICS_OUT[630] (RADIX := Decimal);
		PICS_O_VFD_T5T_08_FWD OF PICS_OUT[533] (RADIX := Decimal);
		PICS_O_VFD_T5T_09_FWD OF PICS_OUT[534] (RADIX := Decimal);
		PICS_O_VFD_T5T_09_REV OF PICS_OUT[535] (RADIX := Decimal);
		PICS_O_VFD_XO1_01_FWD OF PICS_OUT[536] (RADIX := Decimal);
		PICS_O_VFD_XO1_02_FWD OF PICS_OUT[537] (RADIX := Decimal);
		PICS_O_VFD_XO1_03_FWD OF PICS_OUT[538] (RADIX := Decimal);
		PICS_O_VFD_XO2_01_FWD OF PICS_OUT[539] (RADIX := Decimal);
		PICS_O_VFD_XO2_02_FWD OF PICS_OUT[540] (RADIX := Decimal);
		PICS_O_VFD_XO2_03_FWD OF PICS_OUT[541] (RADIX := Decimal);
		PICS_O_VFD_XO2_04_FWD OF PICS_OUT[542] (RADIX := Decimal);
		PICS_O_VFD_XO2_05_FWD OF PICS_OUT[543] (RADIX := Decimal);
		PICS_O_VFD_XO2_05_REV OF PICS_OUT[544] (RADIX := Decimal);
		PICS_O_WA_BM1_01_ALM OF PICS_OUT[545] (RADIX := Decimal);
		PICS_O_WA_BM1_01_LTR OF PICS_OUT[546] (RADIX := Decimal);
		PICS_O_WA_BM1_03_ALM OF PICS_OUT[547] (RADIX := Decimal);
		PICS_O_WA_BM1_03_LTR OF PICS_OUT[548] (RADIX := Decimal);
		PICS_O_WA_BM1_06_ALM OF PICS_OUT[549] (RADIX := Decimal);
		PICS_O_WA_BM1_06_LTR OF PICS_OUT[550] (RADIX := Decimal);
		PICS_O_WA_BM1_15_ALM OF PICS_OUT[551] (RADIX := Decimal);
		PICS_O_WA_BM1_15_LTR OF PICS_OUT[552] (RADIX := Decimal);
		PICS_O_WA_BM1_16_ALM OF PICS_OUT[553] (RADIX := Decimal);
		PICS_O_WA_BM1_16_LTR OF PICS_OUT[554] (RADIX := Decimal);
		PICS_O_WA_BM1_18_ALM OF PICS_OUT[555] (RADIX := Decimal);
		PICS_O_WA_BM1_18_LTR OF PICS_OUT[556] (RADIX := Decimal);
		PICS_O_WA_BM1_23_ALM OF PICS_OUT[557] (RADIX := Decimal);
		PICS_O_WA_BM1_23_LTA OF PICS_OUT[558] (RADIX := Decimal);
		PICS_O_WA_BM1_23_LTR OF PICS_OUT[559] (RADIX := Decimal);
		PICS_O_WA_BM1_28_ALM OF PICS_OUT[560] (RADIX := Decimal);
		PICS_O_WA_BM1_28_LTR OF PICS_OUT[561] (RADIX := Decimal);
		PICS_O_WA_BM1_30_ALM OF PICS_OUT[562] (RADIX := Decimal);
		PICS_O_WA_BM1_30_LTR OF PICS_OUT[563] (RADIX := Decimal);
		PICS_O_WA_BM1_MCP_ALM OF PICS_OUT[87] (RADIX := Decimal);
		PICS_O_WA_BM1_MCP_LTA OF PICS_OUT[86] (RADIX := Decimal);
		PICS_O_WA_BM1_MCP_LTR OF PICS_OUT[85] (RADIX := Decimal);
		PICS_O_WA_C2T_13_ALM OF PICS_OUT[564] (RADIX := Decimal);
		PICS_O_WA_C2T_13_LTA OF PICS_OUT[565] (RADIX := Decimal);
		PICS_O_WA_C2T_13_LTR OF PICS_OUT[566] (RADIX := Decimal);
		PICS_O_WA_CL1T_01_ALM OF PICS_OUT[567] (RADIX := Decimal);
		PICS_O_WA_CL1T_01_LTA OF PICS_OUT[568] (RADIX := Decimal);
		PICS_O_WA_CL1T_01_LTR OF PICS_OUT[569] (RADIX := Decimal);
		PICS_O_WA_CL1T_09_ALM OF PICS_OUT[570] (RADIX := Decimal);
		PICS_O_WA_CL1T_09_LTA OF PICS_OUT[571] (RADIX := Decimal);
		PICS_O_WA_CL1T_09_LTR OF PICS_OUT[572] (RADIX := Decimal);
		PICS_O_WA_CL1T_20_ALM OF PICS_OUT[573] (RADIX := Decimal);
		PICS_O_WA_CL1T_20_LTA OF PICS_OUT[574] (RADIX := Decimal);
		PICS_O_WA_CL1T_20_LTR OF PICS_OUT[575] (RADIX := Decimal);
		PICS_O_WA_CL2T_02_ALM OF PICS_OUT[576] (RADIX := Decimal);
		PICS_O_WA_CL2T_02_LTA OF PICS_OUT[577] (RADIX := Decimal);
		PICS_O_WA_CL2T_02_LTR OF PICS_OUT[578] (RADIX := Decimal);
		PICS_O_WA_CL2T_05_ALM OF PICS_OUT[579] (RADIX := Decimal);
		PICS_O_WA_CL2T_05_LTA OF PICS_OUT[580] (RADIX := Decimal);
		PICS_O_WA_CL2T_05_LTR OF PICS_OUT[581] (RADIX := Decimal);
		PICS_O_WA_CL3T_03_ALM OF PICS_OUT[582] (RADIX := Decimal);
		PICS_O_WA_CL3T_03_LTA OF PICS_OUT[583] (RADIX := Decimal);
		PICS_O_WA_CL3T_03_LTR OF PICS_OUT[584] (RADIX := Decimal);
		PICS_O_WA_MCP_01_ALM OF PICS_OUT[585] (RADIX := Decimal);
		PICS_O_WA_MCP_01_LTA OF PICS_OUT[586] (RADIX := Decimal);
		PICS_O_WA_MCP_01_LTR OF PICS_OUT[587] (RADIX := Decimal);
		PICS_O_WA_MCP_02_ALM OF PICS_OUT[588] (RADIX := Decimal);
		PICS_O_WA_MCP_02_LTA OF PICS_OUT[589] (RADIX := Decimal);
		PICS_O_WA_MCP_02_LTR OF PICS_OUT[590] (RADIX := Decimal);
		PICS_O_WA_MCP_03_ALM OF PICS_OUT[591] (RADIX := Decimal);
		PICS_O_WA_MCP_03_LTA OF PICS_OUT[592] (RADIX := Decimal);
		PICS_O_WA_MCP_03_LTR OF PICS_OUT[593] (RADIX := Decimal);
		PICS_O_WA_MCP_16_ALM OF PICS_OUT[723] (RADIX := Decimal);
		PICS_O_WA_MCP_16_LTA OF PICS_OUT[725] (RADIX := Decimal);
		PICS_O_WA_MCP_16_LTR OF PICS_OUT[724] (RADIX := Decimal);
		PICS_O_WA_MCP_BM1_ALM OF PICS_OUT[594] (RADIX := Decimal);
		PICS_O_WA_MCP_BM1_LTA OF PICS_OUT[595] (RADIX := Decimal);
		PICS_O_WA_MCP_BM1_LTR OF PICS_OUT[596] (RADIX := Decimal);
		PICS_O_WA_O2T_06_ALM OF PICS_OUT[597] (RADIX := Decimal);
		PICS_O_WA_O2T_06_LTA OF PICS_OUT[598] (RADIX := Decimal);
		PICS_O_WA_O2T_06_LTR OF PICS_OUT[599] (RADIX := Decimal);
		PICS_O_WA_O2T_18_ALM OF PICS_OUT[600] (RADIX := Decimal);
		PICS_O_WA_O2T_18_LTA OF PICS_OUT[601] (RADIX := Decimal);
		PICS_O_WA_O2T_18_LTR OF PICS_OUT[602] (RADIX := Decimal);
		PICS_O_WA_O4T_10_ALM OF PICS_OUT[603] (RADIX := Decimal);
		PICS_O_WA_O4T_10_LTA OF PICS_OUT[604] (RADIX := Decimal);
		PICS_O_WA_O4T_10_LTR OF PICS_OUT[605] (RADIX := Decimal);
		PLC_101 : PLC (ExternalAccess := Read Only) := [[1141987,1000,1000],[1141987,1000,1000],[7324,7425,7326,7336,7361,7318,7418,7312,7314,7300],27000,24000,7
				,0,0,2,0,0,0,0,8,0];
		PLC_MEM_MSG_DEST : INT[29] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		PLC_MEM_MSG_SRC : SINT[12] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0,0,0];
		Redundancy_Status : Redundancy_Status (ExternalAccess := Read Only) := [4,0,0,4,0,0,0,0,1];
		RESET_STATS_REQ : DINT (Description := "Reset Stats Request",
		            RADIX := Decimal) := 0;
		REV_VFD_TMR : TIMER[15]  := [[2167355,500,0],[0,500,0],[2167355,500,0],[0,500,0],[2167355,500,0],[0,500,0],[2167355,500,0],[1866305,500,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,10000,0]];
		R_CALC_BT_CONST_BTx : BTx (ExternalAccess := Read Only) := [2.50000000e+000,3,-3,-1,1,1,0];
		R_CALC_BT_CONST_MTRx : MTRx (ExternalAccess := Read Only) := [0,0,0,0,0];
		R_CALC_BT_CONST_PP2S : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 0;
		R_CALC_BT_CONST_RANGE : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 3;
		R_CALC_DIV_ACT_CONST : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 6;
		R_CALC_DIV_ACT_CONST_ARY : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 0;
		R_CALC_DIV_ACT_CONST_BIT : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 6;
		R_CALC_DIV_AC_CNTRL : CONTROL (ExternalAccess := Read Only) := [-1610612736,64,64];
		R_CALC_DIV_AC_MASK : DINT[2] (RADIX := Decimal,
		            ExternalAccess := Read Only) := [1048448,0];
		R_CALC_DIV_AC_NDX : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 13;
		R_CALC_DIV_EXT_DELAY : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 0;
		R_CALC_DIV_TC_CNT_PRE : DINT (RADIX := Decimal,
		            ExternalAccess := Read Only) := 13;
		R_CALC_MTR_CONST_MTR : MTR (ExternalAccess := Read Only) := [[0,8000,0],[0,500,0],[851484,1000,0],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,0,0,0,0,0,[0,0,0]];
		R_CALC_MTR_CONST_MTRx : MTRx (ExternalAccess := Read Only) := [200,0,24,0,12];
		R_CALC_PE_CONST_MTRx : MTRx (ExternalAccess := Read Only) := [200,0,24,0,12];
		R_CALC_PE_CONST_PE : PE (ExternalAccess := Read Only) := [[0,5000,0],[266356,100,100],[851484,100,0],0,0];
		R_CALC_SPACER_CONST_BTx : BTx (ExternalAccess := Read Only) := [2.00000000e+000,0,0,0,0,0,0];
		R_CALC_SPACER_CONST_MTR : MTR (ExternalAccess := Read Only) := [[0,8000,0],[0,500,0],[851484,0,0],[0,1000,0],[0,200,0],[0,600,0],[0,1000,0],0,0,4456462,0,0,0,0,0,[0,0,0]];
		R_CALC_SPACER_CONST_MTR1x : MTRx (ExternalAccess := Read Only) := [200,0,24,0,12];
		R_CALC_SPACER_CONST_MTR2x : MTRx (ExternalAccess := Read Only) := [200,0,24,0,12];
		R_CALC_T_CONST_BTx : BTx (ExternalAccess := Read Only) := [0.00000000e+000,0,0,0,0,0,0];
		R_MSG_TO_UL : MSG_TO_UL_RTN (ExternalAccess := Read Only) := [[0,0,0],0,528,0];
		Status : STATUS (ExternalAccess := Read Only) := [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,4259847,4325383,524295,4128775,655361,4063239,3538951,1245196,5111823
				,131079,5111822,2883591,655361,5111823,5111822,1245191,3538951,4063239,4128775,524295,1179663
				,983042,655367,4915210,4849673,655361,5046284,655361,3145730,1048579,1966084,3407877,3342342,720902
				,4587526,2621447,1835016,2818050,2031626,3276809,393227,458763,1245196,2293773,4456462,3932175
				,5177351,5242893,655361,3145730,1048579,1966084,3407877,5373954,3342342,720902,2621447,2818050
				,2490374,1703943,1638407,4521991,2949122,2293773,2031626,4456462,3932175,1,2,3,4,655361,3145730,1048579
				,1900551,262149,2555914,3997711,4390926,3801101,3866637,2359309,5308429,327693,2228238,4653070
				,2424842,196623,851979,1,2,3,4,5,6,7,8,9,10,11,12,13,14,655361,1966084,1048579,3211267,2752518,4587526,4456462
				,65551,2097158,0,2621447,720902,655361,3145730,3080206,2031625,131079,5111823,2293773,655361,3145730
				,1048579,1966084,3407877,3342342,720902,2621447,2818050,2293773,2031626,4456462,3932175,2949122
				,655361,1048579,2162691,1966084,3342342,720902,1769479,4521991,589831,2818050,3407877,2949122
				,2293773,4456462,3932175,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,655361,2949122,3145730,1048579,1966084,3407877
				,3342342,720902,1572871,1507335,4521991,3014663,2818050,2293773,4784142,4718607,1,2,3];
		SYS : SYS[20] (ExternalAccess := Read Only) := [[[[0,300000,0],1],[720902,[1569609,300000,0],[0,300000,0],[3729947,300000,0],[3536503,300000,0],[1971129,300000,0],[566296
				,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],0,0,0,2,0]],[[[0,300000,0],1],[4456462,[0,300000,0],[0,300000
				,0],[3729677,300000,0],[1578989,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000
				,0],0,0,0,8,0]],[[[539038297,300000,300000],0],[65551,[590439,300000,0],[0,300000,0],[3729947,300000,0],[618219,300000,0
				],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[891519,300000,0],[0,300000,0],0,0,0,-128,0]],[[[0,300000,0],0],[4456462
				,[0,300000,0],[0,300000,0],[3729737,300000,0],[1579019,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000
				,0],[1971159,300000,0],[0,300000,0],0,0,0,-128,0]],[[[0,300000,0],0],[65551,[1109350,300000,0],[0,300000,0],[3729707,300000,0
				],[1579019,300000,0],[0,300000,0],[1095430,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],[0,300000,0],16,0,0,0
				,0]],[[[538639838,300000,300000],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[538639328,300000,300000
				],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[-1072599563,300000,0],7],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[538636269,300000,300000],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,300000
				,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[540549674,300000,300000],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0
				,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,300000,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[538700320,300000
				,300000],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[1777329,300000,21510],1],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,300000,0],25],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[538636781
				,300000,300000],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,0,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0
				],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,0,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,0,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0
				,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]],[[[0,0,0],0],[0,[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0,0,0,0,0]]];
		S_ATR : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_BDS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_BM1_06_PE1_JAM OF S_PE[0] (Description := "MTR/BM1-06 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_06_PE1_JAM1 OF S_PE[0] (Description := "MTR/BM1-06 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_06_PE2_OH OF S_OH[0] (Description := "MTR/BM1-06 PE-B Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_06_PE3_OH OF S_OH[0] (Description := "MTR/BM1-06 PE3 Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_07_PE_JAM OF S_PE[1] (Description := "MTR/BM1-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_08_PE_JAM OF S_PE[2] (Description := "MTR/BM1-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_09_PE_JAM OF S_PE[3] (Description := "MTR/BM1-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_10_PE_JAM OF S_PE[4] (Description := "MTR/BM1-10 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_11_PE_JAM OF S_PE[5] (Description := "MTR/BM1-11 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_12_PE_JAM OF S_PE[6] (Description := "MTR/BM1-12 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_13_PE_JAM OF S_PE[7] (Description := "MTR/BM1-13 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_13_THRU OF S_THRU[8] (Description := "MTR/BM1-13 Throughput Count",
		            RADIX := Decimal);
		S_BM1_14_PE1_JAM OF S_PE[9] (Description := "MTR/BM1-14 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_14_PE1_JAM1 OF S_PE[9] (Description := "MTR/BM1-14 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_14_PE2_JAM OF S_PE[8] (Description := "MTR/BM1-14 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_14_PE2_JAM1 OF S_PE[8] (Description := "MTR/BM1-14 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_15_PE_JAM OF S_PE[10] (Description := "MTR/BM1-15 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_16_PE_JAM OF S_PE[11] (Description := "MTR/BM1-16 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_17_PE_JAM OF S_PE[12] (Description := "MTR/BM1-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_18_PE_JAM OF S_PE[13] (Description := "MTR/BM1-18 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_19_PE1_JAM OF S_PE[14] (Description := "MTR/BM1-19 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_19_PE1_JAM1 OF S_PE[14] (Description := "MTR/BM1-19 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_19_PE2_OH OF S_OH[1] (Description := "MTR/BM1-19 PE-B Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_19_PE3_OH OF S_OH[1] (Description := "MTR/BM1-19 PE3 Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_20_PE_JAM OF S_PE[15] (Description := "MTR/BM1-20 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_21_PE_JAM OF S_PE[16] (Description := "MTR/BM1-21 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_22_PE_JAM OF S_PE[17] (Description := "MTR/BM1-22 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE1_JAM OF S_PE[20] (Description := "MTR/BM1-23 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE1_JAM1 OF S_PE[20] (Description := "MTR/BM1-23 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE2_JAM OF S_PE[19] (Description := "MTR/BM1-23 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE2_JAM1 OF S_PE[19] (Description := "MTR/BM1-23 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE3_JAM OF S_PE[18] (Description := "MTR/BM1-23 PE-C Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_23_PE3_JAM1 OF S_PE[18] (Description := "MTR/BM1-23 PE3 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_24_PE_JAM OF S_PE[21] (Description := "MTR/BM1-24 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_25_PE_JAM OF S_PE[22] (Description := "MTR/BM1-25 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_26_PE_JAM OF S_PE[23] (Description := "MTR/BM1-26 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_26_THRU OF S_THRU[7] (Description := "MTR/BM1-26 Throughput Count",
		            RADIX := Decimal);
		S_BM1_27_PE1_JAM OF S_PE[25] (Description := "MTR/BM1-27 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_27_PE1_JAM1 OF S_PE[25] (Description := "MTR/BM1-27 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_27_PE2_JAM OF S_PE[24] (Description := "MTR/BM1-27 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_27_PE2_JAM1 OF S_PE[24] (Description := "MTR/BM1-27 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_28_PE1_JAM OF S_PE[27] (Description := "MTR/BM1-28 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_28_PE1_JAM1 OF S_PE[27] (Description := "MTR/BM1-28 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_28_PE2_JAM OF S_PE[26] (Description := "MTR/BM1-28 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_28_PE2_JAM1 OF S_PE[26] (Description := "MTR/BM1-28 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_29_PE1_JAM OF S_PE[29] (Description := "MTR/BM1-29 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_29_PE1_JAM1 OF S_PE[29] (Description := "MTR/BM1-29 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_29_PE2_JAM OF S_PE[28] (Description := "MTR/BM1-29 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_29_PE2_JAM1 OF S_PE[28] (Description := "MTR/BM1-29 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE1_JAM OF S_PE[31] (Description := "MTR/BM1-30 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE1_JAM1 OF S_PE[31] (Description := "MTR/BM1-30 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE2_OH OF S_OH[2] (Description := "MTR/BM1-30 PE-B Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE3_JAM OF S_PE[30] (Description := "MTR/BM1-30 PE-C Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE3_JAM1 OF S_PE[30] (Description := "MTR/BM1-30 PE3 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_30_PE3_OH OF S_OH[2] (Description := "MTR/BM1-30 PE3 Overheight Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_31_PE_JAM OF S_PE[32] (Description := "MTR/BM1-31 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_32_PE_JAM OF S_PE[33] (Description := "MTR/BM1-32 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_33_PE_JAM OF S_PE[34] (Description := "MTR/BM1-33 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_34_PE_JAM OF S_PE[35] (Description := "MTR/BM1-34 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_35_PE_JAM OF S_PE[36] (Description := "MTR/BM1-35 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_36_PE_JAM OF S_PE[37] (Description := "MTR/BM1-36 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_37_PE_JAM OF S_PE[38] (Description := "MTR/BM1-37 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_BM1_38_PE_JAM OF S_PE[39] (Description := "MTR/BM1-38 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_12_PE_JAM OF S_PE[60] (Description := "MTR/C2T-12 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_13_PE_JAM OF S_PE[59] (Description := "MTR/C2T-13 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_14_PE_JAM OF S_PE[58] (Description := "MTR/C2T-14 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_15_PE_JAM OF S_PE[57] (Description := "MTR/C2T-15 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_16_PE_JAM OF S_PE[56] (Description := "MTR/C2T-16 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_C2T_17_PE_JAM OF S_PE[55] (Description := "MTR/C2T-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL12T_35_PE_JAM OF S_PE[142] (Description := "MTR/CL12T-35 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL12T_36_PE_JAM OF S_PE[141] (Description := "MTR/CL12T-36 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL12T_36_THRU OF S_THRU[9] (Description := "MTR/CL12T-36 Throughput Count",
		            RADIX := Decimal);
		S_CL1T_01_PE_JAM OF S_PE[124] (Description := "MTR/CL1T-01 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_02_PE_JAM OF S_PE[123] (Description := "MTR/CL1T-02 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_03_PE_JAM OF S_PE[122] (Description := "MTR/CL1T-03 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_03_THRU OF S_THRU[1] (Description := "MTR/CL1T-03 Throughput Count",
		            RADIX := Decimal);
		S_CL1T_04_PE_JAM OF S_PE[121] (Description := "MTR/CL1T-04 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_05_PE_JAM OF S_PE[120] (Description := "MTR/CL1T-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_06_PE_JAM OF S_PE[119] (Description := "MTR/CL1T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_07_PE_JAM OF S_PE[118] (Description := "MTR/CL1T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_08_PE_JAM OF S_PE[117] (Description := "MTR/CL1T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_09_PE_JAM OF S_PE[116] (Description := "MTR/CL1T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_10_PE_JAM OF S_PE[115] (Description := "MTR/CL1T-10 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_11_PE_JAM OF S_PE[114] (Description := "MTR/CL1T-11 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_12_PE_JAM OF S_PE[113] (Description := "MTR/CL1T-12 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_13_PE_JAM OF S_PE[112] (Description := "MTR/CL1T-13 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_14_PE_JAM OF S_PE[111] (Description := "MTR/CL1T-14 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_15_PE_JAM OF S_PE[110] (Description := "MTR/CL1T-15 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_16_PE_JAM OF S_PE[109] (Description := "MTR/CL1T-16 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_17_PE_JAM OF S_PE[108] (Description := "MTR/CL1T-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_18_PE_JAM OF S_PE[107] (Description := "MTR/CL1T-18 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_19_PE_JAM OF S_PE[106] (Description := "MTR/CL1T-19 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_20_PE_JAM OF S_PE[105] (Description := "MTR/CL1T-20 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_21_PE_JAM OF S_PE[104] (Description := "MTR/CL1T-21 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_23_PE_JAM OF S_PE[103] (Description := "MTR/CL1T-23 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_24_PE_JAM OF S_PE[102] (Description := "MTR/CL1T-24 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_26_PE1_JAM OF S_PE[97] (Description := "MTR/CL1T-26 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_26_PE1_JAM1 OF S_PE[100] (Description := "MTR/CL1T-26 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_26_PE2_JAM OF S_PE[98] (Description := "MTR/CL1T-26 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL1T_26_PE2_JAM1 OF S_PE[101] (Description := "MTR/CL1T-26 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_01_PE_JAM OF S_PE[69] (Description := "MTR/CL2T-01 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_02_PE_JAM OF S_PE[68] (Description := "MTR/CL2T-02 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_03_PE_JAM OF S_PE[67] (Description := "MTR/CL2T-03 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_03_THRU OF S_THRU[2] (Description := "MTR/CL2T-03 Throughput Count",
		            RADIX := Decimal);
		S_CL2T_04_PE_JAM OF S_PE[66] (Description := "MTR/CL2T-04 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_05_PE_JAM OF S_PE[65] (Description := "MTR/CL2T-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_06_PE_JAM OF S_PE[64] (Description := "MTR/CL2T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_07_PE_JAM OF S_PE[63] (Description := "MTR/CL2T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_08_PE_JAM OF S_PE[62] (Description := "MTR/CL2T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL2T_09_PE_JAM OF S_PE[61] (Description := "MTR/CL2T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_01_PE_JAM OF S_PE[77] (Description := "MTR/CL3T-01 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_02_PE_JAM OF S_PE[76] (Description := "MTR/CL3T-02 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_03_PE_JAM OF S_PE[75] (Description := "MTR/CL3T-03 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_03_THRU OF S_THRU[3] (Description := "MTR/CL3T-03 Throughput Count",
		            RADIX := Decimal);
		S_CL3T_04_PE_JAM OF S_PE[74] (Description := "MTR/CL3T-04 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_05_PE_JAM OF S_PE[73] (Description := "MTR/CL3T-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_06_PE_JAM OF S_PE[72] (Description := "MTR/CL3T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_07_PE_JAM OF S_PE[71] (Description := "MTR/CL3T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CL3T_08_PE_JAM OF S_PE[70] (Description := "MTR/CL3T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_CTX : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_ETD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_HCD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_HSD : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_HX1T_06_PE_JAM OF S_PE[129] (Description := "MTR/HX1T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_HX1T_07_PE_JAM OF S_PE[128] (Description := "MTR/HX1T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_HX1T_08_PE_JAM OF S_PE[127] (Description := "MTR/HX1T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_HX1T_09_PE_JAM OF S_PE[126] (Description := "MTR/HX1T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_HX1T_10A_PE_JAM OF S_PE[99] (Description := "MTR/HX1T-10A PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_HX1T_10_PE_JAM OF S_PE[125] (Description := "MTR/HX1T-10 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_L3 : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_MISC : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_MVI : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_O2T_04_PE_JAM OF S_PE[54] (Description := "MTR/O2T-04 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_05_PE_JAM OF S_PE[53] (Description := "MTR/O2T-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_06_PE_JAM OF S_PE[52] (Description := "MTR/O2T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_07_PE_JAM OF S_PE[51] (Description := "MTR/O2T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_08_PE_JAM OF S_PE[50] (Description := "MTR/O2T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_09_PE_JAM OF S_PE[49] (Description := "MTR/O2T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_10_PE_JAM OF S_PE[48] (Description := "MTR/O2T-10 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_11_PE_JAM OF S_PE[47] (Description := "MTR/O2T-11 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_12_PE_JAM OF S_PE[46] (Description := "MTR/O2T-12 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_13_PE_JAM OF S_PE[45] (Description := "MTR/O2T-13 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_14_PE_JAM OF S_PE[44] (Description := "MTR/O2T-14 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_14_THRU OF S_THRU[0] (Description := "MTR/O2T-14 Throughput Count",
		            RADIX := Decimal);
		S_O2T_15_PE_JAM OF S_PE[43] (Description := "MTR/O2T-15 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_16_PE_JAM OF S_PE[42] (Description := "MTR/O2T-16 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_17_PE_JAM OF S_PE[41] (Description := "MTR/O2T-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O2T_18_PE_JAM OF S_PE[40] (Description := "MTR/O2T-18 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O3T_17_PE_JAM OF S_PE[140] (Description := "MTR/O3T-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O3T_18_PE_JAM OF S_PE[139] (Description := "MTR/O3T-18 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O3T_19_PE_JAM OF S_PE[138] (Description := "MTR/O3T-19 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O3T_20_PE_JAM OF S_PE[137] (Description := "MTR/O3T-20 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_05_PE_JAM OF S_PE[87] (Description := "MTR/O4T-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_06_PE_JAM OF S_PE[86] (Description := "MTR/O4T-06 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_07_PE_JAM OF S_PE[85] (Description := "MTR/O4T-07 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_08_PE_JAM OF S_PE[84] (Description := "MTR/O4T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_09_PE_JAM OF S_PE[83] (Description := "MTR/O4T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_10_PE1_JAM OF S_PE[78] (Description := "MTR/O4T-10 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_10_PE1_JAM1 OF S_PE[81] (Description := "MTR/O4T-10 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_10_PE2_JAM OF S_PE[79] (Description := "MTR/O4T-10 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_10_PE2_JAM1 OF S_PE[82] (Description := "MTR/O4T-10 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_11_PE_JAM OF S_PE[80] (Description := "MTR/O4T-11 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_12_PE_JAM OF S_PE[79] (Description := "MTR/O4T-12 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_13_PE_JAM OF S_PE[78] (Description := "MTR/O4T-13 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_13_THRU OF S_THRU[4] (Description := "MTR/O4T-13 Throughput Count",
		            RADIX := Decimal);
		S_O4T_16_PE_JAM OF S_PE[136] (Description := "MTR/O4T-16 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_17_PE_JAM OF S_PE[135] (Description := "MTR/O4T-17 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_18_PE_JAM OF S_PE[134] (Description := "MTR/O4T-18 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_19_PE_JAM OF S_PE[133] (Description := "MTR/O4T-19 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_20_PE_JAM OF S_PE[132] (Description := "MTR/O4T-20 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_21_PE_JAM OF S_PE[131] (Description := "MTR/O4T-21 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_O4T_22_PE_JAM OF S_PE[130] (Description := "MTR/O4T-22 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_OH : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_OL : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_P : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_PE : DINT[144] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0];
		S_PLC : DINT[11] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [26272,7440,0,0,0,0,13086,0,0,0,0];
		S_PLC_101_CNTRL_FAULT_CODE OF S_PLC[5] (Description := "CNTRL/PLC-101 Controller Fault Code",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_CNTRL_FAULT_TYPE OF S_PLC[4] (Description := "CNTRL/PLC-101 Controller Fault Type",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_LAST_SCAN OF S_PLC[1] (Description := "CNTRL/PLC-101 Last Scan Time",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_MAX_SCAN OF S_PLC[0] (Description := "CNTRL/PLC-101 Max Scan Time",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_MEM_FREE OF S_PLC[8] (Description := "CNTRL/PLC-101 Memory Free",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_MEM_TOT OF S_PLC[7] (Description := "CNTRL/PLC-101 Total Memory",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_MEM_USED OF S_PLC[9] (Description := "CNTRL/PLC-101 Memory Used",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_PRG_FAULT_CODE OF S_PLC[3] (Description := "CNTRL/PLC-101 Program Fault Code",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_PRG_FAULT_TYPE OF S_PLC[2] (Description := "CNTRL/PLC-101 Program Fault Type",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_PLC_101_SW_VER OF S_PLC[6] (Description := "CNTRL/PLC-101 Software Version",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_T5T_08_PE_JAM OF S_PE[93] (Description := "MTR/T5T-08 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_T5T_09_PE_JAM OF S_PE[92] (Description := "MTR/T5T-09 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_THRU : DINT[20] (RADIX := Decimal) := [0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0];
		S_VS : DINT[10] (Description := "HMI Base Tag Array",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := [0,0,0,0,0,0,0,0,0,0];
		S_XO1_01_HSD_CYCLS OF S_HSD[6] (Description := "HSD/XO1-01 Cycle Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_HSD_FLTS OF S_HSD[4] (Description := "HSD/XO1-01 Faults Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_HSD_LINE_FLTS OF S_HSD[5] (Description := "HSD/XO1-01 Line Faults",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_HSD_VERIFIED_DIV OF S_HSD[7] (Description := "HSD/XO1-01 Verified Divert",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_PE1_JAM OF S_PE[87] (Description := "MTR/XO1-01 PE-A Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_PE1_JAM1 OF S_PE[90] (Description := "MTR/XO1-01 PE1 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_PE2_JAM OF S_PE[88] (Description := "MTR/XO1-01 PE-B Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_PE2_JAM1 OF S_PE[91] (Description := "MTR/XO1-01 PE2 Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_01_PE_JAM OF S_PE[87] (Description := "MTR/XO1-01 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_02_PE_JAM OF S_PE[89] (Description := "MTR/XO1-02 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_03_PE_JAM OF S_PE[88] (Description := "MTR/XO1-03 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_03_THRU OF S_THRU[6] (Description := "MTR/XO1-03 Throughput Count",
		            RADIX := Decimal);
		S_XO1_HSD_CYCLS OF S_HSD[6] (Description := "HSD/XO1- Cycle Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_HSD_FLTS OF S_HSD[4] (Description := "HSD/XO1- Faults Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_HSD_LINE_FLTS OF S_HSD[5] (Description := "HSD/XO1- Line Faults",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO1_HSD_VERIFIED_DIV OF S_HSD[7] (Description := "HSD/XO1- Verified Divert",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_01_HSD_CYCLS OF S_HSD[2] (Description := "HSD/XO2-01 Cycle Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_01_HSD_FLTS OF S_HSD[0] (Description := "HSD/XO2-01 Faults Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_01_HSD_LINE_FLTS OF S_HSD[1] (Description := "HSD/XO2-01 Line Faults",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_01_HSD_VERIFIED_DIV OF S_HSD[3] (Description := "HSD/XO2-01 Verified Divert",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_01_PE_JAM OF S_PE[98] (Description := "MTR/XO2-01 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_02_PE_JAM OF S_PE[97] (Description := "MTR/XO2-02 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_03_PE_JAM OF S_PE[96] (Description := "MTR/XO2-03 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_04_PE_JAM OF S_PE[95] (Description := "MTR/XO2-04 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_05_PE_JAM OF S_PE[94] (Description := "MTR/XO2-05 PE Jam Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_05_THRU OF S_THRU[5] (Description := "MTR/XO2-05 Throughput Count",
		            RADIX := Decimal);
		S_XO2_HSD_CYCLS OF S_HSD[2] (Description := "HSD/XO2- Cycle Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_HSD_FLTS OF S_HSD[0] (Description := "HSD/XO2- Faults Count",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_HSD_LINE_FLTS OF S_HSD[1] (Description := "HSD/XO2- Line Faults",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		S_XO2_HSD_VERIFIED_DIV OF S_HSD[3] (Description := "HSD/XO2- Verified Divert",
		            RADIX := Decimal,
		            ExternalAccess := Read Only);
		T5T OF SYS[8] (ExternalAccess := Read Only);
		T5T_08_BT OF BTP[12] (ExternalAccess := Read Only);
		T5T_08_BTx OF BTx[12] (ExternalAccess := Read Only);
		T5T_08_LEN OF LEN[3] (ExternalAccess := Read Only);
		T5T_08_LENx OF LENx[3] (ExternalAccess := Read Only);
		T5T_08_MTR OF MTR[86] (ExternalAccess := Read Only);
		T5T_08_MTRx OF MTRx[86] (ExternalAccess := Read Only);
		T5T_08_PE OF PE[93] (ExternalAccess := Read Only);
		T5T_08_VFD OF VFD[86] (ExternalAccess := Read Only);
		T5T_09_BT OF BTP[13] (ExternalAccess := Read Only);
		T5T_09_BTx OF BTx[13] (ExternalAccess := Read Only);
		T5T_09_EPB_ONS OF EPB_ONS[70] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		T5T_09_MRG OF MRG[3] (ExternalAccess := Read Only);
		T5T_09_MRGx OF MRGx[3] (ExternalAccess := Read Only);
		T5T_09_MTR OF MTR[85] (ExternalAccess := Read Only);
		T5T_09_MTRx OF MTRx[85] (ExternalAccess := Read Only);
		T5T_09_PE OF PE[92] (ExternalAccess := Read Only);
		T5T_09_VFD OF VFD[85] (ExternalAccess := Read Only);
		T5_10ZZ_MTRx OF MTRx[142] (ExternalAccess := Read Only);
		VFD : VFD[150] (ExternalAccess := Read Only) := [[[-1609470297,5000,5010],1,0],[[-1609470297,5000,5010],1,0],[[-1609470297,5000,5010],1,0],[[-1609470297,5000,5010
				],1,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0
				,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470296
				,5000,5010],1,0],[[-1609470296,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295
				,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295
				,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293
				,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293
				,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293
				,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295
				,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295,5000,5010],1,0],[[-1609470295
				,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[0,0,0],0,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[0,0,0
				],0,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470293,5000,5010
				],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010
				],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010
				],1,0],[[-1609470294,5000,5010],1,0],[[-1609470294,5000,5010],1,0],[[-1609470293,5000,5010],1,0],[[-1609470293,5000,5010
				],1,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0],[[0,0,0],0,0]];
		X02_02_EPB_ONS OF EPB_ONS[70] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		X02_05_EPB_ONS OF EPB_ONS[71] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		XO1 OF SYS[15] (ExternalAccess := Read Only);
		XO1_01_EPB_ONS OF EPB_ONS[69] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		XO1_01_MTR OF MTR[84] (ExternalAccess := Read Only);
		XO1_01_MTRx OF MTRx[84] (ExternalAccess := Read Only);
		XO1_01_PE OF PE[90] (ExternalAccess := Read Only);
		XO1_01_PE1 OF PE[90] (ExternalAccess := Read Only);
		XO1_01_PE2 OF PE[91] (ExternalAccess := Read Only);
		XO1_01_VFD OF VFD[84] (ExternalAccess := Read Only);
		XO1_02_MTR OF MTR[83] (ExternalAccess := Read Only);
		XO1_02_MTRx OF MTRx[83] (ExternalAccess := Read Only);
		XO1_02_PE OF PE[89] (ExternalAccess := Read Only);
		XO1_02_VFD OF VFD[83] (ExternalAccess := Read Only);
		XO1_03_MTR OF MTR[82] (ExternalAccess := Read Only);
		XO1_03_MTRx OF MTRx[82] (ExternalAccess := Read Only);
		XO1_03_PE OF PE[88] (ExternalAccess := Read Only);
		XO1_03_VFD OF VFD[82] (ExternalAccess := Read Only);
		XO1_HSD OF DIV[1] (ExternalAccess := Read Only);
		XO1_HSDx OF DIVx[1] (ExternalAccess := Read Only);
		XO1_TD : Non_Tracked_Div  := [0,0,[[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0]],0,0,0,0];
		XO2 OF SYS[9] (ExternalAccess := Read Only);
		XO2_01_MTR OF MTR[91] (ExternalAccess := Read Only);
		XO2_01_MTRx OF MTRx[91] (ExternalAccess := Read Only);
		XO2_01_PE OF PE[98] (ExternalAccess := Read Only);
		XO2_01_VFD OF VFD[91] (ExternalAccess := Read Only);
		XO2_02_EPB_ONS OF EPB_ONS[71] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		XO2_02_MTR OF MTR[90] (ExternalAccess := Read Only);
		XO2_02_MTRx OF MTRx[90] (ExternalAccess := Read Only);
		XO2_02_PE OF PE[97] (ExternalAccess := Read Only);
		XO2_02_VFD OF VFD[90] (ExternalAccess := Read Only);
		XO2_03_MTR OF MTR[89] (ExternalAccess := Read Only);
		XO2_03_MTRx OF MTRx[89] (ExternalAccess := Read Only);
		XO2_03_PE OF PE[96] (ExternalAccess := Read Only);
		XO2_03_VFD OF VFD[89] (ExternalAccess := Read Only);
		XO2_04_BT OF BTP[15] (ExternalAccess := Read Only);
		XO2_04_BTx OF BTx[15] (ExternalAccess := Read Only);
		XO2_04_LEN OF LEN[4] (ExternalAccess := Read Only);
		XO2_04_LENx OF LENx[4] (ExternalAccess := Read Only);
		XO2_04_MTR OF MTR[88] (ExternalAccess := Read Only);
		XO2_04_MTRx OF MTRx[88] (ExternalAccess := Read Only);
		XO2_04_PE OF PE[95] (ExternalAccess := Read Only);
		XO2_04_VFD OF VFD[88] (ExternalAccess := Read Only);
		XO2_05_BT OF BTP[14] (ExternalAccess := Read Only);
		XO2_05_BTx OF BTx[14] (ExternalAccess := Read Only);
		XO2_05_EPB_ONS OF EPB_ONS[72] (RADIX := Decimal,
		            ExternalAccess := Read Only);
		XO2_05_MRG OF MRG[4] (ExternalAccess := Read Only);
		XO2_05_MRGx OF MRGx[4] (ExternalAccess := Read Only);
		XO2_05_MTR OF MTR[87] (ExternalAccess := Read Only);
		XO2_05_MTRx OF MTRx[87] (ExternalAccess := Read Only);
		XO2_05_PE OF PE[94] (ExternalAccess := Read Only);
		XO2_05_VFD OF VFD[87] (ExternalAccess := Read Only);
		XO2_HSD OF DIV[0] (ExternalAccess := Read Only);
		XO2_HSDx OF DIVx[0] (ExternalAccess := Read Only);
		XO2_TD : Non_Tracked_Div  := [0,0,[[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'
				],0,0],[0,0,0,0,0,0,0,0,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00'],0,0]],0,0,0,0];
		zzzO_CS1_BM1_17_LTW : BOOL (RADIX := Decimal) := 0;
		zzzO_CS1_BM1_17_spbg : BOOL (RADIX := Decimal) := 0;
		zzz_add_pics_IO : BOOL (RADIX := Decimal) := 0;
		zzz_Emulate : BOOL (Description := "PICS, AM, and COM Stats",
		            RADIX := Decimal,
		            ExternalAccess := Read Only) := 1;
		zzz_Reverse_logic_needed : BOOL (Description := "BM1_13 No KSW. Needs editsBM1_13 No KSW. Needs edits",
		            RADIX := Decimal) := 0;
		MESSAGE_TO_UL : MESSAGE (ExternalAccess := Read Only,
		                       MessageType := CIP Data Table Write,
		                       RemoteElement := "PLC_TO_SMH",
		                       RequestedLength := 10,
		                       ConnectedFlag := 1,
		                       CommTypeCode := 0,
		                       LocalIndex := 0,
		                       LocalElement := "MSG_TO_UL[0]",
		                       CacheConnections := "TRUE");
		PLC_101_MEM_MSG : MESSAGE (ExternalAccess := Read Only,
		                         MessageType := CIP Generic,
		                         RequestedLength := 1,
		                         ConnectedFlag := 2,
		                         ConnectionPath := "1, 0",
		                         CommTypeCode := 0,
		                         ServiceCode := 16#0003,
		                         ObjectType := 16#0072,
		                         TargetObject := 1,
		                         AttributeNumber := 16#0000,
		                         LocalIndex := 0,
		                         LocalElement := "PLC_MEM_MSG_SRC[0]",
		                         DestinationTag := "PLC_MEM_MSG_DEST[0]",
		                         LargePacketUsage := No);
	END_TAG

	PROGRAM Controller_Fault_Handler (MAIN := "Controller_Fault_Handler",
	                                  MODE := 0,
	                                  DisableFlag := 0,
	                                  SynchronizeRedundancyDataAfterExecution := 0,
	                                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE Controller_Fault_Handler 
				RC: "****************************************************************************************************$N"
				    "This routine is the Controller Fault Handler. $N"
				    "If a major Controller Fault occurs, this routine will be called before the controller halts.$N"
				    "This routine essentially just captures the fault codes for display on the HMI, and turns on an HMI alarm.$N"
				    "****************************************************************************************************$N"
				    "";
				N: GSV(Program,THIS,MAJORFAULTRECORD,LAST_MAJOR_FAULT.Time_Low);
				RC: "Turn on an HMI alarm and copy the fault code and fault type to HMI display tags.";
				N: [OTL(F_PLC_101_CNTRL_MJR_FAULT) ,MOV(LAST_MAJOR_FAULT.Type,S_PLC_101_CNTRL_FAULT_TYPE) ,MOV(LAST_MAJOR_FAULT.Code,S_PLC_101_CNTRL_FAULT_CODE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM MainProgram (MAIN := "MainRoutine",
	                     FAULT := "Program_Fault_Handler",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     SynchronizeRedundancyDataAfterExecution := 1,
	                     UseAsFolder := 0)
		TAG
			zzC4_09_PE_POS_XITN : BOOL (Description := "no c4_09, only c4_08",
			            RADIX := Decimal) := 0;
			zzI_PE_C4_09 : BOOL (Description := "no c4_09, only c4_08",
			            RADIX := Decimal) := 0;
			zzI_PE_O4_04 : BOOL (Description := "no O4_04, only O4_03",
			            RADIX := Decimal) := 0;
			zzO4_04_PE_POS_XITN : BOOL (Description := "no O4_04, only O4_03",
			            RADIX := Decimal) := 0;
			zzzC4_09zz_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzC4_09zz_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzCS_CL12T_36_LTA_FLASH : BOOL (RADIX := Decimal) := 0;
			zzzCS_CL3T_03_LTA_FLASH : BOOL (RADIX := Decimal) := 0;
			zzzF_BM1_13_JOG_REVERSE : BOOL (Description := "Merge jog reverse fault. Needs to be created and sent to HMi team",
			            RADIX := Decimal) := 1;
			zzzF_CL3T_03_CS_E_STOP : BOOL (RADIX := Decimal) := 0;
			zzzF_CL3T_03_CS_E_STOP_RESET : BOOL (RADIX := Decimal) := 0;
			zzzHX1_10ZZ_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzHX1_10ZZ_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzHX_zz_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzHX_zz_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzO4T_23ZZ_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzO4T_23ZZ_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzO4_04zz_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzO4_04zz_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzO4_06ZZ_MTR_IM_ONS : BOOL (RADIX := Decimal) := 0;
			zzzO4_06ZZ_MTR_ON_TMR_DN : BOOL (RADIX := Decimal) := 0;
			zzzT5_10ZZ_MTR_IM_ONS : BOOL (Description := "zzz hold bit for IM ons",
			            RADIX := Decimal) := 0;
			zzzT5_10ZZ_MTR_ON_TMR_DN : BOOL (Description := "zzz hold for actual timer later",
			            RADIX := Decimal) := 0;
		END_TAG

		ROUTINE AA_Master_Resets 
				RC: "***********************************$N"
				    "***********************************$N"
				    "Reset Faults in the system.$N"
				    "***********************************$N"
				    "***********************************$N"
				    "";
				N: NOP();
				RC: "Reset Group Run Latches";
				N: NOP();
				N: OTU(BM1_A.MTR_GRP.RUN_LATCH);
				N: OTU(BM1_B.MTR_GRP.RUN_LATCH);
				N: OTU(BM1_C.MTR_GRP.RUN_LATCH);
				N: OTU(MCP_03.MTR_GRP.RUN_LATCH);
				N: OTU(C2T.MTR_GRP.RUN_LATCH);
				N: OTU(CL2T.MTR_GRP.RUN_LATCH);
				N: OTU(CL3T.MTR_GRP.RUN_LATCH);
				N: OTU(O4T_2.MTR_GRP.RUN_LATCH);
				N: OTU(T5T.MTR_GRP.RUN_LATCH);
				N: OTU(XO2.MTR_GRP.RUN_LATCH);
				N: OTU(CL1T.MTR_GRP.RUN_LATCH);
				N: OTU(HX1T.MTR_GRP.RUN_LATCH);
				N: OTU(O3T.MTR_GRP.RUN_LATCH);
				N: OTU(O4T.MTR_GRP.RUN_LATCH);
				N: OTU(CL12T.MTR_GRP.RUN_LATCH);
				N: OTU(XO1.MTR_GRP.RUN_LATCH);
				RC: "Reset BT Faults";
				N: NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: RES(BM1_14_BT.FAULT_TIMER)OTU(BM1_14_BT.FAULT_TIMER.DN)OTU(F_BM1_14_ENCODER_FAULT);
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: RES(O2T_10_BT.FAULT_TIMER)OTU(O2T_10_BT.FAULT_TIMER.DN)OTU(F_O2T_10_ENCODER_FAULT);
				N: RES(CL1T_26_BT.FAULT_TIMER)OTU(CL1T_26_BT.FAULT_TIMER.DN)OTU(F_CL1T_26_ENCODER_FAULT);
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: AFI()NOP();
				N: RES(O4T_10_BT.FAULT_TIMER)OTU(O4T_10_BT.FAULT_TIMER.DN)OTU(F_O4T_10_ENCODER_FAULT);
				N: AFI()NOP();
				N: RES(BM1_23_BT.FAULT_TIMER)OTU(BM1_23_BT.FAULT_TIMER.DN)OTU(F_BM1_23_ENCODER_FAULT);
				N: RES(O4T_20_BT.FAULT_TIMER)OTU(O4T_20_BT.FAULT_TIMER.DN)OTU(F_O4T_20_ENCODER_FAULT);
				N: RES(C4_09_BT.FAULT_TIMER)OTU(C4_09_BT.FAULT_TIMER.DN)OTU(F_C4_09_ENCODER_FAULT);
				N: RES(O4_04_BT.FAULT_TIMER)OTU(O4_04_BT.FAULT_TIMER.DN)OTU(F_O4_04_ENCODER_FAULT);
				N: AFI()NOP();
				RC: "Reset Jams";
				N: NOP();
				N: [RES(BM1_06_PE2.JAM_TMR) ,RES(BM1_06_PE1.JAM_TMR) ,RES(BM1_07_PE.JAM_TMR) ,RES(BM1_08_PE.JAM_TMR) ,RES(BM1_09_PE.JAM_TMR) ,RES(BM1_10_PE.JAM_TMR) ,RES(BM1_11_PE.JAM_TMR) ,RES(BM1_12_PE.JAM_TMR) ,RES(BM1_13_PE.JAM_TMR) ,RES(BM1_14_PE2.JAM_TMR) ,RES(BM1_14_PE1.JAM_TMR) ,RES(BM1_15_PE.JAM_TMR) ,RES(BM1_16_PE.JAM_TMR) ,RES(BM1_17_PE.JAM_TMR) ,RES(BM1_18_PE.JAM_TMR) ,RES(BM1_19_PE2.JAM_TMR) ,RES(BM1_19_PE1.JAM_TMR) ,RES(BM1_20_PE.JAM_TMR) ,RES(BM1_21_PE.JAM_TMR) ,RES(BM1_22_PE.JAM_TMR) ,RES(BM1_23_PE2.JAM_TMR) ,RES(BM1_23_PE1.JAM_TMR) ,RES(BM1_23_PE.JAM_TMR) ,RES(BM1_24_PE.JAM_TMR) ,RES(BM1_25_PE.JAM_TMR) ,RES(BM1_26_PE.JAM_TMR) ,RES(BM1_27_PE2.JAM_TMR) ,RES(BM1_27_PE1.JAM_TMR) ,RES(BM1_28_PE2.JAM_TMR) ,RES(BM1_28_PE1.JAM_TMR) ,RES(BM1_29_PE2.JAM_TMR) ,RES(BM1_29_PE1.JAM_TMR) ,RES(BM1_30_PE3.JAM_TMR) ,RES(BM1_30_PE2.JAM_TMR) ,RES(BM1_30_PE1.JAM_TMR) ,RES(BM1_34_PE.JAM_TMR) ,RES(BM1_35_PE.JAM_TMR) ,RES(BM1_36_PE.JAM_TMR) ,RES(BM1_37_PE.JAM_TMR) ,RES(BM1_38_PE.JAM_TMR) ,RES(O2T_18_PE.JAM_TMR) ,RES(O2T_17_PE.JAM_TMR) ,RES(O2T_16_PE.JAM_TMR) ,RES(O2T_15_PE.JAM_TMR) ,RES(O2T_14_PE.JAM_TMR) ,RES(O2T_13_PE.JAM_TMR) ,RES(O2T_12_PE.JAM_TMR) ,RES(O2T_11_PE.JAM_TMR) ,RES(O2T_10_PE.JAM_TMR) ,RES(O2T_09_PE.JAM_TMR) ,RES(O2T_08_PE.JAM_TMR) ,RES(O2T_07_PE.JAM_TMR) ,RES(O2T_06_PE.JAM_TMR) ,RES(O2T_05_PE.JAM_TMR) ,RES(O2T_04_PE.JAM_TMR) ,RES(C2T_17_PE.JAM_TMR) ,RES(C2T_16_PE.JAM_TMR) ,RES(C2T_15_PE.JAM_TMR) ,RES(C2T_14_PE.JAM_TMR) ,RES(C2T_13_PE.JAM_TMR) ,RES(C2T_12_PE.JAM_TMR) ,RES(CL2T_09_PE.JAM_TMR) ,RES(CL2T_08_PE.JAM_TMR) ,RES(CL2T_07_PE.JAM_TMR) ,RES(CL2T_06_PE.JAM_TMR) ,RES(CL2T_05_PE.JAM_TMR) ,RES(CL2T_04_PE.JAM_TMR) ,RES(CL2T_03_PE.JAM_TMR) ,RES(CL2T_02_PE.JAM_TMR) ,RES(CL2T_01_PE.JAM_TMR) ,RES(CL3T_08_PE.JAM_TMR) ,RES(CL3T_07_PE.JAM_TMR) ,RES(CL3T_06_PE.JAM_TMR) ,RES(CL3T_05_PE.JAM_TMR) ,RES(CL3T_04_PE.JAM_TMR) ,RES(CL3T_03_PE.JAM_TMR) ,RES(CL3T_02_PE.JAM_TMR) ,RES(CL3T_01_PE.JAM_TMR) ,RES(O4T_13_PE.JAM_TMR) ,RES(O4T_12_PE.JAM_TMR) ,RES(O4T_11_PE.JAM_TMR) ,RES(O4T_10_PE1.JAM_TMR) ,RES(O4T_10_PE2.JAM_TMR) ,RES(O4T_09_PE.JAM_TMR) ,RES(O4T_08_PE.JAM_TMR) ,RES(O4T_07_PE.JAM_TMR) ,RES(O4T_06_PE.JAM_TMR) ,RES(O4T_05_PE.JAM_TMR) ,RES(XO1_03_PE.JAM_TMR) ,RES(XO1_02_PE.JAM_TMR) ,RES(XO1_01_PE.JAM_TMR) ,RES(XO1_01_PE2.JAM_TMR) ,RES(T5T_09_PE.JAM_TMR) ,RES(T5T_08_PE.JAM_TMR) ,RES(XO2_05_PE.JAM_TMR) ,RES(XO2_04_PE.JAM_TMR) ,RES(XO2_03_PE.JAM_TMR) ,RES(XO2_02_PE.JAM_TMR) ,RES(XO2_01_PE.JAM_TMR) ,RES(CL1T_26_PE1.JAM_TMR) ,RES(CL1T_26_PE2.JAM_TMR) ,RES(CL1T_24_PE.JAM_TMR) ,RES(CL1T_23_PE.JAM_TMR) ,RES(CL1T_21_PE.JAM_TMR) ,RES(CL1T_20_PE.JAM_TMR) ,RES(CL1T_19_PE.JAM_TMR) ,RES(CL1T_18_PE.JAM_TMR) ,RES(CL1T_17_PE.JAM_TMR) ,RES(CL1T_16_PE.JAM_TMR) ,RES(CL1T_15_PE.JAM_TMR) ,RES(CL1T_14_PE.JAM_TMR) ,RES(CL1T_13_PE.JAM_TMR) ,RES(CL1T_12_PE.JAM_TMR) ,RES(CL1T_11_PE.JAM_TMR) ,RES(CL1T_10_PE.JAM_TMR) ,RES(CL1T_09_PE.JAM_TMR) ,RES(CL1T_08_PE.JAM_TMR) ,RES(CL1T_07_PE.JAM_TMR) ,RES(CL1T_06_PE.JAM_TMR) ,RES(CL1T_05_PE.JAM_TMR) ,RES(CL1T_04_PE.JAM_TMR) ,RES(CL1T_03_PE.JAM_TMR) ,RES(CL1T_02_PE.JAM_TMR) ,RES(CL1T_01_PE.JAM_TMR) ,RES(HX1T_10A_PE.JAM_TMR) ,RES(HX1T_10_PE.JAM_TMR) ,RES(HX1T_09_PE.JAM_TMR) ,RES(HX1T_08_PE.JAM_TMR) ,RES(HX1T_07_PE.JAM_TMR) ,RES(HX1T_06_PE.JAM_TMR) ,RES(O4T_22_PE.JAM_TMR) ,RES(O4T_21_PE.JAM_TMR) ,RES(O4T_20_PE.JAM_TMR) ,RES(O4T_19_PE.JAM_TMR) ,RES(O4T_18_PE.JAM_TMR) ,RES(O4T_17_PE.JAM_TMR) ,RES(O4T_16_PE.JAM_TMR) ,RES(O3T_20_PE.JAM_TMR) ,RES(O3T_19_PE.JAM_TMR) ,RES(O3T_18_PE.JAM_TMR) ,RES(O3T_17_PE.JAM_TMR) ,RES(CL12T_36_PE.JAM_TMR) ,RES(CL12T_35_PE.JAM_TMR) ,NOP() ];
				RC: "Reset Diverter Faults";
				N: NOP();
				N: [RES(XO2_HSD.FailedToExtend_TMR) RES(XO2_HSD.FailedToRetract_TMR) RES(XO2_HSD.PositionFault_TMR) ,OTU(F_XO2_01_HSD_FAIL_TO_EXTEND) OTU(F_XO2_01_HSD_FAIL_TO_RETRACT) OTU(F_XO2_01_HSD_UNKNOWN_POS) ,FLL(0,XO2_HSD.ACT_FIFO[0],5) FLL(0,XO2_HSD.XFER_FIFO[0],5) ];
				N: [RES(XO1_HSD.FailedToExtend_TMR) RES(XO1_HSD.FailedToRetract_TMR) RES(XO1_HSD.PositionFault_TMR) ,OTU(F_XO1_01_HSD_FAIL_TO_EXTEND) OTU(F_XO1_01_HSD_FAIL_TO_RETRACT) OTU(F_XO1_01_HSD_UNKNOWN_POS) ,FLL(0,XO1_HSD.ACT_FIFO[0],5) FLL(0,XO1_HSD.XFER_FIFO[0],5) ];
				RC: "Reset DOOR Faults";
				N: NOP();
				RC: "Reset Motors";
				N: NOP();
				N: [RES(BM1_30_MTR.IM_TMR) OTU(BM1_30_MTR.IM_TMR.DN) ,MOV(BM1_30_MTRx.T2H_SPACE_SET,BM1_30_MTR.T2H_SPACE_CNT) MOV(BM1_30_MTR.T2H_SPACE_TMR.PRE,BM1_30_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_30_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_29_MTR.IM_TMR) OTU(BM1_29_MTR.IM_TMR.DN) ,MOV(BM1_29_MTRx.T2H_SPACE_SET,BM1_29_MTR.T2H_SPACE_CNT) MOV(BM1_29_MTR.T2H_SPACE_TMR.PRE,BM1_29_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_29_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_28_MTR.IM_TMR) OTU(BM1_28_MTR.IM_TMR.DN) ,MOV(BM1_28_MTRx.T2H_SPACE_SET,BM1_28_MTR.T2H_SPACE_CNT) MOV(BM1_28_MTR.T2H_SPACE_TMR.PRE,BM1_28_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_28_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_27_MTR.IM_TMR) OTU(BM1_27_MTR.IM_TMR.DN) ,MOV(BM1_27_MTRx.T2H_SPACE_SET,BM1_27_MTR.T2H_SPACE_CNT) MOV(BM1_27_MTR.T2H_SPACE_TMR.PRE,BM1_27_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_27_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_26_MTR.IM_TMR) OTU(BM1_26_MTR.IM_TMR.DN) ,MOV(BM1_26_MTRx.T2H_SPACE_SET,BM1_26_MTR.T2H_SPACE_CNT) MOV(BM1_26_MTR.T2H_SPACE_TMR.PRE,BM1_26_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_26_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_25_MTR.IM_TMR) OTU(BM1_25_MTR.IM_TMR.DN) ,MOV(BM1_25_MTRx.T2H_SPACE_SET,BM1_25_MTR.T2H_SPACE_CNT) MOV(BM1_25_MTR.T2H_SPACE_TMR.PRE,BM1_25_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_25_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_24_MTR.IM_TMR) OTU(BM1_24_MTR.IM_TMR.DN) ,MOV(BM1_24_MTRx.T2H_SPACE_SET,BM1_24_MTR.T2H_SPACE_CNT) MOV(BM1_24_MTR.T2H_SPACE_TMR.PRE,BM1_24_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_24_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_23_MTR.IM_TMR) OTU(BM1_23_MTR.IM_TMR.DN) ,MOV(BM1_23_MTRx.T2H_SPACE_SET,BM1_23_MTR.T2H_SPACE_CNT) MOV(BM1_23_MTR.T2H_SPACE_TMR.PRE,BM1_23_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_23_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_22_MTR.IM_TMR) OTU(BM1_22_MTR.IM_TMR.DN) ,MOV(BM1_22_MTRx.T2H_SPACE_SET,BM1_22_MTR.T2H_SPACE_CNT) MOV(BM1_22_MTR.T2H_SPACE_TMR.PRE,BM1_22_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_22_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_21_MTR.IM_TMR) OTU(BM1_21_MTR.IM_TMR.DN) ,MOV(BM1_21_MTRx.T2H_SPACE_SET,BM1_21_MTR.T2H_SPACE_CNT) MOV(BM1_21_MTR.T2H_SPACE_TMR.PRE,BM1_21_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_21_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_20_MTR.IM_TMR) OTU(BM1_20_MTR.IM_TMR.DN) ,MOV(BM1_20_MTRx.T2H_SPACE_SET,BM1_20_MTR.T2H_SPACE_CNT) MOV(BM1_20_MTR.T2H_SPACE_TMR.PRE,BM1_20_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_20_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_19_MTR.IM_TMR) OTU(BM1_19_MTR.IM_TMR.DN) ,MOV(BM1_19_MTRx.T2H_SPACE_SET,BM1_19_MTR.T2H_SPACE_CNT) MOV(BM1_19_MTR.T2H_SPACE_TMR.PRE,BM1_19_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_19_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_18_MTR.IM_TMR) OTU(BM1_18_MTR.IM_TMR.DN) ,MOV(BM1_18_MTRx.T2H_SPACE_SET,BM1_18_MTR.T2H_SPACE_CNT) MOV(BM1_18_MTR.T2H_SPACE_TMR.PRE,BM1_18_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_18_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_17_MTR.IM_TMR) OTU(BM1_17_MTR.IM_TMR.DN) ,MOV(BM1_17_MTRx.T2H_SPACE_SET,BM1_17_MTR.T2H_SPACE_CNT) MOV(BM1_17_MTR.T2H_SPACE_TMR.PRE,BM1_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_16_MTR.IM_TMR) OTU(BM1_16_MTR.IM_TMR.DN) ,MOV(BM1_16_MTRx.T2H_SPACE_SET,BM1_16_MTR.T2H_SPACE_CNT) MOV(BM1_16_MTR.T2H_SPACE_TMR.PRE,BM1_16_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_16_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_15_MTR.IM_TMR) OTU(BM1_15_MTR.IM_TMR.DN) ,MOV(BM1_15_MTRx.T2H_SPACE_SET,BM1_15_MTR.T2H_SPACE_CNT) MOV(BM1_15_MTR.T2H_SPACE_TMR.PRE,BM1_15_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_15_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_14_MTR.IM_TMR) OTU(BM1_14_MTR.IM_TMR.DN) ,MOV(BM1_14_MTRx.T2H_SPACE_SET,BM1_14_MTR.T2H_SPACE_CNT) MOV(BM1_14_MTR.T2H_SPACE_TMR.PRE,BM1_14_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_14_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_38_MTR.IM_TMR) OTU(BM1_38_MTR.IM_TMR.DN) ,MOV(BM1_38_MTRx.T2H_SPACE_SET,BM1_38_MTR.T2H_SPACE_CNT) MOV(BM1_38_MTR.T2H_SPACE_TMR.PRE,BM1_38_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_38_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_37_MTR.IM_TMR) OTU(BM1_37_MTR.IM_TMR.DN) ,MOV(BM1_37_MTRx.T2H_SPACE_SET,BM1_37_MTR.T2H_SPACE_CNT) MOV(BM1_37_MTR.T2H_SPACE_TMR.PRE,BM1_37_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_37_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_36_MTR.IM_TMR) OTU(BM1_36_MTR.IM_TMR.DN) ,MOV(BM1_36_MTRx.T2H_SPACE_SET,BM1_36_MTR.T2H_SPACE_CNT) MOV(BM1_36_MTR.T2H_SPACE_TMR.PRE,BM1_36_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_36_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_35_MTR.IM_TMR) OTU(BM1_35_MTR.IM_TMR.DN) ,MOV(BM1_35_MTRx.T2H_SPACE_SET,BM1_35_MTR.T2H_SPACE_CNT) MOV(BM1_35_MTR.T2H_SPACE_TMR.PRE,BM1_35_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_35_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_34_MTR.IM_TMR) OTU(BM1_34_MTR.IM_TMR.DN) ,MOV(BM1_34_MTRx.T2H_SPACE_SET,BM1_34_MTR.T2H_SPACE_CNT) MOV(BM1_34_MTR.T2H_SPACE_TMR.PRE,BM1_34_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_34_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_13_MTR.IM_TMR) OTU(BM1_13_MTR.IM_TMR.DN) ,MOV(BM1_13_MTRx.T2H_SPACE_SET,BM1_13_MTR.T2H_SPACE_CNT) MOV(BM1_13_MTR.T2H_SPACE_TMR.PRE,BM1_13_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_13_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_12_MTR.IM_TMR) OTU(BM1_12_MTR.IM_TMR.DN) ,MOV(BM1_12_MTRx.T2H_SPACE_SET,BM1_12_MTR.T2H_SPACE_CNT) MOV(BM1_12_MTR.T2H_SPACE_TMR.PRE,BM1_12_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_12_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_11_MTR.IM_TMR) OTU(BM1_11_MTR.IM_TMR.DN) ,MOV(BM1_11_MTRx.T2H_SPACE_SET,BM1_11_MTR.T2H_SPACE_CNT) MOV(BM1_11_MTR.T2H_SPACE_TMR.PRE,BM1_11_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_11_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_10_MTR.IM_TMR) OTU(BM1_10_MTR.IM_TMR.DN) ,MOV(BM1_10_MTRx.T2H_SPACE_SET,BM1_10_MTR.T2H_SPACE_CNT) MOV(BM1_10_MTR.T2H_SPACE_TMR.PRE,BM1_10_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_10_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_09_MTR.IM_TMR) OTU(BM1_09_MTR.IM_TMR.DN) ,MOV(BM1_09_MTRx.T2H_SPACE_SET,BM1_09_MTR.T2H_SPACE_CNT) MOV(BM1_09_MTR.T2H_SPACE_TMR.PRE,BM1_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_08_MTR.IM_TMR) OTU(BM1_08_MTR.IM_TMR.DN) ,MOV(BM1_08_MTRx.T2H_SPACE_SET,BM1_08_MTR.T2H_SPACE_CNT) MOV(BM1_08_MTR.T2H_SPACE_TMR.PRE,BM1_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_07_MTR.IM_TMR) OTU(BM1_07_MTR.IM_TMR.DN) ,MOV(BM1_07_MTRx.T2H_SPACE_SET,BM1_07_MTR.T2H_SPACE_CNT) MOV(BM1_07_MTR.T2H_SPACE_TMR.PRE,BM1_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_06_MTR.IM_TMR) OTU(BM1_06_MTR.IM_TMR.DN) ,MOV(BM1_06_MTRx.T2H_SPACE_SET,BM1_06_MTR.T2H_SPACE_CNT) MOV(BM1_06_MTR.T2H_SPACE_TMR.PRE,BM1_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_05_MTR.IM_TMR) OTU(BM1_05_MTR.IM_TMR.DN) ,MOV(BM1_05_MTRx.T2H_SPACE_SET,BM1_05_MTR.T2H_SPACE_CNT) MOV(BM1_05_MTR.T2H_SPACE_TMR.PRE,BM1_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_04_MTR.IM_TMR) OTU(BM1_04_MTR.IM_TMR.DN) ,MOV(BM1_04_MTRx.T2H_SPACE_SET,BM1_04_MTR.T2H_SPACE_CNT) MOV(BM1_04_MTR.T2H_SPACE_TMR.PRE,BM1_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_03_MTR.IM_TMR) OTU(BM1_03_MTR.IM_TMR.DN) ,MOV(BM1_03_MTRx.T2H_SPACE_SET,BM1_03_MTR.T2H_SPACE_CNT) MOV(BM1_03_MTR.T2H_SPACE_TMR.PRE,BM1_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_02_MTR.IM_TMR) OTU(BM1_02_MTR.IM_TMR.DN) ,MOV(BM1_02_MTRx.T2H_SPACE_SET,BM1_02_MTR.T2H_SPACE_CNT) MOV(BM1_02_MTR.T2H_SPACE_TMR.PRE,BM1_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(BM1_01_MTR.IM_TMR) OTU(BM1_01_MTR.IM_TMR.DN) ,MOV(BM1_01_MTRx.T2H_SPACE_SET,BM1_01_MTR.T2H_SPACE_CNT) MOV(BM1_01_MTR.T2H_SPACE_TMR.PRE,BM1_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(BM1_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_18_MTR.IM_TMR) OTU(O2T_18_MTR.IM_TMR.DN) ,MOV(O2T_18_MTRx.T2H_SPACE_SET,O2T_18_MTR.T2H_SPACE_CNT) MOV(O2T_18_MTR.T2H_SPACE_TMR.PRE,O2T_18_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_18_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_17_MTR.IM_TMR) OTU(O2T_17_MTR.IM_TMR.DN) ,MOV(O2T_17_MTRx.T2H_SPACE_SET,O2T_17_MTR.T2H_SPACE_CNT) MOV(O2T_17_MTR.T2H_SPACE_TMR.PRE,O2T_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_16_MTR.IM_TMR) OTU(O2T_16_MTR.IM_TMR.DN) ,MOV(O2T_16_MTRx.T2H_SPACE_SET,O2T_16_MTR.T2H_SPACE_CNT) MOV(O2T_16_MTR.T2H_SPACE_TMR.PRE,O2T_16_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_16_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_15_MTR.IM_TMR) OTU(O2T_15_MTR.IM_TMR.DN) ,MOV(O2T_15_MTRx.T2H_SPACE_SET,O2T_15_MTR.T2H_SPACE_CNT) MOV(O2T_15_MTR.T2H_SPACE_TMR.PRE,O2T_15_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_15_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_14_MTR.IM_TMR) OTU(O2T_14_MTR.IM_TMR.DN) ,MOV(O2T_14_MTRx.T2H_SPACE_SET,O2T_14_MTR.T2H_SPACE_CNT) MOV(O2T_14_MTR.T2H_SPACE_TMR.PRE,O2T_14_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_14_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_13_MTR.IM_TMR) OTU(O2T_13_MTR.IM_TMR.DN) ,MOV(O2T_13_MTRx.T2H_SPACE_SET,O2T_13_MTR.T2H_SPACE_CNT) MOV(O2T_13_MTR.T2H_SPACE_TMR.PRE,O2T_13_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_13_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_12_MTR.IM_TMR) OTU(O2T_12_MTR.IM_TMR.DN) ,MOV(O2T_12_MTRx.T2H_SPACE_SET,O2T_12_MTR.T2H_SPACE_CNT) MOV(O2T_12_MTR.T2H_SPACE_TMR.PRE,O2T_12_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_12_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_11_MTR.IM_TMR) OTU(O2T_11_MTR.IM_TMR.DN) ,MOV(O2T_11_MTRx.T2H_SPACE_SET,O2T_11_MTR.T2H_SPACE_CNT) MOV(O2T_11_MTR.T2H_SPACE_TMR.PRE,O2T_11_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_11_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_10_MTR.IM_TMR) OTU(O2T_10_MTR.IM_TMR.DN) ,MOV(O2T_10_MTRx.T2H_SPACE_SET,O2T_10_MTR.T2H_SPACE_CNT) MOV(O2T_10_MTR.T2H_SPACE_TMR.PRE,O2T_10_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_10_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_09_MTR.IM_TMR) OTU(O2T_09_MTR.IM_TMR.DN) ,MOV(O2T_09_MTRx.T2H_SPACE_SET,O2T_09_MTR.T2H_SPACE_CNT) MOV(O2T_09_MTR.T2H_SPACE_TMR.PRE,O2T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_08_MTR.IM_TMR) OTU(O2T_08_MTR.IM_TMR.DN) ,MOV(O2T_08_MTRx.T2H_SPACE_SET,O2T_08_MTR.T2H_SPACE_CNT) MOV(O2T_08_MTR.T2H_SPACE_TMR.PRE,O2T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_07_MTR.IM_TMR) OTU(O2T_07_MTR.IM_TMR.DN) ,MOV(O2T_07_MTRx.T2H_SPACE_SET,O2T_07_MTR.T2H_SPACE_CNT) MOV(O2T_07_MTR.T2H_SPACE_TMR.PRE,O2T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_06_MTR.IM_TMR) OTU(O2T_06_MTR.IM_TMR.DN) ,MOV(O2T_06_MTRx.T2H_SPACE_SET,O2T_06_MTR.T2H_SPACE_CNT) MOV(O2T_06_MTR.T2H_SPACE_TMR.PRE,O2T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_05_MTR.IM_TMR) OTU(O2T_05_MTR.IM_TMR.DN) ,MOV(O2T_05_MTRx.T2H_SPACE_SET,O2T_05_MTR.T2H_SPACE_CNT) MOV(O2T_05_MTR.T2H_SPACE_TMR.PRE,O2T_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O2T_04_MTR.IM_TMR) OTU(O2T_04_MTR.IM_TMR.DN) ,MOV(O2T_04_MTRx.T2H_SPACE_SET,O2T_04_MTR.T2H_SPACE_CNT) MOV(O2T_04_MTR.T2H_SPACE_TMR.PRE,O2T_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(O2T_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_17_MTR.IM_TMR) OTU(C2T_17_MTR.IM_TMR.DN) ,MOV(C2T_17_MTRx.T2H_SPACE_SET,C2T_17_MTR.T2H_SPACE_CNT) MOV(C2T_17_MTR.T2H_SPACE_TMR.PRE,C2T_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_16_MTR.IM_TMR) OTU(C2T_16_MTR.IM_TMR.DN) ,MOV(C2T_16_MTRx.T2H_SPACE_SET,C2T_16_MTR.T2H_SPACE_CNT) MOV(C2T_16_MTR.T2H_SPACE_TMR.PRE,C2T_16_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_16_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_15_MTR.IM_TMR) OTU(C2T_15_MTR.IM_TMR.DN) ,MOV(C2T_15_MTRx.T2H_SPACE_SET,C2T_15_MTR.T2H_SPACE_CNT) MOV(C2T_15_MTR.T2H_SPACE_TMR.PRE,C2T_15_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_15_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_14_MTR.IM_TMR) OTU(C2T_14_MTR.IM_TMR.DN) ,MOV(C2T_14_MTRx.T2H_SPACE_SET,C2T_14_MTR.T2H_SPACE_CNT) MOV(C2T_14_MTR.T2H_SPACE_TMR.PRE,C2T_14_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_14_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_13_MTR.IM_TMR) OTU(C2T_13_MTR.IM_TMR.DN) ,MOV(C2T_13_MTRx.T2H_SPACE_SET,C2T_13_MTR.T2H_SPACE_CNT) MOV(C2T_13_MTR.T2H_SPACE_TMR.PRE,C2T_13_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_13_MTR.T2H_SPACE_TMR.DN);
				N: [RES(C2T_12_MTR.IM_TMR) OTU(C2T_12_MTR.IM_TMR.DN) ,MOV(C2T_12_MTRx.T2H_SPACE_SET,C2T_12_MTR.T2H_SPACE_CNT) MOV(C2T_12_MTR.T2H_SPACE_TMR.PRE,C2T_12_MTR.T2H_SPACE_TMR.ACC) ]OTL(C2T_12_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_09_MTR.IM_TMR) OTU(CL2T_09_MTR.IM_TMR.DN) ,MOV(CL2T_09_MTRx.T2H_SPACE_SET,CL2T_09_MTR.T2H_SPACE_CNT) MOV(CL2T_09_MTR.T2H_SPACE_TMR.PRE,CL2T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_08_MTR.IM_TMR) OTU(CL2T_08_MTR.IM_TMR.DN) ,MOV(CL2T_08_MTRx.T2H_SPACE_SET,CL2T_08_MTR.T2H_SPACE_CNT) MOV(CL2T_08_MTR.T2H_SPACE_TMR.PRE,CL2T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_07_MTR.IM_TMR) OTU(CL2T_07_MTR.IM_TMR.DN) ,MOV(CL2T_07_MTRx.T2H_SPACE_SET,CL2T_07_MTR.T2H_SPACE_CNT) MOV(CL2T_07_MTR.T2H_SPACE_TMR.PRE,CL2T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_06_MTR.IM_TMR) OTU(CL2T_06_MTR.IM_TMR.DN) ,MOV(CL2T_06_MTRx.T2H_SPACE_SET,CL2T_06_MTR.T2H_SPACE_CNT) MOV(CL2T_06_MTR.T2H_SPACE_TMR.PRE,CL2T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_05_MTR.IM_TMR) OTU(CL2T_05_MTR.IM_TMR.DN) ,MOV(CL2T_05_MTRx.T2H_SPACE_SET,CL2T_05_MTR.T2H_SPACE_CNT) MOV(CL2T_05_MTR.T2H_SPACE_TMR.PRE,CL2T_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_04_MTR.IM_TMR) OTU(CL2T_04_MTR.IM_TMR.DN) ,MOV(CL2T_04_MTRx.T2H_SPACE_SET,CL2T_04_MTR.T2H_SPACE_CNT) MOV(CL2T_04_MTR.T2H_SPACE_TMR.PRE,CL2T_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_03_MTR.IM_TMR) OTU(CL2T_03_MTR.IM_TMR.DN) ,MOV(CL2T_03_MTRx.T2H_SPACE_SET,CL2T_03_MTR.T2H_SPACE_CNT) MOV(CL2T_03_MTR.T2H_SPACE_TMR.PRE,CL2T_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_02_MTR.IM_TMR) OTU(CL2T_02_MTR.IM_TMR.DN) ,MOV(CL2T_02_MTRx.T2H_SPACE_SET,CL2T_02_MTR.T2H_SPACE_CNT) MOV(CL2T_02_MTR.T2H_SPACE_TMR.PRE,CL2T_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL2T_01_MTR.IM_TMR) OTU(CL2T_01_MTR.IM_TMR.DN) ,MOV(CL2T_01_MTRx.T2H_SPACE_SET,CL2T_01_MTR.T2H_SPACE_CNT) MOV(CL2T_01_MTR.T2H_SPACE_TMR.PRE,CL2T_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL2T_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_08_MTR.IM_TMR) OTU(CL3T_08_MTR.IM_TMR.DN) ,MOV(CL3T_08_MTRx.T2H_SPACE_SET,CL3T_08_MTR.T2H_SPACE_CNT) MOV(CL3T_08_MTR.T2H_SPACE_TMR.PRE,CL3T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_07_MTR.IM_TMR) OTU(CL3T_07_MTR.IM_TMR.DN) ,MOV(CL3T_07_MTRx.T2H_SPACE_SET,CL3T_07_MTR.T2H_SPACE_CNT) MOV(CL3T_07_MTR.T2H_SPACE_TMR.PRE,CL3T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_06_MTR.IM_TMR) OTU(CL3T_06_MTR.IM_TMR.DN) ,MOV(CL3T_06_MTRx.T2H_SPACE_SET,CL3T_06_MTR.T2H_SPACE_CNT) MOV(CL3T_06_MTR.T2H_SPACE_TMR.PRE,CL3T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_05_MTR.IM_TMR) OTU(CL3T_05_MTR.IM_TMR.DN) ,MOV(CL3T_05_MTRx.T2H_SPACE_SET,CL3T_05_MTR.T2H_SPACE_CNT) MOV(CL3T_05_MTR.T2H_SPACE_TMR.PRE,CL3T_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_04_MTR.IM_TMR) OTU(CL3T_04_MTR.IM_TMR.DN) ,MOV(CL3T_04_MTRx.T2H_SPACE_SET,CL3T_04_MTR.T2H_SPACE_CNT) MOV(CL3T_04_MTR.T2H_SPACE_TMR.PRE,CL3T_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_03_MTR.IM_TMR) OTU(CL3T_03_MTR.IM_TMR.DN) ,MOV(CL3T_03_MTRx.T2H_SPACE_SET,CL3T_03_MTR.T2H_SPACE_CNT) MOV(CL3T_03_MTR.T2H_SPACE_TMR.PRE,CL3T_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_02_MTR.IM_TMR) OTU(CL3T_02_MTR.IM_TMR.DN) ,MOV(CL3T_02_MTRx.T2H_SPACE_SET,CL3T_02_MTR.T2H_SPACE_CNT) MOV(CL3T_02_MTR.T2H_SPACE_TMR.PRE,CL3T_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL3T_01_MTR.IM_TMR) OTU(CL3T_01_MTR.IM_TMR.DN) ,MOV(CL3T_01_MTRx.T2H_SPACE_SET,CL3T_01_MTR.T2H_SPACE_CNT) MOV(CL3T_01_MTR.T2H_SPACE_TMR.PRE,CL3T_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL3T_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_13_MTR.IM_TMR) OTU(O4T_13_MTR.IM_TMR.DN) ,MOV(O4T_13_MTRx.T2H_SPACE_SET,O4T_13_MTR.T2H_SPACE_CNT) MOV(O4T_13_MTR.T2H_SPACE_TMR.PRE,O4T_13_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_13_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_12_MTR.IM_TMR) OTU(O4T_12_MTR.IM_TMR.DN) ,MOV(O4T_12_MTRx.T2H_SPACE_SET,O4T_12_MTR.T2H_SPACE_CNT) MOV(O4T_12_MTR.T2H_SPACE_TMR.PRE,O4T_12_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_12_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_11_MTR.IM_TMR) OTU(O4T_11_MTR.IM_TMR.DN) ,MOV(O4T_11_MTRx.T2H_SPACE_SET,O4T_11_MTR.T2H_SPACE_CNT) MOV(O4T_11_MTR.T2H_SPACE_TMR.PRE,O4T_11_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_11_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_10_MTR.IM_TMR) OTU(O4T_10_MTR.IM_TMR.DN) ,MOV(O4T_10_MTRx.T2H_SPACE_SET,O4T_10_MTR.T2H_SPACE_CNT) MOV(O4T_10_MTR.T2H_SPACE_TMR.PRE,O4T_10_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_10_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_09_MTR.IM_TMR) OTU(O4T_09_MTR.IM_TMR.DN) ,MOV(O4T_09_MTRx.T2H_SPACE_SET,O4T_09_MTR.T2H_SPACE_CNT) MOV(O4T_09_MTR.T2H_SPACE_TMR.PRE,O4T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_08_MTR.IM_TMR) OTU(O4T_08_MTR.IM_TMR.DN) ,MOV(O4T_08_MTRx.T2H_SPACE_SET,O4T_08_MTR.T2H_SPACE_CNT) MOV(O4T_08_MTR.T2H_SPACE_TMR.PRE,O4T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_07_MTR.IM_TMR) OTU(O4T_07_MTR.IM_TMR.DN) ,MOV(O4T_07_MTRx.T2H_SPACE_SET,O4T_07_MTR.T2H_SPACE_CNT) MOV(O4T_07_MTR.T2H_SPACE_TMR.PRE,O4T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_06_MTR.IM_TMR) OTU(O4T_06_MTR.IM_TMR.DN) ,MOV(O4T_06_MTRx.T2H_SPACE_SET,O4T_06_MTR.T2H_SPACE_CNT) MOV(O4T_06_MTR.T2H_SPACE_TMR.PRE,O4T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_05_MTR.IM_TMR) OTU(O4T_05_MTR.IM_TMR.DN) ,MOV(O4T_05_MTRx.T2H_SPACE_SET,O4T_05_MTR.T2H_SPACE_CNT) MOV(O4T_05_MTR.T2H_SPACE_TMR.PRE,O4T_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO1_03_MTR.IM_TMR) OTU(XO1_03_MTR.IM_TMR.DN) ,MOV(XO1_03_MTRx.T2H_SPACE_SET,XO1_03_MTR.T2H_SPACE_CNT) MOV(XO1_03_MTR.T2H_SPACE_TMR.PRE,XO1_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO1_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO1_02_MTR.IM_TMR) OTU(XO1_02_MTR.IM_TMR.DN) ,MOV(XO1_02_MTRx.T2H_SPACE_SET,XO1_02_MTR.T2H_SPACE_CNT) MOV(XO1_02_MTR.T2H_SPACE_TMR.PRE,XO1_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO1_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO1_01_MTR.IM_TMR) OTU(XO1_01_MTR.IM_TMR.DN) ,MOV(XO1_01_MTRx.T2H_SPACE_SET,XO1_01_MTR.T2H_SPACE_CNT) MOV(XO1_01_MTR.T2H_SPACE_TMR.PRE,XO1_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO1_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(T5T_09_MTR.IM_TMR) OTU(T5T_09_MTR.IM_TMR.DN) ,MOV(T5T_09_MTRx.T2H_SPACE_SET,T5T_09_MTR.T2H_SPACE_CNT) MOV(T5T_09_MTR.T2H_SPACE_TMR.PRE,T5T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(T5T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(T5T_08_MTR.IM_TMR) OTU(T5T_08_MTR.IM_TMR.DN) ,MOV(T5T_08_MTRx.T2H_SPACE_SET,T5T_08_MTR.T2H_SPACE_CNT) MOV(T5T_08_MTR.T2H_SPACE_TMR.PRE,T5T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(T5T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO2_05_MTR.IM_TMR) OTU(XO2_05_MTR.IM_TMR.DN) ,MOV(XO2_05_MTRx.T2H_SPACE_SET,XO2_05_MTR.T2H_SPACE_CNT) MOV(XO2_05_MTR.T2H_SPACE_TMR.PRE,XO2_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO2_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO2_04_MTR.IM_TMR) OTU(XO2_04_MTR.IM_TMR.DN) ,MOV(XO2_04_MTRx.T2H_SPACE_SET,XO2_04_MTR.T2H_SPACE_CNT) MOV(XO2_04_MTR.T2H_SPACE_TMR.PRE,XO2_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO2_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO2_03_MTR.IM_TMR) OTU(XO2_03_MTR.IM_TMR.DN) ,MOV(XO2_03_MTRx.T2H_SPACE_SET,XO2_03_MTR.T2H_SPACE_CNT) MOV(XO2_03_MTR.T2H_SPACE_TMR.PRE,XO2_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO2_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO2_02_MTR.IM_TMR) OTU(XO2_02_MTR.IM_TMR.DN) ,MOV(XO2_02_MTRx.T2H_SPACE_SET,XO2_02_MTR.T2H_SPACE_CNT) MOV(XO2_02_MTR.T2H_SPACE_TMR.PRE,XO2_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO2_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(XO2_01_MTR.IM_TMR) OTU(XO2_01_MTR.IM_TMR.DN) ,MOV(XO2_01_MTRx.T2H_SPACE_SET,XO2_01_MTR.T2H_SPACE_CNT) MOV(XO2_01_MTR.T2H_SPACE_TMR.PRE,XO2_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(XO2_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_26_MTR.IM_TMR) OTU(CL1T_26_MTR.IM_TMR.DN) ,MOV(CL1T_26_MTRx.T2H_SPACE_SET,CL1T_26_MTR.T2H_SPACE_CNT) MOV(CL1T_26_MTR.T2H_SPACE_TMR.PRE,CL1T_26_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_26_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_25_MTR.IM_TMR) OTU(CL1T_25_MTR.IM_TMR.DN) ,MOV(CL1T_25_MTRx.T2H_SPACE_SET,CL1T_25_MTR.T2H_SPACE_CNT) MOV(CL1T_25_MTR.T2H_SPACE_TMR.PRE,CL1T_25_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_25_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_24_MTR.IM_TMR) OTU(CL1T_24_MTR.IM_TMR.DN) ,MOV(CL1T_24_MTRx.T2H_SPACE_SET,CL1T_24_MTR.T2H_SPACE_CNT) MOV(CL1T_24_MTR.T2H_SPACE_TMR.PRE,CL1T_24_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_24_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_23_MTR.IM_TMR) OTU(CL1T_23_MTR.IM_TMR.DN) ,MOV(CL1T_23_MTRx.T2H_SPACE_SET,CL1T_23_MTR.T2H_SPACE_CNT) MOV(CL1T_23_MTR.T2H_SPACE_TMR.PRE,CL1T_23_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_23_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_22_MTR.IM_TMR) OTU(CL1T_22_MTR.IM_TMR.DN) ,MOV(CL1T_22_MTRx.T2H_SPACE_SET,CL1T_22_MTR.T2H_SPACE_CNT) MOV(CL1T_22_MTR.T2H_SPACE_TMR.PRE,CL1T_22_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_22_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_21_MTR.IM_TMR) OTU(CL1T_21_MTR.IM_TMR.DN) ,MOV(CL1T_21_MTRx.T2H_SPACE_SET,CL1T_21_MTR.T2H_SPACE_CNT) MOV(CL1T_21_MTR.T2H_SPACE_TMR.PRE,CL1T_21_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_21_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_20_MTR.IM_TMR) OTU(CL1T_20_MTR.IM_TMR.DN) ,MOV(CL1T_20_MTRx.T2H_SPACE_SET,CL1T_20_MTR.T2H_SPACE_CNT) MOV(CL1T_20_MTR.T2H_SPACE_TMR.PRE,CL1T_20_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_20_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_19_MTR.IM_TMR) OTU(CL1T_19_MTR.IM_TMR.DN) ,MOV(CL1T_19_MTRx.T2H_SPACE_SET,CL1T_19_MTR.T2H_SPACE_CNT) MOV(CL1T_19_MTR.T2H_SPACE_TMR.PRE,CL1T_19_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_19_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_18_MTR.IM_TMR) OTU(CL1T_18_MTR.IM_TMR.DN) ,MOV(CL1T_18_MTRx.T2H_SPACE_SET,CL1T_18_MTR.T2H_SPACE_CNT) MOV(CL1T_18_MTR.T2H_SPACE_TMR.PRE,CL1T_18_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_18_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_17_MTR.IM_TMR) OTU(CL1T_17_MTR.IM_TMR.DN) ,MOV(CL1T_17_MTRx.T2H_SPACE_SET,CL1T_17_MTR.T2H_SPACE_CNT) MOV(CL1T_17_MTR.T2H_SPACE_TMR.PRE,CL1T_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_16_MTR.IM_TMR) OTU(CL1T_16_MTR.IM_TMR.DN) ,MOV(CL1T_16_MTRx.T2H_SPACE_SET,CL1T_16_MTR.T2H_SPACE_CNT) MOV(CL1T_16_MTR.T2H_SPACE_TMR.PRE,CL1T_16_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_16_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_15_MTR.IM_TMR) OTU(CL1T_15_MTR.IM_TMR.DN) ,MOV(CL1T_15_MTRx.T2H_SPACE_SET,CL1T_15_MTR.T2H_SPACE_CNT) MOV(CL1T_15_MTR.T2H_SPACE_TMR.PRE,CL1T_15_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_15_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_14_MTR.IM_TMR) OTU(CL1T_14_MTR.IM_TMR.DN) ,MOV(CL1T_14_MTRx.T2H_SPACE_SET,CL1T_14_MTR.T2H_SPACE_CNT) MOV(CL1T_14_MTR.T2H_SPACE_TMR.PRE,CL1T_14_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_14_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_13_MTR.IM_TMR) OTU(CL1T_13_MTR.IM_TMR.DN) ,MOV(CL1T_13_MTRx.T2H_SPACE_SET,CL1T_13_MTR.T2H_SPACE_CNT) MOV(CL1T_13_MTR.T2H_SPACE_TMR.PRE,CL1T_13_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_13_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_12_MTR.IM_TMR) OTU(CL1T_12_MTR.IM_TMR.DN) ,MOV(CL1T_12_MTRx.T2H_SPACE_SET,CL1T_12_MTR.T2H_SPACE_CNT) MOV(CL1T_12_MTR.T2H_SPACE_TMR.PRE,CL1T_12_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_12_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_11_MTR.IM_TMR) OTU(CL1T_11_MTR.IM_TMR.DN) ,MOV(CL1T_11_MTRx.T2H_SPACE_SET,CL1T_11_MTR.T2H_SPACE_CNT) MOV(CL1T_11_MTR.T2H_SPACE_TMR.PRE,CL1T_11_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_11_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_10_MTR.IM_TMR) OTU(CL1T_10_MTR.IM_TMR.DN) ,MOV(CL1T_10_MTRx.T2H_SPACE_SET,CL1T_10_MTR.T2H_SPACE_CNT) MOV(CL1T_10_MTR.T2H_SPACE_TMR.PRE,CL1T_10_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_10_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_09_MTR.IM_TMR) OTU(CL1T_09_MTR.IM_TMR.DN) ,MOV(CL1T_09_MTRx.T2H_SPACE_SET,CL1T_09_MTR.T2H_SPACE_CNT) MOV(CL1T_09_MTR.T2H_SPACE_TMR.PRE,CL1T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_08_MTR.IM_TMR) OTU(CL1T_08_MTR.IM_TMR.DN) ,MOV(CL1T_08_MTRx.T2H_SPACE_SET,CL1T_08_MTR.T2H_SPACE_CNT) MOV(CL1T_08_MTR.T2H_SPACE_TMR.PRE,CL1T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_07_MTR.IM_TMR) OTU(CL1T_07_MTR.IM_TMR.DN) ,MOV(CL1T_07_MTRx.T2H_SPACE_SET,CL1T_07_MTR.T2H_SPACE_CNT) MOV(CL1T_07_MTR.T2H_SPACE_TMR.PRE,CL1T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_06_MTR.IM_TMR) OTU(CL1T_06_MTR.IM_TMR.DN) ,MOV(CL1T_06_MTRx.T2H_SPACE_SET,CL1T_06_MTR.T2H_SPACE_CNT) MOV(CL1T_06_MTR.T2H_SPACE_TMR.PRE,CL1T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_05_MTR.IM_TMR) OTU(CL1T_05_MTR.IM_TMR.DN) ,MOV(CL1T_05_MTRx.T2H_SPACE_SET,CL1T_05_MTR.T2H_SPACE_CNT) MOV(CL1T_05_MTR.T2H_SPACE_TMR.PRE,CL1T_05_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_05_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_04_MTR.IM_TMR) OTU(CL1T_04_MTR.IM_TMR.DN) ,MOV(CL1T_04_MTRx.T2H_SPACE_SET,CL1T_04_MTR.T2H_SPACE_CNT) MOV(CL1T_04_MTR.T2H_SPACE_TMR.PRE,CL1T_04_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_04_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_03_MTR.IM_TMR) OTU(CL1T_03_MTR.IM_TMR.DN) ,MOV(CL1T_03_MTRx.T2H_SPACE_SET,CL1T_03_MTR.T2H_SPACE_CNT) MOV(CL1T_03_MTR.T2H_SPACE_TMR.PRE,CL1T_03_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_03_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_02_MTR.IM_TMR) OTU(CL1T_02_MTR.IM_TMR.DN) ,MOV(CL1T_02_MTRx.T2H_SPACE_SET,CL1T_02_MTR.T2H_SPACE_CNT) MOV(CL1T_02_MTR.T2H_SPACE_TMR.PRE,CL1T_02_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_02_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL1T_01_MTR.IM_TMR) OTU(CL1T_01_MTR.IM_TMR.DN) ,MOV(CL1T_01_MTRx.T2H_SPACE_SET,CL1T_01_MTR.T2H_SPACE_CNT) MOV(CL1T_01_MTR.T2H_SPACE_TMR.PRE,CL1T_01_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL1T_01_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_10A_MTR.IM_TMR) OTU(HX1T_10A_MTR.IM_TMR.DN) ,MOV(HX1T_10A_MTRx.T2H_SPACE_SET,HX1T_10A_MTR.T2H_SPACE_CNT) MOV(HX1T_10A_MTR.T2H_SPACE_TMR.PRE,HX1T_10A_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_10A_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_10_MTR.IM_TMR) OTU(HX1T_10_MTR.IM_TMR.DN) ,MOV(HX1T_10_MTRx.T2H_SPACE_SET,HX1T_10_MTR.T2H_SPACE_CNT) MOV(HX1T_10_MTR.T2H_SPACE_TMR.PRE,HX1T_10_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_10_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_09_MTR.IM_TMR) OTU(HX1T_09_MTR.IM_TMR.DN) ,MOV(HX1T_09_MTRx.T2H_SPACE_SET,HX1T_09_MTR.T2H_SPACE_CNT) MOV(HX1T_09_MTR.T2H_SPACE_TMR.PRE,HX1T_09_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_09_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_08_MTR.IM_TMR) OTU(HX1T_08_MTR.IM_TMR.DN) ,MOV(HX1T_08_MTRx.T2H_SPACE_SET,HX1T_08_MTR.T2H_SPACE_CNT) MOV(HX1T_08_MTR.T2H_SPACE_TMR.PRE,HX1T_08_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_08_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_07_MTR.IM_TMR) OTU(HX1T_07_MTR.IM_TMR.DN) ,MOV(HX1T_07_MTRx.T2H_SPACE_SET,HX1T_07_MTR.T2H_SPACE_CNT) MOV(HX1T_07_MTR.T2H_SPACE_TMR.PRE,HX1T_07_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_07_MTR.T2H_SPACE_TMR.DN);
				N: [RES(HX1T_06_MTR.IM_TMR) OTU(HX1T_06_MTR.IM_TMR.DN) ,MOV(HX1T_06_MTRx.T2H_SPACE_SET,HX1T_06_MTR.T2H_SPACE_CNT) MOV(HX1T_06_MTR.T2H_SPACE_TMR.PRE,HX1T_06_MTR.T2H_SPACE_TMR.ACC) ]OTL(HX1T_06_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_22_MTR.IM_TMR) OTU(O4T_22_MTR.IM_TMR.DN) ,MOV(O4T_22_MTRx.T2H_SPACE_SET,O4T_22_MTR.T2H_SPACE_CNT) MOV(O4T_22_MTR.T2H_SPACE_TMR.PRE,O4T_22_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_22_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_21_MTR.IM_TMR) OTU(O4T_21_MTR.IM_TMR.DN) ,MOV(O4T_21_MTRx.T2H_SPACE_SET,O4T_21_MTR.T2H_SPACE_CNT) MOV(O4T_21_MTR.T2H_SPACE_TMR.PRE,O4T_21_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_21_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_20_MTR.IM_TMR) OTU(O4T_20_MTR.IM_TMR.DN) ,MOV(O4T_20_MTRx.T2H_SPACE_SET,O4T_20_MTR.T2H_SPACE_CNT) MOV(O4T_20_MTR.T2H_SPACE_TMR.PRE,O4T_20_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_20_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_19_MTR.IM_TMR) OTU(O4T_19_MTR.IM_TMR.DN) ,MOV(O4T_19_MTRx.T2H_SPACE_SET,O4T_19_MTR.T2H_SPACE_CNT) MOV(O4T_19_MTR.T2H_SPACE_TMR.PRE,O4T_19_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_19_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_18_MTR.IM_TMR) OTU(O4T_18_MTR.IM_TMR.DN) ,MOV(O4T_18_MTRx.T2H_SPACE_SET,O4T_18_MTR.T2H_SPACE_CNT) MOV(O4T_18_MTR.T2H_SPACE_TMR.PRE,O4T_18_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_18_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O4T_17_MTR.IM_TMR) OTU(O4T_17_MTR.IM_TMR.DN) ,MOV(O4T_17_MTRx.T2H_SPACE_SET,O4T_17_MTR.T2H_SPACE_CNT) MOV(O4T_17_MTR.T2H_SPACE_TMR.PRE,O4T_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(O4T_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O3T_21_MTR.IM_TMR) OTU(O3T_21_MTR.IM_TMR.DN) ,MOV(O3T_21_MTRx.T2H_SPACE_SET,O3T_21_MTR.T2H_SPACE_CNT) MOV(O3T_21_MTR.T2H_SPACE_TMR.PRE,O3T_21_MTR.T2H_SPACE_TMR.ACC) ]OTL(O3T_21_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O3T_20_MTR.IM_TMR) OTU(O3T_20_MTR.IM_TMR.DN) ,MOV(O3T_20_MTRx.T2H_SPACE_SET,O3T_20_MTR.T2H_SPACE_CNT) MOV(O3T_20_MTR.T2H_SPACE_TMR.PRE,O3T_20_MTR.T2H_SPACE_TMR.ACC) ]OTL(O3T_20_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O3T_19_MTR.IM_TMR) OTU(O3T_19_MTR.IM_TMR.DN) ,MOV(O3T_19_MTRx.T2H_SPACE_SET,O3T_19_MTR.T2H_SPACE_CNT) MOV(O3T_19_MTR.T2H_SPACE_TMR.PRE,O3T_19_MTR.T2H_SPACE_TMR.ACC) ]OTL(O3T_19_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O3T_18_MTR.IM_TMR) OTU(O3T_18_MTR.IM_TMR.DN) ,MOV(O3T_18_MTRx.T2H_SPACE_SET,O3T_18_MTR.T2H_SPACE_CNT) MOV(O3T_18_MTR.T2H_SPACE_TMR.PRE,O3T_18_MTR.T2H_SPACE_TMR.ACC) ]OTL(O3T_18_MTR.T2H_SPACE_TMR.DN);
				N: [RES(O3T_17_MTR.IM_TMR) OTU(O3T_17_MTR.IM_TMR.DN) ,MOV(O3T_17_MTRx.T2H_SPACE_SET,O3T_17_MTR.T2H_SPACE_CNT) MOV(O3T_17_MTR.T2H_SPACE_TMR.PRE,O3T_17_MTR.T2H_SPACE_TMR.ACC) ]OTL(O3T_17_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL12T_36_MTR.IM_TMR) OTU(CL12T_36_MTR.IM_TMR.DN) ,MOV(CL12T_36_MTRx.T2H_SPACE_SET,CL12T_36_MTR.T2H_SPACE_CNT) MOV(CL12T_36_MTR.T2H_SPACE_TMR.PRE,CL12T_36_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL12T_36_MTR.T2H_SPACE_TMR.DN);
				N: [RES(CL12T_35_MTR.IM_TMR) OTU(CL12T_35_MTR.IM_TMR.DN) ,MOV(CL12T_35_MTRx.T2H_SPACE_SET,CL12T_35_MTR.T2H_SPACE_CNT) MOV(CL12T_35_MTR.T2H_SPACE_TMR.PRE,CL12T_35_MTR.T2H_SPACE_TMR.ACC) ]OTL(CL12T_35_MTR.T2H_SPACE_TMR.DN);
				N: OTU(F_BM1_30_MOL)OTU(F_BM1_30_VFD_FAULT)OTU(F_BM1_30_CTCTR_FAULT);
				N: OTU(F_BM1_29_MOL)OTU(F_BM1_29_VFD_FAULT)OTU(F_BM1_29_CTCTR_FAULT);
				N: OTU(F_BM1_28_MOL)OTU(F_BM1_28_VFD_FAULT)OTU(F_BM1_28_CTCTR_FAULT);
				N: OTU(F_BM1_27_MOL)OTU(F_BM1_27_VFD_FAULT)OTU(F_BM1_27_CTCTR_FAULT);
				N: OTU(F_BM1_26_MOL)OTU(F_BM1_26_VFD_FAULT)OTU(F_BM1_26_CTCTR_FAULT);
				N: OTU(F_BM1_25_MOL)OTU(F_BM1_25_VFD_FAULT)OTU(F_BM1_25_CTCTR_FAULT);
				N: OTU(F_BM1_24_MOL)OTU(F_BM1_24_VFD_FAULT)OTU(F_BM1_24_CTCTR_FAULT);
				N: OTU(F_BM1_23_MOL)OTU(F_BM1_23_VFD_FAULT)OTU(F_BM1_23_CTCTR_FAULT);
				N: OTU(F_BM1_22_MOL)OTU(F_BM1_22_VFD_FAULT)OTU(F_BM1_22_CTCTR_FAULT);
				N: OTU(F_BM1_21_MOL)OTU(F_BM1_21_VFD_FAULT)OTU(F_BM1_21_CTCTR_FAULT);
				N: OTU(F_BM1_20_MOL)OTU(F_BM1_20_VFD_FAULT)OTU(F_BM1_20_CTCTR_FAULT);
				N: OTU(F_BM1_19_MOL)OTU(F_BM1_19_VFD_FAULT)OTU(F_BM1_19_CTCTR_FAULT);
				N: OTU(F_BM1_18_MOL)OTU(F_BM1_18_VFD_FAULT)OTU(F_BM1_18_CTCTR_FAULT);
				N: OTU(F_BM1_17_MOL)OTU(F_BM1_17_VFD_FAULT)OTU(F_BM1_17_CTCTR_FAULT);
				N: OTU(F_BM1_16_MOL)OTU(F_BM1_16_VFD_FAULT)OTU(F_BM1_16_CTCTR_FAULT);
				N: OTU(F_BM1_15_MOL)OTU(F_BM1_15_VFD_FAULT)OTU(F_BM1_15_CTCTR_FAULT);
				N: OTU(F_BM1_14_MOL)OTU(F_BM1_14_VFD_FAULT)OTU(F_BM1_14_CTCTR_FAULT);
				N: OTU(F_BM1_38_MOL)OTU(F_BM1_38_VFD_FAULT)OTU(F_BM1_38_CTCTR_FAULT);
				N: OTU(F_BM1_37_MOL)OTU(F_BM1_37_VFD_FAULT)OTU(F_BM1_37_CTCTR_FAULT);
				N: OTU(F_BM1_36_MOL)OTU(F_BM1_36_VFD_FAULT)OTU(F_BM1_36_CTCTR_FAULT);
				N: OTU(F_BM1_35_MOL)OTU(F_BM1_35_VFD_FAULT)OTU(F_BM1_35_CTCTR_FAULT);
				N: OTU(F_BM1_34_MOL)OTU(F_BM1_34_VFD_FAULT)OTU(F_BM1_34_CTCTR_FAULT);
				N: OTU(F_BM1_13_MOL)OTU(F_BM1_13_VFD_FAULT)OTU(F_BM1_13_CTCTR_FAULT);
				N: OTU(F_BM1_12_MOL)OTU(F_BM1_12_VFD_FAULT)OTU(F_BM1_12_CTCTR_FAULT);
				N: OTU(F_BM1_11_MOL)OTU(F_BM1_11_VFD_FAULT)OTU(F_BM1_11_CTCTR_FAULT);
				N: OTU(F_BM1_10_MOL)OTU(F_BM1_10_VFD_FAULT)OTU(F_BM1_10_CTCTR_FAULT);
				N: OTU(F_BM1_09_MOL)OTU(F_BM1_09_VFD_FAULT)OTU(F_BM1_09_CTCTR_FAULT);
				N: OTU(F_BM1_08_MOL)OTU(F_BM1_08_VFD_FAULT)OTU(F_BM1_08_CTCTR_FAULT);
				N: OTU(F_BM1_07_MOL)OTU(F_BM1_07_VFD_FAULT)OTU(F_BM1_07_CTCTR_FAULT);
				N: OTU(F_BM1_06_MOL)OTU(F_BM1_06_VFD_FAULT)OTU(F_BM1_06_CTCTR_FAULT);
				N: OTU(F_BM1_05_MOL)OTU(F_BM1_05_VFD_FAULT)OTU(F_BM1_05_CTCTR_FAULT);
				N: OTU(F_BM1_04_MOL)OTU(F_BM1_04_VFD_FAULT)OTU(F_BM1_04_CTCTR_FAULT);
				N: OTU(F_BM1_03_MOL)OTU(F_BM1_03_VFD_FAULT)OTU(F_BM1_03_CTCTR_FAULT);
				N: OTU(F_BM1_02_MOL)OTU(F_BM1_02_VFD_FAULT)OTU(F_BM1_02_CTCTR_FAULT);
				N: OTU(F_BM1_01_MOL)OTU(F_BM1_01_VFD_FAULT)OTU(F_BM1_01_CTCTR_FAULT);
				N: OTU(F_O2T_18_MOL)OTU(F_O2T_18_VFD_FAULT)OTU(F_O2T_18_CTCTR_FAULT);
				N: OTU(F_O2T_17_MOL)OTU(F_O2T_17_VFD_FAULT)OTU(F_O2T_17_CTCTR_FAULT);
				N: OTU(F_O2T_16_MOL)OTU(F_O2T_16_VFD_FAULT)OTU(F_O2T_16_CTCTR_FAULT);
				N: OTU(F_O2T_15_MOL)OTU(F_O2T_15_VFD_FAULT)OTU(F_O2T_15_CTCTR_FAULT);
				N: OTU(F_O2T_14_MOL)OTU(F_O2T_14_VFD_FAULT)OTU(F_O2T_14_CTCTR_FAULT);
				N: OTU(F_O2T_13_MOL)OTU(F_O2T_13_VFD_FAULT)OTU(F_O2T_13_CTCTR_FAULT);
				N: OTU(F_O2T_12_MOL)OTU(F_O2T_12_VFD_FAULT)OTU(F_O2T_12_CTCTR_FAULT);
				N: OTU(F_O2T_11_MOL)OTU(F_O2T_11_VFD_FAULT)OTU(F_O2T_11_CTCTR_FAULT);
				N: OTU(F_O2T_10_MOL)OTU(F_O2T_10_VFD_FAULT)OTU(F_O2T_10_CTCTR_FAULT);
				N: OTU(F_O2T_09_MOL)OTU(F_O2T_09_VFD_FAULT)OTU(F_O2T_09_CTCTR_FAULT);
				N: OTU(F_O2T_08_MOL)OTU(F_O2T_08_VFD_FAULT)OTU(F_O2T_08_CTCTR_FAULT);
				N: OTU(F_O2T_07_MOL)OTU(F_O2T_07_VFD_FAULT)OTU(F_O2T_07_CTCTR_FAULT);
				N: OTU(F_O2T_06_MOL)OTU(F_O2T_06_VFD_FAULT)OTU(F_O2T_06_CTCTR_FAULT);
				N: OTU(F_O2T_05_MOL)OTU(F_O2T_05_VFD_FAULT)OTU(F_O2T_05_CTCTR_FAULT);
				N: OTU(F_O2T_04_MOL)OTU(F_O2T_04_VFD_FAULT)OTU(F_O2T_04_CTCTR_FAULT);
				N: OTU(F_C2T_17_MOL)OTU(F_C2T_17_VFD_FAULT)OTU(F_C2T_17_CTCTR_FAULT);
				N: OTU(F_C2T_16_MOL)OTU(F_C2T_16_VFD_FAULT)OTU(F_C2T_16_CTCTR_FAULT);
				N: OTU(F_C2T_15_MOL)OTU(F_C2T_15_VFD_FAULT)OTU(F_C2T_15_CTCTR_FAULT);
				N: OTU(F_C2T_14_MOL)OTU(F_C2T_14_VFD_FAULT)OTU(F_C2T_14_CTCTR_FAULT);
				N: OTU(F_C2T_13_MOL)OTU(F_C2T_13_VFD_FAULT)OTU(F_C2T_13_CTCTR_FAULT);
				N: OTU(F_C2T_12_MOL)OTU(F_C2T_12_VFD_FAULT)OTU(F_C2T_12_CTCTR_FAULT);
				N: OTU(F_CL2T_09_MOL)OTU(F_CL2T_09_VFD_FAULT)OTU(F_CL2T_09_CTCTR_FAULT);
				N: OTU(F_CL2T_08_MOL)OTU(F_CL2T_08_VFD_FAULT)OTU(F_CL2T_08_CTCTR_FAULT);
				N: OTU(F_CL2T_07_MOL)OTU(F_CL2T_07_VFD_FAULT)OTU(F_CL2T_07_CTCTR_FAULT);
				N: OTU(F_CL2T_06_MOL)OTU(F_CL2T_06_VFD_FAULT)OTU(F_CL2T_06_CTCTR_FAULT);
				N: OTU(F_CL2T_05_MOL)OTU(F_CL2T_05_VFD_FAULT)OTU(F_CL2T_05_CTCTR_FAULT);
				N: OTU(F_CL2T_04_MOL)OTU(F_CL2T_04_VFD_FAULT)OTU(F_CL2T_04_CTCTR_FAULT);
				N: OTU(F_CL2T_03_MOL)OTU(F_CL2T_03_VFD_FAULT)OTU(F_CL2T_03_CTCTR_FAULT);
				N: OTU(F_CL2T_02_MOL)OTU(F_CL2T_02_VFD_FAULT)OTU(F_CL2T_02_CTCTR_FAULT);
				N: OTU(F_CL2T_01_MOL)OTU(F_CL2T_01_VFD_FAULT)OTU(F_CL2T_01_CTCTR_FAULT);
				N: OTU(F_CL3T_08_MOL)OTU(F_CL3T_08_VFD_FAULT)OTU(F_CL3T_08_CTCTR_FAULT);
				N: OTU(F_CL3T_07_MOL)OTU(F_CL3T_07_VFD_FAULT)OTU(F_CL3T_07_CTCTR_FAULT);
				N: OTU(F_CL3T_06_MOL)OTU(F_CL3T_06_VFD_FAULT)OTU(F_CL3T_06_CTCTR_FAULT);
				N: OTU(F_CL3T_05_MOL)OTU(F_CL3T_05_VFD_FAULT)OTU(F_CL3T_05_CTCTR_FAULT);
				N: OTU(F_CL3T_04_MOL)OTU(F_CL3T_04_VFD_FAULT)OTU(F_CL3T_04_CTCTR_FAULT);
				N: OTU(F_CL3T_03_MOL)OTU(F_CL3T_03_VFD_FAULT)OTU(F_CL3T_03_CTCTR_FAULT);
				N: OTU(F_CL3T_02_MOL)OTU(F_CL3T_02_VFD_FAULT)OTU(F_CL3T_02_CTCTR_FAULT);
				N: OTU(F_CL3T_01_MOL)OTU(F_CL3T_01_VFD_FAULT)OTU(F_CL3T_01_CTCTR_FAULT);
				N: OTU(F_O4T_13_MOL)OTU(F_O4T_13_VFD_FAULT)OTU(F_O4T_13_CTCTR_FAULT);
				N: OTU(F_O4T_12_MOL)OTU(F_O4T_12_VFD_FAULT)OTU(F_O4T_12_CTCTR_FAULT);
				N: OTU(F_O4T_11_MOL)OTU(F_O4T_11_VFD_FAULT)OTU(F_O4T_11_CTCTR_FAULT);
				N: OTU(F_O4T_10_MOL)OTU(F_O4T_10_VFD_FAULT)OTU(F_O4T_10_CTCTR_FAULT);
				N: OTU(F_O4T_09_MOL)OTU(F_O4T_09_VFD_FAULT)OTU(F_O4T_09_CTCTR_FAULT);
				N: OTU(F_O4T_08_MOL)OTU(F_O4T_08_VFD_FAULT)OTU(F_O4T_08_CTCTR_FAULT);
				N: OTU(F_O4T_07_MOL)OTU(F_O4T_07_VFD_FAULT)OTU(F_O4T_07_CTCTR_FAULT);
				N: OTU(F_O4T_06_MOL)OTU(F_O4T_06_VFD_FAULT)OTU(F_O4T_06_CTCTR_FAULT);
				N: OTU(F_O4T_05_MOL)OTU(F_O4T_05_VFD_FAULT)OTU(F_O4T_05_CTCTR_FAULT);
				N: OTU(F_XO1_03_MOL)OTU(F_XO1_03_VFD_FAULT)OTU(F_XO1_03_CTCTR_FAULT);
				N: OTU(F_XO1_02_MOL)OTU(F_XO1_02_VFD_FAULT)OTU(F_XO1_02_CTCTR_FAULT);
				N: OTU(F_XO1_01_MOL)OTU(F_XO1_01_VFD_FAULT)OTU(F_XO1_01_CTCTR_FAULT);
				N: OTU(F_T5T_09_MOL)OTU(F_T5T_09_VFD_FAULT)OTU(F_T5T_09_CTCTR_FAULT);
				N: OTU(F_T5T_08_MOL)OTU(F_T5T_08_VFD_FAULT)OTU(F_T5T_08_CTCTR_FAULT);
				N: OTU(F_XO2_05_MOL)OTU(F_XO2_05_VFD_FAULT)OTU(F_XO2_05_CTCTR_FAULT);
				N: OTU(F_XO2_04_MOL)OTU(F_XO2_04_VFD_FAULT)OTU(F_XO2_04_CTCTR_FAULT);
				N: OTU(F_XO2_03_MOL)OTU(F_XO2_03_VFD_FAULT)OTU(F_XO2_03_CTCTR_FAULT);
				N: OTU(F_XO2_02_MOL)OTU(F_XO2_02_VFD_FAULT)OTU(F_XO2_02_CTCTR_FAULT);
				N: OTU(F_XO2_01_MOL)OTU(F_XO2_01_VFD_FAULT)OTU(F_XO2_01_CTCTR_FAULT);
				N: OTU(F_CL1T_26_MOL)OTU(F_CL1T_26_VFD_FAULT)OTU(F_CL1T_26_CTCTR_FAULT);
				N: OTU(F_CL1T_25_MOL)OTU(F_CL1T_25_VFD_FAULT)OTU(F_CL1T_25_CTCTR_FAULT);
				N: OTU(F_CL1T_24_MOL)OTU(F_CL1T_24_VFD_FAULT)OTU(F_CL1T_24_CTCTR_FAULT);
				N: OTU(F_CL1T_23_MOL)OTU(F_CL1T_23_VFD_FAULT)OTU(F_CL1T_23_CTCTR_FAULT);
				N: OTU(F_CL1T_22_MOL)OTU(F_CL1T_22_VFD_FAULT)OTU(F_CL1T_22_CTCTR_FAULT);
				N: OTU(F_CL1T_21_MOL)OTU(F_CL1T_21_VFD_FAULT)OTU(F_CL1T_21_CTCTR_FAULT);
				N: OTU(F_CL1T_20_MOL)OTU(F_CL1T_20_VFD_FAULT)OTU(F_CL1T_20_CTCTR_FAULT);
				N: OTU(F_CL1T_19_MOL)OTU(F_CL1T_19_VFD_FAULT)OTU(F_CL1T_19_CTCTR_FAULT);
				N: OTU(F_CL1T_18_MOL)OTU(F_CL1T_18_VFD_FAULT)OTU(F_CL1T_18_CTCTR_FAULT);
				N: OTU(F_CL1T_17_MOL)OTU(F_CL1T_17_VFD_FAULT)OTU(F_CL1T_17_CTCTR_FAULT);
				N: OTU(F_CL1T_16_MOL)OTU(F_CL1T_16_VFD_FAULT)OTU(F_CL1T_16_CTCTR_FAULT);
				N: OTU(F_CL1T_15_MOL)OTU(F_CL1T_15_VFD_FAULT)OTU(F_CL1T_15_CTCTR_FAULT);
				N: OTU(F_CL1T_14_MOL)OTU(F_CL1T_14_VFD_FAULT)OTU(F_CL1T_14_CTCTR_FAULT);
				N: OTU(F_CL1T_13_MOL)OTU(F_CL1T_13_VFD_FAULT)OTU(F_CL1T_13_CTCTR_FAULT);
				N: OTU(F_CL1T_12_MOL)OTU(F_CL1T_12_VFD_FAULT)OTU(F_CL1T_12_CTCTR_FAULT);
				N: OTU(F_CL1T_11_MOL)OTU(F_CL1T_11_VFD_FAULT)OTU(F_CL1T_11_CTCTR_FAULT);
				N: OTU(F_CL1T_10_MOL)OTU(F_CL1T_10_VFD_FAULT)OTU(F_CL1T_10_CTCTR_FAULT);
				N: OTU(F_CL1T_09_MOL)OTU(F_CL1T_09_VFD_FAULT)OTU(F_CL1T_09_CTCTR_FAULT);
				N: OTU(F_CL1T_08_MOL)OTU(F_CL1T_08_VFD_FAULT)OTU(F_CL1T_08_CTCTR_FAULT);
				N: OTU(F_CL1T_07_MOL)OTU(F_CL1T_07_VFD_FAULT)OTU(F_CL1T_07_CTCTR_FAULT);
				N: OTU(F_CL1T_06_MOL)OTU(F_CL1T_06_VFD_FAULT)OTU(F_CL1T_06_CTCTR_FAULT);
				N: OTU(F_CL1T_05_MOL)OTU(F_CL1T_05_VFD_FAULT)OTU(F_CL1T_05_CTCTR_FAULT);
				N: OTU(F_CL1T_04_MOL)OTU(F_CL1T_04_VFD_FAULT)OTU(F_CL1T_04_CTCTR_FAULT);
				N: OTU(F_CL1T_03_MOL)OTU(F_CL1T_03_VFD_FAULT)OTU(F_CL1T_03_CTCTR_FAULT);
				N: OTU(F_CL1T_02_MOL)OTU(F_CL1T_02_VFD_FAULT)OTU(F_CL1T_02_CTCTR_FAULT);
				N: OTU(F_CL1T_01_MOL)OTU(F_CL1T_01_VFD_FAULT)OTU(F_CL1T_01_CTCTR_FAULT);
				N: OTU(F_HX1T_10A_MOL)OTU(F_HX1T_10A_VFD_FAULT)OTU(F_HX1T_10A_CTCTR_FAULT);
				N: OTU(F_HX1T_10_MOL)OTU(F_HX1T_10_VFD_FAULT)OTU(F_HX1T_10_CTCTR_FAULT);
				N: OTU(F_HX1T_09_MOL)OTU(F_HX1T_09_VFD_FAULT)OTU(F_HX1T_09_CTCTR_FAULT);
				N: OTU(F_HX1T_08_MOL)OTU(F_HX1T_08_VFD_FAULT)OTU(F_HX1T_08_CTCTR_FAULT);
				N: OTU(F_HX1T_07_MOL)OTU(F_HX1T_07_VFD_FAULT)OTU(F_HX1T_07_CTCTR_FAULT);
				N: OTU(F_HX1T_06_MOL)OTU(F_HX1T_06_VFD_FAULT)OTU(F_HX1T_06_CTCTR_FAULT);
				N: OTU(F_O4T_22_MOL)OTU(F_O4T_22_VFD_FAULT)OTU(F_O4T_22_CTCTR_FAULT);
				N: OTU(F_O4T_21_MOL)OTU(F_O4T_21_VFD_FAULT)OTU(F_O4T_21_CTCTR_FAULT);
				N: OTU(F_O4T_20_MOL)OTU(F_O4T_20_VFD_FAULT)OTU(F_O4T_20_CTCTR_FAULT);
				N: OTU(F_O4T_19_MOL)OTU(F_O4T_19_VFD_FAULT)OTU(F_O4T_19_CTCTR_FAULT);
				N: OTU(F_O4T_18_MOL)OTU(F_O4T_18_VFD_FAULT)OTU(F_O4T_18_CTCTR_FAULT);
				N: OTU(F_O4T_17_MOL)OTU(F_O4T_17_VFD_FAULT)OTU(F_O4T_17_CTCTR_FAULT);
				N: OTU(F_O4T_16_MOL)OTU(F_O4T_16_VFD_FAULT)OTU(F_O4T_16_CTCTR_FAULT);
				N: OTU(F_O3T_20_MOL)OTU(F_O3T_20_VFD_FAULT)OTU(F_O3T_20_CTCTR_FAULT);
				N: OTU(F_O3T_19_MOL)OTU(F_O3T_19_VFD_FAULT)OTU(F_O3T_19_CTCTR_FAULT);
				N: OTU(F_O3T_18_MOL)OTU(F_O3T_18_VFD_FAULT)OTU(F_O3T_18_CTCTR_FAULT);
				N: OTU(F_O3T_17_MOL)OTU(F_O3T_17_VFD_FAULT)OTU(F_O3T_17_CTCTR_FAULT);
				N: OTU(F_CL12T_36_MOL)OTU(F_CL12T_36_VFD_FAULT)OTU(F_CL12T_36_CTCTR_FAULT);
				N: OTU(F_CL12T_35_MOL)OTU(F_CL12T_35_VFD_FAULT)OTU(F_CL12T_35_CTCTR_FAULT);
		END_ROUTINE

		ROUTINE AM_COM_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine replaces the regular COM STATUS routine for automod testing.$N"
				    "**********************************************************************************************$N"
				    "THIS ROUTINE SHOULD BE DELETED PRIORT TO INSTALLING ON SITE.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "***********************************$N"
				    "Card CC01_RK01_S02$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,CC01_RK1_S02_STATUS.EntryStatus[0]) ,BTD(CC01_RK1_S02_STATUS.EntryStatus[0],12,CC01_RK1_S02_STATUS.EntryStatus[1],0,4) ,NEQ(CC01_RK1_S02_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,CC01_RK1_S02_STATUS.FaultData) ,OTE(CC01_RK1_S02_STATUS.Fault) ] ];
				N: MOV(10000,CC01_RK1_S02_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(CC01_RK1_S02_STATUS.Fault)TOF(CC01_RK1_S02_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(CC01_RK1_S02_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_CC01_RK01_S02_COMM);
				RC: "***********************************$N"
				    "Card MCP_BM1_RK01_S16$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_BM1_RK1_S16_STATUS.EntryStatus[0]) ,BTD(MCP_BM1_RK1_S16_STATUS.EntryStatus[0],12,MCP_BM1_RK1_S16_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_BM1_RK1_S16_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_BM1_RK1_S16_STATUS.FaultData) ,OTE(MCP_BM1_RK1_S16_STATUS.Fault) ] ];
				N: MOV(10000,MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_BM1_RK1_S16_STATUS.Fault)TOF(MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_BM1_RK01_S16_COMM);
				RC: "***********************************$N"
				    "Card MCP_BM1_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_BM1_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_BM1_RK2_S0_STATUS.EntryStatus[0],12,MCP_BM1_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_BM1_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_BM1_RK2_S0_STATUS.FaultData) ,OTE(MCP_BM1_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_BM1_RK2_S0_STATUS.Fault)TOF(MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_BM1_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_01_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_01_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_01_RK1_S0_STATUS.EntryStatus[0],12,MCP_01_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_01_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_01_RK1_S0_STATUS.FaultData) ,OTE(MCP_01_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_01_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_01_RK1_S0_STATUS.Fault)TOF(MCP_01_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_01_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_01_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_01_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_01_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_01_RK2_S0_STATUS.EntryStatus[0],12,MCP_01_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_01_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_01_RK2_S0_STATUS.FaultData) ,OTE(MCP_01_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_01_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_01_RK2_S0_STATUS.Fault)TOF(MCP_01_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_01_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_01_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_02_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_02_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_02_RK1_S0_STATUS.EntryStatus[0],12,MCP_02_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_02_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_02_RK1_S0_STATUS.FaultData) ,OTE(MCP_02_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_02_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_02_RK1_S0_STATUS.Fault)TOF(MCP_02_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_02_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_02_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_02_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_02_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_02_RK2_S0_STATUS.EntryStatus[0],12,MCP_02_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_02_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_02_RK2_S0_STATUS.FaultData) ,OTE(MCP_02_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_02_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_02_RK2_S0_STATUS.Fault)TOF(MCP_02_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_02_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_02_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_03_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_03_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_03_RK1_S0_STATUS.EntryStatus[0],12,MCP_03_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_03_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_03_RK1_S0_STATUS.FaultData) ,OTE(MCP_03_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_03_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_03_RK1_S0_STATUS.Fault)TOF(MCP_03_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_03_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_03_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_03_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_03_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_03_RK2_S0_STATUS.EntryStatus[0],12,MCP_03_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_03_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_03_RK2_S0_STATUS.FaultData) ,OTE(MCP_03_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_03_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_03_RK2_S0_STATUS.Fault)TOF(MCP_03_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_03_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_03_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_16_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_16_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_16_RK1_S0_STATUS.EntryStatus[0],12,MCP_16_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_16_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_16_RK1_S0_STATUS.FaultData) ,OTE(MCP_16_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_16_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_16_RK1_S0_STATUS.Fault)TOF(MCP_16_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_16_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_16_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_16_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,AM_Adapter,EntryStatus,MCP_16_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_16_RK2_S0_STATUS.EntryStatus[0],12,MCP_16_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_16_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,AM_Adapter,FaultCode,MCP_16_RK2_S0_STATUS.FaultData) ,OTE(MCP_16_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_16_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_16_RK2_S0_STATUS.Fault)TOF(MCP_16_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_16_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_16_RK02_S00_COMM);
		END_ROUTINE

		ROUTINE AM_FROM_PLC10 
				N: [XIC(O_C_BM1_01) OTE(AM_O_C_BM1_01) ,XIC(O_C_BM1_02) OTE(AM_O_C_BM1_02) ,XIC(O_C_BM1_03) OTE(AM_O_C_BM1_03) ,XIC(O_C_BM1_04) OTE(AM_O_C_BM1_04) ,XIC(O_C_BM1_05) OTE(AM_O_C_BM1_05) ,XIC(O_C_BM1_06) OTE(AM_O_C_BM1_06) ,XIC(O_C_BM1_07) OTE(AM_O_C_BM1_07) ,XIC(O_C_BM1_08) OTE(AM_O_C_BM1_08) ,XIC(O_C_BM1_09) OTE(AM_O_C_BM1_09) ,XIC(O_C_BM1_10) OTE(AM_O_C_BM1_10) ,XIC(O_C_BM1_11) OTE(AM_O_C_BM1_11) ,XIC(O_C_BM1_12) OTE(AM_O_C_BM1_12) ,XIC(O_C_BM1_13_FWD) OTE(AM_O_C_BM1_13) ,XIC(O_C_BM1_14) OTE(AM_O_C_BM1_14) ,XIC(O_C_BM1_15) OTE(AM_O_C_BM1_15) ,XIC(O_C_BM1_16) OTE(AM_O_C_BM1_16) ,XIC(O_C_BM1_17) OTE(AM_O_C_BM1_17) ,XIC(O_C_BM1_18) OTE(AM_O_C_BM1_18) ,XIC(O_C_BM1_19) OTE(AM_O_C_BM1_19) ,XIC(O_C_BM1_20) OTE(AM_O_C_BM1_20) ,XIC(O_C_BM1_21) OTE(AM_O_C_BM1_21) ,XIC(O_C_BM1_22) OTE(AM_O_C_BM1_22) ,XIC(O_C_BM1_23) OTE(AM_O_C_BM1_23) ,XIC(O_C_BM1_24) OTE(AM_O_C_BM1_24) ,XIC(O_C_BM1_25) OTE(AM_O_C_BM1_25) ,XIC(O_C_BM1_26) OTE(AM_O_C_BM1_26) ,XIC(O_C_BM1_34) OTE(AM_O_C_BM1_34) ,XIC(O_C_BM1_35) OTE(AM_O_C_BM1_35) ,XIC(O_C_BM1_36) OTE(AM_O_C_BM1_36) ,XIC(O_C_BM1_37) OTE(AM_O_C_BM1_37) ,XIC(O_C_BM1_38) OTE(AM_O_C_BM1_38) ,XIC(O_VFD_CL1T_23_FWD) OTE(AM_O_M_CL1T_22) ,XIC(O_VFD_CL1T_26_FWD) OTE(AM_O_M_CL1T_25) ];
				N: [XIC(O_C_BM1_27) OTE(AM_O_C_BM1_27) ,XIC(O_C_BM1_27) OTE(AM_O_C_BM1_27_FWD) ,XIC(O_C_BM1_27) OTE(AM_O_C_BM1_27_REV) ,XIC(O_C_BM1_28) OTE(AM_O_C_BM1_28_FWD) ,XIC(O_C_BM1_28) OTE(AM_O_C_BM1_28_REV) ,XIC(O_C_BM1_29) OTE(AM_O_C_BM1_29_FWD) ,XIC(O_C_BM1_29) OTE(AM_O_C_BM1_29_REV) ,XIC(O_C_BM1_30) OTE(AM_O_C_BM1_30_FWD) ,XIC(O_C_BM1_30) OTE(AM_O_C_BM1_30_REV) ,XIC(O_VFD_C2T_12_FWD) OTE(AM_O_M_C2T_12) ,XIC(O_VFD_C2T_13_FWD) OTE(AM_O_M_C2T_13) ,XIC(O_VFD_C2T_14_FWD) OTE(AM_O_M_C2T_14) ,XIC(O_VFD_C2T_15_FWD) OTE(AM_O_M_C2T_15) ,XIC(O_VFD_C2T_16_FWD) OTE(AM_O_M_C2T_16) ,XIC(O_VFD_C2T_17_FWD) OTE(AM_O_M_C2T_17) ,XIC(O_VFD_CL1T_01_FWD) OTE(AM_O_M_CL1T_01) ,XIC(O_VFD_CL1T_02_FWD) OTE(AM_O_M_CL1T_02) ,XIC(O_VFD_CL1T_03_FWD) OTE(AM_O_M_CL1T_03) ,XIC(O_VFD_CL1T_04_FWD) OTE(AM_O_M_CL1T_04) ,XIC(O_VFD_CL1T_05_FWD) OTE(AM_O_M_CL1T_05) ,XIC(O_VFD_CL1T_06_FWD) OTE(AM_O_M_CL1T_06) ,XIC(O_VFD_CL1T_07_FWD) OTE(AM_O_M_CL1T_07) ,XIC(O_VFD_CL1T_08_FWD) OTE(AM_O_M_CL1T_08) ,XIC(O_VFD_CL1T_09_FWD) OTE(AM_O_M_CL1T_09) ,XIC(O_VFD_CL1T_10_FWD) OTE(AM_O_M_CL1T_10) ,XIC(O_VFD_CL1T_11_FWD) OTE(AM_O_M_CL1T_11) ,XIC(O_VFD_CL1T_12_FWD) OTE(AM_O_M_CL1T_12) ,XIC(O_VFD_CL1T_13_FWD) OTE(AM_O_M_CL1T_13) ,XIC(O_VFD_CL1T_14_FWD) OTE(AM_O_M_CL1T_14) ,XIC(O_VFD_CL1T_15_FWD) OTE(AM_O_M_CL1T_15) ,XIC(O_VFD_CL1T_16_FWD) OTE(AM_O_M_CL1T_16) ,XIC(O_VFD_CL1T_17_FWD) OTE(AM_O_M_CL1T_17) ,XIC(O_VFD_CL1T_18_FWD) OTE(AM_O_M_CL1T_18) ,XIC(O_VFD_CL1T_19_FWD) OTE(AM_O_M_CL1T_19) ,XIC(O_VFD_CL1T_20_FWD) OTE(AM_O_M_CL1T_20) ,XIC(O_VFD_CL1T_21_FWD) OTE(AM_O_M_CL1T_21) ,XIC(O_VFD_CL1T_23_FWD) OTE(AM_O_M_CL1T_23) ,XIC(O_VFD_CL1T_24_FWD) OTE(AM_O_M_CL1T_24) ,XIC(O_VFD_CL1T_26_FWD) OTE(AM_O_M_CL1T_26) ,XIC(O_VFD_CL2T_01_FWD) OTE(AM_O_M_CL2T_01) ,XIC(O_VFD_CL2T_02_FWD) OTE(AM_O_M_CL2T_02) ,XIC(O_VFD_CL2T_03_FWD) OTE(AM_O_M_CL2T_03) ,XIC(O_VFD_CL2T_04_FWD) OTE(AM_O_M_CL2T_04) ,XIC(O_VFD_CL2T_05_FWD) OTE(AM_O_M_CL2T_05) ,XIC(O_VFD_CL2T_06_FWD) OTE(AM_O_M_CL2T_06) ,XIC(O_VFD_CL2T_07_FWD) OTE(AM_O_M_CL2T_07) ,XIC(O_VFD_CL2T_08_FWD) OTE(AM_O_M_CL2T_08) ,XIC(O_VFD_CL2T_09_FWD) OTE(AM_O_M_CL2T_09) ,XIC(O_VFD_CL3T_01_FWD) OTE(AM_O_M_CL3T_01) ,XIC(O_VFD_CL3T_02_FWD) OTE(AM_O_M_CL3T_02) ,XIC(O_VFD_CL3T_03_FWD) OTE(AM_O_M_CL3T_03) ,XIC(O_VFD_CL3T_04_FWD) OTE(AM_O_M_CL3T_04) ,XIC(O_VFD_CL3T_05_FWD) OTE(AM_O_M_CL3T_05) ,XIC(O_VFD_CL3T_06_FWD) OTE(AM_O_M_CL3T_06) ,XIC(O_VFD_CL3T_07_FWD) OTE(AM_O_M_CL3T_07) ,XIC(O_VFD_CL3T_08_FWD) OTE(AM_O_M_CL3T_08) ,XIC(O_VFD_HX1T_06_FWD) OTE(AM_O_M_HX1T_06) ,XIC(O_VFD_HX1T_07_FWD) OTE(AM_O_M_HX1T_07) ,XIC(O_VFD_HX1T_08_FWD) OTE(AM_O_M_HX1T_08) ,XIC(O_VFD_HX1T_09_FWD) OTE(AM_O_M_HX1T_09) ,XIC(O_VFD_HX1T_10_FWD) OTE(AM_O_M_HX1T_10) ,XIC(O_VFD_HX1T_10A_FWD) OTE(AM_O_M_HX1T_10A) ,XIC(O_VFD_O2T_04_FWD) OTE(AM_O_M_O2T_04) ,XIC(O_VFD_O2T_05_FWD) OTE(AM_O_M_O2T_05) ,XIC(O_VFD_O2T_06_FWD) OTE(AM_O_M_O2T_06) ,XIC(O_VFD_O2T_07_FWD) OTE(AM_O_M_O2T_07) ,XIC(O_VFD_O2T_08_FWD) OTE(AM_O_M_O2T_08) ,XIC(O_VFD_O2T_09_FWD) OTE(AM_O_M_O2T_09) ,XIC(O_VFD_O2T_10_FWD) OTE(AM_O_M_O2T_10) ,XIC(O_VFD_O2T_11_FWD) OTE(AM_O_M_O2T_11) ,XIC(O_VFD_O2T_12_FWD) OTE(AM_O_M_O2T_12) ,XIC(O_VFD_O2T_13_FWD) OTE(AM_O_M_O2T_13) ,XIC(O_VFD_O2T_14_FWD) OTE(AM_O_M_O2T_14) ,XIC(O_VFD_O2T_15_FWD) OTE(AM_O_M_O2T_15) ,XIC(O_VFD_O2T_16_FWD) OTE(AM_O_M_O2T_16) ,XIC(O_VFD_O2T_17_FWD) OTE(AM_O_M_O2T_17) ,XIC(O_VFD_O2T_18_FWD) OTE(AM_O_M_O2T_18) ,XIC(O_VFD_O3T_17_FWD) OTE(AM_O_M_O3T_17) ,XIC(O_VFD_O3T_18_FWD) OTE(AM_O_M_O3T_18) ,XIC(O_VFD_O3T_19_FWD) OTE(AM_O_M_O3T_19) ,XIC(O_VFD_O3T_20_FWD) OTE(AM_O_M_O3T_20) ,XIC(INT.ALWAYS_FALSE) OTE(AM_O_M_O3T_21) ,XIC(O_VFD_O4T_05_FWD) OTE(AM_O_M_O4T_05) ,XIC(O_VFD_O4T_06_FWD) OTE(AM_O_M_O4T_06) ,XIC(O_VFD_O4T_07_FWD) OTE(AM_O_M_O4T_07) ,XIC(O_VFD_O4T_08_FWD) OTE(AM_O_M_O4T_08) ,XIC(O_VFD_O4T_09_FWD) OTE(AM_O_M_O4T_09) ,XIC(O_VFD_O4T_10_FWD) OTE(AM_O_M_O4T_10) ,XIC(O_VFD_O4T_11_FWD) OTE(AM_O_M_O4T_11) ,XIC(O_VFD_O4T_12_FWD) OTE(AM_O_M_O4T_12) ,XIC(O_VFD_O4T_13_FWD) OTE(AM_O_M_O4T_13) ,XIC(O_VFD_O4T_16_FWD) OTE(AM_O_M_O4T_16) ,XIC(O_VFD_O4T_17_FWD) OTE(AM_O_M_O4T_17) ,XIC(O_VFD_O4T_18_FWD) OTE(AM_O_M_O4T_18) ,XIC(O_VFD_O4T_19_FWD) OTE(AM_O_M_O4T_19) ,XIC(O_VFD_O4T_20_FWD) OTE(AM_O_M_O4T_20) ,XIC(O_VFD_O4T_21_FWD) OTE(AM_O_M_O4T_21) ,XIC(O_VFD_O4T_22_FWD) OTE(AM_O_M_O4T_22) ,XIC(INT.ALWAYS_FALSE) OTE(AM_O_M_O4T_23) ,XIC(O_VFD_T5T_08_FWD) OTE(AM_O_M_T5T_08) ,XIC(O_VFD_T5T_09_FWD) OTE(AM_O_M_T5T_09) ,XIC(O_VFD_XO1_01_FWD) OTE(AM_O_M_XO1_01) ,XIC(O_VFD_XO1_02_FWD) OTE(AM_O_M_XO1_02) ,XIC(O_VFD_XO1_03_FWD) OTE(AM_O_M_XO1_03) ,XIC(O_VFD_XO2_01_FWD) OTE(AM_O_M_XO2_01) ,XIC(O_VFD_XO2_02_FWD) OTE(AM_O_M_XO2_02) ,XIC(O_VFD_XO2_03_FWD) OTE(AM_O_M_XO2_03) ,XIC(O_VFD_XO2_04_FWD) OTE(AM_O_M_XO2_04) ];
				N: [XIC(O_SD_XO1_EXT) OTE(AM_O_HSD_HSD_XO1_EXT) ,XIC(O_SD_XO2_EXT) OTE(AM_O_HSD_HSD_XO2_EXT) ];
				N: [XIC(O_SD_XO1_RET) OTE(AM_O_HSD_HSD_XO1_RET) ,XIC(O_SD_XO2_RET) OTE(AM_O_HSD_HSD_XO2_RET) ];
		END_ROUTINE

		ROUTINE AM_TO_PLC10 
				N: XIC(AM_MODEL1_RUNNING)NOP();
				N: [XIC(AM_I_PE_BM1_06) OTE(I_PE1_BM1_06) ,XIC(AM_I_PE_BM1_06_OH) OTE(I_PE1_BM1_06) ,XIC(AM_I_PE_BM1_07) OTE(I_PE_BM1_07) ,XIC(AM_I_PE_BM1_08) OTE(I_PE_BM1_08) ,XIC(AM_I_PE_BM1_09) OTE(I_PE_BM1_09) ,XIC(AM_I_PE_BM1_10) OTE(I_PE_BM1_10) ,XIC(AM_I_PE_BM1_11) OTE(I_PE_BM1_11) ,XIC(AM_I_PE_BM1_12) OTE(I_PE_BM1_12) ,XIC(AM_I_PE_BM1_13) OTE(I_PE_BM1_13) ,XIC(AM_I_PE_BM1_14) OTE(I_PE1_BM1_14) ,XIC(AM_I_PE_BM1_15) OTE(I_PE1_BM1_28) ,XIC(AM_I_PE_BM1_16) OTE(I_PE2_BM1_28) ,XIC(AM_I_PE_BM1_17) OTE(I_PE1_BM1_27) ,XIC(AM_I_PE_BM1_18) OTE(I_PE_BM1_18) ,XIC(AM_I_PE_BM1_19) OTE(I_PE1_BM1_19) ,XIC(AM_I_PE_BM1_19_OH) OTE(I_PE2_BM1_19) ,XIC(AM_I_PE_BM1_20) OTE(I_PE_BM1_20) ,XIC(AM_I_PE_BM1_21) OTE(I_PE_BM1_21) ,XIC(AM_I_PE_BM1_22) OTE(I_PE_BM1_22) ,XIC(AM_I_PE_BM1_23) OTE(I_PE_BM1_23) ,XIC(AM_I_PE_BM1_24) OTE(I_PE_BM1_24) ,XIC(AM_I_PE_BM1_25) OTE(I_PE_BM1_25) ,XIC(AM_I_PE_BM1_26) OTE(I_PE_BM1_26) ,XIC(AM_I_PE_BM1_27) OTE(I_PE1_BM1_27) ,XIC(AM_I_PE_BM1_28) OTE(I_PE1_BM1_28) ,XIC(AM_I_PE_BM1_29) OTE(I_PE1_BM1_29) ,XIC(AM_I_PE_BM1_30) OTE(I_PE1_BM1_30) ,XIC(AM_I_PE_BM1_30_OH) OTE(I_PE3_BM1_30) ,XIC(AM_I_PE_BM1_34) OTE(I_PE_BM1_34) ,XIC(AM_I_PE_BM1_35) OTE(I_PE_BM1_35) ,XIC(AM_I_PE_BM1_36) OTE(I_PE_BM1_36) ,XIC(AM_I_PE_BM1_37) OTE(I_PE_BM1_37) ,XIC(AM_I_PE_BM1_38) OTE(I_PE_BM1_38) ,XIC(AM_I_PE_C2T_12) OTE(I_PE_C2T_12) ,XIC(AM_I_PE_C2T_13) OTE(I_PE_C2T_13) ,XIC(AM_I_PE_C2T_14) OTE(I_PE_C2T_14) ,XIC(AM_I_PE_C2T_15) OTE(I_PE_C2T_15) ,XIC(AM_I_PE_C2T_16) OTE(I_PE_C2T_16) ,XIC(AM_I_PE_C2T_17) OTE(I_PE_C2T_17) ,XIC(AM_I_PE_CL1T_01) OTE(I_PE_CL1T_01) ,XIC(AM_I_PE_CL1T_02) OTE(I_PE_CL1T_02) ,XIC(AM_I_PE_CL1T_03) OTE(I_PE_CL1T_03) ,XIC(AM_I_PE_CL1T_04) OTE(I_PE_CL1T_04) ,XIC(AM_I_PE_CL1T_05) OTE(I_PE_CL1T_05) ,XIC(AM_I_PE_CL1T_06) OTE(I_PE_CL1T_06) ,XIC(AM_I_PE_CL1T_07) OTE(I_PE_CL1T_07) ,XIC(AM_I_PE_CL1T_08) OTE(I_PE_CL1T_08) ,XIC(AM_I_PE_CL1T_09) OTE(I_PE_CL1T_09) ,XIC(AM_I_PE_CL1T_10) OTE(I_PE_CL1T_10) ,XIC(AM_I_PE_CL1T_11) OTE(I_PE_CL1T_11) ,XIC(AM_I_PE_CL1T_12) OTE(I_PE_CL1T_12) ,XIC(AM_I_PE_CL1T_13) OTE(I_PE_CL1T_13) ,XIC(AM_I_PE_CL1T_14) OTE(I_PE_CL1T_14) ,XIC(AM_I_PE_CL1T_15) OTE(I_PE_CL1T_15) ,XIC(AM_I_PE_CL1T_16) OTE(I_PE_CL1T_16) ,XIC(AM_I_PE_CL1T_17) OTE(I_PE_CL1T_17) ,XIC(AM_I_PE_CL1T_18) OTE(I_PE_CL1T_18) ,XIC(AM_I_PE_CL1T_19) OTE(I_PE_CL1T_19) ,XIC(AM_I_PE_CL1T_20) OTE(I_PE_CL1T_20) ,XIC(AM_I_PE_CL1T_21) OTE(I_PE_CL1T_21) ,XIC(AM_I_PE_CL1T_23) OTE(I_PE_CL1T_23) ,XIC(AM_I_PE_CL1T_24) OTE(I_PE_CL1T_24) ,XIC(AM_I_PE_CL1T_26) OTE(I_PE1_CL1T_26) ,XIC(AM_I_PE_CL2T_01) OTE(I_PE_CL2T_01) ,XIC(AM_I_PE_CL2T_02) OTE(I_PE_CL2T_02) ,XIC(AM_I_PE_CL2T_03) OTE(I_PE_CL2T_03) ,XIC(AM_I_PE_CL2T_04) OTE(I_PE_CL2T_04) ,XIC(AM_I_PE_CL2T_05) OTE(I_PE_CL2T_05) ,XIC(AM_I_PE_CL2T_06) OTE(I_PE_CL2T_06) ,XIC(AM_I_PE_CL2T_07) OTE(I_PE_CL2T_07) ,XIC(AM_I_PE_CL2T_08) OTE(I_PE_CL2T_08) ,XIC(AM_I_PE_CL2T_09) OTE(I_PE_CL2T_09) ,XIC(AM_I_PE_CL3T_01) OTE(I_PE_CL3T_01) ,XIC(AM_I_PE_CL3T_02) OTE(I_PE_CL3T_02) ,XIC(AM_I_PE_CL3T_03) OTE(I_PE_CL3T_03) ,XIC(AM_I_PE_CL3T_04) OTE(I_PE_CL3T_04) ,XIC(AM_I_PE_CL3T_05) OTE(I_PE_CL3T_05) ,XIC(AM_I_PE_CL3T_06) OTE(I_PE_CL3T_06) ,XIC(AM_I_PE_CL3T_07) OTE(I_PE_CL3T_07) ,XIC(AM_I_PE_CL3T_08) OTE(I_PE_CL3T_08) ,XIC(AM_I_PE_HX1T_06) OTE(I_PE_HX1T_06) ,XIC(AM_I_PE_HX1T_07) OTE(I_PE_HX1T_07) ,XIC(AM_I_PE_HX1T_08) OTE(I_PE_HX1T_08) ,XIC(AM_I_PE_HX1T_09) OTE(I_PE_HX1T_09) ,XIC(AM_I_PE_HX1T_10) OTE(I_PE_HX1T_10) ,XIC(AM_I_PE_HX1T_10A) OTE(I_PE_HX1T_10A) ,XIC(AM_I_PE_O2T_04) OTE(I_PE_O2T_04) ,XIC(AM_I_PE_O2T_05) OTE(I_PE_O2T_05) ,XIC(AM_I_PE_O2T_06) OTE(I_PE_O2T_06) ,XIC(AM_I_PE_O2T_07) OTE(I_PE_O2T_07) ,XIC(AM_I_PE_O2T_08) OTE(I_PE_O2T_08) ,XIC(AM_I_PE_O2T_09) OTE(I_PE_O2T_09) ,XIC(AM_I_PE_O2T_10) OTE(I_PE_O2T_10) ,XIC(AM_I_PE_O2T_11) OTE(I_PE_O2T_11) ,XIC(AM_I_PE_O2T_12) OTE(I_PE_O2T_12) ,XIC(AM_I_PE_O2T_13) OTE(I_PE_O2T_13) ,XIC(AM_I_PE_O2T_14) OTE(I_PE_O2T_14) ,XIC(AM_I_PE_O2T_15) OTE(I_PE_O2T_15) ,XIC(AM_I_PE_O2T_16) OTE(I_PE_O2T_16) ,XIC(AM_I_PE_O2T_17) OTE(I_PE_O2T_17) ,XIC(AM_I_PE_O2T_18) OTE(I_PE_O2T_18) ,XIC(AM_I_PE_O4T_05) OTE(I_PE_O4T_05) ,XIC(AM_I_PE_O4T_06) OTE(I_PE_O4T_06) ,XIC(AM_I_PE_O4T_07) OTE(I_PE_O4T_07) ,XIC(AM_I_PE_O4T_08) OTE(I_PE_O4T_08) ,XIC(AM_I_PE_O4T_09) OTE(I_PE_O4T_09) ,XIC(AM_I_PE_O4T_10) OTE(I_PE1_O4T_10) ,XIC(AM_I_PE_O4T_11) OTE(I_PE_O4T_11) ,XIC(AM_I_PE_O4T_12) OTE(I_PE_O4T_12) ,XIC(AM_I_PE_O4T_13) OTE(I_PE_O4T_13) ,XIC(AM_I_PE_T5T_08) OTE(I_PE_T5T_08) ,XIC(AM_I_PE_T5T_09) OTE(I_PE_T5T_09) ,XIC(AM_I_PE_XO1_01) OTE(I_PE1_XO1_01) ,XIC(AM_I_PE_XO1_02) OTE(I_PE_XO1_02) ,XIC(AM_I_PE_XO1_03) OTE(I_PE_XO1_03) ,XIC(AM_I_PE_XO2_01) OTE(I_PE_XO2_01) ,XIC(AM_I_PE_XO2_02) OTE(I_PE_XO2_02) ,XIC(AM_I_PE_XO2_03) OTE(I_PE_XO2_03) ,XIC(AM_I_PE_XO2_04) OTE(I_PE_XO2_04) ,XIC(AM_I_PE_zPARE1_02) NOP() ,XIC(AM_I_PE_zPARE1_03) NOP() ,XIC(AM_I_PE_zPARE1_04) NOP() ,XIC(AM_I_PE_zPARE1_05) NOP() ,XIC(AM_I_PE_zPARE1_06) NOP() ,XIC(AM_I_PE_BM1_14_A) OTE(I_PE2_BM1_14) ,XIC(AM_I_PE_BM1_23_A) OTE(I_PE2_BM1_23) ,XIC(AM_I_PE_BM1_27_A) OTE(I_PE2_BM1_27) ,XIC(AM_I_PE_BM1_28_A) OTE(I_PE2_BM1_28) ,XIC(AM_I_PE_BM1_29_A) OTE(I_PE2_BM1_29) ,XIC(AM_I_PE_BM1_30_A) OTE(I_PE2_BM1_30) ,XIC(AM_I_PE_O4T_10_A) OTE(I_PE2_O4T_10) ,XIC(AM_I_PE_XO1_01_A) OTE(I_PE2_XO1_01) ,XIC(AM_I_PE_BM1_23_B) OTE(I_PE2_BM1_23) ];
				N: [XIC(AM_I_HSD_HSD_XO1_EXT) OTE(I_SD_XO1_EXT) ,XIC(AM_I_HSD_HSD_XO2_EXT) OTE(I_SD_XO2_EXT) ];
				N: [XIC(AM_I_HSD_HSD_XO1_HOME) OTE(I_SD_XO1_ZERO) ,XIC(AM_I_HSD_HSD_XO2_HOME) OTE(I_SD_XO2_ZERO) ];
		END_ROUTINE

		ROUTINE BM1_13_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE2_BM1_14)OTL(BM1_13_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(BM1_14_BT.BT_PULSE)[OTU(BM1_13_MRG.MainLineBScntrl.EN) ,BSR(BM1_13_MRG.MainLineBS[0],BM1_13_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(BM1_13_MRG.Lead_Gap_Acc.6) ADD(1,BM1_13_MRG.Lead_Gap_Acc,BM1_13_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(BM1_13_MRG.BagPastPE,BM1_13_MRGx.Lead_Gap,BM1_13_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(BM1_13_MRG.MainLineBScntrl.UL)CLR(BM1_13_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(BM1_13_MRG.Lead_Gap_Acc,BM1_13_MRG.Lead_Gap)OTE(BM1_13_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(BM1_13_MRG.MrgSeal)XIC(BM1_13_PE.FILT_NEG_XITN)RES(BM1_13_MRG.SyncRunTmr);
				N: [XIC(BM1_13_MTR.CONV_RUN) ,XIC(BM1_13_MTR.IM_TMR.TT) ]RTO(BM1_13_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_BM1_13) ,XIC(BM1_13_PE.FILT) ,XIC(BM1_13_MRG.PeSeal) XIO(BM1_13_MTR.ANTI_CASC) XIO(BM1_13_MTR.CONV_RUN) XIC(BM1_13_MTR.INTL_MTR) ][XIO(BM1_13_MRG.PeSeal) OTE(BM1_13_MRG.PeSeal_PosXitn) ,OTE(BM1_13_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(BM1_13_MRG.PeSeal_PosXitn)[MOV(BM1_13_MRG.Length,BM1_13_MRG.BagLength_Gap) CLR(BM1_13_MRG.Length) ,MOV(54,BM1_13_MRGx.MinLength) ,EQU(BM1_13_MRG.BagLength_Gap,0) DIV(BM1_13_MRGx.MinLength,BM1_13_BTx.RES,BM1_13_MRG.BagLength_Gap) ,ADD(BM1_13_MRG.BagLength_Gap,BM1_13_MRGx.Trail_Gap,BM1_13_MRG.BagLength_Gap) ,GRT(BM1_13_MRG.BagLength_Gap,BM1_13_MRGx.MaxLength) MOV(BM1_13_MRGx.MaxLength,BM1_13_MRG.BagLength_Gap) ,FLL(0,BM1_13_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[BM1_13_MRG.BagLength_Gap],BM1_13_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[BM1_13_MRG.BagLength_Gap],BM1_13_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[BM1_13_MRG.BagLength_Gap],BM1_13_MRG.MrgLineBS[2]) ,CLR(BM1_13_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(BM1_13_MRG.PeSeal)XIO(BM1_13_MRG.MrgSeal)XIC(BM1_13_BT.BT_PULSE)[OTU(BM1_13_MRG.MrgLineBScntrl.EN) ,BSR(BM1_13_MRG.MrgLineBS[0],BM1_13_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,BM1_13_MRG.BagPastPE,BM1_13_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(BM1_13_MRG.MainLineBS[0],BM1_13_MRG.MrgLineBS[0],BM1_13_MRG.Intrfr[0])AND(BM1_13_MRG.MainLineBS[1],BM1_13_MRG.MrgLineBS[1],BM1_13_MRG.Intrfr[1])AND(BM1_13_MRG.MainLineBS[2],BM1_13_MRG.MrgLineBS[2],BM1_13_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(BM1_13_MRG.Intrfr[0],0)EQU(BM1_13_MRG.Intrfr[1],0)EQU(BM1_13_MRG.Intrfr[2],0)[XIC(BM1_13_MRG.Lead_Gap_DN) ,XIC(BM1_13_MRG.Hold_Align) ][XIO(BM1_13_MRG.MrgOK) OTE(BM1_13_MRG.MrgOK_PosXitn) ,OTE(BM1_13_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(BM1_13_MTR.INTL_MTR) [XIO(BM1_13_MRG.Hold_MB) XIO(BM1_13_MRG.Hold_MA) XIO(BM1_13_MRG.Hold_Align) XIC(BM1_13_MRG.MrgOK) ,XIC(BM1_13_MRG.Hold_MA) XIO(BM1_13_MRG.MrgOK) ,XIC(BM1_13_MRG.MrgOK_PosXitn) ] ,XIC(BM1_13_MRG.MrgSeal) ]XIO(BM1_13_MTR.SPACE)XIC(BM1_13_MRG.PeSeal)[OTE(BM1_13_MRG.MrgSeal) ,OTU(BM1_13_MRG.Hold_MA) ,OTU(BM1_13_MRG.Hold_MB) ,OTU(BM1_13_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(BM1_13_MRG.PeSeal)XIC(BM1_14_MTR.CONV_RUN)RTO(BM1_13_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(BM1_13_MRG.MLPriorityTmr.DN)OTE(BM1_13_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(BM1_13_MRG.PriorityStop)XIC(BM1_13_MTR.CONV_RUN)RTO(BM1_13_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(BM1_13_MRG.MrgSeal)XIO(BM1_13_MRG.PriorityStop)RES(BM1_13_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(BM1_13_MRG.MrgLBagflow.DN)[XIO(BM1_13_MRG.PeSeal) RES(BM1_13_MRG.MLPriorityTmr) ,RES(BM1_13_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(BM1_13_MRG.MrgLPriorityTmr.DN)[RES(BM1_13_MRG.MrgLPriorityTmr) ,RES(BM1_13_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(BM1_12_PE.FILT)TON(BM1_13_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(BM1_12_MTR.CONV_RUN) [XIO(I_PE_BM1_12) ,XIC(BM1_12_PE.FILT) ] ,XIC(BM1_11_MTR.CONV_RUN) [XIO(I_PE_BM1_11) ,XIC(BM1_11_PE.FILT) ] ,XIC(BM1_13_MRG.PeSeal) ,XIC(BM1_13_MTR.IM_ONS) ,XIC(F_BM1_13_OVRIDE) ]RES(BM1_13_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(BM1_13_MTR.CONV_RUN)RTO(BM1_13_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(BM1_13_PE.FILT) XIC(BM1_13_MRG.MrgOK_PosXitn) ,XIC(BM1_13_PE.FILT_POS_XITN) XIC(BM1_13_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(9,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE BM1_13_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(BM1_14_PE1.FILT_NEG_XITN)MOV(0,BM1_13_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(BM1_14_PE1.POS_XITN)[MOV(BM1_13_MRG.HeadHeadAcc,BM1_13_MRG.HeadHeadCnt) ,MOV(BM1_13_MRG.TailHeadAcc,BM1_13_MRG.TailHeadCnt) ,MOV(0,BM1_13_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(BM1_14_BT.BT_PULSE)[ADD(1,BM1_13_MRG.HeadHeadAcc,BM1_13_MRG.HeadHeadAcc) ,ADD(1,BM1_13_MRG.TailHeadAcc,BM1_13_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(BM1_14_PE1.POS_XITN)CPT(BM1_13_MRG.LastBagMrgWndo,BM1_13_MRG.HeadHeadCnt*BM1_14_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(BM1_14_PE1.POS_XITN)CPT(BM1_13_MRG.LastBagGapDist,BM1_13_MRG.TailHeadCnt*BM1_14_BTx.RES);
		END_ROUTINE

		ROUTINE BM1_A_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_BM1_01_CS_E_STOP)XIO(I_CS_BM1_01_EPB)OTE(CS_BM1_01_LTA_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_01_LTA_FLASH) ,XIC(CS_BM1_01_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_01_RPBA);
				N: XIO(EZ_ZONE_1.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_01_EPB) ]OTE(O_CS_BM1_01_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_BM1_02_CS_E_STOP)XIO(I_CS_BM1_02_EPB)OTE(CS_BM1_02_LTA_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_02_LTA_FLASH) ,XIC(CS_BM1_02_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_02_RPBA);
				N: XIO(EZ_ZONE_1.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_02_EPB) ]OTE(O_CS_BM1_02_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_BM1_03_CS_E_STOP)XIO(I_CS_BM1_03_EPB)OTE(CS_BM1_03_LTA_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_03_LTA_FLASH) ,XIC(CS_BM1_03_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_03_RPBA);
				N: XIO(EZ_ZONE_1.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_03_EPB) ]OTE(O_CS_BM1_03_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_06_PE1_JAMMED) XIC(I_PE1_BM1_06) ,XIC(F_BM1_06_CS_E_STOP) XIO(I_CS_BM1_06_EPB) ]OTE(CS_BM1_06_LTA_FLASH);
				N: [XIC(F_BM1_06_PE1_JAMMED) XIO(CS_BM1_06_LTA_FLASH) ,XIC(CS_BM1_06_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_06_RPBA);
				N: XIO(EZ_ZONE_1.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_06_EPB) ]OTE(O_CS_BM1_06_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_07_PE_JAMMED) XIC(I_PE_BM1_07) ,XIC(F_BM1_08_PE_JAMMED) XIC(I_PE_BM1_08) ,XIC(F_BM1_09_PE_JAMMED) XIC(I_PE_BM1_09) ,XIC(F_BM1_10_PE_JAMMED) XIC(I_PE_BM1_10) ,XIC(F_BM1_11_PE_JAMMED) XIC(I_PE_BM1_11) ,XIC(F_BM1_12_PE_JAMMED) XIC(I_PE_BM1_12) ,XIC(F_BM1_06_PE1_JAMMED) XIC(I_PE1_BM1_06) ,AFI() ]OTE(CS_BM1_07_LTA_FLASH);
				N: [[XIC(F_BM1_07_PE_JAMMED) ,XIC(F_BM1_08_PE_JAMMED) ,XIC(F_BM1_09_PE_JAMMED) ,XIC(F_BM1_10_PE_JAMMED) ,XIC(F_BM1_11_PE_JAMMED) ,XIC(F_BM1_12_PE_JAMMED) ,XIC(F_BM1_06_PE1_JAMMED) ] XIO(CS_BM1_07_LTA_FLASH) ,XIC(CS_BM1_07_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_07_RPBA);
				N: XIC(F_BM1_06_PE2_OVERHEIGHT)XIC(I_PE2_BM1_06)OTE(CS_BM1_07_LTW_FLASH);
				N: [XIC(F_BM1_06_PE2_OVERHEIGHT) XIO(CS_BM1_07_LTW_FLASH) ,XIC(CS_BM1_07_LTW_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_07_LTW);
				N: XIO(EZ_ZONE_1.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_07_EPB) ]OTE(O_CS_BM1_07_EPB);
				N: XIC(F_BM1_07_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_BM1_07_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_13_PE_JAMMED) XIC(I_PE_BM1_13) ,XIC(F_BM1_12_PE_JAMMED) XIC(I_PE_BM1_12) ,XIC(F_BM1_13_CS_E_STOP) XIO(I_CS_BM1_13_EPB) ]OTE(CS_BM1_13_LTA_FLASH);
				N: [[XIC(F_BM1_13_PE_JAMMED) ,XIC(F_BM1_12_PE_JAMMED) ] XIO(CS_BM1_13_LTA_FLASH) ,XIC(CS_BM1_13_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_13_RPBA);
				N: [XIO(EZ_ZONE_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ][XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_13_EPB) ]OTE(O_CS_BM1_13_EPB);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_A.STATUS.READY)OTE(O_WA_BM1_01_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_01_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_A.STATUS.READY)OTE(O_WA_BM1_03_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_03_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_A.STATUS.READY)OTE(O_WA_BM1_06_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_06_ALM);
		END_ROUTINE

		ROUTINE BM1_A_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_13_MTR.G) ,XIC(BM1_13_MTR.RUNNING) MOV(Status.ConvRunning,BM1_13_MTR.G) ,XIC(BM1_13_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_13_MTR.G) ,[XIC(BM1_13_MTR.IM_TMR.TT) ,XIO(BM1_13_MTR.AUTO_STOP) XIC(BM1_13_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,BM1_13_MTR.G) ,XIC(BM1_13_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_13_MTR.G) ,XIC(F_BM1_13_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_13_MTR.G) ,XIC(BM1_13_MTR.CASC) MOV(Status.ConvCascade,BM1_13_MTR.G) ,XIC(BM1_13_MTR.CASC) XIO(I_PE_BM1_13) MOV(Status.ConvBagPresCasc,BM1_13_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_13_MTR.G) ,XIC(F_BM1_13_MSD_OFF) MOV(Status.ConvDisc,BM1_13_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_13_MTR.G) ,XIC(BM1_13_MTR.JAMMED) MOV(Status.ConvJammed,BM1_13_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_13_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_13_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_13_MTR.G) ,XIC(F_BM1_13_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_13_MTR.G) ,XIC(F_BM1_13_MOL) MOV(Status.ConvOverLoad,BM1_13_MTR.G) ,XIC(F_BM1_13_OVRIDE) MOV(Status.ConvOverRide,BM1_13_MTR.G) ,XIC(BM1_13_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_13_MTR.G) ,XIC(BM1_13_MTR.E_STOP) XIO(BM1_13_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_13_MTR.G) ,XIC(F_BM1_13_OUTSERV) MOV(Status.ConvOutOfServ,BM1_13_MTR.G) ,XIC(BM1_13_MTR.COMM) MOV(Status.ConvCommFault,BM1_13_MTR.G) ,MOV(BM1_13_MTR.G,G_BM1_13_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_12_MTR.G) ,XIC(BM1_12_MTR.RUNNING) MOV(Status.ConvRunning,BM1_12_MTR.G) ,XIC(BM1_12_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_12_MTR.G) ,[XIC(BM1_12_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_12_MTR.G) ,XIC(BM1_12_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_12_MTR.G) ,XIC(F_BM1_12_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_12_MTR.G) ,XIC(BM1_12_MTR.CASC) MOV(Status.ConvCascade,BM1_12_MTR.G) ,XIC(BM1_12_MTR.CASC) XIO(I_PE_BM1_12) MOV(Status.ConvBagPresCasc,BM1_12_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_12_MTR.G) ,XIC(F_BM1_12_MSD_OFF) MOV(Status.ConvDisc,BM1_12_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_12_MTR.G) ,XIC(BM1_12_MTR.JAMMED) MOV(Status.ConvJammed,BM1_12_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_12_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_12_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_12_MTR.G) ,XIC(F_BM1_12_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_12_MTR.G) ,XIC(F_BM1_12_MOL) MOV(Status.ConvOverLoad,BM1_12_MTR.G) ,XIC(F_BM1_12_OVRIDE) MOV(Status.ConvOverRide,BM1_12_MTR.G) ,XIC(BM1_12_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_12_MTR.G) ,XIC(BM1_12_MTR.E_STOP) XIO(BM1_12_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_12_MTR.G) ,XIC(F_BM1_12_OUTSERV) MOV(Status.ConvOutOfServ,BM1_12_MTR.G) ,XIC(BM1_12_MTR.COMM) MOV(Status.ConvCommFault,BM1_12_MTR.G) ,MOV(BM1_12_MTR.G,G_BM1_12_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_11_MTR.G) ,XIC(BM1_11_MTR.RUNNING) MOV(Status.ConvRunning,BM1_11_MTR.G) ,XIC(BM1_11_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_11_MTR.G) ,[XIC(BM1_11_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_11_MTR.G) ,XIC(BM1_11_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_11_MTR.G) ,XIC(F_BM1_11_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_11_MTR.G) ,XIC(BM1_11_MTR.CASC) MOV(Status.ConvCascade,BM1_11_MTR.G) ,XIC(BM1_11_MTR.CASC) XIO(I_PE_BM1_11) MOV(Status.ConvBagPresCasc,BM1_11_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_11_MTR.G) ,XIC(F_BM1_11_MSD_OFF) MOV(Status.ConvDisc,BM1_11_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_11_MTR.G) ,XIC(BM1_11_MTR.JAMMED) MOV(Status.ConvJammed,BM1_11_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_11_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_11_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_11_MTR.G) ,XIC(F_BM1_11_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_11_MTR.G) ,XIC(F_BM1_11_MOL) MOV(Status.ConvOverLoad,BM1_11_MTR.G) ,XIC(F_BM1_11_OVRIDE) MOV(Status.ConvOverRide,BM1_11_MTR.G) ,XIC(BM1_11_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_11_MTR.G) ,XIC(BM1_11_MTR.E_STOP) XIO(BM1_11_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_11_MTR.G) ,XIC(F_BM1_11_OUTSERV) MOV(Status.ConvOutOfServ,BM1_11_MTR.G) ,XIC(BM1_11_MTR.COMM) MOV(Status.ConvCommFault,BM1_11_MTR.G) ,MOV(BM1_11_MTR.G,G_BM1_11_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_10_MTR.G) ,XIC(BM1_10_MTR.RUNNING) MOV(Status.ConvRunning,BM1_10_MTR.G) ,XIC(BM1_10_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_10_MTR.G) ,[XIC(BM1_10_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_10_MTR.G) ,XIC(BM1_10_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_10_MTR.G) ,XIC(F_BM1_10_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_10_MTR.G) ,XIC(BM1_10_MTR.CASC) MOV(Status.ConvCascade,BM1_10_MTR.G) ,XIC(BM1_10_MTR.CASC) XIO(I_PE_BM1_10) MOV(Status.ConvBagPresCasc,BM1_10_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_10_MTR.G) ,XIC(F_BM1_10_MSD_OFF) MOV(Status.ConvDisc,BM1_10_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_10_MTR.G) ,XIC(BM1_10_MTR.JAMMED) MOV(Status.ConvJammed,BM1_10_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_10_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_10_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_10_MTR.G) ,XIC(F_BM1_10_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_10_MTR.G) ,XIC(F_BM1_10_MOL) MOV(Status.ConvOverLoad,BM1_10_MTR.G) ,XIC(F_BM1_10_OVRIDE) MOV(Status.ConvOverRide,BM1_10_MTR.G) ,XIC(BM1_10_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_10_MTR.G) ,XIC(BM1_10_MTR.E_STOP) XIO(BM1_10_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_10_MTR.G) ,XIC(F_BM1_10_OUTSERV) MOV(Status.ConvOutOfServ,BM1_10_MTR.G) ,XIC(BM1_10_MTR.COMM) MOV(Status.ConvCommFault,BM1_10_MTR.G) ,MOV(BM1_10_MTR.G,G_BM1_10_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_09_MTR.G) ,XIC(BM1_09_MTR.RUNNING) MOV(Status.ConvRunning,BM1_09_MTR.G) ,XIC(BM1_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_09_MTR.G) ,[XIC(BM1_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_09_MTR.G) ,XIC(BM1_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_09_MTR.G) ,XIC(F_BM1_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_09_MTR.G) ,XIC(BM1_09_MTR.CASC) MOV(Status.ConvCascade,BM1_09_MTR.G) ,XIC(BM1_09_MTR.CASC) XIO(I_PE_BM1_09) MOV(Status.ConvBagPresCasc,BM1_09_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_09_MTR.G) ,XIC(F_BM1_09_MSD_OFF) MOV(Status.ConvDisc,BM1_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_09_MTR.G) ,XIC(BM1_09_MTR.JAMMED) MOV(Status.ConvJammed,BM1_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_09_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_09_MTR.G) ,XIC(F_BM1_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_09_MTR.G) ,XIC(F_BM1_09_MOL) MOV(Status.ConvOverLoad,BM1_09_MTR.G) ,XIC(F_BM1_09_OVRIDE) MOV(Status.ConvOverRide,BM1_09_MTR.G) ,XIC(BM1_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_09_MTR.G) ,XIC(BM1_09_MTR.E_STOP) XIO(BM1_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_09_MTR.G) ,XIC(F_BM1_09_OUTSERV) MOV(Status.ConvOutOfServ,BM1_09_MTR.G) ,XIC(BM1_09_MTR.COMM) MOV(Status.ConvCommFault,BM1_09_MTR.G) ,MOV(BM1_09_MTR.G,G_BM1_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_08_MTR.G) ,XIC(BM1_08_MTR.RUNNING) MOV(Status.ConvRunning,BM1_08_MTR.G) ,XIC(BM1_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_08_MTR.G) ,[XIC(BM1_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_08_MTR.G) ,XIC(BM1_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_08_MTR.G) ,XIC(F_BM1_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_08_MTR.G) ,XIC(BM1_08_MTR.CASC) MOV(Status.ConvCascade,BM1_08_MTR.G) ,XIC(BM1_08_MTR.CASC) XIO(I_PE_BM1_08) MOV(Status.ConvBagPresCasc,BM1_08_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_08_MTR.G) ,XIC(F_BM1_08_MSD_OFF) MOV(Status.ConvDisc,BM1_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_08_MTR.G) ,XIC(BM1_08_MTR.JAMMED) MOV(Status.ConvJammed,BM1_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_08_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_08_MTR.G) ,XIC(F_BM1_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_08_MTR.G) ,XIC(F_BM1_08_MOL) MOV(Status.ConvOverLoad,BM1_08_MTR.G) ,XIC(F_BM1_08_OVRIDE) MOV(Status.ConvOverRide,BM1_08_MTR.G) ,XIC(BM1_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_08_MTR.G) ,XIC(BM1_08_MTR.E_STOP) XIO(BM1_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_08_MTR.G) ,XIC(F_BM1_08_OUTSERV) MOV(Status.ConvOutOfServ,BM1_08_MTR.G) ,XIC(BM1_08_MTR.COMM) MOV(Status.ConvCommFault,BM1_08_MTR.G) ,MOV(BM1_08_MTR.G,G_BM1_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_07_MTR.G) ,XIC(BM1_07_MTR.RUNNING) MOV(Status.ConvRunning,BM1_07_MTR.G) ,XIC(BM1_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_07_MTR.G) ,[XIC(BM1_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_07_MTR.G) ,XIC(BM1_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_07_MTR.G) ,XIC(F_BM1_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_07_MTR.G) ,XIC(BM1_07_MTR.CASC) MOV(Status.ConvCascade,BM1_07_MTR.G) ,XIC(BM1_07_MTR.CASC) XIO(I_PE_BM1_07) MOV(Status.ConvBagPresCasc,BM1_07_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_07_MTR.G) ,XIC(F_BM1_07_MSD_OFF) MOV(Status.ConvDisc,BM1_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_07_MTR.G) ,XIC(BM1_07_MTR.JAMMED) MOV(Status.ConvJammed,BM1_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_07_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_07_MTR.G) ,XIC(F_BM1_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_07_MTR.G) ,XIC(F_BM1_07_MOL) MOV(Status.ConvOverLoad,BM1_07_MTR.G) ,XIC(F_BM1_07_OVRIDE) MOV(Status.ConvOverRide,BM1_07_MTR.G) ,XIC(BM1_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_07_MTR.G) ,XIC(BM1_07_MTR.E_STOP) XIO(BM1_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_07_MTR.G) ,XIC(F_BM1_07_OUTSERV) MOV(Status.ConvOutOfServ,BM1_07_MTR.G) ,XIC(BM1_07_MTR.COMM) MOV(Status.ConvCommFault,BM1_07_MTR.G) ,MOV(BM1_07_MTR.G,G_BM1_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_06_MTR.G) ,XIC(BM1_06_MTR.RUNNING) MOV(Status.ConvRunning,BM1_06_MTR.G) ,XIC(BM1_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_06_MTR.G) ,[XIC(BM1_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_06_MTR.G) ,XIC(BM1_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_06_MTR.G) ,XIC(F_BM1_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_06_MTR.G) ,XIC(BM1_06_MTR.CASC) MOV(Status.ConvCascade,BM1_06_MTR.G) ,XIC(BM1_06_MTR.CASC) XIO(I_PE1_BM1_06) MOV(Status.ConvBagPresCasc,BM1_06_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_06_MTR.G) ,XIC(F_BM1_06_MSD_OFF) MOV(Status.ConvDisc,BM1_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_06_MTR.G) ,XIC(BM1_06_MTR.JAMMED) MOV(Status.ConvJammed,BM1_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_06_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_06_MTR.G) ,XIC(F_BM1_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_06_MTR.G) ,XIC(F_BM1_06_MOL) MOV(Status.ConvOverLoad,BM1_06_MTR.G) ,XIC(F_BM1_06_OVRIDE) MOV(Status.ConvOverRide,BM1_06_MTR.G) ,XIC(BM1_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_06_MTR.G) ,XIC(BM1_06_MTR.E_STOP) XIO(BM1_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_06_MTR.G) ,XIC(F_BM1_06_OUTSERV) MOV(Status.ConvOutOfServ,BM1_06_MTR.G) ,XIC(BM1_06_MTR.COMM) MOV(Status.ConvCommFault,BM1_06_MTR.G) ,MOV(BM1_06_MTR.G,G_BM1_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_05_MTR.G) ,XIC(BM1_05_MTR.RUNNING) MOV(Status.ConvRunning,BM1_05_MTR.G) ,XIC(BM1_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_05_MTR.G) ,[XIC(BM1_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_05_MTR.G) ,XIC(BM1_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_05_MTR.G) ,XIC(F_BM1_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_05_MTR.G) ,XIC(BM1_05_MTR.CASC) MOV(Status.ConvCascade,BM1_05_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,BM1_05_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_05_MTR.G) ,XIC(F_BM1_05_MSD_OFF) MOV(Status.ConvDisc,BM1_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_05_MTR.G) ,XIC(BM1_05_MTR.JAMMED) MOV(Status.ConvJammed,BM1_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_05_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_05_MTR.G) ,XIC(F_BM1_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_05_MTR.G) ,XIC(F_BM1_05_MOL) MOV(Status.ConvOverLoad,BM1_05_MTR.G) ,XIC(F_BM1_05_OVRIDE) MOV(Status.ConvOverRide,BM1_05_MTR.G) ,XIC(BM1_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_05_MTR.G) ,XIC(BM1_05_MTR.E_STOP) XIO(BM1_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_05_MTR.G) ,XIC(F_BM1_05_OUTSERV) MOV(Status.ConvOutOfServ,BM1_05_MTR.G) ,XIC(BM1_05_MTR.COMM) MOV(Status.ConvCommFault,BM1_05_MTR.G) ,MOV(BM1_05_MTR.G,G_BM1_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_04_MTR.G) ,XIC(BM1_04_MTR.RUNNING) MOV(Status.ConvRunning,BM1_04_MTR.G) ,XIC(BM1_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_04_MTR.G) ,[XIC(BM1_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_04_MTR.G) ,XIC(BM1_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_04_MTR.G) ,XIC(F_BM1_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_04_MTR.G) ,XIC(BM1_04_MTR.CASC) MOV(Status.ConvCascade,BM1_04_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,BM1_04_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_04_MTR.G) ,XIC(F_BM1_04_MSD_OFF) MOV(Status.ConvDisc,BM1_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_04_MTR.G) ,XIC(BM1_04_MTR.JAMMED) MOV(Status.ConvJammed,BM1_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_04_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_04_MTR.G) ,XIC(F_BM1_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_04_MTR.G) ,XIC(F_BM1_04_MOL) MOV(Status.ConvOverLoad,BM1_04_MTR.G) ,XIC(F_BM1_04_OVRIDE) MOV(Status.ConvOverRide,BM1_04_MTR.G) ,XIC(BM1_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_04_MTR.G) ,XIC(BM1_04_MTR.E_STOP) XIO(BM1_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_04_MTR.G) ,XIC(F_BM1_04_OUTSERV) MOV(Status.ConvOutOfServ,BM1_04_MTR.G) ,XIC(BM1_04_MTR.COMM) MOV(Status.ConvCommFault,BM1_04_MTR.G) ,MOV(BM1_04_MTR.G,G_BM1_04_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_03_MTR.G) ,XIC(BM1_03_MTR.RUNNING) MOV(Status.ConvRunning,BM1_03_MTR.G) ,XIC(BM1_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_03_MTR.G) ,[XIC(BM1_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_03_MTR.G) ,XIC(BM1_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_03_MTR.G) ,XIC(F_BM1_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_03_MTR.G) ,XIC(BM1_03_MTR.CASC) MOV(Status.ConvCascade,BM1_03_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,BM1_03_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_03_MTR.G) ,XIC(F_BM1_03_MSD_OFF) MOV(Status.ConvDisc,BM1_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_03_MTR.G) ,XIC(BM1_03_MTR.JAMMED) MOV(Status.ConvJammed,BM1_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_03_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_03_MTR.G) ,XIC(F_BM1_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_03_MTR.G) ,XIC(F_BM1_03_MOL) MOV(Status.ConvOverLoad,BM1_03_MTR.G) ,XIC(F_BM1_03_OVRIDE) MOV(Status.ConvOverRide,BM1_03_MTR.G) ,XIC(BM1_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_03_MTR.G) ,XIC(BM1_03_MTR.E_STOP) XIO(BM1_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_03_MTR.G) ,XIC(F_BM1_03_OUTSERV) MOV(Status.ConvOutOfServ,BM1_03_MTR.G) ,XIC(BM1_03_MTR.COMM) MOV(Status.ConvCommFault,BM1_03_MTR.G) ,MOV(BM1_03_MTR.G,G_BM1_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_02_MTR.G) ,XIC(BM1_02_MTR.RUNNING) MOV(Status.ConvRunning,BM1_02_MTR.G) ,XIC(BM1_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_02_MTR.G) ,[XIC(BM1_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_02_MTR.G) ,XIC(BM1_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_02_MTR.G) ,XIC(F_BM1_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_02_MTR.G) ,XIC(BM1_02_MTR.CASC) MOV(Status.ConvCascade,BM1_02_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,BM1_02_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_02_MTR.G) ,XIC(F_BM1_02_MSD_OFF) MOV(Status.ConvDisc,BM1_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_02_MTR.G) ,XIC(BM1_02_MTR.JAMMED) MOV(Status.ConvJammed,BM1_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_02_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_02_MTR.G) ,XIC(F_BM1_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_02_MTR.G) ,XIC(F_BM1_02_MOL) MOV(Status.ConvOverLoad,BM1_02_MTR.G) ,XIC(F_BM1_02_OVRIDE) MOV(Status.ConvOverRide,BM1_02_MTR.G) ,XIC(BM1_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_02_MTR.G) ,XIC(BM1_02_MTR.E_STOP) XIO(BM1_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_02_MTR.G) ,XIC(F_BM1_02_OUTSERV) MOV(Status.ConvOutOfServ,BM1_02_MTR.G) ,XIC(BM1_02_MTR.COMM) MOV(Status.ConvCommFault,BM1_02_MTR.G) ,MOV(BM1_02_MTR.G,G_BM1_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_01_MTR.G) ,XIC(BM1_01_MTR.RUNNING) MOV(Status.ConvRunning,BM1_01_MTR.G) ,XIC(BM1_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_01_MTR.G) ,[XIC(BM1_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_01_MTR.G) ,XIC(BM1_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_01_MTR.G) ,XIC(F_BM1_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_01_MTR.G) ,XIC(BM1_01_MTR.CASC) MOV(Status.ConvCascade,BM1_01_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,BM1_01_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_01_MTR.G) ,XIC(F_BM1_01_MSD_OFF) MOV(Status.ConvDisc,BM1_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_01_MTR.G) ,XIC(BM1_01_MTR.JAMMED) MOV(Status.ConvJammed,BM1_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_01_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_01_MTR.G) ,XIC(F_BM1_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_01_MTR.G) ,XIC(F_BM1_01_MOL) MOV(Status.ConvOverLoad,BM1_01_MTR.G) ,XIC(F_BM1_01_OVRIDE) MOV(Status.ConvOverRide,BM1_01_MTR.G) ,XIC(BM1_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_01_MTR.G) ,XIC(BM1_01_MTR.E_STOP) XIO(BM1_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_01_MTR.G) ,XIC(F_BM1_01_OUTSERV) MOV(Status.ConvOutOfServ,BM1_01_MTR.G) ,XIC(BM1_01_MTR.COMM) MOV(Status.ConvCommFault,BM1_01_MTR.G) ,MOV(BM1_01_MTR.G,G_BM1_01_STS) ];
		END_ROUTINE

		ROUTINE BM1_A_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_06_MTR.CONV_RUN)RTO(BM1_06_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_06_RPBA) ,XIC(I_CS_BM1_07_SPBG) ] XIC(BM1_06_PE2.JAM_TMR.DN) ,XIO(BM1_06_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_06)RES(BM1_06_PE2.JAM_TMR);
				N: XIC(BM1_06_PE2.JAM_TMR.DN)[XIO(F_BM1_06_PE2_OVERHEIGHT) [ADD(S_BM1_06_PE2_OH,1,S_BM1_06_PE2_OH) ,OTE(BM1_06_PE2.JAM_ONS) ] ,OTE(F_BM1_06_PE2_OVERHEIGHT) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_06_MTR.CONV_RUN)RTO(BM1_06_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_06_RPBA) ,XIC(I_CS_BM1_07_SPBG) ] XIC(BM1_06_PE1.JAM_TMR.DN) ,XIO(BM1_06_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_06)RES(BM1_06_PE1.JAM_TMR);
				N: XIC(BM1_06_PE1.JAM_TMR.DN)[XIO(F_BM1_06_PE1_JAMMED) [ADD(S_BM1_06_PE1_JAM,1,S_BM1_06_PE1_JAM) ,OTE(BM1_06_PE1.JAM_ONS) ] ,OTE(F_BM1_06_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_07_MTR.CONV_RUN)RTO(BM1_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_07_SPBG) XIC(BM1_07_PE.JAM_TMR.DN) ,XIO(BM1_07_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_07)RES(BM1_07_PE.JAM_TMR);
				N: XIC(BM1_07_PE.JAM_TMR.DN)[XIO(F_BM1_07_PE_JAMMED) [ADD(S_BM1_07_PE_JAM,1,S_BM1_07_PE_JAM) ,OTE(BM1_07_PE.JAM_ONS) ] ,OTE(F_BM1_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_08_MTR.CONV_RUN)RTO(BM1_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_07_SPBG) XIC(BM1_08_PE.JAM_TMR.DN) ,XIO(BM1_08_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_08)RES(BM1_08_PE.JAM_TMR);
				N: XIC(BM1_08_PE.JAM_TMR.DN)[XIO(F_BM1_08_PE_JAMMED) [ADD(S_BM1_08_PE_JAM,1,S_BM1_08_PE_JAM) ,OTE(BM1_08_PE.JAM_ONS) ] ,OTE(F_BM1_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_09_MTR.CONV_RUN)RTO(BM1_09_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_07_SPBG) XIC(BM1_09_PE.JAM_TMR.DN) ,XIO(BM1_09_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_09)RES(BM1_09_PE.JAM_TMR);
				N: XIC(BM1_09_PE.JAM_TMR.DN)[XIO(F_BM1_09_PE_JAMMED) [ADD(S_BM1_09_PE_JAM,1,S_BM1_09_PE_JAM) ,OTE(BM1_09_PE.JAM_ONS) ] ,OTE(F_BM1_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_10_MTR.CONV_RUN)RTO(BM1_10_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_07_SPBG) XIC(BM1_10_PE.JAM_TMR.DN) ,XIO(BM1_10_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_10)RES(BM1_10_PE.JAM_TMR);
				N: XIC(BM1_10_PE.JAM_TMR.DN)[XIO(F_BM1_10_PE_JAMMED) [ADD(S_BM1_10_PE_JAM,1,S_BM1_10_PE_JAM) ,OTE(BM1_10_PE.JAM_ONS) ] ,OTE(F_BM1_10_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_11_MTR.CONV_RUN)RTO(BM1_11_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_07_SPBG) XIC(BM1_11_PE.JAM_TMR.DN) ,XIO(BM1_11_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_11)RES(BM1_11_PE.JAM_TMR);
				N: XIC(BM1_11_PE.JAM_TMR.DN)[XIO(F_BM1_11_PE_JAMMED) [ADD(S_BM1_11_PE_JAM,1,S_BM1_11_PE_JAM) ,OTE(BM1_11_PE.JAM_ONS) ] ,OTE(F_BM1_11_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_12_MTR.CONV_RUN)RTO(BM1_12_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_07_SPBG) ,XIC(I_CS_BM1_13_RPBA) ] XIC(BM1_12_PE.JAM_TMR.DN) ,XIO(BM1_12_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_12)RES(BM1_12_PE.JAM_TMR);
				N: XIC(BM1_12_PE.JAM_TMR.DN)[XIO(F_BM1_12_PE_JAMMED) [ADD(S_BM1_12_PE_JAM,1,S_BM1_12_PE_JAM) ,OTE(BM1_12_PE.JAM_ONS) ] ,OTE(F_BM1_12_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_13_MTR.CONV_RUN)RTO(BM1_13_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_13_RPBA) ,XIC(I_CS2_BM1_14_RPBA) ] XIC(BM1_13_PE.JAM_TMR.DN) ,XIO(BM1_13_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_13)RES(BM1_13_PE.JAM_TMR);
				N: XIC(BM1_13_PE.JAM_TMR.DN)[XIO(F_BM1_13_PE_JAMMED) [ADD(S_BM1_13_PE_JAM,1,S_BM1_13_PE_JAM) ,OTE(BM1_13_PE.JAM_ONS) ] ,OTE(F_BM1_13_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE BM1_A_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_BM1_02_RPBA) ,XIC(I_CS_BM1_03_RPBA) ,XIC(I_CS_BM1_06_RPBA) ,XIC(I_CS_BM1_07_SPBG) ,XIC(I_CS_BM1_13_RPBA) ,XIC(I_CS_BM1_MCP_RPBA) ,AFI() ]OTE(BM1_A.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(BM1_13_MTR.INTL_MTR)XIC(BM1_12_MTR.CONV_RUN)XIC(BM1_11_MTR.CONV_RUN)XIC(BM1_10_MTR.CONV_RUN)XIC(BM1_09_MTR.CONV_RUN)XIC(BM1_08_MTR.CONV_RUN)XIC(BM1_07_MTR.CONV_RUN)XIC(BM1_06_MTR.CONV_RUN)XIC(BM1_05_MTR.CONV_RUN)XIC(BM1_04_MTR.CONV_RUN)XIC(BM1_03_MTR.CONV_RUN)XIC(BM1_02_MTR.CONV_RUN)XIC(BM1_01_MTR.CONV_RUN)OTE(BM1_A.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE2_BM1_06) ,XIO(I_PE1_BM1_06) ,XIO(I_PE_BM1_07) ,XIO(I_PE_BM1_08) ,XIO(I_PE_BM1_09) ,XIO(I_PE_BM1_10) ,XIO(I_PE_BM1_11) ,XIO(I_PE_BM1_12) ,XIO(I_PE_BM1_13) ,AFI() ]OTE(BM1_A.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(BM1_A.MTR_GRP.START) ,XIC(BM1_A.MTR_GRP.PEs) XIO(BM1_A.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(BM1_A.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(BM1_A.MTR_GRP.RUN_LATCH)XIC(BM1_A.MTR_GRP.PEs)OTE(BM1_A.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(BM1_A.MTR_GRP.RUN_EXPAND)RTO(BM1_A.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(BM1_A.MTR_GRP.START) ,XIC(BM1_A.MTR_GRP.RUN_LATCH) ]XIO(BM1_A.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(BM1_A.STATUS.FIRE_ALM)OTE(BM1_A.MTR_GRP.RUN_LATCH);
				RC: "Motor BM1_13$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_14_MSD_OFF)OTE(BM1_13_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_BM1_13_JRB) TON(BM1_13_MTR.JRB_FILT_TON,?,?) ,XIC(BM1_13_MTR.JRB_FILT_TON.DN) OTE(BM1_13_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(BM1_13_MTR.E_STOP)[XIO(F_BM1_13_MOL) XIO(BM1_13_MTR.JAMMED) ,XIC(F_BM1_13_OVRIDE) ,XIC(zzzF_BM1_13_JOG_REVERSE) ]XIO(F_BM1_13_MSD_OFF)XIO(F_BM1_13_OUTSERV)XIO(BM1_13_MTR.COMM)OTE(BM1_13_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_13_OVRIDE) ]XIC(BM1_13_MTR.NO_FAULT)TON(BM1_13_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_13_MTR.IM_TMR.DN)[XIO(BM1_13_MTR.INTL_MTR) OTE(BM1_13_MTR.IM_ONS) ,OTE(BM1_13_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_13_PE.FILT_NEG_XITN)RES(BM1_13_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_14_MTR.CONV_RUN)RTO(BM1_13_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_13_PE.POS_XITN) XIC(BM1_13_MTR.INTL_MTR) ,XIC(BM1_13_MTR.T2H_SPACE) ]XIO(BM1_13_MTR.T2H_SPACE_TMR.DN)OTE(BM1_13_MTR.T2H_SPACE);
				N: XIC(BM1_13_MTR.T2H_SPACE)OTE(BM1_13_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_14_MTR.ON_TMR.DN) XIC(BM1_13_MTR.OFF_TMR.DN) ,XIO(BM1_14_MTR.IM_ONS) XIC(BM1_13_MTR.IM_ONS) ,XIC(BM1_13_MTR.ANTI_CASC) XIC(I_PE_BM1_13) ]OTE(BM1_13_MTR.START_EN);
				N: [[XIO(BM1_14_MTR.ON_TMR.DN) ,XIO(BM1_13_MRG.MrgSeal) ] [XIO(I_PE_BM1_13) ,XIC(BM1_13_MRG.PeSeal) ,XIO(BM1_13_MRG.SyncRunTmr.DN) ] ,XIO(BM1_13_MTR.ANTI_CASC) XIC(BM1_13_MTR.SPACE) ]OTE(BM1_13_MTR.STOP);
				N: XIC(BM1_13_MTR.INTL_MTR)XIO(zzzF_BM1_13_JOG_REVERSE)[[XIC(BM1_13_MTR.START_EN) ,XIC(BM1_13_MTR.CONV_RUN) ] XIO(BM1_13_MTR.STOP) ,[XIO(BM1_13_MRG.SyncRunTmr.DN) ,XIC(BM1_13_MRG.MrgSeal) ] XIC(BM1_14_MTR.CONV_RUN) ,XIC(F_BM1_13_OVRIDE) ][OTE(BM1_13_MTR.CONV_RUN) ,XIO(BM1_13_MRG.MergeRunTmr.DN) TON(BM1_13_RUN_FWD_TMR,?,?) ,XIC(BM1_13_RUN_FWD_TMR.DN) OTE(O_C_BM1_13_FWD) ];
				N: XIC(zzzF_BM1_13_JOG_REVERSE)XIC(BM1_13_MTR.JRB_FILT)XIO(BM1_13_MTR.E_STOP)XIO(F_BM1_13_MSD_OFF)XIO(BM1_13_MTR.COMM)XIO(F_BM1_13_OVRIDE)OTE(O_C_BM1_13_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_13_MTR.CONV_RUN)TON(BM1_13_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_13_MTR.CONV_RUN)TON(BM1_13_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_12$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_13_MSD_OFF)OTE(BM1_12_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_12_MTR.E_STOP)[XIO(F_BM1_12_MOL) XIO(BM1_12_MTR.JAMMED) ,XIC(F_BM1_12_OVRIDE) ]XIO(F_BM1_12_MSD_OFF)XIO(F_BM1_12_OUTSERV)XIO(BM1_12_MTR.COMM)OTE(BM1_12_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_12_OVRIDE) ]XIC(BM1_12_MTR.NO_FAULT)TON(BM1_12_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_12_MTR.IM_TMR.DN)[XIO(BM1_12_MTR.INTL_MTR) OTE(BM1_12_MTR.IM_ONS) ,OTE(BM1_12_MTR.INTL_MTR) ,OTE(O_C_BM1_12) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_12_PE.FILT_NEG_XITN)RES(BM1_12_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_13_MTR.CONV_RUN)RTO(BM1_12_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_12_PE.POS_XITN) XIC(BM1_12_MTR.INTL_MTR) ,XIC(BM1_12_MTR.T2H_SPACE) ]XIO(BM1_12_MTR.T2H_SPACE_TMR.DN)OTE(BM1_12_MTR.T2H_SPACE);
				N: XIC(BM1_12_MTR.T2H_SPACE)OTE(BM1_12_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_13_MTR.ON_TMR.DN) XIC(BM1_12_MTR.OFF_TMR.DN) ,XIO(BM1_13_MTR.IM_ONS) XIC(BM1_12_MTR.IM_ONS) ,XIC(BM1_12_MTR.ANTI_CASC) XIC(I_PE_BM1_12) ]OTE(BM1_12_MTR.START_EN);
				N: [XIO(BM1_13_MTR.ON_TMR.DN) XIO(I_PE_BM1_12) ,XIO(BM1_12_MTR.ANTI_CASC) XIC(BM1_12_MTR.SPACE) ]OTE(BM1_12_MTR.STOP);
				N: XIC(BM1_12_MTR.INTL_MTR)[[XIC(BM1_12_MTR.START_EN) ,XIC(BM1_12_MTR.CONV_RUN) ] XIO(BM1_12_MTR.STOP) ,XIC(F_BM1_12_OVRIDE) ][OTE(BM1_12_MTR.CONV_RUN) ,OTE(O_CBP_BM1_12_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_12_MTR.CONV_RUN)TON(BM1_12_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_12_MTR.CONV_RUN)TON(BM1_12_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_11$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_12_MSD_OFF)OTE(BM1_11_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_11_MTR.E_STOP)[XIO(F_BM1_11_MOL) XIO(BM1_11_MTR.JAMMED) ,XIC(F_BM1_11_OVRIDE) ]XIO(F_BM1_11_MSD_OFF)XIO(F_BM1_11_OUTSERV)XIO(BM1_11_MTR.COMM)OTE(BM1_11_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_11_OVRIDE) ]XIC(BM1_11_MTR.NO_FAULT)TON(BM1_11_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_11_MTR.IM_TMR.DN)[XIO(BM1_11_MTR.INTL_MTR) OTE(BM1_11_MTR.IM_ONS) ,OTE(BM1_11_MTR.INTL_MTR) ,OTE(O_C_BM1_11) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_11_PE.FILT_NEG_XITN)RES(BM1_11_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_12_MTR.CONV_RUN)RTO(BM1_11_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_11_PE.POS_XITN) XIC(BM1_11_MTR.INTL_MTR) ,XIC(BM1_11_MTR.T2H_SPACE) ]XIO(BM1_11_MTR.T2H_SPACE_TMR.DN)OTE(BM1_11_MTR.T2H_SPACE);
				N: XIC(BM1_11_MTR.T2H_SPACE)OTE(BM1_11_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_12_MTR.ON_TMR.DN) XIC(BM1_11_MTR.OFF_TMR.DN) ,XIO(BM1_12_MTR.IM_ONS) XIC(BM1_11_MTR.IM_ONS) ,XIC(BM1_11_MTR.ANTI_CASC) XIC(I_PE_BM1_11) ]OTE(BM1_11_MTR.START_EN);
				N: [XIO(BM1_12_MTR.ON_TMR.DN) XIO(I_PE_BM1_11) ,XIO(BM1_11_MTR.ANTI_CASC) XIC(BM1_11_MTR.SPACE) ]OTE(BM1_11_MTR.STOP);
				N: XIC(BM1_11_MTR.INTL_MTR)[[XIC(BM1_11_MTR.START_EN) ,XIC(BM1_11_MTR.CONV_RUN) ] XIO(BM1_11_MTR.STOP) ,XIC(F_BM1_11_OVRIDE) ][OTE(BM1_11_MTR.CONV_RUN) ,OTE(O_CBP_BM1_11_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_11_MTR.CONV_RUN)TON(BM1_11_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_11_MTR.CONV_RUN)TON(BM1_11_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_10$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_11_MSD_OFF)OTE(BM1_10_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_10_MTR.E_STOP)[XIO(F_BM1_10_MOL) XIO(BM1_10_MTR.JAMMED) ,XIC(F_BM1_10_OVRIDE) ]XIO(F_BM1_10_MSD_OFF)XIO(F_BM1_10_OUTSERV)XIO(BM1_10_MTR.COMM)OTE(BM1_10_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_10_OVRIDE) ]XIC(BM1_10_MTR.NO_FAULT)TON(BM1_10_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_10_MTR.IM_TMR.DN)[XIO(BM1_10_MTR.INTL_MTR) OTE(BM1_10_MTR.IM_ONS) ,OTE(BM1_10_MTR.INTL_MTR) ,OTE(O_C_BM1_10) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_10_PE.FILT_NEG_XITN)RES(BM1_10_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_11_MTR.CONV_RUN)RTO(BM1_10_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_10_PE.POS_XITN) XIC(BM1_10_MTR.INTL_MTR) ,XIC(BM1_10_MTR.T2H_SPACE) ]XIO(BM1_10_MTR.T2H_SPACE_TMR.DN)OTE(BM1_10_MTR.T2H_SPACE);
				N: XIC(BM1_10_MTR.T2H_SPACE)OTE(BM1_10_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_11_MTR.ON_TMR.DN) XIC(BM1_10_MTR.OFF_TMR.DN) ,XIO(BM1_11_MTR.IM_ONS) XIC(BM1_10_MTR.IM_ONS) ,XIC(BM1_10_MTR.ANTI_CASC) XIC(I_PE_BM1_10) ]OTE(BM1_10_MTR.START_EN);
				N: [XIO(BM1_11_MTR.ON_TMR.DN) XIO(I_PE_BM1_10) ,XIO(BM1_10_MTR.ANTI_CASC) XIC(BM1_10_MTR.SPACE) ]OTE(BM1_10_MTR.STOP);
				N: XIC(BM1_10_MTR.INTL_MTR)[[XIC(BM1_10_MTR.START_EN) ,XIC(BM1_10_MTR.CONV_RUN) ] XIO(BM1_10_MTR.STOP) ,XIC(F_BM1_10_OVRIDE) ][OTE(BM1_10_MTR.CONV_RUN) ,OTE(O_CBP_BM1_10_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_10_MTR.CONV_RUN)TON(BM1_10_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_10_MTR.CONV_RUN)TON(BM1_10_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_10_MSD_OFF)OTE(BM1_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_09_MTR.E_STOP)[XIO(F_BM1_09_MOL) XIO(BM1_09_MTR.JAMMED) ,XIC(F_BM1_09_OVRIDE) ]XIO(F_BM1_09_MSD_OFF)XIO(F_BM1_09_OUTSERV)XIO(BM1_09_MTR.COMM)OTE(BM1_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_09_OVRIDE) ]XIC(BM1_09_MTR.NO_FAULT)TON(BM1_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_09_MTR.IM_TMR.DN)[XIO(BM1_09_MTR.INTL_MTR) OTE(BM1_09_MTR.IM_ONS) ,OTE(BM1_09_MTR.INTL_MTR) ,OTE(O_C_BM1_09) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_09_PE.FILT_NEG_XITN)RES(BM1_09_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_10_MTR.CONV_RUN)RTO(BM1_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_09_PE.POS_XITN) XIC(BM1_09_MTR.INTL_MTR) ,XIC(BM1_09_MTR.T2H_SPACE) ]XIO(BM1_09_MTR.T2H_SPACE_TMR.DN)OTE(BM1_09_MTR.T2H_SPACE);
				N: XIC(BM1_09_MTR.T2H_SPACE)OTE(BM1_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_10_MTR.ON_TMR.DN) XIC(BM1_09_MTR.OFF_TMR.DN) ,XIO(BM1_10_MTR.IM_ONS) XIC(BM1_09_MTR.IM_ONS) ,XIC(BM1_09_MTR.ANTI_CASC) XIC(I_PE_BM1_09) ]OTE(BM1_09_MTR.START_EN);
				N: [XIO(BM1_10_MTR.ON_TMR.DN) XIO(I_PE_BM1_09) ,XIO(BM1_09_MTR.ANTI_CASC) XIC(BM1_09_MTR.SPACE) ]OTE(BM1_09_MTR.STOP);
				N: XIC(BM1_09_MTR.INTL_MTR)[[XIC(BM1_09_MTR.START_EN) ,XIC(BM1_09_MTR.CONV_RUN) ] XIO(BM1_09_MTR.STOP) ,XIC(F_BM1_09_OVRIDE) ][OTE(BM1_09_MTR.CONV_RUN) ,OTE(O_CBP_BM1_09_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_09_MTR.CONV_RUN)TON(BM1_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_09_MTR.CONV_RUN)TON(BM1_09_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_09_MSD_OFF)OTE(BM1_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_08_MTR.E_STOP)[XIO(F_BM1_08_MOL) XIO(BM1_08_MTR.JAMMED) ,XIC(F_BM1_08_OVRIDE) ]XIO(F_BM1_08_MSD_OFF)XIO(F_BM1_08_OUTSERV)XIO(BM1_08_MTR.COMM)OTE(BM1_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_08_OVRIDE) ]XIC(BM1_08_MTR.NO_FAULT)TON(BM1_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_08_MTR.IM_TMR.DN)[XIO(BM1_08_MTR.INTL_MTR) OTE(BM1_08_MTR.IM_ONS) ,OTE(BM1_08_MTR.INTL_MTR) ,OTE(O_C_BM1_08) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_08_PE.FILT_NEG_XITN)RES(BM1_08_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_09_MTR.CONV_RUN)RTO(BM1_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_08_PE.POS_XITN) XIC(BM1_08_MTR.INTL_MTR) ,XIC(BM1_08_MTR.T2H_SPACE) ]XIO(BM1_08_MTR.T2H_SPACE_TMR.DN)OTE(BM1_08_MTR.T2H_SPACE);
				N: XIC(BM1_08_MTR.T2H_SPACE)OTE(BM1_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_09_MTR.ON_TMR.DN) XIC(BM1_08_MTR.OFF_TMR.DN) ,XIO(BM1_09_MTR.IM_ONS) XIC(BM1_08_MTR.IM_ONS) ,XIC(BM1_08_MTR.ANTI_CASC) XIC(I_PE_BM1_08) ]OTE(BM1_08_MTR.START_EN);
				N: [XIO(BM1_09_MTR.ON_TMR.DN) XIO(I_PE_BM1_08) ,XIO(BM1_08_MTR.ANTI_CASC) XIC(BM1_08_MTR.SPACE) ]OTE(BM1_08_MTR.STOP);
				N: XIC(BM1_08_MTR.INTL_MTR)[[XIC(BM1_08_MTR.START_EN) ,XIC(BM1_08_MTR.CONV_RUN) ] XIO(BM1_08_MTR.STOP) ,XIC(F_BM1_08_OVRIDE) ][OTE(BM1_08_MTR.CONV_RUN) ,OTE(O_CBP_BM1_08_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_08_MTR.CONV_RUN)TON(BM1_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_08_MTR.CONV_RUN)TON(BM1_08_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_08_MSD_OFF)OTE(BM1_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_07_MTR.E_STOP)[XIO(F_BM1_07_MOL) XIO(BM1_07_MTR.JAMMED) ,XIC(F_BM1_07_OVRIDE) ]XIO(F_BM1_07_MSD_OFF)XIO(F_BM1_07_OUTSERV)XIO(BM1_07_MTR.COMM)OTE(BM1_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_07_OVRIDE) ]XIC(BM1_07_MTR.NO_FAULT)TON(BM1_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_07_MTR.IM_TMR.DN)[XIO(BM1_07_MTR.INTL_MTR) OTE(BM1_07_MTR.IM_ONS) ,OTE(BM1_07_MTR.INTL_MTR) ,OTE(O_C_BM1_07) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_07_PE.FILT_NEG_XITN)RES(BM1_07_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_08_MTR.CONV_RUN)RTO(BM1_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_07_PE.POS_XITN) XIC(BM1_07_MTR.INTL_MTR) ,XIC(BM1_07_MTR.T2H_SPACE) ]XIO(BM1_07_MTR.T2H_SPACE_TMR.DN)OTE(BM1_07_MTR.T2H_SPACE);
				N: XIC(BM1_07_MTR.T2H_SPACE)OTE(BM1_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_08_MTR.ON_TMR.DN) XIC(BM1_07_MTR.OFF_TMR.DN) ,XIO(BM1_08_MTR.IM_ONS) XIC(BM1_07_MTR.IM_ONS) ,XIC(BM1_07_MTR.ANTI_CASC) XIC(I_PE_BM1_07) ]OTE(BM1_07_MTR.START_EN);
				N: [XIO(BM1_08_MTR.ON_TMR.DN) XIO(I_PE_BM1_07) ,XIO(BM1_07_MTR.ANTI_CASC) XIC(BM1_07_MTR.SPACE) ]OTE(BM1_07_MTR.STOP);
				N: XIC(BM1_07_MTR.INTL_MTR)[[XIC(BM1_07_MTR.START_EN) ,XIC(BM1_07_MTR.CONV_RUN) ] XIO(BM1_07_MTR.STOP) ,XIC(F_BM1_07_OVRIDE) ][OTE(BM1_07_MTR.CONV_RUN) ,OTE(O_CBP_BM1_07_TRIG) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_07_MTR.CONV_RUN)TON(BM1_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_07_MTR.CONV_RUN)TON(BM1_07_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_07_MSD_OFF)OTE(BM1_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_06_MTR.E_STOP)[XIO(F_BM1_06_MOL) XIO(BM1_06_MTR.JAMMED) ,XIC(F_BM1_06_OVRIDE) ]XIO(F_BM1_06_MSD_OFF)XIO(F_BM1_06_OUTSERV)XIO(BM1_06_MTR.COMM)OTE(BM1_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_06_OVRIDE) ]XIC(BM1_06_MTR.NO_FAULT)TON(BM1_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_06_MTR.IM_TMR.DN)[XIO(BM1_06_MTR.INTL_MTR) OTE(BM1_06_MTR.IM_ONS) ,OTE(BM1_06_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(BM1_07_MTR.ON_TMR.DN) XIC(BM1_06_MTR.OFF_TMR.DN) ,XIO(BM1_07_MTR.IM_ONS) XIC(BM1_06_MTR.IM_ONS) ,XIC(BM1_06_MTR.ANTI_CASC) XIC(I_PE1_BM1_06) ]OTE(BM1_06_MTR.START_EN);
				N: XIO(BM1_07_MTR.ON_TMR.DN)XIO(I_PE1_BM1_06)OTE(BM1_06_MTR.STOP);
				N: XIC(BM1_06_MTR.INTL_MTR)[[XIC(BM1_06_MTR.START_EN) ,XIC(BM1_06_MTR.CONV_RUN) ] XIO(BM1_06_MTR.STOP) ,XIC(F_BM1_06_OVRIDE) ][OTE(BM1_06_MTR.CONV_RUN) ,OTE(O_C_BM1_06) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_06_MTR.CONV_RUN)TON(BM1_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_06_MTR.CONV_RUN)TON(BM1_06_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(BM1_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_05_MTR.E_STOP)[XIO(F_BM1_05_MOL) XIO(BM1_05_MTR.JAMMED) ,XIC(F_BM1_05_OVRIDE) ]XIO(F_BM1_05_MSD_OFF)XIO(F_BM1_05_OUTSERV)XIO(BM1_05_MTR.COMM)OTE(BM1_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_05_OVRIDE) ]XIC(BM1_05_MTR.NO_FAULT)TON(BM1_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_05_MTR.IM_TMR.DN)[XIO(BM1_05_MTR.INTL_MTR) OTE(BM1_05_MTR.IM_ONS) ,OTE(BM1_05_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(BM1_05_MTR.INTL_MTR)[XIC(BM1_06_MTR.CONV_RUN) ,XIC(F_BM1_05_OVRIDE) ][OTE(BM1_05_MTR.CONV_RUN) ,OTE(O_C_BM1_05) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_05_MTR.CONV_RUN)TON(BM1_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_05_MTR.CONV_RUN)TON(BM1_05_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(BM1_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_04_MTR.E_STOP)[XIO(F_BM1_04_MOL) XIO(BM1_04_MTR.JAMMED) ,XIC(F_BM1_04_OVRIDE) ]XIO(F_BM1_04_MSD_OFF)XIO(F_BM1_04_OUTSERV)XIO(BM1_04_MTR.COMM)OTE(BM1_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_04_OVRIDE) ]XIC(BM1_04_MTR.NO_FAULT)TON(BM1_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_04_MTR.IM_TMR.DN)[XIO(BM1_04_MTR.INTL_MTR) OTE(BM1_04_MTR.IM_ONS) ,OTE(BM1_04_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(BM1_04_MTR.INTL_MTR)[XIC(BM1_05_MTR.CONV_RUN) ,XIC(F_BM1_04_OVRIDE) ][OTE(BM1_04_MTR.CONV_RUN) ,OTE(O_C_BM1_04) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_04_MTR.CONV_RUN)TON(BM1_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_04_MTR.CONV_RUN)TON(BM1_04_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(BM1_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_03_MTR.E_STOP)[XIO(F_BM1_03_MOL) XIO(BM1_03_MTR.JAMMED) ,XIC(F_BM1_03_OVRIDE) ]XIO(F_BM1_03_MSD_OFF)XIO(F_BM1_03_OUTSERV)XIO(BM1_03_MTR.COMM)OTE(BM1_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_03_OVRIDE) ]XIC(BM1_03_MTR.NO_FAULT)TON(BM1_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_03_MTR.IM_TMR.DN)[XIO(BM1_03_MTR.INTL_MTR) OTE(BM1_03_MTR.IM_ONS) ,OTE(BM1_03_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(BM1_03_MTR.INTL_MTR)[XIC(BM1_04_MTR.CONV_RUN) ,XIC(F_BM1_03_OVRIDE) ][OTE(BM1_03_MTR.CONV_RUN) ,OTE(O_C_BM1_03) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_03_MTR.CONV_RUN)TON(BM1_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_03_MTR.CONV_RUN)TON(BM1_03_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(BM1_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_02_MTR.E_STOP)[XIO(F_BM1_02_MOL) XIO(BM1_02_MTR.JAMMED) ,XIC(F_BM1_02_OVRIDE) ]XIO(F_BM1_02_MSD_OFF)XIO(F_BM1_02_OUTSERV)XIO(BM1_02_MTR.COMM)OTE(BM1_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_02_OVRIDE) ]XIC(BM1_02_MTR.NO_FAULT)TON(BM1_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_02_MTR.IM_TMR.DN)[XIO(BM1_02_MTR.INTL_MTR) OTE(BM1_02_MTR.IM_ONS) ,OTE(BM1_02_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(BM1_02_MTR.INTL_MTR)[XIC(BM1_03_MTR.CONV_RUN) ,XIC(F_BM1_02_OVRIDE) ][OTE(BM1_02_MTR.CONV_RUN) ,OTE(O_C_BM1_02) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_02_MTR.CONV_RUN)TON(BM1_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_02_MTR.CONV_RUN)TON(BM1_02_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(BM1_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_01_MTR.E_STOP)[XIO(F_BM1_01_MOL) XIO(BM1_01_MTR.JAMMED) ,XIC(F_BM1_01_OVRIDE) ]XIO(F_BM1_01_MSD_OFF)XIO(F_BM1_01_OUTSERV)XIO(BM1_01_MTR.COMM)OTE(BM1_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_01_OVRIDE) ]XIC(BM1_01_MTR.NO_FAULT)TON(BM1_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_01_MTR.IM_TMR.DN)[XIO(BM1_01_MTR.INTL_MTR) OTE(BM1_01_MTR.IM_ONS) ,OTE(BM1_01_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(BM1_01_MTR.INTL_MTR)[XIC(BM1_02_MTR.CONV_RUN) ,XIC(F_BM1_01_OVRIDE) ][OTE(BM1_01_MTR.CONV_RUN) ,OTE(O_C_BM1_01) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_01_MTR.CONV_RUN)TON(BM1_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_01_MTR.CONV_RUN)TON(BM1_01_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE BM1_A_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(BM1_06_MTR.COMM)[[XIO(I_PE2_BM1_06) ,XIC(BM1_06_PE2.TOF.DN) ] TON(BM1_06_PE2.TON,?,?) ,XIO(I_PE2_BM1_06) XIC(BM1_06_PE2.TON.DN) TOF(BM1_06_PE2.TOF,?,?) ,XIC(BM1_06_PE2.TOF.DN) OTE(BM1_06_PE2.FILT) ];
				N: XIC(BM1_06_PE2.FILT)[XIO(BM1_06_PE2.FILT_POS_XITN_MEM) OTE(BM1_06_PE2.FILT_POS_XITN) ,OTE(BM1_06_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_06_PE2.FILT)[XIO(BM1_06_PE2.FILT_NEG_XITN_MEM) OTE(BM1_06_PE2.FILT_NEG_XITN) ,OTE(BM1_06_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_06_MTR.COMM)[[XIO(I_PE1_BM1_06) ,XIC(BM1_06_PE1.TOF.DN) ] TON(BM1_06_PE1.TON,?,?) ,XIO(I_PE1_BM1_06) XIC(BM1_06_PE1.TON.DN) TOF(BM1_06_PE1.TOF,?,?) ,XIC(BM1_06_PE1.TOF.DN) OTE(BM1_06_PE1.FILT) ];
				N: XIC(BM1_06_PE1.FILT)[XIO(BM1_06_PE1.FILT_POS_XITN_MEM) OTE(BM1_06_PE1.FILT_POS_XITN) ,OTE(BM1_06_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_06_PE1.FILT)[XIO(BM1_06_PE1.FILT_NEG_XITN_MEM) OTE(BM1_06_PE1.FILT_NEG_XITN) ,OTE(BM1_06_PE1.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_07_MTR.COMM)[[XIO(I_PE_BM1_07) ,XIC(BM1_07_PE.TOF.DN) ] TON(BM1_07_PE.TON,?,?) ,XIO(I_PE_BM1_07) XIC(BM1_07_PE.TON.DN) TOF(BM1_07_PE.TOF,?,?) ,XIC(BM1_07_PE.TOF.DN) OTE(BM1_07_PE.FILT) ];
				N: XIC(BM1_07_PE.FILT)[XIO(BM1_07_PE.FILT_POS_XITN_MEM) OTE(BM1_07_PE.FILT_POS_XITN) ,OTE(BM1_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_07_PE.FILT)[XIO(BM1_07_PE.FILT_NEG_XITN_MEM) OTE(BM1_07_PE.FILT_NEG_XITN) ,OTE(BM1_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_07)[XIO(BM1_07_PE.POS_XITN_MEM) OTE(BM1_07_PE.POS_XITN) ,OTE(BM1_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_08_MTR.COMM)[[XIO(I_PE_BM1_08) ,XIC(BM1_08_PE.TOF.DN) ] TON(BM1_08_PE.TON,?,?) ,XIO(I_PE_BM1_08) XIC(BM1_08_PE.TON.DN) TOF(BM1_08_PE.TOF,?,?) ,XIC(BM1_08_PE.TOF.DN) OTE(BM1_08_PE.FILT) ];
				N: XIC(BM1_08_PE.FILT)[XIO(BM1_08_PE.FILT_POS_XITN_MEM) OTE(BM1_08_PE.FILT_POS_XITN) ,OTE(BM1_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_08_PE.FILT)[XIO(BM1_08_PE.FILT_NEG_XITN_MEM) OTE(BM1_08_PE.FILT_NEG_XITN) ,OTE(BM1_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_08)[XIO(BM1_08_PE.POS_XITN_MEM) OTE(BM1_08_PE.POS_XITN) ,OTE(BM1_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_09_MTR.COMM)[[XIO(I_PE_BM1_09) ,XIC(BM1_09_PE.TOF.DN) ] TON(BM1_09_PE.TON,?,?) ,XIO(I_PE_BM1_09) XIC(BM1_09_PE.TON.DN) TOF(BM1_09_PE.TOF,?,?) ,XIC(BM1_09_PE.TOF.DN) OTE(BM1_09_PE.FILT) ];
				N: XIC(BM1_09_PE.FILT)[XIO(BM1_09_PE.FILT_POS_XITN_MEM) OTE(BM1_09_PE.FILT_POS_XITN) ,OTE(BM1_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_09_PE.FILT)[XIO(BM1_09_PE.FILT_NEG_XITN_MEM) OTE(BM1_09_PE.FILT_NEG_XITN) ,OTE(BM1_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_09)[XIO(BM1_09_PE.POS_XITN_MEM) OTE(BM1_09_PE.POS_XITN) ,OTE(BM1_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_10_MTR.COMM)[[XIO(I_PE_BM1_10) ,XIC(BM1_10_PE.TOF.DN) ] TON(BM1_10_PE.TON,?,?) ,XIO(I_PE_BM1_10) XIC(BM1_10_PE.TON.DN) TOF(BM1_10_PE.TOF,?,?) ,XIC(BM1_10_PE.TOF.DN) OTE(BM1_10_PE.FILT) ];
				N: XIC(BM1_10_PE.FILT)[XIO(BM1_10_PE.FILT_POS_XITN_MEM) OTE(BM1_10_PE.FILT_POS_XITN) ,OTE(BM1_10_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_10_PE.FILT)[XIO(BM1_10_PE.FILT_NEG_XITN_MEM) OTE(BM1_10_PE.FILT_NEG_XITN) ,OTE(BM1_10_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_10)[XIO(BM1_10_PE.POS_XITN_MEM) OTE(BM1_10_PE.POS_XITN) ,OTE(BM1_10_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_11_MTR.COMM)[[XIO(I_PE_BM1_11) ,XIC(BM1_11_PE.TOF.DN) ] TON(BM1_11_PE.TON,?,?) ,XIO(I_PE_BM1_11) XIC(BM1_11_PE.TON.DN) TOF(BM1_11_PE.TOF,?,?) ,XIC(BM1_11_PE.TOF.DN) OTE(BM1_11_PE.FILT) ];
				N: XIC(BM1_11_PE.FILT)[XIO(BM1_11_PE.FILT_POS_XITN_MEM) OTE(BM1_11_PE.FILT_POS_XITN) ,OTE(BM1_11_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_11_PE.FILT)[XIO(BM1_11_PE.FILT_NEG_XITN_MEM) OTE(BM1_11_PE.FILT_NEG_XITN) ,OTE(BM1_11_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_11)[XIO(BM1_11_PE.POS_XITN_MEM) OTE(BM1_11_PE.POS_XITN) ,OTE(BM1_11_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_12_MTR.COMM)[[XIO(I_PE_BM1_12) ,XIC(BM1_12_PE.TOF.DN) ] TON(BM1_12_PE.TON,?,?) ,XIO(I_PE_BM1_12) XIC(BM1_12_PE.TON.DN) TOF(BM1_12_PE.TOF,?,?) ,XIC(BM1_12_PE.TOF.DN) OTE(BM1_12_PE.FILT) ];
				N: XIC(BM1_12_PE.FILT)[XIO(BM1_12_PE.FILT_POS_XITN_MEM) OTE(BM1_12_PE.FILT_POS_XITN) ,OTE(BM1_12_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_12_PE.FILT)[XIO(BM1_12_PE.FILT_NEG_XITN_MEM) OTE(BM1_12_PE.FILT_NEG_XITN) ,OTE(BM1_12_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_12)[XIO(BM1_12_PE.POS_XITN_MEM) OTE(BM1_12_PE.POS_XITN) ,OTE(BM1_12_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_13_MTR.COMM)[[XIO(I_PE_BM1_13) ,XIC(BM1_13_PE.TOF.DN) ] TON(BM1_13_PE.TON,?,?) ,XIO(I_PE_BM1_13) XIC(BM1_13_PE.TON.DN) TOF(BM1_13_PE.TOF,?,?) ,XIC(BM1_13_PE.TOF.DN) OTE(BM1_13_PE.FILT) ];
				N: XIC(BM1_13_PE.FILT)[XIO(BM1_13_PE.FILT_POS_XITN_MEM) OTE(BM1_13_PE.FILT_POS_XITN) ,OTE(BM1_13_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_13_PE.FILT)[XIO(BM1_13_PE.FILT_NEG_XITN_MEM) OTE(BM1_13_PE.FILT_NEG_XITN) ,OTE(BM1_13_PE.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE BM1_A_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_13_MTR.COMM);
				N: [XIC(O_C_BM1_13_FWD) ,XIC(O_C_BM1_13_REV) ]XIC(BM1_13_MTR.CONV_RUN)OTE(BM1_13_MTR.RUNNING);
				N: XIC(I_CS_BM1_13_JRB)OTE(zzzF_BM1_13_JOG_REVERSE);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_13_VFD_FAULT);
				N: [XIC(I_MOL_BM1_13) ,XIC(F_BM1_13_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_13_MOL) OTE(BM1_13_MTR.MOL_ONS) ,OTE(F_BM1_13_MOL) ];
				N: XIO(I_MSD_BM1_13)XIO(BM1_13_MTR.COMM)[XIO(F_BM1_13_MSD_OFF) OTE(BM1_13_MTR.MSD_ONS) ,OTE(F_BM1_13_MSD_OFF) ];
				N: [XIC(O_C_BM1_13_FWD) XIO(I_C_BM1_13) ,XIC(O_C_BM1_13_REV) XIO(I_C_BM1_13_REV) ]TON(BM1_13_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_13_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_13_CTCTR_FAULT) XIO(I_C_BM1_13_REV) XIO(I_C_BM1_13) ][XIO(F_BM1_13_CTCTR_FAULT) OTE(BM1_13_MTR.MS_FLT_ONS) ,OTE(F_BM1_13_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ]OTE(BM1_13_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ]OTE(BM1_13_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_13_MTR.FIRE_ALM);
				N: XIO(BM1_13_MTR.CONV_RUN)XIC(BM1_13_MTR.INTL_MTR)OTE(BM1_13_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_13_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_13_OVRIDE_REQ)[XIO(F_BM1_13_OVRIDE) OTE(BM1_13_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_13_OVRIDE) ];
				N: XIC(HMI_BM1_13_OUTSERV_REQ)[XIO(F_BM1_13_OUTSERV) OTE(BM1_13_MTR.OOS_ONS) ,OTE(F_BM1_13_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_13_MTR.MB_JAMMED);
				N: [XIC(F_BM1_12_PE_JAMMED) ,XIC(F_BM1_13_PE_JAMMED) ,XIC(BM1_13_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_13_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_12_MTR.COMM);
				N: XIC(O_C_BM1_12)XIC(BM1_12_MTR.CONV_RUN)OTE(BM1_12_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_12_VFD_FAULT);
				N: [XIC(I_MOL_BM1_12) ,XIC(F_BM1_12_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_12_MOL) OTE(BM1_12_MTR.MOL_ONS) ,OTE(F_BM1_12_MOL) ];
				N: XIO(I_MSD_BM1_12)XIO(BM1_12_MTR.COMM)[XIO(F_BM1_12_MSD_OFF) OTE(BM1_12_MTR.MSD_ONS) ,OTE(F_BM1_12_MSD_OFF) ];
				N: XIC(O_C_BM1_12)XIO(I_C_BM1_12)TON(BM1_12_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_12_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_12_CTCTR_FAULT) XIO(I_C_BM1_12) ][XIO(F_BM1_12_CTCTR_FAULT) OTE(BM1_12_MTR.MS_FLT_ONS) ,OTE(F_BM1_12_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_12_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_12_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_12_MTR.FIRE_ALM);
				N: XIO(BM1_12_MTR.CONV_RUN)XIC(BM1_12_MTR.INTL_MTR)OTE(BM1_12_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_12_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_12_OVRIDE_REQ)[XIO(F_BM1_12_OVRIDE) OTE(BM1_12_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_12_OVRIDE) ];
				N: XIC(HMI_BM1_12_OUTSERV_REQ)[XIO(F_BM1_12_OUTSERV) OTE(BM1_12_MTR.OOS_ONS) ,OTE(F_BM1_12_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_12_MTR.MB_JAMMED);
				N: [XIC(F_BM1_11_PE_JAMMED) ,XIC(F_BM1_12_PE_JAMMED) ,XIC(BM1_12_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_12_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_11_MTR.COMM);
				N: XIC(O_C_BM1_11)XIC(BM1_11_MTR.CONV_RUN)OTE(BM1_11_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_11_VFD_FAULT);
				N: [XIC(I_MOL_BM1_11) ,XIC(F_BM1_11_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_11_MOL) OTE(BM1_11_MTR.MOL_ONS) ,OTE(F_BM1_11_MOL) ];
				N: XIO(I_MSD_BM1_11)XIO(BM1_11_MTR.COMM)[XIO(F_BM1_11_MSD_OFF) OTE(BM1_11_MTR.MSD_ONS) ,OTE(F_BM1_11_MSD_OFF) ];
				N: XIC(O_C_BM1_11)XIO(I_C_BM1_11)TON(BM1_11_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_11_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_11_CTCTR_FAULT) XIO(I_C_BM1_11) ][XIO(F_BM1_11_CTCTR_FAULT) OTE(BM1_11_MTR.MS_FLT_ONS) ,OTE(F_BM1_11_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_11_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_11_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_11_MTR.FIRE_ALM);
				N: XIO(BM1_11_MTR.CONV_RUN)XIC(BM1_11_MTR.INTL_MTR)OTE(BM1_11_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_11_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_11_OVRIDE_REQ)[XIO(F_BM1_11_OVRIDE) OTE(BM1_11_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_11_OVRIDE) ];
				N: XIC(HMI_BM1_11_OUTSERV_REQ)[XIO(F_BM1_11_OUTSERV) OTE(BM1_11_MTR.OOS_ONS) ,OTE(F_BM1_11_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_11_MTR.MB_JAMMED);
				N: [XIC(F_BM1_10_PE_JAMMED) ,XIC(F_BM1_11_PE_JAMMED) ,XIC(BM1_11_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_11_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_10_MTR.COMM);
				N: XIC(O_C_BM1_10)XIC(BM1_10_MTR.CONV_RUN)OTE(BM1_10_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_10_VFD_FAULT);
				N: [XIC(I_MOL_BM1_10) ,XIC(F_BM1_10_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_10_MOL) OTE(BM1_10_MTR.MOL_ONS) ,OTE(F_BM1_10_MOL) ];
				N: XIO(I_MSD_BM1_10)XIO(BM1_10_MTR.COMM)[XIO(F_BM1_10_MSD_OFF) OTE(BM1_10_MTR.MSD_ONS) ,OTE(F_BM1_10_MSD_OFF) ];
				N: XIC(O_C_BM1_10)XIO(I_C_BM1_10)TON(BM1_10_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_10_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_10_CTCTR_FAULT) XIO(I_C_BM1_10) ][XIO(F_BM1_10_CTCTR_FAULT) OTE(BM1_10_MTR.MS_FLT_ONS) ,OTE(F_BM1_10_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_10_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_10_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_10_MTR.FIRE_ALM);
				N: XIO(BM1_10_MTR.CONV_RUN)XIC(BM1_10_MTR.INTL_MTR)OTE(BM1_10_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_10_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_10_OVRIDE_REQ)[XIO(F_BM1_10_OVRIDE) OTE(BM1_10_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_10_OVRIDE) ];
				N: XIC(HMI_BM1_10_OUTSERV_REQ)[XIO(F_BM1_10_OUTSERV) OTE(BM1_10_MTR.OOS_ONS) ,OTE(F_BM1_10_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_10_MTR.MB_JAMMED);
				N: [XIC(F_BM1_09_PE_JAMMED) ,XIC(F_BM1_10_PE_JAMMED) ,XIC(BM1_10_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_10_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_09_MTR.COMM);
				N: XIC(O_C_BM1_09)XIC(BM1_09_MTR.CONV_RUN)OTE(BM1_09_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_09_VFD_FAULT);
				N: [XIC(I_MOL_BM1_09) ,XIC(F_BM1_09_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_09_MOL) OTE(BM1_09_MTR.MOL_ONS) ,OTE(F_BM1_09_MOL) ];
				N: XIO(I_MSD_BM1_09)XIO(BM1_09_MTR.COMM)[XIO(F_BM1_09_MSD_OFF) OTE(BM1_09_MTR.MSD_ONS) ,OTE(F_BM1_09_MSD_OFF) ];
				N: XIC(O_C_BM1_09)XIO(I_C_BM1_09)TON(BM1_09_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_09_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_09_CTCTR_FAULT) XIO(I_C_BM1_09) ][XIO(F_BM1_09_CTCTR_FAULT) OTE(BM1_09_MTR.MS_FLT_ONS) ,OTE(F_BM1_09_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_09_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_09_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_09_MTR.FIRE_ALM);
				N: XIO(BM1_09_MTR.CONV_RUN)XIC(BM1_09_MTR.INTL_MTR)OTE(BM1_09_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_09_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_09_OVRIDE_REQ)[XIO(F_BM1_09_OVRIDE) OTE(BM1_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_09_OVRIDE) ];
				N: XIC(HMI_BM1_09_OUTSERV_REQ)[XIO(F_BM1_09_OUTSERV) OTE(BM1_09_MTR.OOS_ONS) ,OTE(F_BM1_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_09_MTR.MB_JAMMED);
				N: [XIC(F_BM1_08_PE_JAMMED) ,XIC(F_BM1_09_PE_JAMMED) ,XIC(BM1_09_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_08_MTR.COMM);
				N: XIC(O_C_BM1_08)XIC(BM1_08_MTR.CONV_RUN)OTE(BM1_08_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_08_VFD_FAULT);
				N: [XIC(I_MOL_BM1_08) ,XIC(F_BM1_08_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_08_MOL) OTE(BM1_08_MTR.MOL_ONS) ,OTE(F_BM1_08_MOL) ];
				N: XIO(I_MSD_BM1_08)XIO(BM1_08_MTR.COMM)[XIO(F_BM1_08_MSD_OFF) OTE(BM1_08_MTR.MSD_ONS) ,OTE(F_BM1_08_MSD_OFF) ];
				N: XIC(O_C_BM1_08)XIO(I_C_BM1_08)TON(BM1_08_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_08_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_08_CTCTR_FAULT) XIO(I_C_BM1_08) ][XIO(F_BM1_08_CTCTR_FAULT) OTE(BM1_08_MTR.MS_FLT_ONS) ,OTE(F_BM1_08_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_08_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_08_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_08_MTR.FIRE_ALM);
				N: XIO(BM1_08_MTR.CONV_RUN)XIC(BM1_08_MTR.INTL_MTR)OTE(BM1_08_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_08_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_08_OVRIDE_REQ)[XIO(F_BM1_08_OVRIDE) OTE(BM1_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_08_OVRIDE) ];
				N: XIC(HMI_BM1_08_OUTSERV_REQ)[XIO(F_BM1_08_OUTSERV) OTE(BM1_08_MTR.OOS_ONS) ,OTE(F_BM1_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_08_MTR.MB_JAMMED);
				N: [XIC(F_BM1_07_PE_JAMMED) ,XIC(F_BM1_08_PE_JAMMED) ,XIC(BM1_08_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_07_MTR.COMM);
				N: XIC(O_C_BM1_07)XIC(BM1_07_MTR.CONV_RUN)OTE(BM1_07_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_07_VFD_FAULT);
				N: [XIC(I_MOL_BM1_07) ,XIC(F_BM1_07_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_07_MOL) OTE(BM1_07_MTR.MOL_ONS) ,OTE(F_BM1_07_MOL) ];
				N: XIO(I_MSD_BM1_07)XIO(BM1_07_MTR.COMM)[XIO(F_BM1_07_MSD_OFF) OTE(BM1_07_MTR.MSD_ONS) ,OTE(F_BM1_07_MSD_OFF) ];
				N: XIC(O_C_BM1_07)XIO(I_C_BM1_07)TON(BM1_07_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_07_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_07_CTCTR_FAULT) XIO(I_C_BM1_07) ][XIO(F_BM1_07_CTCTR_FAULT) OTE(BM1_07_MTR.MS_FLT_ONS) ,OTE(F_BM1_07_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_07_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_07_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_07_MTR.FIRE_ALM);
				N: XIO(BM1_07_MTR.CONV_RUN)XIC(BM1_07_MTR.INTL_MTR)OTE(BM1_07_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_07_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_07_OVRIDE_REQ)[XIO(F_BM1_07_OVRIDE) OTE(BM1_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_07_OVRIDE) ];
				N: XIC(HMI_BM1_07_OUTSERV_REQ)[XIO(F_BM1_07_OUTSERV) OTE(BM1_07_MTR.OOS_ONS) ,OTE(F_BM1_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_07_MTR.MB_JAMMED);
				N: [XIC(F_BM1_06_PE1_JAMMED) ,XIC(F_BM1_07_PE_JAMMED) ,XIC(BM1_07_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_06_MTR.COMM);
				N: XIC(O_C_BM1_06)XIC(BM1_06_MTR.CONV_RUN)OTE(BM1_06_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_06_VFD_FAULT);
				N: [XIC(I_MOL_BM1_06) ,XIC(F_BM1_06_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_06_MOL) OTE(BM1_06_MTR.MOL_ONS) ,OTE(F_BM1_06_MOL) ];
				N: XIO(I_MSD_BM1_06)XIO(BM1_06_MTR.COMM)[XIO(F_BM1_06_MSD_OFF) OTE(BM1_06_MTR.MSD_ONS) ,OTE(F_BM1_06_MSD_OFF) ];
				N: XIC(O_C_BM1_06)XIO(I_C_BM1_06)TON(BM1_06_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_06_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_06_CTCTR_FAULT) XIO(I_C_BM1_06) ][XIO(F_BM1_06_CTCTR_FAULT) OTE(BM1_06_MTR.MS_FLT_ONS) ,OTE(F_BM1_06_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_06_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_06_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_06_MTR.FIRE_ALM);
				N: XIO(BM1_06_MTR.CONV_RUN)XIC(BM1_06_MTR.INTL_MTR)OTE(BM1_06_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_06_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_06_OVRIDE_REQ)[XIO(F_BM1_06_OVRIDE) OTE(BM1_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_06_OVRIDE) ];
				N: XIC(HMI_BM1_06_OUTSERV_REQ)[XIO(F_BM1_06_OUTSERV) OTE(BM1_06_MTR.OOS_ONS) ,OTE(F_BM1_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_06_MTR.MB_JAMMED);
				N: [XIC(F_BM1_06_PE1_JAMMED) ,XIC(BM1_06_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_05_MTR.COMM);
				N: XIC(O_C_BM1_05)XIC(BM1_05_MTR.CONV_RUN)OTE(BM1_05_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_05_VFD_FAULT);
				N: [XIC(I_MOL_BM1_05) ,XIC(F_BM1_05_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_05_MOL) OTE(BM1_05_MTR.MOL_ONS) ,OTE(F_BM1_05_MOL) ];
				N: XIO(I_MSD_BM1_05)XIO(BM1_05_MTR.COMM)[XIO(F_BM1_05_MSD_OFF) OTE(BM1_05_MTR.MSD_ONS) ,OTE(F_BM1_05_MSD_OFF) ];
				N: XIC(O_C_BM1_05)XIO(I_C_BM1_05)TON(BM1_05_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_05_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_05_CTCTR_FAULT) XIO(I_C_BM1_05) ][XIO(F_BM1_05_CTCTR_FAULT) OTE(BM1_05_MTR.MS_FLT_ONS) ,OTE(F_BM1_05_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_05_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_05_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_05_MTR.FIRE_ALM);
				N: XIO(BM1_05_MTR.CONV_RUN)XIC(BM1_05_MTR.INTL_MTR)OTE(BM1_05_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_05_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_05_OVRIDE_REQ)[XIO(F_BM1_05_OVRIDE) OTE(BM1_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_05_OVRIDE) ];
				N: XIC(HMI_BM1_05_OUTSERV_REQ)[XIO(F_BM1_05_OUTSERV) OTE(BM1_05_MTR.OOS_ONS) ,OTE(F_BM1_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_05_MTR.MB_JAMMED);
				N: [XIC(BM1_05_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_04_MTR.COMM);
				N: XIC(O_C_BM1_04)XIC(BM1_04_MTR.CONV_RUN)OTE(BM1_04_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_04_VFD_FAULT);
				N: [XIC(I_MOL_BM1_04) ,XIC(F_BM1_04_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_04_MOL) OTE(BM1_04_MTR.MOL_ONS) ,OTE(F_BM1_04_MOL) ];
				N: XIO(I_MSD_BM1_04)XIO(BM1_04_MTR.COMM)[XIO(F_BM1_04_MSD_OFF) OTE(BM1_04_MTR.MSD_ONS) ,OTE(F_BM1_04_MSD_OFF) ];
				N: XIC(O_C_BM1_04)XIO(I_C_BM1_04)TON(BM1_04_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_04_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_04_CTCTR_FAULT) XIO(I_C_BM1_04) ][XIO(F_BM1_04_CTCTR_FAULT) OTE(BM1_04_MTR.MS_FLT_ONS) ,OTE(F_BM1_04_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_04_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_04_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_04_MTR.FIRE_ALM);
				N: XIO(BM1_04_MTR.CONV_RUN)XIC(BM1_04_MTR.INTL_MTR)OTE(BM1_04_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_04_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_04_OVRIDE_REQ)[XIO(F_BM1_04_OVRIDE) OTE(BM1_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_04_OVRIDE) ];
				N: XIC(HMI_BM1_04_OUTSERV_REQ)[XIO(F_BM1_04_OUTSERV) OTE(BM1_04_MTR.OOS_ONS) ,OTE(F_BM1_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_04_MTR.MB_JAMMED);
				N: [XIC(BM1_04_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_04_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_03_MTR.COMM);
				N: XIC(O_C_BM1_03)XIC(BM1_03_MTR.CONV_RUN)OTE(BM1_03_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_03_VFD_FAULT);
				N: [XIC(I_MOL_BM1_03) ,XIC(F_BM1_03_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_03_MOL) OTE(BM1_03_MTR.MOL_ONS) ,OTE(F_BM1_03_MOL) ];
				N: XIO(I_MSD_BM1_03)XIO(BM1_03_MTR.COMM)[XIO(F_BM1_03_MSD_OFF) OTE(BM1_03_MTR.MSD_ONS) ,OTE(F_BM1_03_MSD_OFF) ];
				N: XIC(O_C_BM1_03)XIO(I_C_BM1_03)TON(BM1_03_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_03_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_03_CTCTR_FAULT) XIO(I_C_BM1_03) ][XIO(F_BM1_03_CTCTR_FAULT) OTE(BM1_03_MTR.MS_FLT_ONS) ,OTE(F_BM1_03_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_03_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_03_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_03_MTR.FIRE_ALM);
				N: XIO(BM1_03_MTR.CONV_RUN)XIC(BM1_03_MTR.INTL_MTR)OTE(BM1_03_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_03_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_03_OVRIDE_REQ)[XIO(F_BM1_03_OVRIDE) OTE(BM1_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_03_OVRIDE) ];
				N: XIC(HMI_BM1_03_OUTSERV_REQ)[XIO(F_BM1_03_OUTSERV) OTE(BM1_03_MTR.OOS_ONS) ,OTE(F_BM1_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_03_MTR.MB_JAMMED);
				N: [XIC(BM1_03_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_02_MTR.COMM);
				N: XIC(O_C_BM1_02)XIC(BM1_02_MTR.CONV_RUN)OTE(BM1_02_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_02_VFD_FAULT);
				N: [XIC(I_MOL_BM1_02) ,XIC(F_BM1_02_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_02_MOL) OTE(BM1_02_MTR.MOL_ONS) ,OTE(F_BM1_02_MOL) ];
				N: XIO(I_MSD_BM1_02)XIO(BM1_02_MTR.COMM)[XIO(F_BM1_02_MSD_OFF) OTE(BM1_02_MTR.MSD_ONS) ,OTE(F_BM1_02_MSD_OFF) ];
				N: XIC(O_C_BM1_02)XIO(I_C_BM1_02)TON(BM1_02_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_02_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_02_CTCTR_FAULT) XIO(I_C_BM1_02) ][XIO(F_BM1_02_CTCTR_FAULT) OTE(BM1_02_MTR.MS_FLT_ONS) ,OTE(F_BM1_02_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_02_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_02_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_02_MTR.FIRE_ALM);
				N: XIO(BM1_02_MTR.CONV_RUN)XIC(BM1_02_MTR.INTL_MTR)OTE(BM1_02_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_02_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_02_OVRIDE_REQ)[XIO(F_BM1_02_OVRIDE) OTE(BM1_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_02_OVRIDE) ];
				N: XIC(HMI_BM1_02_OUTSERV_REQ)[XIO(F_BM1_02_OUTSERV) OTE(BM1_02_MTR.OOS_ONS) ,OTE(F_BM1_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_02_MTR.MB_JAMMED);
				N: [XIC(BM1_02_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_01_MTR.COMM);
				N: XIC(O_C_BM1_01)XIC(BM1_01_MTR.CONV_RUN)OTE(BM1_01_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_01_VFD_FAULT);
				N: [XIC(I_MOL_BM1_01) ,XIC(F_BM1_01_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_01_MOL) OTE(BM1_01_MTR.MOL_ONS) ,OTE(F_BM1_01_MOL) ];
				N: XIO(I_MSD_BM1_01)XIO(BM1_01_MTR.COMM)[XIO(F_BM1_01_MSD_OFF) OTE(BM1_01_MTR.MSD_ONS) ,OTE(F_BM1_01_MSD_OFF) ];
				N: XIC(O_C_BM1_01)XIO(I_C_BM1_01)TON(BM1_01_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_01_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_01_CTCTR_FAULT) XIO(I_C_BM1_01) ][XIO(F_BM1_01_CTCTR_FAULT) OTE(BM1_01_MTR.MS_FLT_ONS) ,OTE(F_BM1_01_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_1.Zone_OK) ,AFI() ]OTE(BM1_01_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_1.Zone_RES) ,AFI() ]OTE(BM1_01_MTR.E_STOP_RES);
				N: XIC(BM1_A.STATUS.FIRE_ALM)OTE(BM1_01_MTR.FIRE_ALM);
				N: XIO(BM1_01_MTR.CONV_RUN)XIC(BM1_01_MTR.INTL_MTR)OTE(BM1_01_MTR.CASC);
				N: XIO(BM1_A.MTR_GRP.RUN_LATCH)OTE(BM1_01_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_01_OVRIDE_REQ)[XIO(F_BM1_01_OVRIDE) OTE(BM1_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_01_OVRIDE) ];
				N: XIC(HMI_BM1_01_OUTSERV_REQ)[XIO(F_BM1_01_OUTSERV) OTE(BM1_01_MTR.OOS_ONS) ,OTE(F_BM1_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_01_MTR.MB_JAMMED);
				N: [XIC(BM1_01_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_01_MTR.JAMMED);
		END_ROUTINE

		ROUTINE BM1_A_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE BM1_B_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_14_PE2_JAMMED) XIC(I_PE2_BM1_14) ,XIC(F_BM1_14_PE1_JAMMED) XIC(I_PE1_BM1_14) ,XIC(F_BM1_14_CS1_E_STOP) XIO(I_CS1_BM1_14_EPB) ]OTE(CS_BM1_14_LTA1_FLASH);
				N: [[XIC(F_BM1_14_PE2_JAMMED) ,XIC(F_BM1_14_PE1_JAMMED) ] XIO(CS_BM1_14_LTA1_FLASH) ,XIC(CS_BM1_14_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_14_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_14_EPB) ]OTE(O_CS1_BM1_14_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_13_PE_JAMMED) XIC(I_PE_BM1_13) ,XIC(F_BM1_14_PE2_JAMMED) XIC(I_PE2_BM1_14) ,XIC(F_BM1_14_PE1_JAMMED) XIC(I_PE1_BM1_14) ,XIC(F_BM1_14_CS2_E_STOP) XIO(I_CS2_BM1_14_EPB) ]OTE(CS_BM1_14_LTA2_FLASH);
				N: [[XIC(F_BM1_13_PE_JAMMED) ,XIC(F_BM1_14_PE2_JAMMED) ,XIC(F_BM1_14_PE1_JAMMED) ] XIO(CS_BM1_14_LTA2_FLASH) ,XIC(CS_BM1_14_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_14_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_14_EPB) ]OTE(O_CS2_BM1_14_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_15_PE_JAMMED) XIC(I_PE1_BM1_28) ,XIC(F_BM1_15_CS_E_STOP) XIO(I_CS_BM1_15_EPB) ]OTE(CS_BM1_15_LTA_FLASH);
				N: [XIC(F_BM1_15_PE_JAMMED) XIO(CS_BM1_15_LTA_FLASH) ,XIC(CS_BM1_15_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_15_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_15_EPB) ]OTE(O_CS_BM1_15_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_16_PE_JAMMED) XIC(I_PE2_BM1_28) ,XIC(F_BM1_16_CS1_E_STOP) XIO(I_CS1_BM1_16_EPB) ]OTE(CS_BM1_16_LTA1_FLASH);
				N: [XIC(F_BM1_16_PE_JAMMED) XIO(CS_BM1_16_LTA1_FLASH) ,XIC(CS_BM1_16_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_16_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_16_EPB) ]OTE(O_CS1_BM1_16_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_15_PE_JAMMED) XIC(I_PE1_BM1_28) ,XIC(F_BM1_16_PE_JAMMED) XIC(I_PE2_BM1_28) ,XIC(F_BM1_16_CS2_E_STOP) XIO(I_CS2_BM1_16_EPB) ]OTE(CS_BM1_16_LTA2_FLASH);
				N: [[XIC(F_BM1_15_PE_JAMMED) ,XIC(F_BM1_16_PE_JAMMED) ] XIO(CS_BM1_16_LTA2_FLASH) ,XIC(CS_BM1_16_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_16_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_16_EPB) ]OTE(O_CS2_BM1_16_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_BM1_17_PE_JAMMED)XIC(I_PE1_BM1_27)OTE(CS_BM1_17_LTA1_FLASH);
				N: [XIC(F_BM1_17_PE_JAMMED) XIO(CS_BM1_17_LTA1_FLASH) ,XIC(CS_BM1_17_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_17_RPBA);
				N: [AFI() ,AFI() ]OTE(CS_BM1_17_LTW1_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_17_LTW1_FLASH) ,XIC(CS_BM1_17_LTW1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(zzzO_CS1_BM1_17_LTW);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_17_EPB) ]OTE(O_CS1_BM1_17_EPB);
				N: XIC(F_BM1_17_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(zzzO_CS1_BM1_17_spbg);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_17_PE_JAMMED) XIC(I_PE1_BM1_27) ,XIC(F_BM1_17_CS2_E_STOP) XIO(I_CS2_BM1_17_EPB) ]OTE(CS_BM1_17_LTA2_FLASH);
				N: [XIC(F_BM1_17_PE_JAMMED) XIO(CS_BM1_17_LTA2_FLASH) ,XIC(CS_BM1_17_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_17_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_17_EPB) ]OTE(O_CS2_BM1_17_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_18_PE_JAMMED) XIC(I_PE_BM1_18) ,XIC(F_BM1_18_CS_E_STOP) XIO(I_CS_BM1_18_EPB) ]OTE(CS_BM1_18_LTA_FLASH);
				N: [XIC(F_BM1_18_PE_JAMMED) XIO(CS_BM1_18_LTA_FLASH) ,XIC(CS_BM1_18_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_18_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_18_EPB) ]OTE(O_CS_BM1_18_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_19_PE1_JAMMED) XIC(I_PE1_BM1_19) ,XIC(F_BM1_19_CS_E_STOP) XIO(I_CS_BM1_19_EPB) ]OTE(CS_BM1_19_LTA_FLASH);
				N: [XIC(F_BM1_19_PE1_JAMMED) XIO(CS_BM1_19_LTA_FLASH) ,XIC(CS_BM1_19_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_19_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_19_EPB) ]OTE(O_CS_BM1_19_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_20_PE_JAMMED) XIC(I_PE_BM1_20) ,XIC(F_BM1_19_PE1_JAMMED) XIC(I_PE1_BM1_19) ,XIC(F_BM1_20_CS_E_STOP) XIO(I_CS_BM1_20_EPB) ]OTE(CS_BM1_20_LTA_FLASH);
				N: [[XIC(F_BM1_20_PE_JAMMED) ,XIC(F_BM1_19_PE1_JAMMED) ] XIO(CS_BM1_20_LTA_FLASH) ,XIC(CS_BM1_20_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_20_RPBA);
				N: XIC(F_BM1_19_PE2_OVERHEIGHT)XIC(I_PE2_BM1_19)OTE(CS_BM1_20_LTW_FLASH);
				N: [XIC(F_BM1_19_PE2_OVERHEIGHT) XIO(CS_BM1_20_LTW_FLASH) ,XIC(CS_BM1_20_LTW_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_20_LTW);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_20_EPB) ]OTE(O_CS_BM1_20_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_23_PE3_JAMMED) XIC(I_PE2_BM1_23) ,XIC(F_BM1_23_PE2_JAMMED) XIC(I_PE1_BM1_23) ,XIC(F_BM1_23_PE1_JAMMED) XIC(I_PE_BM1_23) ,XIC(F_BM1_24_PE_JAMMED) XIC(I_PE_BM1_24) ,XIC(F_BM1_23_CS1_E_STOP) XIO(I_CS_BM1_23_EPB) ,AFI() ]OTE(CS_BM1_23_LTA_FLASH);
				N: [[XIC(F_BM1_23_PE3_JAMMED) ,XIC(F_BM1_23_PE2_JAMMED) ,XIC(F_BM1_23_PE1_JAMMED) ,XIC(F_BM1_24_PE_JAMMED) ] XIO(CS_BM1_23_LTA_FLASH) ,XIC(CS_BM1_23_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_23_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_23_EPB) ]OTE(O_CS_BM1_23_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_23_PE3_JAMMED) XIC(I_PE2_BM1_23) ,XIC(F_BM1_23_PE2_JAMMED) XIC(I_PE1_BM1_23) ,XIC(F_BM1_23_PE1_JAMMED) XIC(I_PE_BM1_23) ,XIC(F_BM1_24_PE_JAMMED) XIC(I_PE_BM1_24) ,AFI() ]OTE(CS_BM1_23_LTA1_FLASH);
				N: [[XIC(F_BM1_23_PE3_JAMMED) ,XIC(F_BM1_23_PE2_JAMMED) ,XIC(F_BM1_23_PE1_JAMMED) ,XIC(F_BM1_24_PE_JAMMED) ] XIO(CS_BM1_23_LTA2_FLASH) ,XIC(CS_BM1_23_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_23_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_23_EPB) ]OTE(O_CS1_BM1_23_EPB);
				N: XIC(F_BM1_23_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_BM1_23_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_25_PE_JAMMED) XIC(I_PE_BM1_25) ,XIC(F_BM1_26_PE_JAMMED) XIC(I_PE_BM1_26) ,XIC(F_BM1_25_CS_E_STOP) XIO(I_CS_BM1_25_EPB) ,AFI() ]OTE(CS_BM1_25_LTA_FLASH);
				N: [[XIC(F_BM1_25_PE_JAMMED) ,XIC(F_BM1_26_PE_JAMMED) ] XIO(CS_BM1_25_LTA_FLASH) ,XIC(CS_BM1_25_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_25_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_25_EPB) ]OTE(O_CS_BM1_25_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_34_PE_JAMMED) XIC(I_PE_BM1_34) ,XIC(F_BM1_35_PE_JAMMED) XIC(I_PE_BM1_35) ,XIC(F_BM1_34_CS_E_STOP) XIO(I_CS_BM1_34_EPB) ,AFI() ]OTE(CS_BM1_34_LTA_FLASH);
				N: [[XIC(F_BM1_34_PE_JAMMED) ,XIC(F_BM1_35_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_BM1_34_LTA_FLASH) ,XIC(CS_BM1_34_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_34_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_34_EPB) ]OTE(O_CS_BM1_34_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_36_PE_JAMMED) XIC(I_PE_BM1_36) ,XIC(F_BM1_37_PE_JAMMED) XIC(I_PE_BM1_37) ,XIC(F_BM1_38_PE_JAMMED) XIC(I_PE_BM1_38) ,XIC(F_BM1_34_PE_JAMMED) XIC(I_PE_BM1_34) ,XIC(F_BM1_35_PE_JAMMED) XIC(I_PE_BM1_35) ,XIC(F_O2T_18_PE_JAMMED) XIC(I_PE_O2T_18) ,XIC(F_BM1_38_CS_E_STOP) XIO(I_CS_BM1_38_EPB) ,AFI() ]OTE(CS_BM1_38_LTA_FLASH);
				N: [[XIC(F_BM1_36_PE_JAMMED) ,XIC(F_BM1_37_PE_JAMMED) ,XIC(F_BM1_38_PE_JAMMED) ,XIC(F_BM1_34_PE_JAMMED) ,XIC(F_BM1_35_PE_JAMMED) ,XIC(F_O2T_18_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_BM1_38_LTA_FLASH) ,XIC(CS_BM1_38_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_BM1_38_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_BM1_38_EPB) ]OTE(O_CS_BM1_38_EPB);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_A.STATUS.READY)OTE(O_WA_BM1_16_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MSD_OFF_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_16_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_A.STATUS.READY)OTE(O_WA_BM1_18_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_18_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(MCP_03.STATUS.DR_FLT_MONITOR) ,XIC(MCP_03.STATUS.MSD_OFF_MONITOR) ,XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_23_LTA);
				N: XIC(MCP_03.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_BM1_23_LTR);
				N: [[XIC(MCP_03.STATUS.DR_FLT_ALARM) ,XIC(MCP_03.STATUS.MOL_ALARM) ,XIC(MCP_03.STATUS.JAM_ALARM) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) ,XIC(MCP_03.STATUS.E_STOP_ALARM) ,XIC(MCP_03.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_23_ALM);
		END_ROUTINE

		ROUTINE BM1_B_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_26_MTR.G) ,XIC(BM1_26_MTR.RUNNING) MOV(Status.ConvRunning,BM1_26_MTR.G) ,XIC(BM1_26_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_26_MTR.G) ,[XIC(BM1_26_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_26_MTR.G) ,XIC(BM1_26_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_26_MTR.G) ,XIC(F_BM1_26_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_26_MTR.G) ,XIC(BM1_26_MTR.CASC) MOV(Status.ConvCascade,BM1_26_MTR.G) ,XIC(BM1_26_MTR.CASC) XIO(I_PE_BM1_26) MOV(Status.ConvBagPresCasc,BM1_26_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_26_MTR.G) ,XIC(F_BM1_26_MSD_OFF) MOV(Status.ConvDisc,BM1_26_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_26_MTR.G) ,XIC(BM1_26_MTR.JAMMED) MOV(Status.ConvJammed,BM1_26_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_26_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_26_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_26_MTR.G) ,XIC(F_BM1_26_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_26_MTR.G) ,XIC(F_BM1_26_MOL) MOV(Status.ConvOverLoad,BM1_26_MTR.G) ,XIC(F_BM1_26_OVRIDE) MOV(Status.ConvOverRide,BM1_26_MTR.G) ,XIC(BM1_26_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_26_MTR.G) ,XIC(BM1_26_MTR.E_STOP) XIO(BM1_26_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_26_MTR.G) ,XIC(F_BM1_26_OUTSERV) MOV(Status.ConvOutOfServ,BM1_26_MTR.G) ,XIC(BM1_26_MTR.COMM) MOV(Status.ConvCommFault,BM1_26_MTR.G) ,MOV(BM1_26_MTR.G,G_BM1_26_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_25_MTR.G) ,XIC(BM1_25_MTR.RUNNING) MOV(Status.ConvRunning,BM1_25_MTR.G) ,XIC(BM1_25_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_25_MTR.G) ,[XIC(BM1_25_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_25_MTR.G) ,XIC(BM1_25_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_25_MTR.G) ,XIC(F_BM1_25_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_25_MTR.G) ,XIC(BM1_25_MTR.CASC) MOV(Status.ConvCascade,BM1_25_MTR.G) ,XIC(BM1_25_MTR.CASC) XIO(I_PE_BM1_25) MOV(Status.ConvBagPresCasc,BM1_25_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_25_MTR.G) ,XIC(F_BM1_25_MSD_OFF) MOV(Status.ConvDisc,BM1_25_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_25_MTR.G) ,XIC(BM1_25_MTR.JAMMED) MOV(Status.ConvJammed,BM1_25_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_25_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_25_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_25_MTR.G) ,XIC(F_BM1_25_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_25_MTR.G) ,XIC(F_BM1_25_MOL) MOV(Status.ConvOverLoad,BM1_25_MTR.G) ,XIC(F_BM1_25_OVRIDE) MOV(Status.ConvOverRide,BM1_25_MTR.G) ,XIC(BM1_25_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_25_MTR.G) ,XIC(BM1_25_MTR.E_STOP) XIO(BM1_25_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_25_MTR.G) ,XIC(F_BM1_25_OUTSERV) MOV(Status.ConvOutOfServ,BM1_25_MTR.G) ,XIC(BM1_25_MTR.COMM) MOV(Status.ConvCommFault,BM1_25_MTR.G) ,MOV(BM1_25_MTR.G,G_BM1_25_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_24_MTR.G) ,XIC(BM1_24_MTR.RUNNING) MOV(Status.ConvRunning,BM1_24_MTR.G) ,XIC(BM1_24_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_24_MTR.G) ,[XIC(BM1_24_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_24_MTR.G) ,XIC(BM1_24_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_24_MTR.G) ,XIC(F_BM1_24_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_24_MTR.G) ,XIC(BM1_24_MTR.CASC) MOV(Status.ConvCascade,BM1_24_MTR.G) ,XIC(BM1_24_MTR.CASC) XIO(I_PE_BM1_24) MOV(Status.ConvBagPresCasc,BM1_24_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_24_MTR.G) ,XIC(F_BM1_24_MSD_OFF) MOV(Status.ConvDisc,BM1_24_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_24_MTR.G) ,XIC(BM1_24_MTR.JAMMED) MOV(Status.ConvJammed,BM1_24_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_24_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_24_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_24_MTR.G) ,XIC(F_BM1_24_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_24_MTR.G) ,XIC(F_BM1_24_MOL) MOV(Status.ConvOverLoad,BM1_24_MTR.G) ,XIC(F_BM1_24_OVRIDE) MOV(Status.ConvOverRide,BM1_24_MTR.G) ,XIC(BM1_24_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_24_MTR.G) ,XIC(BM1_24_MTR.E_STOP) XIO(BM1_24_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_24_MTR.G) ,XIC(F_BM1_24_OUTSERV) MOV(Status.ConvOutOfServ,BM1_24_MTR.G) ,XIC(BM1_24_MTR.COMM) MOV(Status.ConvCommFault,BM1_24_MTR.G) ,MOV(BM1_24_MTR.G,G_BM1_24_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_23_MTR.G) ,XIC(BM1_23_MTR.RUNNING) MOV(Status.ConvRunning,BM1_23_MTR.G) ,XIC(BM1_23_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_23_MTR.G) ,[XIC(BM1_23_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_23_MTR.G) ,XIC(BM1_23_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_23_MTR.G) ,XIC(F_BM1_23_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_23_MTR.G) ,XIC(BM1_23_MTR.CASC) MOV(Status.ConvCascade,BM1_23_MTR.G) ,XIC(BM1_23_MTR.CASC) XIO(I_PE_BM1_23) MOV(Status.ConvBagPresCasc,BM1_23_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_23_MTR.G) ,XIC(F_BM1_23_MSD_OFF) MOV(Status.ConvDisc,BM1_23_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_23_MTR.G) ,XIC(BM1_23_MTR.JAMMED) MOV(Status.ConvJammed,BM1_23_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_23_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_23_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_23_MTR.G) ,XIC(F_BM1_23_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_23_MTR.G) ,XIC(F_BM1_23_MOL) MOV(Status.ConvOverLoad,BM1_23_MTR.G) ,XIC(F_BM1_23_OVRIDE) MOV(Status.ConvOverRide,BM1_23_MTR.G) ,XIC(BM1_23_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_23_MTR.G) ,XIC(BM1_23_MTR.E_STOP) XIO(BM1_23_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_23_MTR.G) ,XIC(F_BM1_23_OUTSERV) MOV(Status.ConvOutOfServ,BM1_23_MTR.G) ,XIC(BM1_23_MTR.COMM) MOV(Status.ConvCommFault,BM1_23_MTR.G) ,MOV(BM1_23_MTR.G,G_BM1_23_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_22_MTR.G) ,XIC(BM1_22_MTR.RUNNING) MOV(Status.ConvRunning,BM1_22_MTR.G) ,XIC(BM1_22_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_22_MTR.G) ,[XIC(BM1_22_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_22_MTR.G) ,XIC(BM1_22_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_22_MTR.G) ,XIC(F_BM1_22_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_22_MTR.G) ,XIC(BM1_22_MTR.CASC) MOV(Status.ConvCascade,BM1_22_MTR.G) ,XIC(BM1_22_MTR.CASC) XIO(I_PE_BM1_22) MOV(Status.ConvBagPresCasc,BM1_22_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_22_MTR.G) ,XIC(F_BM1_22_MSD_OFF) MOV(Status.ConvDisc,BM1_22_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_22_MTR.G) ,XIC(BM1_22_MTR.JAMMED) MOV(Status.ConvJammed,BM1_22_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_22_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_22_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_22_MTR.G) ,XIC(F_BM1_22_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_22_MTR.G) ,XIC(F_BM1_22_MOL) MOV(Status.ConvOverLoad,BM1_22_MTR.G) ,XIC(F_BM1_22_OVRIDE) MOV(Status.ConvOverRide,BM1_22_MTR.G) ,XIC(BM1_22_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_22_MTR.G) ,XIC(BM1_22_MTR.E_STOP) XIO(BM1_22_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_22_MTR.G) ,XIC(F_BM1_22_OUTSERV) MOV(Status.ConvOutOfServ,BM1_22_MTR.G) ,XIC(BM1_22_MTR.COMM) MOV(Status.ConvCommFault,BM1_22_MTR.G) ,MOV(BM1_22_MTR.G,G_BM1_22_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_21_MTR.G) ,XIC(BM1_21_MTR.RUNNING) MOV(Status.ConvRunning,BM1_21_MTR.G) ,XIC(BM1_21_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_21_MTR.G) ,[XIC(BM1_21_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_21_MTR.G) ,XIC(BM1_21_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_21_MTR.G) ,XIC(F_BM1_21_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_21_MTR.G) ,XIC(BM1_21_MTR.CASC) MOV(Status.ConvCascade,BM1_21_MTR.G) ,XIC(BM1_21_MTR.CASC) XIO(I_PE_BM1_21) MOV(Status.ConvBagPresCasc,BM1_21_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_21_MTR.G) ,XIC(F_BM1_21_MSD_OFF) MOV(Status.ConvDisc,BM1_21_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_21_MTR.G) ,XIC(BM1_21_MTR.JAMMED) MOV(Status.ConvJammed,BM1_21_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_21_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_21_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_21_MTR.G) ,XIC(F_BM1_21_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_21_MTR.G) ,XIC(F_BM1_21_MOL) MOV(Status.ConvOverLoad,BM1_21_MTR.G) ,XIC(F_BM1_21_OVRIDE) MOV(Status.ConvOverRide,BM1_21_MTR.G) ,XIC(BM1_21_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_21_MTR.G) ,XIC(BM1_21_MTR.E_STOP) XIO(BM1_21_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_21_MTR.G) ,XIC(F_BM1_21_OUTSERV) MOV(Status.ConvOutOfServ,BM1_21_MTR.G) ,XIC(BM1_21_MTR.COMM) MOV(Status.ConvCommFault,BM1_21_MTR.G) ,MOV(BM1_21_MTR.G,G_BM1_21_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_20_MTR.G) ,XIC(BM1_20_MTR.RUNNING) MOV(Status.ConvRunning,BM1_20_MTR.G) ,XIC(BM1_20_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_20_MTR.G) ,[XIC(BM1_20_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_20_MTR.G) ,XIC(BM1_20_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_20_MTR.G) ,XIC(F_BM1_20_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_20_MTR.G) ,XIC(BM1_20_MTR.CASC) MOV(Status.ConvCascade,BM1_20_MTR.G) ,XIC(BM1_20_MTR.CASC) XIO(I_PE_BM1_20) MOV(Status.ConvBagPresCasc,BM1_20_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_20_MTR.G) ,XIC(F_BM1_20_MSD_OFF) MOV(Status.ConvDisc,BM1_20_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_20_MTR.G) ,XIC(BM1_20_MTR.JAMMED) MOV(Status.ConvJammed,BM1_20_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_20_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_20_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_20_MTR.G) ,XIC(F_BM1_20_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_20_MTR.G) ,XIC(F_BM1_20_MOL) MOV(Status.ConvOverLoad,BM1_20_MTR.G) ,XIC(F_BM1_20_OVRIDE) MOV(Status.ConvOverRide,BM1_20_MTR.G) ,XIC(BM1_20_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_20_MTR.G) ,XIC(BM1_20_MTR.E_STOP) XIO(BM1_20_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_20_MTR.G) ,XIC(F_BM1_20_OUTSERV) MOV(Status.ConvOutOfServ,BM1_20_MTR.G) ,XIC(BM1_20_MTR.COMM) MOV(Status.ConvCommFault,BM1_20_MTR.G) ,MOV(BM1_20_MTR.G,G_BM1_20_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_19_MTR.G) ,XIC(BM1_19_MTR.RUNNING) MOV(Status.ConvRunning,BM1_19_MTR.G) ,XIC(BM1_19_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_19_MTR.G) ,[XIC(BM1_19_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_19_MTR.G) ,XIC(BM1_19_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_19_MTR.G) ,XIC(F_BM1_19_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_19_MTR.G) ,XIC(BM1_19_MTR.CASC) MOV(Status.ConvCascade,BM1_19_MTR.G) ,XIC(BM1_19_MTR.CASC) XIO(I_PE1_BM1_19) MOV(Status.ConvBagPresCasc,BM1_19_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_19_MTR.G) ,XIC(F_BM1_19_MSD_OFF) MOV(Status.ConvDisc,BM1_19_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_19_MTR.G) ,XIC(BM1_19_MTR.JAMMED) MOV(Status.ConvJammed,BM1_19_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_19_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_19_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_19_MTR.G) ,XIC(F_BM1_19_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_19_MTR.G) ,XIC(F_BM1_19_MOL) MOV(Status.ConvOverLoad,BM1_19_MTR.G) ,XIC(F_BM1_19_OVRIDE) MOV(Status.ConvOverRide,BM1_19_MTR.G) ,XIC(BM1_19_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_19_MTR.G) ,XIC(BM1_19_MTR.E_STOP) XIO(BM1_19_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_19_MTR.G) ,XIC(F_BM1_19_OUTSERV) MOV(Status.ConvOutOfServ,BM1_19_MTR.G) ,XIC(BM1_19_MTR.COMM) MOV(Status.ConvCommFault,BM1_19_MTR.G) ,MOV(BM1_19_MTR.G,G_BM1_19_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_18_MTR.G) ,XIC(BM1_18_MTR.RUNNING) MOV(Status.ConvRunning,BM1_18_MTR.G) ,XIC(BM1_18_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_18_MTR.G) ,[XIC(BM1_18_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_18_MTR.G) ,XIC(BM1_18_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_18_MTR.G) ,XIC(F_BM1_18_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_18_MTR.G) ,XIC(BM1_18_MTR.CASC) MOV(Status.ConvCascade,BM1_18_MTR.G) ,XIC(BM1_18_MTR.CASC) XIO(I_PE_BM1_18) MOV(Status.ConvBagPresCasc,BM1_18_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_18_MTR.G) ,XIC(F_BM1_18_MSD_OFF) MOV(Status.ConvDisc,BM1_18_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_18_MTR.G) ,XIC(BM1_18_MTR.JAMMED) MOV(Status.ConvJammed,BM1_18_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_18_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_18_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_18_MTR.G) ,XIC(F_BM1_18_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_18_MTR.G) ,XIC(F_BM1_18_MOL) MOV(Status.ConvOverLoad,BM1_18_MTR.G) ,XIC(F_BM1_18_OVRIDE) MOV(Status.ConvOverRide,BM1_18_MTR.G) ,XIC(BM1_18_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_18_MTR.G) ,XIC(BM1_18_MTR.E_STOP) XIO(BM1_18_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_18_MTR.G) ,XIC(F_BM1_18_OUTSERV) MOV(Status.ConvOutOfServ,BM1_18_MTR.G) ,XIC(BM1_18_MTR.COMM) MOV(Status.ConvCommFault,BM1_18_MTR.G) ,MOV(BM1_18_MTR.G,G_BM1_18_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_17_MTR.G) ,XIC(BM1_17_MTR.RUNNING) MOV(Status.ConvRunning,BM1_17_MTR.G) ,XIC(BM1_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_17_MTR.G) ,[XIC(BM1_17_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_17_MTR.G) ,XIC(BM1_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_17_MTR.G) ,XIC(F_BM1_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_17_MTR.G) ,XIC(BM1_17_MTR.CASC) MOV(Status.ConvCascade,BM1_17_MTR.G) ,XIC(BM1_17_MTR.CASC) XIO(I_PE1_BM1_27) MOV(Status.ConvBagPresCasc,BM1_17_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_17_MTR.G) ,XIC(F_BM1_17_MSD_OFF) MOV(Status.ConvDisc,BM1_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_17_MTR.G) ,XIC(BM1_17_MTR.JAMMED) MOV(Status.ConvJammed,BM1_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_17_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_17_MTR.G) ,XIC(F_BM1_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_17_MTR.G) ,XIC(F_BM1_17_MOL) MOV(Status.ConvOverLoad,BM1_17_MTR.G) ,XIC(F_BM1_17_OVRIDE) MOV(Status.ConvOverRide,BM1_17_MTR.G) ,XIC(BM1_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_17_MTR.G) ,XIC(BM1_17_MTR.E_STOP) XIO(BM1_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_17_MTR.G) ,XIC(F_BM1_17_OUTSERV) MOV(Status.ConvOutOfServ,BM1_17_MTR.G) ,XIC(BM1_17_MTR.COMM) MOV(Status.ConvCommFault,BM1_17_MTR.G) ,MOV(BM1_17_MTR.G,G_BM1_17_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_16_MTR.G) ,XIC(BM1_16_MTR.RUNNING) MOV(Status.ConvRunning,BM1_16_MTR.G) ,XIC(BM1_16_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_16_MTR.G) ,[XIC(BM1_16_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_16_MTR.G) ,XIC(BM1_16_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_16_MTR.G) ,XIC(F_BM1_16_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_16_MTR.G) ,XIC(BM1_16_MTR.CASC) MOV(Status.ConvCascade,BM1_16_MTR.G) ,XIC(BM1_16_MTR.CASC) XIO(I_PE2_BM1_28) MOV(Status.ConvBagPresCasc,BM1_16_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_16_MTR.G) ,XIC(F_BM1_16_MSD_OFF) MOV(Status.ConvDisc,BM1_16_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_16_MTR.G) ,XIC(BM1_16_MTR.JAMMED) MOV(Status.ConvJammed,BM1_16_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_16_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_16_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_16_MTR.G) ,XIC(F_BM1_16_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_16_MTR.G) ,XIC(F_BM1_16_MOL) MOV(Status.ConvOverLoad,BM1_16_MTR.G) ,XIC(F_BM1_16_OVRIDE) MOV(Status.ConvOverRide,BM1_16_MTR.G) ,XIC(BM1_16_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_16_MTR.G) ,XIC(BM1_16_MTR.E_STOP) XIO(BM1_16_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_16_MTR.G) ,XIC(F_BM1_16_OUTSERV) MOV(Status.ConvOutOfServ,BM1_16_MTR.G) ,XIC(BM1_16_MTR.COMM) MOV(Status.ConvCommFault,BM1_16_MTR.G) ,MOV(BM1_16_MTR.G,G_BM1_16_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_15_MTR.G) ,XIC(BM1_15_MTR.RUNNING) MOV(Status.ConvRunning,BM1_15_MTR.G) ,XIC(BM1_15_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_15_MTR.G) ,[XIC(BM1_15_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_15_MTR.G) ,XIC(BM1_15_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_15_MTR.G) ,XIC(F_BM1_15_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_15_MTR.G) ,XIC(BM1_15_MTR.CASC) MOV(Status.ConvCascade,BM1_15_MTR.G) ,XIC(BM1_15_MTR.CASC) XIO(I_PE1_BM1_28) MOV(Status.ConvBagPresCasc,BM1_15_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_15_MTR.G) ,XIC(F_BM1_15_MSD_OFF) MOV(Status.ConvDisc,BM1_15_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_15_MTR.G) ,XIC(BM1_15_MTR.JAMMED) MOV(Status.ConvJammed,BM1_15_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_15_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_15_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_15_MTR.G) ,XIC(F_BM1_15_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_15_MTR.G) ,XIC(F_BM1_15_MOL) MOV(Status.ConvOverLoad,BM1_15_MTR.G) ,XIC(F_BM1_15_OVRIDE) MOV(Status.ConvOverRide,BM1_15_MTR.G) ,XIC(BM1_15_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_15_MTR.G) ,XIC(BM1_15_MTR.E_STOP) XIO(BM1_15_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_15_MTR.G) ,XIC(F_BM1_15_OUTSERV) MOV(Status.ConvOutOfServ,BM1_15_MTR.G) ,XIC(BM1_15_MTR.COMM) MOV(Status.ConvCommFault,BM1_15_MTR.G) ,MOV(BM1_15_MTR.G,G_BM1_15_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_14_MTR.G) ,XIC(BM1_14_MTR.RUNNING) MOV(Status.ConvRunning,BM1_14_MTR.G) ,XIC(BM1_14_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_14_MTR.G) ,[XIC(BM1_14_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_14_MTR.G) ,XIC(BM1_14_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_14_MTR.G) ,XIC(F_BM1_14_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_14_MTR.G) ,XIC(BM1_14_MTR.CASC) MOV(Status.ConvCascade,BM1_14_MTR.G) ,XIC(BM1_14_MTR.CASC) XIO(I_PE1_BM1_14) MOV(Status.ConvBagPresCasc,BM1_14_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_14_MTR.G) ,XIC(F_BM1_14_MSD_OFF) MOV(Status.ConvDisc,BM1_14_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_14_MTR.G) ,XIC(BM1_14_MTR.JAMMED) MOV(Status.ConvJammed,BM1_14_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_14_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_14_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_14_MTR.G) ,XIC(F_BM1_14_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_14_MTR.G) ,XIC(F_BM1_14_MOL) MOV(Status.ConvOverLoad,BM1_14_MTR.G) ,XIC(F_BM1_14_OVRIDE) MOV(Status.ConvOverRide,BM1_14_MTR.G) ,XIC(BM1_14_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_14_MTR.G) ,XIC(BM1_14_MTR.E_STOP) XIO(BM1_14_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_14_MTR.G) ,XIC(F_BM1_14_OUTSERV) MOV(Status.ConvOutOfServ,BM1_14_MTR.G) ,XIC(BM1_14_MTR.COMM) MOV(Status.ConvCommFault,BM1_14_MTR.G) ,MOV(BM1_14_MTR.G,G_BM1_14_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_38_MTR.G) ,XIC(BM1_38_MTR.RUNNING) MOV(Status.ConvRunning,BM1_38_MTR.G) ,XIC(BM1_38_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_38_MTR.G) ,[XIC(BM1_38_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_38_MTR.G) ,XIC(BM1_38_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_38_MTR.G) ,XIC(F_BM1_38_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_38_MTR.G) ,XIC(BM1_38_MTR.CASC) MOV(Status.ConvCascade,BM1_38_MTR.G) ,XIC(BM1_38_MTR.CASC) XIO(I_PE_BM1_38) MOV(Status.ConvBagPresCasc,BM1_38_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_38_MTR.G) ,XIC(F_BM1_38_MSD_OFF) MOV(Status.ConvDisc,BM1_38_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_38_MTR.G) ,XIC(BM1_38_MTR.JAMMED) MOV(Status.ConvJammed,BM1_38_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_38_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_38_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_38_MTR.G) ,XIC(F_BM1_38_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_38_MTR.G) ,XIC(F_BM1_38_MOL) MOV(Status.ConvOverLoad,BM1_38_MTR.G) ,XIC(F_BM1_38_OVRIDE) MOV(Status.ConvOverRide,BM1_38_MTR.G) ,XIC(BM1_38_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_38_MTR.G) ,XIC(BM1_38_MTR.E_STOP) XIO(BM1_38_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_38_MTR.G) ,XIC(F_BM1_38_OUTSERV) MOV(Status.ConvOutOfServ,BM1_38_MTR.G) ,XIC(BM1_38_MTR.COMM) MOV(Status.ConvCommFault,BM1_38_MTR.G) ,MOV(BM1_38_MTR.G,G_BM1_38_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_37_MTR.G) ,XIC(BM1_37_MTR.RUNNING) MOV(Status.ConvRunning,BM1_37_MTR.G) ,XIC(BM1_37_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_37_MTR.G) ,[XIC(BM1_37_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_37_MTR.G) ,XIC(BM1_37_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_37_MTR.G) ,XIC(F_BM1_37_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_37_MTR.G) ,XIC(BM1_37_MTR.CASC) MOV(Status.ConvCascade,BM1_37_MTR.G) ,XIC(BM1_37_MTR.CASC) XIO(I_PE_BM1_37) MOV(Status.ConvBagPresCasc,BM1_37_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_37_MTR.G) ,XIC(F_BM1_37_MSD_OFF) MOV(Status.ConvDisc,BM1_37_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_37_MTR.G) ,XIC(BM1_37_MTR.JAMMED) MOV(Status.ConvJammed,BM1_37_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_37_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_37_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_37_MTR.G) ,XIC(F_BM1_37_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_37_MTR.G) ,XIC(F_BM1_37_MOL) MOV(Status.ConvOverLoad,BM1_37_MTR.G) ,XIC(F_BM1_37_OVRIDE) MOV(Status.ConvOverRide,BM1_37_MTR.G) ,XIC(BM1_37_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_37_MTR.G) ,XIC(BM1_37_MTR.E_STOP) XIO(BM1_37_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_37_MTR.G) ,XIC(F_BM1_37_OUTSERV) MOV(Status.ConvOutOfServ,BM1_37_MTR.G) ,XIC(BM1_37_MTR.COMM) MOV(Status.ConvCommFault,BM1_37_MTR.G) ,MOV(BM1_37_MTR.G,G_BM1_37_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_36_MTR.G) ,XIC(BM1_36_MTR.RUNNING) MOV(Status.ConvRunning,BM1_36_MTR.G) ,XIC(BM1_36_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_36_MTR.G) ,[XIC(BM1_36_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_36_MTR.G) ,XIC(BM1_36_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_36_MTR.G) ,XIC(F_BM1_36_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_36_MTR.G) ,XIC(BM1_36_MTR.CASC) MOV(Status.ConvCascade,BM1_36_MTR.G) ,XIC(BM1_36_MTR.CASC) XIO(I_PE_BM1_36) MOV(Status.ConvBagPresCasc,BM1_36_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_36_MTR.G) ,XIC(F_BM1_36_MSD_OFF) MOV(Status.ConvDisc,BM1_36_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_36_MTR.G) ,XIC(BM1_36_MTR.JAMMED) MOV(Status.ConvJammed,BM1_36_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_36_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_36_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_36_MTR.G) ,XIC(F_BM1_36_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_36_MTR.G) ,XIC(F_BM1_36_MOL) MOV(Status.ConvOverLoad,BM1_36_MTR.G) ,XIC(F_BM1_36_OVRIDE) MOV(Status.ConvOverRide,BM1_36_MTR.G) ,XIC(BM1_36_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_36_MTR.G) ,XIC(BM1_36_MTR.E_STOP) XIO(BM1_36_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_36_MTR.G) ,XIC(F_BM1_36_OUTSERV) MOV(Status.ConvOutOfServ,BM1_36_MTR.G) ,XIC(BM1_36_MTR.COMM) MOV(Status.ConvCommFault,BM1_36_MTR.G) ,MOV(BM1_36_MTR.G,G_BM1_36_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_35_MTR.G) ,XIC(BM1_35_MTR.RUNNING) MOV(Status.ConvRunning,BM1_35_MTR.G) ,XIC(BM1_35_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_35_MTR.G) ,[XIC(BM1_35_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_35_MTR.G) ,XIC(BM1_35_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_35_MTR.G) ,XIC(F_BM1_35_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_35_MTR.G) ,XIC(BM1_35_MTR.CASC) MOV(Status.ConvCascade,BM1_35_MTR.G) ,XIC(BM1_35_MTR.CASC) XIO(I_PE_BM1_35) MOV(Status.ConvBagPresCasc,BM1_35_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_35_MTR.G) ,XIC(F_BM1_35_MSD_OFF) MOV(Status.ConvDisc,BM1_35_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_35_MTR.G) ,XIC(BM1_35_MTR.JAMMED) MOV(Status.ConvJammed,BM1_35_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_35_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_35_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_35_MTR.G) ,XIC(F_BM1_35_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_35_MTR.G) ,XIC(F_BM1_35_MOL) MOV(Status.ConvOverLoad,BM1_35_MTR.G) ,XIC(F_BM1_35_OVRIDE) MOV(Status.ConvOverRide,BM1_35_MTR.G) ,XIC(BM1_35_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_35_MTR.G) ,XIC(BM1_35_MTR.E_STOP) XIO(BM1_35_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_35_MTR.G) ,XIC(F_BM1_35_OUTSERV) MOV(Status.ConvOutOfServ,BM1_35_MTR.G) ,XIC(BM1_35_MTR.COMM) MOV(Status.ConvCommFault,BM1_35_MTR.G) ,MOV(BM1_35_MTR.G,G_BM1_35_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_34_MTR.G) ,XIC(BM1_34_MTR.RUNNING) MOV(Status.ConvRunning,BM1_34_MTR.G) ,XIC(BM1_34_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_34_MTR.G) ,[XIC(BM1_34_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,BM1_34_MTR.G) ,XIC(BM1_34_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_34_MTR.G) ,XIC(F_BM1_34_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_34_MTR.G) ,XIC(BM1_34_MTR.CASC) MOV(Status.ConvCascade,BM1_34_MTR.G) ,XIC(BM1_34_MTR.CASC) XIO(I_PE_BM1_34) MOV(Status.ConvBagPresCasc,BM1_34_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_34_MTR.G) ,XIC(F_BM1_34_MSD_OFF) MOV(Status.ConvDisc,BM1_34_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_34_MTR.G) ,XIC(BM1_34_MTR.JAMMED) MOV(Status.ConvJammed,BM1_34_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_34_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_34_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,BM1_34_MTR.G) ,XIC(F_BM1_34_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_34_MTR.G) ,XIC(F_BM1_34_MOL) MOV(Status.ConvOverLoad,BM1_34_MTR.G) ,XIC(F_BM1_34_OVRIDE) MOV(Status.ConvOverRide,BM1_34_MTR.G) ,XIC(BM1_34_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_34_MTR.G) ,XIC(BM1_34_MTR.E_STOP) XIO(BM1_34_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_34_MTR.G) ,XIC(F_BM1_34_OUTSERV) MOV(Status.ConvOutOfServ,BM1_34_MTR.G) ,XIC(BM1_34_MTR.COMM) MOV(Status.ConvCommFault,BM1_34_MTR.G) ,MOV(BM1_34_MTR.G,G_BM1_34_STS) ];
		END_ROUTINE

		ROUTINE BM1_B_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_14_MTR.CONV_RUN)RTO(BM1_14_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_14_RPBA) ,XIC(I_CS2_BM1_14_RPBA) ] XIC(BM1_14_PE2.JAM_TMR.DN) ,XIO(BM1_14_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_14)RES(BM1_14_PE2.JAM_TMR);
				N: XIC(BM1_14_PE2.JAM_TMR.DN)[XIO(F_BM1_14_PE2_JAMMED) [ADD(S_BM1_14_PE2_JAM,1,S_BM1_14_PE2_JAM) ,OTE(BM1_14_PE2.JAM_ONS) ] ,OTE(F_BM1_14_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_14_MTR.CONV_RUN)RTO(BM1_14_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_14_RPBA) ,XIC(I_CS2_BM1_14_RPBA) ] XIC(BM1_14_PE1.JAM_TMR.DN) ,XIO(BM1_14_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_14)RES(BM1_14_PE1.JAM_TMR);
				N: XIC(BM1_14_PE1.JAM_TMR.DN)[XIO(F_BM1_14_PE1_JAMMED) [ADD(S_BM1_14_PE1_JAM,1,S_BM1_14_PE1_JAM) ,OTE(BM1_14_PE1.JAM_ONS) ] ,OTE(F_BM1_14_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_15_MTR.CONV_RUN)RTO(BM1_15_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_15_RPBA) ,XIC(I_CS2_BM1_16_RPBA) ] XIC(BM1_15_PE.JAM_TMR.DN) ,XIO(BM1_15_PE.JAM_TMR.DN) ]XIC(I_PE1_BM1_28)RES(BM1_15_PE.JAM_TMR);
				N: XIC(BM1_15_PE.JAM_TMR.DN)[XIO(F_BM1_15_PE_JAMMED) [ADD(S_BM1_15_PE_JAM,1,S_BM1_15_PE_JAM) ,OTE(BM1_15_PE.JAM_ONS) ] ,OTE(F_BM1_15_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_16_MTR.CONV_RUN)RTO(BM1_16_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_16_RPBA) ,XIC(I_CS2_BM1_16_RPBA) ] XIC(BM1_16_PE.JAM_TMR.DN) ,XIO(BM1_16_PE.JAM_TMR.DN) ]XIC(I_PE2_BM1_28)RES(BM1_16_PE.JAM_TMR);
				N: XIC(BM1_16_PE.JAM_TMR.DN)[XIO(F_BM1_16_PE_JAMMED) [ADD(S_BM1_16_PE_JAM,1,S_BM1_16_PE_JAM) ,OTE(BM1_16_PE.JAM_ONS) ] ,OTE(F_BM1_16_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_17_MTR.CONV_RUN)RTO(BM1_17_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_17_RPBA) ,XIC(I_CS1_BM1_17_RPBA) ] XIC(BM1_17_PE.JAM_TMR.DN) ,XIO(BM1_17_PE.JAM_TMR.DN) ]XIC(I_PE1_BM1_27)RES(BM1_17_PE.JAM_TMR);
				N: XIC(BM1_17_PE.JAM_TMR.DN)[XIO(F_BM1_17_PE_JAMMED) [ADD(S_BM1_17_PE_JAM,1,S_BM1_17_PE_JAM) ,OTE(BM1_17_PE.JAM_ONS) ] ,OTE(F_BM1_17_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_18_MTR.CONV_RUN)RTO(BM1_18_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_18_RPBA) XIC(BM1_18_PE.JAM_TMR.DN) ,XIO(BM1_18_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_18)RES(BM1_18_PE.JAM_TMR);
				N: XIC(BM1_18_PE.JAM_TMR.DN)[XIO(F_BM1_18_PE_JAMMED) [ADD(S_BM1_18_PE_JAM,1,S_BM1_18_PE_JAM) ,OTE(BM1_18_PE.JAM_ONS) ] ,OTE(F_BM1_18_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_19_MTR.CONV_RUN)RTO(BM1_19_PE2.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_20_RPBA) XIC(BM1_19_PE2.JAM_TMR.DN) ,XIO(BM1_19_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_19)RES(BM1_19_PE2.JAM_TMR);
				N: XIC(BM1_19_PE2.JAM_TMR.DN)[XIO(F_BM1_19_PE2_OVERHEIGHT) [ADD(S_BM1_19_PE2_OH,1,S_BM1_19_PE2_OH) ,OTE(BM1_19_PE2.JAM_ONS) ] ,OTE(F_BM1_19_PE2_OVERHEIGHT) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_19_MTR.CONV_RUN)RTO(BM1_19_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_19_RPBA) ,XIC(I_CS_BM1_20_RPBA) ] XIC(BM1_19_PE1.JAM_TMR.DN) ,XIO(BM1_19_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_19)RES(BM1_19_PE1.JAM_TMR);
				N: XIC(BM1_19_PE1.JAM_TMR.DN)[XIO(F_BM1_19_PE1_JAMMED) [ADD(S_BM1_19_PE1_JAM,1,S_BM1_19_PE1_JAM) ,OTE(BM1_19_PE1.JAM_ONS) ] ,OTE(F_BM1_19_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_20_MTR.CONV_RUN)RTO(BM1_20_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_20_RPBA) XIC(BM1_20_PE.JAM_TMR.DN) ,XIO(BM1_20_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_20)RES(BM1_20_PE.JAM_TMR);
				N: XIC(BM1_20_PE.JAM_TMR.DN)[XIO(F_BM1_20_PE_JAMMED) [ADD(S_BM1_20_PE_JAM,1,S_BM1_20_PE_JAM) ,OTE(BM1_20_PE.JAM_ONS) ] ,OTE(F_BM1_20_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_21_MTR.CONV_RUN)RTO(BM1_21_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ,XIC(I_CS_BM1_20_RPBA) ] XIC(BM1_21_PE.JAM_TMR.DN) ,XIO(BM1_21_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_21)RES(BM1_21_PE.JAM_TMR);
				N: XIC(BM1_21_PE.JAM_TMR.DN)[XIO(F_BM1_21_PE_JAMMED) [ADD(S_BM1_21_PE_JAM,1,S_BM1_21_PE_JAM) ,OTE(BM1_21_PE.JAM_ONS) ] ,OTE(F_BM1_21_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_22_MTR.CONV_RUN)RTO(BM1_22_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ,XIC(I_CS_BM1_20_RPBA) ] XIC(BM1_22_PE.JAM_TMR.DN) ,XIO(BM1_22_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_22)RES(BM1_22_PE.JAM_TMR);
				N: XIC(BM1_22_PE.JAM_TMR.DN)[XIO(F_BM1_22_PE_JAMMED) [ADD(S_BM1_22_PE_JAM,1,S_BM1_22_PE_JAM) ,OTE(BM1_22_PE.JAM_ONS) ] ,OTE(F_BM1_22_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_23_MTR.CONV_RUN)RTO(BM1_23_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ] XIC(BM1_23_PE2.JAM_TMR.DN) ,XIO(BM1_23_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_23)RES(BM1_23_PE2.JAM_TMR);
				N: XIC(BM1_23_PE2.JAM_TMR.DN)[XIO(F_BM1_23_PE3_JAMMED) [ADD(S_BM1_23_PE3_JAM,1,S_BM1_23_PE3_JAM) ,OTE(BM1_23_PE2.JAM_ONS) ] ,OTE(F_BM1_23_PE3_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_23_MTR.CONV_RUN)RTO(BM1_23_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ] XIC(BM1_23_PE1.JAM_TMR.DN) ,XIO(BM1_23_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_23)RES(BM1_23_PE1.JAM_TMR);
				N: XIC(BM1_23_PE1.JAM_TMR.DN)[XIO(F_BM1_23_PE2_JAMMED) [ADD(S_BM1_23_PE2_JAM,1,S_BM1_23_PE2_JAM) ,OTE(BM1_23_PE1.JAM_ONS) ] ,OTE(F_BM1_23_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_23_MTR.CONV_RUN)RTO(BM1_23_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ] XIC(BM1_23_PE.JAM_TMR.DN) ,XIO(BM1_23_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_23)RES(BM1_23_PE.JAM_TMR);
				N: XIC(BM1_23_PE.JAM_TMR.DN)[XIO(F_BM1_23_PE1_JAMMED) [ADD(S_BM1_23_PE1_JAM,1,S_BM1_23_PE1_JAM) ,OTE(BM1_23_PE.JAM_ONS) ] ,OTE(F_BM1_23_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_24_MTR.CONV_RUN)RTO(BM1_24_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_23_RPBA) ,XIC(I_CS_BM1_23_RPBA) ] XIC(BM1_24_PE.JAM_TMR.DN) ,XIO(BM1_24_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_24)RES(BM1_24_PE.JAM_TMR);
				N: XIC(BM1_24_PE.JAM_TMR.DN)[XIO(F_BM1_24_PE_JAMMED) [ADD(S_BM1_24_PE_JAM,1,S_BM1_24_PE_JAM) ,OTE(BM1_24_PE.JAM_ONS) ] ,OTE(F_BM1_24_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_25_MTR.CONV_RUN)RTO(BM1_25_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_25_RPBA) XIC(BM1_25_PE.JAM_TMR.DN) ,XIO(BM1_25_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_25)RES(BM1_25_PE.JAM_TMR);
				N: XIC(BM1_25_PE.JAM_TMR.DN)[XIO(F_BM1_25_PE_JAMMED) [ADD(S_BM1_25_PE_JAM,1,S_BM1_25_PE_JAM) ,OTE(BM1_25_PE.JAM_ONS) ] ,OTE(F_BM1_25_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_26_MTR.CONV_RUN)RTO(BM1_26_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_25_RPBA) XIC(BM1_26_PE.JAM_TMR.DN) ,XIO(BM1_26_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_26)RES(BM1_26_PE.JAM_TMR);
				N: XIC(BM1_26_PE.JAM_TMR.DN)[XIO(F_BM1_26_PE_JAMMED) [ADD(S_BM1_26_PE_JAM,1,S_BM1_26_PE_JAM) ,OTE(BM1_26_PE.JAM_ONS) ] ,OTE(F_BM1_26_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_34_MTR.CONV_RUN)RTO(BM1_34_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_34_RPBA) ,XIC(I_CS_BM1_38_RPBA) ] XIC(BM1_34_PE.JAM_TMR.DN) ,XIO(BM1_34_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_34)RES(BM1_34_PE.JAM_TMR);
				N: XIC(BM1_34_PE.JAM_TMR.DN)[XIO(F_BM1_34_PE_JAMMED) [ADD(S_BM1_34_PE_JAM,1,S_BM1_34_PE_JAM) ,OTE(BM1_34_PE.JAM_ONS) ] ,OTE(F_BM1_34_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_35_MTR.CONV_RUN)RTO(BM1_35_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_BM1_34_RPBA) ,XIC(I_CS_BM1_38_RPBA) ] XIC(BM1_35_PE.JAM_TMR.DN) ,XIO(BM1_35_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_35)RES(BM1_35_PE.JAM_TMR);
				N: XIC(BM1_35_PE.JAM_TMR.DN)[XIO(F_BM1_35_PE_JAMMED) [ADD(S_BM1_35_PE_JAM,1,S_BM1_35_PE_JAM) ,OTE(BM1_35_PE.JAM_ONS) ] ,OTE(F_BM1_35_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_36_MTR.CONV_RUN)RTO(BM1_36_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_38_RPBA) XIC(BM1_36_PE.JAM_TMR.DN) ,XIO(BM1_36_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_36)RES(BM1_36_PE.JAM_TMR);
				N: XIC(BM1_36_PE.JAM_TMR.DN)[XIO(F_BM1_36_PE_JAMMED) [ADD(S_BM1_36_PE_JAM,1,S_BM1_36_PE_JAM) ,OTE(BM1_36_PE.JAM_ONS) ] ,OTE(F_BM1_36_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_37_MTR.CONV_RUN)RTO(BM1_37_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_38_RPBA) XIC(BM1_37_PE.JAM_TMR.DN) ,XIO(BM1_37_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_37)RES(BM1_37_PE.JAM_TMR);
				N: XIC(BM1_37_PE.JAM_TMR.DN)[XIO(F_BM1_37_PE_JAMMED) [ADD(S_BM1_37_PE_JAM,1,S_BM1_37_PE_JAM) ,OTE(BM1_37_PE.JAM_ONS) ] ,OTE(F_BM1_37_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_38_MTR.CONV_RUN)RTO(BM1_38_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_BM1_38_RPBA) XIC(BM1_38_PE.JAM_TMR.DN) ,XIO(BM1_38_PE.JAM_TMR.DN) ]XIC(I_PE_BM1_38)RES(BM1_38_PE.JAM_TMR);
				N: XIC(BM1_38_PE.JAM_TMR.DN)[XIO(F_BM1_38_PE_JAMMED) [ADD(S_BM1_38_PE_JAM,1,S_BM1_38_PE_JAM) ,OTE(BM1_38_PE.JAM_ONS) ] ,OTE(F_BM1_38_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE BM1_B_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS1_BM1_14_RPBA) ,XIC(I_CS2_BM1_14_RPBA) ,XIC(I_CS_BM1_15_RPBA) ,XIC(I_CS1_BM1_16_RPBA) ,XIC(I_CS2_BM1_16_RPBA) ,XIC(I_CS2_BM1_17_SPBG) ,XIC(I_CS1_BM1_17_RPBA) ,XIC(I_CS_BM1_18_RPBA) ,XIC(I_CS_BM1_19_RPBA) ,XIC(I_CS_BM1_20_RPBA) ,XIC(I_CS1_BM1_23_SPBG) ,XIC(I_CS_BM1_23_RPBA) ,XIC(I_CS_BM1_25_RPBA) ,XIC(I_CS_BM1_34_RPBA) ,XIC(I_CS_BM1_38_RPBA) ,XIC(I_CS_BM1_MCP_RPBA) ,XIC(BM1_A.MTR_GRP.START_DS) ,XIC(MCP_03.MTR_GRP.START_DS) ,XIC(XO1.MTR_GRP.START_DS) ,AFI() ]OTE(BM1_B.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(BM1_26_MTR.CONV_RUN)XIC(BM1_25_MTR.CONV_RUN)XIC(BM1_24_MTR.CONV_RUN)XIC(BM1_23_MTR.CONV_RUN)XIC(BM1_22_MTR.CONV_RUN)XIC(BM1_21_MTR.CONV_RUN)XIC(BM1_20_MTR.CONV_RUN)XIC(BM1_19_MTR.CONV_RUN)XIC(BM1_18_MTR.CONV_RUN)XIC(BM1_17_MTR.CONV_RUN)XIC(BM1_16_MTR.CONV_RUN)XIC(BM1_15_MTR.CONV_RUN)XIC(BM1_14_MTR.CONV_RUN)XIC(BM1_38_MTR.CONV_RUN)XIC(BM1_37_MTR.CONV_RUN)XIC(BM1_36_MTR.CONV_RUN)XIC(BM1_35_MTR.CONV_RUN)XIC(BM1_34_MTR.CONV_RUN)OTE(BM1_B.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE2_BM1_14) ,XIO(I_PE1_BM1_14) ,XIO(I_PE1_BM1_28) ,XIO(I_PE2_BM1_28) ,XIO(I_PE1_BM1_27) ,XIO(I_PE_BM1_18) ,XIO(I_PE2_BM1_19) ,XIO(I_PE1_BM1_19) ,XIO(I_PE_BM1_20) ,XIO(I_PE_BM1_21) ,XIO(I_PE_BM1_22) ,XIO(I_PE_BM1_23) ,XIO(I_PE2_BM1_23) ,XIO(I_PE1_BM1_23) ,XIO(I_PE_BM1_24) ,XIO(I_PE_BM1_25) ,XIO(I_PE_BM1_26) ,XIO(I_PE_BM1_34) ,XIO(I_PE_BM1_35) ,XIO(I_PE_BM1_36) ,XIO(I_PE_BM1_37) ,XIO(I_PE_BM1_38) ,AFI() ]OTE(BM1_B.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(BM1_B.MTR_GRP.START) ,XIC(BM1_B.MTR_GRP.PEs) XIO(BM1_B.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(BM1_B.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(BM1_B.MTR_GRP.RUN_LATCH)XIC(BM1_B.MTR_GRP.PEs)OTE(BM1_B.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(BM1_B.MTR_GRP.RUN_EXPAND)RTO(BM1_B.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(BM1_B.MTR_GRP.START) ,XIC(BM1_B.MTR_GRP.RUN_LATCH) ]XIO(BM1_B.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(BM1_B.STATUS.FIRE_ALM)OTE(BM1_B.MTR_GRP.RUN_LATCH);
				RC: "Motor BM1_26$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_27_MSD_OFF)OTE(BM1_26_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_26_MTR.E_STOP)[XIO(F_BM1_26_MOL) XIO(BM1_26_MTR.JAMMED) ,XIC(F_BM1_26_OVRIDE) ]XIO(F_BM1_26_MSD_OFF)XIO(F_BM1_26_OUTSERV)XIO(BM1_26_MTR.COMM)OTE(BM1_26_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_26_OVRIDE) ]XIC(BM1_26_MTR.NO_FAULT)TON(BM1_26_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_26_MTR.IM_TMR.DN)[XIO(BM1_26_MTR.INTL_MTR) OTE(BM1_26_MTR.IM_ONS) ,OTE(BM1_26_MTR.INTL_MTR) ];
				N: XIO(F_BM1_27_RUN_REV)XIC(BM1_27_MTR.INDEX_EN)XIO(BM1_27_MTR.INDEX_TMR.DN)OTE(BM1_26_MTR.SYNC_RUN);
				RC: "Conveyor Running.";
				N: [XIC(BM1_27_MTR.ON_TMR.DN) XIC(BM1_26_MTR.OFF_TMR.DN) ,[XIO(BM1_27_MTR.IM_ONS) ,XIC(BM1_27_MTR.INDEX_EN) ] XIC(BM1_26_MTR.IM_ONS) ,XIC(BM1_26_MTR.ANTI_CASC) XIC(I_PE_BM1_26) ,XIC(BM1_26_MTR.SYNC_RUN) ]OTE(BM1_26_MTR.START_EN);
				N: [[XIO(BM1_27_MTR.ON_TMR.DN) ,XIC(F_BM1_27_RUN_REV) ] [XIO(I_PE_BM1_26) ,XIC(BM1_26_MTR.SYNC_RUN) ] ,XIO(BM1_26_MTR.ANTI_CASC) XIC(BM1_26_MTR.SPACE) ]OTE(BM1_26_MTR.STOP);
				N: XIC(BM1_26_MTR.INTL_MTR)[[XIC(BM1_26_MTR.START_EN) ,XIC(BM1_26_MTR.CONV_RUN) ] XIO(BM1_26_MTR.STOP) ,XIC(F_BM1_26_OVRIDE) ][OTE(BM1_26_MTR.CONV_RUN) ,OTE(O_C_BM1_26) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_26_MTR.CONV_RUN)TON(BM1_26_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_26_MTR.CONV_RUN)TON(BM1_26_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_25$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_26_MSD_OFF)OTE(BM1_25_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_25_MTR.E_STOP)[XIO(F_BM1_25_MOL) XIO(BM1_25_MTR.JAMMED) ,XIC(F_BM1_25_OVRIDE) ]XIO(F_BM1_25_MSD_OFF)XIO(F_BM1_25_OUTSERV)XIO(BM1_25_MTR.COMM)OTE(BM1_25_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_25_OVRIDE) ]XIC(BM1_25_MTR.NO_FAULT)TON(BM1_25_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_25_MTR.IM_TMR.DN)[XIO(BM1_25_MTR.INTL_MTR) OTE(BM1_25_MTR.IM_ONS) ,OTE(BM1_25_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_25_PE.FILT_NEG_XITN)RES(BM1_25_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_26_MTR.CONV_RUN)RTO(BM1_25_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_25_PE.POS_XITN) XIC(BM1_25_MTR.INTL_MTR) ,XIC(BM1_25_MTR.T2H_SPACE) ]XIO(BM1_25_MTR.T2H_SPACE_TMR.DN)OTE(BM1_25_MTR.T2H_SPACE);
				N: XIC(BM1_25_MTR.T2H_SPACE)OTE(BM1_25_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_26_MTR.ON_TMR.DN) XIC(BM1_25_MTR.OFF_TMR.DN) ,XIO(BM1_26_MTR.IM_ONS) XIC(BM1_25_MTR.IM_ONS) ,XIC(BM1_25_MTR.ANTI_CASC) XIC(I_PE_BM1_25) ]OTE(BM1_25_MTR.START_EN);
				N: [XIO(BM1_26_MTR.ON_TMR.DN) XIO(I_PE_BM1_25) ,XIO(BM1_25_MTR.ANTI_CASC) XIC(BM1_25_MTR.SPACE) ]OTE(BM1_25_MTR.STOP);
				N: XIC(BM1_25_MTR.INTL_MTR)[[XIC(BM1_25_MTR.START_EN) ,XIC(BM1_25_MTR.CONV_RUN) ] XIO(BM1_25_MTR.STOP) ,XIC(F_BM1_25_OVRIDE) ][OTE(BM1_25_MTR.CONV_RUN) ,OTE(O_C_BM1_25) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_25_MTR.CONV_RUN)TON(BM1_25_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_25_MTR.CONV_RUN)TON(BM1_25_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_24$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_25_MSD_OFF)OTE(BM1_24_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_24_MTR.E_STOP)[XIO(F_BM1_24_MOL) XIO(BM1_24_MTR.JAMMED) ,XIC(F_BM1_24_OVRIDE) ]XIO(F_BM1_24_MSD_OFF)XIO(F_BM1_24_OUTSERV)XIO(BM1_24_MTR.COMM)OTE(BM1_24_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_24_OVRIDE) ]XIC(BM1_24_MTR.NO_FAULT)TON(BM1_24_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_24_MTR.IM_TMR.DN)[XIO(BM1_24_MTR.INTL_MTR) OTE(BM1_24_MTR.IM_ONS) ,OTE(BM1_24_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_24_PE.FILT_NEG_XITN)RES(BM1_24_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_25_MTR.CONV_RUN)RTO(BM1_24_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_24_PE.POS_XITN) XIC(BM1_24_MTR.INTL_MTR) ,XIC(BM1_24_MTR.T2H_SPACE) ]XIO(BM1_24_MTR.T2H_SPACE_TMR.DN)OTE(BM1_24_MTR.T2H_SPACE);
				N: XIC(BM1_24_MTR.T2H_SPACE)OTE(BM1_24_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_25_MTR.ON_TMR.DN) XIC(BM1_24_MTR.OFF_TMR.DN) ,XIO(BM1_25_MTR.IM_ONS) XIC(BM1_24_MTR.IM_ONS) ,XIC(BM1_24_MTR.ANTI_CASC) XIC(I_PE_BM1_24) ]OTE(BM1_24_MTR.START_EN);
				N: [XIO(BM1_25_MTR.ON_TMR.DN) XIO(I_PE_BM1_24) ,XIO(BM1_24_MTR.ANTI_CASC) XIC(BM1_24_MTR.SPACE) ]OTE(BM1_24_MTR.STOP);
				N: XIC(BM1_24_MTR.INTL_MTR)[[XIC(BM1_24_MTR.START_EN) ,XIC(BM1_24_MTR.CONV_RUN) ] XIO(BM1_24_MTR.STOP) ,XIC(F_BM1_24_OVRIDE) ][OTE(BM1_24_MTR.CONV_RUN) ,OTE(O_C_BM1_24) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_24_MTR.CONV_RUN)TON(BM1_24_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_24_MTR.CONV_RUN)TON(BM1_24_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_23$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_24_MSD_OFF)OTE(BM1_23_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_23_MTR.E_STOP)[XIO(F_BM1_23_MOL) XIO(BM1_23_MTR.JAMMED) [XIO(XO2_HSD.ML_STOP_FLT) ,XIC(XO2_HSD.DELAY_START_TMR.EN) ] ,XIC(F_BM1_23_OVRIDE) ]XIO(F_BM1_23_MSD_OFF)XIO(F_BM1_23_OUTSERV)XIO(BM1_23_MTR.COMM)OTE(BM1_23_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_23_OVRIDE) ]XIC(BM1_23_MTR.NO_FAULT)TON(BM1_23_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_23_MTR.IM_TMR.DN)[XIO(BM1_23_MTR.INTL_MTR) OTE(BM1_23_MTR.IM_ONS) ,OTE(BM1_23_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_23_PE.FILT_NEG_XITN)RES(BM1_23_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_24_MTR.CONV_RUN)RTO(BM1_23_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_23_PE.POS_XITN) XIC(BM1_23_MTR.INTL_MTR) ,XIC(BM1_23_MTR.T2H_SPACE) ]XIO(BM1_23_MTR.T2H_SPACE_TMR.DN)OTE(BM1_23_MTR.T2H_SPACE);
				N: XIC(BM1_23_MTR.T2H_SPACE)OTE(BM1_23_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_24_MTR.ON_TMR.DN) XIC(BM1_23_MTR.OFF_TMR.DN) ,XIO(BM1_24_MTR.IM_ONS) XIC(BM1_23_MTR.IM_ONS) ,XIC(BM1_23_MTR.ANTI_CASC) XIC(I_PE1_BM1_23) ]OTE(BM1_23_MTR.START_EN);
				N: [XIO(BM1_24_MTR.ON_TMR.DN) XIO(I_PE_BM1_23) ,XIO(BM1_23_MTR.ANTI_CASC) XIC(BM1_23_MTR.SPACE) ]OTE(BM1_23_MTR.STOP);
				N: [XIC(XO2_HSD.SYNC_RUN) XIO(XO2_01_MTR.CONV_RUN) ,AFI() ]OTE(BM1_23_MTR.DIV_SYNC_STOP);
				N: [XIC(XO2_HSD.SYNC_RUN) XIC(XO2_01_MTR.CONV_RUN) ,AFI() ]OTE(BM1_23_MTR.DIV_SYNC_RUN);
				N: [XIC(XO2_HSD.SYNC_RUN) XIO(XO2_01_MTR.CONV_RUN) ,AFI() ]OTE(BM1_23_MTR.DIV_SYNC_STOP);
				N: [XIC(XO2_HSD.SYNC_RUN) XIC(XO2_01_MTR.CONV_RUN) ,AFI() ]OTE(BM1_23_MTR.DIV_SYNC_RUN);
				N: XIC(BM1_23_MTR.INTL_MTR)[XIO(BM1_23_MTR.DIV_SYNC_STOP) [[XIC(BM1_23_MTR.START_EN) ,XIC(BM1_23_MTR.CONV_RUN) ] ,XIC(BM1_23_MTR.DIV_SYNC_RUN) ] XIO(BM1_23_MTR.STOP) ,XIC(F_BM1_23_OVRIDE) ][OTE(BM1_23_MTR.CONV_RUN) ,OTE(O_C_BM1_23) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_23_MTR.CONV_RUN)TON(BM1_23_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_23_MTR.CONV_RUN)TON(BM1_23_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_22$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_23_MSD_OFF)OTE(BM1_22_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_22_MTR.E_STOP)[XIO(F_BM1_22_MOL) XIO(BM1_22_MTR.JAMMED) ,XIC(F_BM1_22_OVRIDE) ]XIO(F_BM1_22_MSD_OFF)XIO(F_BM1_22_OUTSERV)XIO(BM1_22_MTR.COMM)OTE(BM1_22_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_22_OVRIDE) ]XIC(BM1_22_MTR.NO_FAULT)TON(BM1_22_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_22_MTR.IM_TMR.DN)[XIO(BM1_22_MTR.INTL_MTR) OTE(BM1_22_MTR.IM_ONS) ,OTE(BM1_22_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_22_PE.FILT_NEG_XITN)RES(BM1_22_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_23_MTR.CONV_RUN)RTO(BM1_22_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_22_PE.POS_XITN) XIC(BM1_22_MTR.INTL_MTR) ,XIC(BM1_22_MTR.T2H_SPACE) ]XIO(BM1_22_MTR.T2H_SPACE_TMR.DN)OTE(BM1_22_MTR.T2H_SPACE);
				N: XIC(BM1_22_MTR.T2H_SPACE)OTE(BM1_22_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_23_MTR.ON_TMR.DN) XIC(BM1_22_MTR.OFF_TMR.DN) ,XIO(BM1_23_MTR.IM_ONS) XIC(BM1_22_MTR.IM_ONS) ,XIC(BM1_22_MTR.ANTI_CASC) XIC(I_PE_BM1_22) ]OTE(BM1_22_MTR.START_EN);
				N: [XIO(BM1_23_MTR.ON_TMR.DN) XIO(I_PE_BM1_22) ,XIO(BM1_22_MTR.ANTI_CASC) XIC(BM1_22_MTR.SPACE) ]OTE(BM1_22_MTR.STOP);
				N: XIC(BM1_22_MTR.INTL_MTR)[[XIC(BM1_22_MTR.START_EN) ,XIC(BM1_22_MTR.CONV_RUN) ] XIO(BM1_22_MTR.STOP) ,XIC(F_BM1_22_OVRIDE) ][OTE(BM1_22_MTR.CONV_RUN) ,OTE(O_C_BM1_22) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_22_MTR.CONV_RUN)TON(BM1_22_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_22_MTR.CONV_RUN)TON(BM1_22_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_21$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_22_MSD_OFF)OTE(BM1_21_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_21_MTR.E_STOP)[XIO(F_BM1_21_MOL) XIO(BM1_21_MTR.JAMMED) ,XIC(F_BM1_21_OVRIDE) ]XIO(F_BM1_21_MSD_OFF)XIO(F_BM1_21_OUTSERV)XIO(BM1_21_MTR.COMM)OTE(BM1_21_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_21_OVRIDE) ]XIC(BM1_21_MTR.NO_FAULT)TON(BM1_21_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_21_MTR.IM_TMR.DN)[XIO(BM1_21_MTR.INTL_MTR) OTE(BM1_21_MTR.IM_ONS) ,OTE(BM1_21_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_21_PE.FILT_NEG_XITN)RES(BM1_21_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_22_MTR.CONV_RUN)RTO(BM1_21_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_21_PE.POS_XITN) XIC(BM1_21_MTR.INTL_MTR) ,XIC(BM1_21_MTR.T2H_SPACE) ]XIO(BM1_21_MTR.T2H_SPACE_TMR.DN)OTE(BM1_21_MTR.T2H_SPACE);
				N: XIC(BM1_21_MTR.T2H_SPACE)OTE(BM1_21_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_22_MTR.ON_TMR.DN) XIC(BM1_21_MTR.OFF_TMR.DN) ,XIO(BM1_22_MTR.IM_ONS) XIC(BM1_21_MTR.IM_ONS) ,XIC(BM1_21_MTR.ANTI_CASC) XIC(I_PE_BM1_21) ]OTE(BM1_21_MTR.START_EN);
				N: [XIO(BM1_22_MTR.ON_TMR.DN) XIO(I_PE_BM1_21) ,XIO(BM1_21_MTR.ANTI_CASC) XIC(BM1_21_MTR.SPACE) ]OTE(BM1_21_MTR.STOP);
				N: XIC(BM1_21_MTR.INTL_MTR)[[XIC(BM1_21_MTR.START_EN) ,XIC(BM1_21_MTR.CONV_RUN) ] XIO(BM1_21_MTR.STOP) ,XIC(F_BM1_21_OVRIDE) ][OTE(BM1_21_MTR.CONV_RUN) ,OTE(O_C_BM1_21) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_21_MTR.CONV_RUN)TON(BM1_21_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_21_MTR.CONV_RUN)TON(BM1_21_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_20$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_21_MSD_OFF)OTE(BM1_20_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_20_MTR.E_STOP)[XIO(F_BM1_20_MOL) XIO(BM1_20_MTR.JAMMED) ,XIC(F_BM1_20_OVRIDE) ]XIO(F_BM1_20_MSD_OFF)XIO(F_BM1_20_OUTSERV)XIO(BM1_20_MTR.COMM)OTE(BM1_20_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_20_OVRIDE) ]XIC(BM1_20_MTR.NO_FAULT)TON(BM1_20_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_20_MTR.IM_TMR.DN)[XIO(BM1_20_MTR.INTL_MTR) OTE(BM1_20_MTR.IM_ONS) ,OTE(BM1_20_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_20_PE.FILT_NEG_XITN)RES(BM1_20_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_21_MTR.CONV_RUN)RTO(BM1_20_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_20_PE.POS_XITN) XIC(BM1_20_MTR.INTL_MTR) ,XIC(BM1_20_MTR.T2H_SPACE) ]XIO(BM1_20_MTR.T2H_SPACE_TMR.DN)OTE(BM1_20_MTR.T2H_SPACE);
				N: XIC(BM1_20_MTR.T2H_SPACE)OTE(BM1_20_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_21_MTR.ON_TMR.DN) XIC(BM1_20_MTR.OFF_TMR.DN) ,XIO(BM1_21_MTR.IM_ONS) XIC(BM1_20_MTR.IM_ONS) ,XIC(BM1_20_MTR.ANTI_CASC) XIC(I_PE_BM1_20) ]OTE(BM1_20_MTR.START_EN);
				N: [XIO(BM1_21_MTR.ON_TMR.DN) XIO(I_PE_BM1_20) ,XIO(BM1_20_MTR.ANTI_CASC) XIC(BM1_20_MTR.SPACE) ]OTE(BM1_20_MTR.STOP);
				N: XIC(BM1_20_MTR.INTL_MTR)[[XIC(BM1_20_MTR.START_EN) ,XIC(BM1_20_MTR.CONV_RUN) ] XIO(BM1_20_MTR.STOP) ,XIC(F_BM1_20_OVRIDE) ][OTE(BM1_20_MTR.CONV_RUN) ,OTE(O_C_BM1_20) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_20_MTR.CONV_RUN)TON(BM1_20_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_20_MTR.CONV_RUN)TON(BM1_20_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_19$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_20_MSD_OFF)OTE(BM1_19_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_19_MTR.E_STOP)[XIO(F_BM1_19_MOL) XIO(BM1_19_MTR.JAMMED) ,XIC(F_BM1_19_OVRIDE) ]XIO(F_BM1_19_MSD_OFF)XIO(F_BM1_19_OUTSERV)XIO(BM1_19_MTR.COMM)OTE(BM1_19_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_19_OVRIDE) ]XIC(BM1_19_MTR.NO_FAULT)TON(BM1_19_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_19_MTR.IM_TMR.DN)[XIO(BM1_19_MTR.INTL_MTR) OTE(BM1_19_MTR.IM_ONS) ,OTE(BM1_19_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_19_PE1.FILT_NEG_XITN)RES(BM1_19_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_20_MTR.CONV_RUN)RTO(BM1_19_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_19_PE1.POS_XITN) XIC(BM1_19_MTR.INTL_MTR) ,XIC(BM1_19_MTR.T2H_SPACE) ]XIO(BM1_19_MTR.T2H_SPACE_TMR.DN)OTE(BM1_19_MTR.T2H_SPACE);
				N: XIC(BM1_19_MTR.T2H_SPACE)OTE(BM1_19_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_20_MTR.ON_TMR.DN) XIC(BM1_19_MTR.OFF_TMR.DN) ,XIO(BM1_20_MTR.IM_ONS) XIC(BM1_19_MTR.IM_ONS) ,XIC(BM1_19_MTR.ANTI_CASC) XIC(I_PE1_BM1_19) ]OTE(BM1_19_MTR.START_EN);
				N: [XIO(BM1_20_MTR.ON_TMR.DN) XIO(I_PE1_BM1_19) ,XIO(BM1_19_MTR.ANTI_CASC) XIC(BM1_19_MTR.SPACE) ]OTE(BM1_19_MTR.STOP);
				N: XIC(BM1_19_MTR.INTL_MTR)[[XIC(BM1_19_MTR.START_EN) ,XIC(BM1_19_MTR.CONV_RUN) ] XIO(BM1_19_MTR.STOP) ,XIC(F_BM1_19_OVRIDE) ][OTE(BM1_19_MTR.CONV_RUN) ,OTE(O_C_BM1_19) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_19_MTR.CONV_RUN)TON(BM1_19_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_19_MTR.CONV_RUN)TON(BM1_19_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_18$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_19_MSD_OFF)OTE(BM1_18_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_18_MTR.E_STOP)[XIO(F_BM1_18_MOL) XIO(BM1_18_MTR.JAMMED) ,XIC(F_BM1_18_OVRIDE) ]XIO(F_BM1_18_MSD_OFF)XIO(F_BM1_18_OUTSERV)XIO(BM1_18_MTR.COMM)OTE(BM1_18_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_18_OVRIDE) ]XIC(BM1_18_MTR.NO_FAULT)TON(BM1_18_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_18_MTR.IM_TMR.DN)[XIO(BM1_18_MTR.INTL_MTR) OTE(BM1_18_MTR.IM_ONS) ,OTE(BM1_18_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_18_PE.FILT_NEG_XITN)RES(BM1_18_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_19_MTR.CONV_RUN)RTO(BM1_18_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_18_PE.POS_XITN) XIC(BM1_18_MTR.INTL_MTR) ,XIC(BM1_18_MTR.T2H_SPACE) ]XIO(BM1_18_MTR.T2H_SPACE_TMR.DN)OTE(BM1_18_MTR.T2H_SPACE);
				N: XIC(BM1_18_MTR.T2H_SPACE)OTE(BM1_18_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_19_MTR.ON_TMR.DN) XIC(BM1_18_MTR.OFF_TMR.DN) ,XIO(BM1_19_MTR.IM_ONS) XIC(BM1_18_MTR.IM_ONS) ,XIC(BM1_18_MTR.ANTI_CASC) XIC(I_PE_BM1_18) ]OTE(BM1_18_MTR.START_EN);
				N: [XIO(BM1_19_MTR.ON_TMR.DN) XIO(I_PE_BM1_18) ,XIO(BM1_18_MTR.ANTI_CASC) XIC(BM1_18_MTR.SPACE) ]OTE(BM1_18_MTR.STOP);
				N: XIC(BM1_18_MTR.INTL_MTR)[[XIC(BM1_18_MTR.START_EN) ,XIC(BM1_18_MTR.CONV_RUN) ] XIO(BM1_18_MTR.STOP) ,XIC(F_BM1_18_OVRIDE) ][OTE(BM1_18_MTR.CONV_RUN) ,OTE(O_C_BM1_18) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_18_MTR.CONV_RUN)TON(BM1_18_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_18_MTR.CONV_RUN)TON(BM1_18_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_18_MSD_OFF)OTE(BM1_17_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_17_MTR.E_STOP)[XIO(F_BM1_17_MOL) XIO(BM1_17_MTR.JAMMED) ,XIC(F_BM1_17_OVRIDE) ]XIO(F_BM1_17_MSD_OFF)XIO(F_BM1_17_OUTSERV)XIO(BM1_17_MTR.COMM)OTE(BM1_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_17_OVRIDE) ]XIC(BM1_17_MTR.NO_FAULT)TON(BM1_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_17_MTR.IM_TMR.DN)[XIO(BM1_17_MTR.INTL_MTR) OTE(BM1_17_MTR.IM_ONS) ,OTE(BM1_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_17_PE.FILT_NEG_XITN)RES(BM1_17_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_18_MTR.CONV_RUN)RTO(BM1_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_17_PE.POS_XITN) XIC(BM1_17_MTR.INTL_MTR) ,XIC(BM1_17_MTR.T2H_SPACE) ]XIO(BM1_17_MTR.T2H_SPACE_TMR.DN)OTE(BM1_17_MTR.T2H_SPACE);
				N: XIC(BM1_17_MTR.T2H_SPACE)OTE(BM1_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_18_MTR.ON_TMR.DN) XIC(BM1_17_MTR.OFF_TMR.DN) ,XIO(BM1_18_MTR.IM_ONS) XIC(BM1_17_MTR.IM_ONS) ,XIC(BM1_17_MTR.ANTI_CASC) XIC(I_PE1_BM1_27) ]OTE(BM1_17_MTR.START_EN);
				N: [XIO(BM1_18_MTR.ON_TMR.DN) XIO(I_PE1_BM1_27) ,XIO(BM1_17_MTR.ANTI_CASC) XIC(BM1_17_MTR.SPACE) ]OTE(BM1_17_MTR.STOP);
				N: XIC(BM1_17_MTR.INTL_MTR)[[XIC(BM1_17_MTR.START_EN) ,XIC(BM1_17_MTR.CONV_RUN) ] XIO(BM1_17_MTR.STOP) ,XIC(F_BM1_17_OVRIDE) ][OTE(BM1_17_MTR.CONV_RUN) ,OTE(O_C_BM1_17) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_17_MTR.CONV_RUN)TON(BM1_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_17_MTR.CONV_RUN)TON(BM1_17_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_16$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_17_MSD_OFF)OTE(BM1_16_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_16_MTR.E_STOP)[XIO(F_BM1_16_MOL) XIO(BM1_16_MTR.JAMMED) ,XIC(F_BM1_16_OVRIDE) ]XIO(F_BM1_16_MSD_OFF)XIO(F_BM1_16_OUTSERV)XIO(BM1_16_MTR.COMM)OTE(BM1_16_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_16_OVRIDE) ]XIC(BM1_16_MTR.NO_FAULT)TON(BM1_16_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_16_MTR.IM_TMR.DN)[XIO(BM1_16_MTR.INTL_MTR) OTE(BM1_16_MTR.IM_ONS) ,OTE(BM1_16_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_16_PE.FILT_NEG_XITN)RES(BM1_16_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_17_MTR.CONV_RUN)RTO(BM1_16_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_16_PE.POS_XITN) XIC(BM1_16_MTR.INTL_MTR) ,XIC(BM1_16_MTR.T2H_SPACE) ]XIO(BM1_16_MTR.T2H_SPACE_TMR.DN)OTE(BM1_16_MTR.T2H_SPACE);
				N: XIC(BM1_16_MTR.T2H_SPACE)OTE(BM1_16_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_17_MTR.ON_TMR.DN) XIC(BM1_16_MTR.OFF_TMR.DN) ,XIO(BM1_17_MTR.IM_ONS) XIC(BM1_16_MTR.IM_ONS) ,XIC(BM1_16_MTR.ANTI_CASC) XIC(I_PE2_BM1_28) ]OTE(BM1_16_MTR.START_EN);
				N: [XIO(BM1_17_MTR.ON_TMR.DN) XIO(I_PE2_BM1_28) ,XIO(BM1_16_MTR.ANTI_CASC) XIC(BM1_16_MTR.SPACE) ]OTE(BM1_16_MTR.STOP);
				N: XIC(BM1_16_MTR.INTL_MTR)[[XIC(BM1_16_MTR.START_EN) ,XIC(BM1_16_MTR.CONV_RUN) ] XIO(BM1_16_MTR.STOP) ,XIC(F_BM1_16_OVRIDE) ][OTE(BM1_16_MTR.CONV_RUN) ,OTE(O_C_BM1_16) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_16_MTR.CONV_RUN)TON(BM1_16_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_16_MTR.CONV_RUN)TON(BM1_16_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_15$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_16_MSD_OFF)OTE(BM1_15_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_15_MTR.E_STOP)[XIO(F_BM1_15_MOL) XIO(BM1_15_MTR.JAMMED) ,XIC(F_BM1_15_OVRIDE) ]XIO(F_BM1_15_MSD_OFF)XIO(F_BM1_15_OUTSERV)XIO(BM1_15_MTR.COMM)OTE(BM1_15_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_15_OVRIDE) ]XIC(BM1_15_MTR.NO_FAULT)TON(BM1_15_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_15_MTR.IM_TMR.DN)[XIO(BM1_15_MTR.INTL_MTR) OTE(BM1_15_MTR.IM_ONS) ,OTE(BM1_15_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_15_PE.FILT_NEG_XITN)RES(BM1_15_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_16_MTR.CONV_RUN)RTO(BM1_15_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_15_PE.POS_XITN) XIC(BM1_15_MTR.INTL_MTR) ,XIC(BM1_15_MTR.T2H_SPACE) ]XIO(BM1_15_MTR.T2H_SPACE_TMR.DN)OTE(BM1_15_MTR.T2H_SPACE);
				N: XIC(BM1_15_MTR.T2H_SPACE)OTE(BM1_15_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_16_MTR.ON_TMR.DN) XIC(BM1_15_MTR.OFF_TMR.DN) ,XIO(BM1_16_MTR.IM_ONS) XIC(BM1_15_MTR.IM_ONS) ,XIC(BM1_15_MTR.ANTI_CASC) XIC(I_PE1_BM1_28) ]OTE(BM1_15_MTR.START_EN);
				N: [XIO(BM1_16_MTR.ON_TMR.DN) XIO(I_PE1_BM1_28) ,XIO(BM1_15_MTR.ANTI_CASC) XIC(BM1_15_MTR.SPACE) ]OTE(BM1_15_MTR.STOP);
				N: XIC(BM1_15_MTR.INTL_MTR)[[XIC(BM1_15_MTR.START_EN) ,XIC(BM1_15_MTR.CONV_RUN) ] XIO(BM1_15_MTR.STOP) ,XIC(F_BM1_15_OVRIDE) ][OTE(BM1_15_MTR.CONV_RUN) ,OTE(O_C_BM1_15) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_15_MTR.CONV_RUN)TON(BM1_15_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_15_MTR.CONV_RUN)TON(BM1_15_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_14$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_15_MSD_OFF)OTE(BM1_14_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_14_MTR.E_STOP)[XIO(F_BM1_14_MOL) XIO(BM1_14_MTR.JAMMED) ,XIC(F_BM1_14_OVRIDE) ]XIO(F_BM1_14_MSD_OFF)XIO(F_BM1_14_OUTSERV)XIO(BM1_14_MTR.COMM)OTE(BM1_14_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_14_OVRIDE) ]XIC(BM1_14_MTR.NO_FAULT)TON(BM1_14_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_14_MTR.IM_TMR.DN)[XIO(BM1_14_MTR.INTL_MTR) OTE(BM1_14_MTR.IM_ONS) ,OTE(BM1_14_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_14_PE1.FILT_NEG_XITN)RES(BM1_14_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_15_MTR.CONV_RUN)RTO(BM1_14_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_14_PE1.POS_XITN) XIC(BM1_14_MTR.INTL_MTR) ,XIC(BM1_14_MTR.T2H_SPACE) ]XIO(BM1_14_MTR.T2H_SPACE_TMR.DN)OTE(BM1_14_MTR.T2H_SPACE);
				N: XIC(BM1_14_MTR.T2H_SPACE)OTE(BM1_14_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_15_MTR.ON_TMR.DN) XIC(BM1_14_MTR.OFF_TMR.DN) ,XIO(BM1_15_MTR.IM_ONS) XIC(BM1_14_MTR.IM_ONS) ,XIC(BM1_14_MTR.ANTI_CASC) XIC(I_PE1_BM1_14) ]OTE(BM1_14_MTR.START_EN);
				N: [XIO(BM1_15_MTR.ON_TMR.DN) XIO(I_PE1_BM1_14) ,XIO(BM1_14_MTR.ANTI_CASC) XIC(BM1_14_MTR.SPACE) ]OTE(BM1_14_MTR.STOP);
				N: XIC(BM1_14_MTR.INTL_MTR)[[XIC(BM1_14_MTR.START_EN) ,XIC(BM1_14_MTR.CONV_RUN) ] XIO(BM1_14_MTR.STOP) ,XIC(F_BM1_14_OVRIDE) ][OTE(BM1_14_MTR.CONV_RUN) ,OTE(O_C_BM1_14) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_14_MTR.CONV_RUN)TON(BM1_14_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_14_MTR.CONV_RUN)TON(BM1_14_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_38$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_14_MSD_OFF)OTE(BM1_38_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_38_MTR.E_STOP)[XIO(F_BM1_38_MOL) XIO(BM1_38_MTR.JAMMED) ,XIC(F_BM1_38_OVRIDE) ]XIO(F_BM1_38_MSD_OFF)XIO(F_BM1_38_OUTSERV)XIO(BM1_38_MTR.COMM)OTE(BM1_38_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_38_OVRIDE) ]XIC(BM1_38_MTR.NO_FAULT)TON(BM1_38_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_38_MTR.IM_TMR.DN)[XIO(BM1_38_MTR.INTL_MTR) OTE(BM1_38_MTR.IM_ONS) ,OTE(BM1_38_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_38_PE.FILT_NEG_XITN)RES(BM1_38_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_14_MTR.CONV_RUN)RTO(BM1_38_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_38_PE.POS_XITN) XIC(BM1_38_MTR.INTL_MTR) ,XIC(BM1_38_MTR.T2H_SPACE) ]XIO(BM1_38_MTR.T2H_SPACE_TMR.DN)OTE(BM1_38_MTR.T2H_SPACE);
				N: XIC(BM1_38_MTR.T2H_SPACE)OTE(BM1_38_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_14_MTR.ON_TMR.DN) XIC(BM1_38_MTR.OFF_TMR.DN) ,XIO(BM1_14_MTR.IM_ONS) XIC(BM1_38_MTR.IM_ONS) ,XIC(BM1_38_MTR.ANTI_CASC) XIC(I_PE_BM1_38) ]OTE(BM1_38_MTR.START_EN);
				N: [XIO(BM1_14_MTR.ON_TMR.DN) XIO(I_PE_BM1_38) ,XIO(BM1_38_MTR.ANTI_CASC) XIC(BM1_38_MTR.SPACE) ]OTE(BM1_38_MTR.STOP);
				N: XIC(BM1_38_MTR.INTL_MTR)[[XIC(BM1_38_MTR.START_EN) ,XIC(BM1_38_MTR.CONV_RUN) ] XIO(BM1_38_MTR.STOP) ,XIC(F_BM1_38_OVRIDE) ][OTE(BM1_38_MTR.CONV_RUN) ,OTE(O_C_BM1_38) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_38_MTR.CONV_RUN)TON(BM1_38_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_38_MTR.CONV_RUN)TON(BM1_38_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_37$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_38_MSD_OFF)OTE(BM1_37_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_37_MTR.E_STOP)[XIO(F_BM1_37_MOL) XIO(BM1_37_MTR.JAMMED) ,XIC(F_BM1_37_OVRIDE) ]XIO(F_BM1_37_MSD_OFF)XIO(F_BM1_37_OUTSERV)XIO(BM1_37_MTR.COMM)OTE(BM1_37_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_37_OVRIDE) ]XIC(BM1_37_MTR.NO_FAULT)TON(BM1_37_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_37_MTR.IM_TMR.DN)[XIO(BM1_37_MTR.INTL_MTR) OTE(BM1_37_MTR.IM_ONS) ,OTE(BM1_37_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_37_PE.FILT_NEG_XITN)RES(BM1_37_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_38_MTR.CONV_RUN)RTO(BM1_37_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_37_PE.POS_XITN) XIC(BM1_37_MTR.INTL_MTR) ,XIC(BM1_37_MTR.T2H_SPACE) ]XIO(BM1_37_MTR.T2H_SPACE_TMR.DN)OTE(BM1_37_MTR.T2H_SPACE);
				N: XIC(BM1_37_MTR.T2H_SPACE)OTE(BM1_37_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_38_MTR.ON_TMR.DN) XIC(BM1_37_MTR.OFF_TMR.DN) ,XIO(BM1_38_MTR.IM_ONS) XIC(BM1_37_MTR.IM_ONS) ,XIC(BM1_37_MTR.ANTI_CASC) XIC(I_PE_BM1_37) ]OTE(BM1_37_MTR.START_EN);
				N: [XIO(BM1_38_MTR.ON_TMR.DN) XIO(I_PE_BM1_37) ,XIO(BM1_37_MTR.ANTI_CASC) XIC(BM1_37_MTR.SPACE) ]OTE(BM1_37_MTR.STOP);
				N: XIC(BM1_37_MTR.INTL_MTR)[[XIC(BM1_37_MTR.START_EN) ,XIC(BM1_37_MTR.CONV_RUN) ] XIO(BM1_37_MTR.STOP) ,XIC(F_BM1_37_OVRIDE) ][OTE(BM1_37_MTR.CONV_RUN) ,OTE(O_C_BM1_37) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_37_MTR.CONV_RUN)TON(BM1_37_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_37_MTR.CONV_RUN)TON(BM1_37_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_36$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_37_MSD_OFF)OTE(BM1_36_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_36_MTR.E_STOP)[XIO(F_BM1_36_MOL) XIO(BM1_36_MTR.JAMMED) ,XIC(F_BM1_36_OVRIDE) ]XIO(F_BM1_36_MSD_OFF)XIO(F_BM1_36_OUTSERV)XIO(BM1_36_MTR.COMM)OTE(BM1_36_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_36_OVRIDE) ]XIC(BM1_36_MTR.NO_FAULT)TON(BM1_36_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_36_MTR.IM_TMR.DN)[XIO(BM1_36_MTR.INTL_MTR) OTE(BM1_36_MTR.IM_ONS) ,OTE(BM1_36_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_36_PE.FILT_NEG_XITN)RES(BM1_36_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_37_MTR.CONV_RUN)RTO(BM1_36_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_36_PE.POS_XITN) XIC(BM1_36_MTR.INTL_MTR) ,XIC(BM1_36_MTR.T2H_SPACE) ]XIO(BM1_36_MTR.T2H_SPACE_TMR.DN)OTE(BM1_36_MTR.T2H_SPACE);
				N: XIC(BM1_36_MTR.T2H_SPACE)OTE(BM1_36_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_37_MTR.ON_TMR.DN) XIC(BM1_36_MTR.OFF_TMR.DN) ,XIO(BM1_37_MTR.IM_ONS) XIC(BM1_36_MTR.IM_ONS) ,XIC(BM1_36_MTR.ANTI_CASC) XIC(I_PE_BM1_36) ]OTE(BM1_36_MTR.START_EN);
				N: [XIO(BM1_37_MTR.ON_TMR.DN) XIO(I_PE_BM1_36) ,XIO(BM1_36_MTR.ANTI_CASC) XIC(BM1_36_MTR.SPACE) ]OTE(BM1_36_MTR.STOP);
				N: XIC(BM1_36_MTR.INTL_MTR)[[XIC(BM1_36_MTR.START_EN) ,XIC(BM1_36_MTR.CONV_RUN) ] XIO(BM1_36_MTR.STOP) ,XIC(F_BM1_36_OVRIDE) ][OTE(BM1_36_MTR.CONV_RUN) ,OTE(O_C_BM1_36) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_36_MTR.CONV_RUN)TON(BM1_36_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_36_MTR.CONV_RUN)TON(BM1_36_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_35$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_36_MSD_OFF)OTE(BM1_35_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_35_MTR.E_STOP)[XIO(F_BM1_35_MOL) XIO(BM1_35_MTR.JAMMED) ,XIC(F_BM1_35_OVRIDE) ]XIO(F_BM1_35_MSD_OFF)XIO(F_BM1_35_OUTSERV)XIO(BM1_35_MTR.COMM)OTE(BM1_35_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_35_OVRIDE) ]XIC(BM1_35_MTR.NO_FAULT)TON(BM1_35_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_35_MTR.IM_TMR.DN)[XIO(BM1_35_MTR.INTL_MTR) OTE(BM1_35_MTR.IM_ONS) ,OTE(BM1_35_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_35_PE.FILT_NEG_XITN)RES(BM1_35_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_36_MTR.CONV_RUN)RTO(BM1_35_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_35_PE.POS_XITN) XIC(BM1_35_MTR.INTL_MTR) ,XIC(BM1_35_MTR.T2H_SPACE) ]XIO(BM1_35_MTR.T2H_SPACE_TMR.DN)OTE(BM1_35_MTR.T2H_SPACE);
				N: XIC(BM1_35_MTR.T2H_SPACE)OTE(BM1_35_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_36_MTR.ON_TMR.DN) XIC(BM1_35_MTR.OFF_TMR.DN) ,XIO(BM1_36_MTR.IM_ONS) XIC(BM1_35_MTR.IM_ONS) ,XIC(BM1_35_MTR.ANTI_CASC) XIC(I_PE_BM1_35) ]OTE(BM1_35_MTR.START_EN);
				N: [XIO(BM1_36_MTR.ON_TMR.DN) XIO(I_PE_BM1_35) ,XIO(BM1_35_MTR.ANTI_CASC) XIC(BM1_35_MTR.SPACE) ]OTE(BM1_35_MTR.STOP);
				N: XIC(BM1_35_MTR.INTL_MTR)[[XIC(BM1_35_MTR.START_EN) ,XIC(BM1_35_MTR.CONV_RUN) ] XIO(BM1_35_MTR.STOP) ,XIC(F_BM1_35_OVRIDE) ][OTE(BM1_35_MTR.CONV_RUN) ,OTE(O_C_BM1_35) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_35_MTR.CONV_RUN)TON(BM1_35_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_35_MTR.CONV_RUN)TON(BM1_35_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_34$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_35_MSD_OFF)OTE(BM1_34_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_34_MTR.E_STOP)[XIO(F_BM1_34_MOL) XIO(BM1_34_MTR.JAMMED) ,XIC(F_BM1_34_OVRIDE) ]XIO(F_BM1_34_MSD_OFF)XIO(F_BM1_34_OUTSERV)XIO(BM1_34_MTR.COMM)OTE(BM1_34_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_34_OVRIDE) ]XIC(BM1_34_MTR.NO_FAULT)TON(BM1_34_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_34_MTR.IM_TMR.DN)[XIO(BM1_34_MTR.INTL_MTR) OTE(BM1_34_MTR.IM_ONS) ,OTE(BM1_34_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(BM1_34_PE.FILT_NEG_XITN)RES(BM1_34_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_35_MTR.CONV_RUN)RTO(BM1_34_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(BM1_34_PE.POS_XITN) XIC(BM1_34_MTR.INTL_MTR) ,XIC(BM1_34_MTR.T2H_SPACE) ]XIO(BM1_34_MTR.T2H_SPACE_TMR.DN)OTE(BM1_34_MTR.T2H_SPACE);
				N: XIC(BM1_34_MTR.T2H_SPACE)OTE(BM1_34_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_35_MTR.ON_TMR.DN) XIC(BM1_34_MTR.OFF_TMR.DN) ,XIO(BM1_35_MTR.IM_ONS) XIC(BM1_34_MTR.IM_ONS) ,XIC(BM1_34_MTR.ANTI_CASC) XIC(I_PE_BM1_34) ]OTE(BM1_34_MTR.START_EN);
				N: [XIO(BM1_35_MTR.ON_TMR.DN) XIO(I_PE_BM1_34) ,XIO(BM1_34_MTR.ANTI_CASC) XIC(BM1_34_MTR.SPACE) ]OTE(BM1_34_MTR.STOP);
				N: XIC(BM1_34_MTR.INTL_MTR)[[XIC(BM1_34_MTR.START_EN) ,XIC(BM1_34_MTR.CONV_RUN) ] XIO(BM1_34_MTR.STOP) ,XIC(F_BM1_34_OVRIDE) ][OTE(BM1_34_MTR.CONV_RUN) ,OTE(O_C_BM1_34) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_34_MTR.CONV_RUN)TON(BM1_34_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_34_MTR.CONV_RUN)TON(BM1_34_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE BM1_B_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(BM1_14_MTR.COMM)[[XIO(I_PE2_BM1_14) ,XIC(BM1_14_PE2.TOF.DN) ] TON(BM1_14_PE2.TON,?,?) ,XIO(I_PE2_BM1_14) XIC(BM1_14_PE2.TON.DN) TOF(BM1_14_PE2.TOF,?,?) ,XIC(BM1_14_PE2.TOF.DN) OTE(BM1_14_PE2.FILT) ];
				N: XIC(BM1_14_PE2.FILT)[XIO(BM1_14_PE2.FILT_POS_XITN_MEM) OTE(BM1_14_PE2.FILT_POS_XITN) ,OTE(BM1_14_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_14_PE2.FILT)[XIO(BM1_14_PE2.FILT_NEG_XITN_MEM) OTE(BM1_14_PE2.FILT_NEG_XITN) ,OTE(BM1_14_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_14_MTR.COMM)[[XIO(I_PE1_BM1_14) ,XIC(BM1_14_PE1.TOF.DN) ] TON(BM1_14_PE1.TON,?,?) ,XIO(I_PE1_BM1_14) XIC(BM1_14_PE1.TON.DN) TOF(BM1_14_PE1.TOF,?,?) ,XIC(BM1_14_PE1.TOF.DN) OTE(BM1_14_PE1.FILT) ];
				N: XIC(BM1_14_PE1.FILT)[XIO(BM1_14_PE1.FILT_POS_XITN_MEM) OTE(BM1_14_PE1.FILT_POS_XITN) ,OTE(BM1_14_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_14_PE1.FILT)[XIO(BM1_14_PE1.FILT_NEG_XITN_MEM) OTE(BM1_14_PE1.FILT_NEG_XITN) ,OTE(BM1_14_PE1.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_BM1_14)[XIO(BM1_14_PE1.POS_XITN_MEM) OTE(BM1_14_PE1.POS_XITN) ,OTE(BM1_14_PE1.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_15_MTR.COMM)[[XIO(I_PE1_BM1_28) ,XIC(BM1_15_PE.TOF.DN) ] TON(BM1_15_PE.TON,?,?) ,XIO(I_PE1_BM1_28) XIC(BM1_15_PE.TON.DN) TOF(BM1_15_PE.TOF,?,?) ,XIC(BM1_15_PE.TOF.DN) OTE(BM1_15_PE.FILT) ];
				N: XIC(BM1_15_PE.FILT)[XIO(BM1_15_PE.FILT_POS_XITN_MEM) OTE(BM1_15_PE.FILT_POS_XITN) ,OTE(BM1_15_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_15_PE.FILT)[XIO(BM1_15_PE.FILT_NEG_XITN_MEM) OTE(BM1_15_PE.FILT_NEG_XITN) ,OTE(BM1_15_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_BM1_28)[XIO(BM1_15_PE.POS_XITN_MEM) OTE(BM1_15_PE.POS_XITN) ,OTE(BM1_15_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_16_MTR.COMM)[[XIO(I_PE2_BM1_28) ,XIC(BM1_16_PE.TOF.DN) ] TON(BM1_16_PE.TON,?,?) ,XIO(I_PE2_BM1_28) XIC(BM1_16_PE.TON.DN) TOF(BM1_16_PE.TOF,?,?) ,XIC(BM1_16_PE.TOF.DN) OTE(BM1_16_PE.FILT) ];
				N: XIC(BM1_16_PE.FILT)[XIO(BM1_16_PE.FILT_POS_XITN_MEM) OTE(BM1_16_PE.FILT_POS_XITN) ,OTE(BM1_16_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_16_PE.FILT)[XIO(BM1_16_PE.FILT_NEG_XITN_MEM) OTE(BM1_16_PE.FILT_NEG_XITN) ,OTE(BM1_16_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE2_BM1_28)[XIO(BM1_16_PE.POS_XITN_MEM) OTE(BM1_16_PE.POS_XITN) ,OTE(BM1_16_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_17_MTR.COMM)[[XIO(I_PE1_BM1_27) ,XIC(BM1_17_PE.TOF.DN) ] TON(BM1_17_PE.TON,?,?) ,XIO(I_PE1_BM1_27) XIC(BM1_17_PE.TON.DN) TOF(BM1_17_PE.TOF,?,?) ,XIC(BM1_17_PE.TOF.DN) OTE(BM1_17_PE.FILT) ];
				N: XIC(BM1_17_PE.FILT)[XIO(BM1_17_PE.FILT_POS_XITN_MEM) OTE(BM1_17_PE.FILT_POS_XITN) ,OTE(BM1_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_17_PE.FILT)[XIO(BM1_17_PE.FILT_NEG_XITN_MEM) OTE(BM1_17_PE.FILT_NEG_XITN) ,OTE(BM1_17_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_BM1_27)[XIO(BM1_17_PE.POS_XITN_MEM) OTE(BM1_17_PE.POS_XITN) ,OTE(BM1_17_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_18_MTR.COMM)[[XIO(I_PE_BM1_18) ,XIC(BM1_18_PE.TOF.DN) ] TON(BM1_18_PE.TON,?,?) ,XIO(I_PE_BM1_18) XIC(BM1_18_PE.TON.DN) TOF(BM1_18_PE.TOF,?,?) ,XIC(BM1_18_PE.TOF.DN) OTE(BM1_18_PE.FILT) ];
				N: XIC(BM1_18_PE.FILT)[XIO(BM1_18_PE.FILT_POS_XITN_MEM) OTE(BM1_18_PE.FILT_POS_XITN) ,OTE(BM1_18_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_18_PE.FILT)[XIO(BM1_18_PE.FILT_NEG_XITN_MEM) OTE(BM1_18_PE.FILT_NEG_XITN) ,OTE(BM1_18_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_18)[XIO(BM1_18_PE.POS_XITN_MEM) OTE(BM1_18_PE.POS_XITN) ,OTE(BM1_18_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_19_MTR.COMM)[[XIO(I_PE2_BM1_19) ,XIC(BM1_19_PE2.TOF.DN) ] TON(BM1_19_PE2.TON,?,?) ,XIO(I_PE2_BM1_19) XIC(BM1_19_PE2.TON.DN) TOF(BM1_19_PE2.TOF,?,?) ,XIC(BM1_19_PE2.TOF.DN) OTE(BM1_19_PE2.FILT) ];
				N: XIC(BM1_19_PE2.FILT)[XIO(BM1_19_PE2.FILT_POS_XITN_MEM) OTE(BM1_19_PE2.FILT_POS_XITN) ,OTE(BM1_19_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_19_PE2.FILT)[XIO(BM1_19_PE2.FILT_NEG_XITN_MEM) OTE(BM1_19_PE2.FILT_NEG_XITN) ,OTE(BM1_19_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_19_MTR.COMM)[[XIO(I_PE1_BM1_19) ,XIC(BM1_19_PE1.TOF.DN) ] TON(BM1_19_PE1.TON,?,?) ,XIO(I_PE1_BM1_19) XIC(BM1_19_PE1.TON.DN) TOF(BM1_19_PE1.TOF,?,?) ,XIC(BM1_19_PE1.TOF.DN) OTE(BM1_19_PE1.FILT) ];
				N: XIC(BM1_19_PE1.FILT)[XIO(BM1_19_PE1.FILT_POS_XITN_MEM) OTE(BM1_19_PE1.FILT_POS_XITN) ,OTE(BM1_19_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_19_PE1.FILT)[XIO(BM1_19_PE1.FILT_NEG_XITN_MEM) OTE(BM1_19_PE1.FILT_NEG_XITN) ,OTE(BM1_19_PE1.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_BM1_19)[XIO(BM1_19_PE1.POS_XITN_MEM) OTE(BM1_19_PE1.POS_XITN) ,OTE(BM1_19_PE1.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_20_MTR.COMM)[[XIO(I_PE_BM1_20) ,XIC(BM1_20_PE.TOF.DN) ] TON(BM1_20_PE.TON,?,?) ,XIO(I_PE_BM1_20) XIC(BM1_20_PE.TON.DN) TOF(BM1_20_PE.TOF,?,?) ,XIC(BM1_20_PE.TOF.DN) OTE(BM1_20_PE.FILT) ];
				N: XIC(BM1_20_PE.FILT)[XIO(BM1_20_PE.FILT_POS_XITN_MEM) OTE(BM1_20_PE.FILT_POS_XITN) ,OTE(BM1_20_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_20_PE.FILT)[XIO(BM1_20_PE.FILT_NEG_XITN_MEM) OTE(BM1_20_PE.FILT_NEG_XITN) ,OTE(BM1_20_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_20)[XIO(BM1_20_PE.POS_XITN_MEM) OTE(BM1_20_PE.POS_XITN) ,OTE(BM1_20_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_21_MTR.COMM)[[XIO(I_PE_BM1_21) ,XIC(BM1_21_PE.TOF.DN) ] TON(BM1_21_PE.TON,?,?) ,XIO(I_PE_BM1_21) XIC(BM1_21_PE.TON.DN) TOF(BM1_21_PE.TOF,?,?) ,XIC(BM1_21_PE.TOF.DN) OTE(BM1_21_PE.FILT) ];
				N: XIC(BM1_21_PE.FILT)[XIO(BM1_21_PE.FILT_POS_XITN_MEM) OTE(BM1_21_PE.FILT_POS_XITN) ,OTE(BM1_21_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_21_PE.FILT)[XIO(BM1_21_PE.FILT_NEG_XITN_MEM) OTE(BM1_21_PE.FILT_NEG_XITN) ,OTE(BM1_21_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_21)[XIO(BM1_21_PE.POS_XITN_MEM) OTE(BM1_21_PE.POS_XITN) ,OTE(BM1_21_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_22_MTR.COMM)[[XIO(I_PE_BM1_22) ,XIC(BM1_22_PE.TOF.DN) ] TON(BM1_22_PE.TON,?,?) ,XIO(I_PE_BM1_22) XIC(BM1_22_PE.TON.DN) TOF(BM1_22_PE.TOF,?,?) ,XIC(BM1_22_PE.TOF.DN) OTE(BM1_22_PE.FILT) ];
				N: XIC(BM1_22_PE.FILT)[XIO(BM1_22_PE.FILT_POS_XITN_MEM) OTE(BM1_22_PE.FILT_POS_XITN) ,OTE(BM1_22_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_22_PE.FILT)[XIO(BM1_22_PE.FILT_NEG_XITN_MEM) OTE(BM1_22_PE.FILT_NEG_XITN) ,OTE(BM1_22_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_22)[XIO(BM1_22_PE.POS_XITN_MEM) OTE(BM1_22_PE.POS_XITN) ,OTE(BM1_22_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_23_MTR.COMM)[[XIO(I_PE2_BM1_23) ,XIC(BM1_23_PE2.TOF.DN) ] TON(BM1_23_PE2.TON,?,?) ,XIO(I_PE2_BM1_23) XIC(BM1_23_PE2.TON.DN) TOF(BM1_23_PE2.TOF,?,?) ,XIC(BM1_23_PE2.TOF.DN) OTE(BM1_23_PE2.FILT) ];
				N: XIC(BM1_23_PE2.FILT)[XIO(BM1_23_PE2.FILT_POS_XITN_MEM) OTE(BM1_23_PE2.FILT_POS_XITN) ,OTE(BM1_23_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_23_PE2.FILT)[XIO(BM1_23_PE2.FILT_NEG_XITN_MEM) OTE(BM1_23_PE2.FILT_NEG_XITN) ,OTE(BM1_23_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_23_MTR.COMM)[[XIO(I_PE1_BM1_23) ,XIC(BM1_23_PE1.TOF.DN) ] TON(BM1_23_PE1.TON,?,?) ,XIO(I_PE1_BM1_23) XIC(BM1_23_PE1.TON.DN) TOF(BM1_23_PE1.TOF,?,?) ,XIC(BM1_23_PE1.TOF.DN) OTE(BM1_23_PE1.FILT) ];
				N: XIC(BM1_23_PE1.FILT)[XIO(BM1_23_PE1.FILT_POS_XITN_MEM) OTE(BM1_23_PE1.FILT_POS_XITN) ,OTE(BM1_23_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_23_PE1.FILT)[XIO(BM1_23_PE1.FILT_NEG_XITN_MEM) OTE(BM1_23_PE1.FILT_NEG_XITN) ,OTE(BM1_23_PE1.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_23_MTR.COMM)[[XIO(I_PE_BM1_23) ,XIC(BM1_23_PE.TOF.DN) ] TON(BM1_23_PE.TON,?,?) ,XIO(I_PE_BM1_23) XIC(BM1_23_PE.TON.DN) TOF(BM1_23_PE.TOF,?,?) ,XIC(BM1_23_PE.TOF.DN) OTE(BM1_23_PE.FILT) ];
				N: XIC(BM1_23_PE.FILT)[XIO(BM1_23_PE.FILT_POS_XITN_MEM) OTE(BM1_23_PE.FILT_POS_XITN) ,OTE(BM1_23_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_23_PE.FILT)[XIO(BM1_23_PE.FILT_NEG_XITN_MEM) OTE(BM1_23_PE.FILT_NEG_XITN) ,OTE(BM1_23_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_23)[XIO(BM1_23_PE.POS_XITN_MEM) OTE(BM1_23_PE.POS_XITN) ,OTE(BM1_23_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_24_MTR.COMM)[[XIO(I_PE_BM1_24) ,XIC(BM1_24_PE.TOF.DN) ] TON(BM1_24_PE.TON,?,?) ,XIO(I_PE_BM1_24) XIC(BM1_24_PE.TON.DN) TOF(BM1_24_PE.TOF,?,?) ,XIC(BM1_24_PE.TOF.DN) OTE(BM1_24_PE.FILT) ];
				N: XIC(BM1_24_PE.FILT)[XIO(BM1_24_PE.FILT_POS_XITN_MEM) OTE(BM1_24_PE.FILT_POS_XITN) ,OTE(BM1_24_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_24_PE.FILT)[XIO(BM1_24_PE.FILT_NEG_XITN_MEM) OTE(BM1_24_PE.FILT_NEG_XITN) ,OTE(BM1_24_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_24)[XIO(BM1_24_PE.POS_XITN_MEM) OTE(BM1_24_PE.POS_XITN) ,OTE(BM1_24_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_25_MTR.COMM)[[XIO(I_PE_BM1_25) ,XIC(BM1_25_PE.TOF.DN) ] TON(BM1_25_PE.TON,?,?) ,XIO(I_PE_BM1_25) XIC(BM1_25_PE.TON.DN) TOF(BM1_25_PE.TOF,?,?) ,XIC(BM1_25_PE.TOF.DN) OTE(BM1_25_PE.FILT) ];
				N: XIC(BM1_25_PE.FILT)[XIO(BM1_25_PE.FILT_POS_XITN_MEM) OTE(BM1_25_PE.FILT_POS_XITN) ,OTE(BM1_25_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_25_PE.FILT)[XIO(BM1_25_PE.FILT_NEG_XITN_MEM) OTE(BM1_25_PE.FILT_NEG_XITN) ,OTE(BM1_25_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_25)[XIO(BM1_25_PE.POS_XITN_MEM) OTE(BM1_25_PE.POS_XITN) ,OTE(BM1_25_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_26_MTR.COMM)[[XIO(I_PE_BM1_26) ,XIC(BM1_26_PE.TOF.DN) ] TON(BM1_26_PE.TON,?,?) ,XIO(I_PE_BM1_26) XIC(BM1_26_PE.TON.DN) TOF(BM1_26_PE.TOF,?,?) ,XIC(BM1_26_PE.TOF.DN) OTE(BM1_26_PE.FILT) ];
				N: XIC(BM1_26_PE.FILT)[XIO(BM1_26_PE.FILT_POS_XITN_MEM) OTE(BM1_26_PE.FILT_POS_XITN) ,OTE(BM1_26_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_26_PE.FILT)[XIO(BM1_26_PE.FILT_NEG_XITN_MEM) OTE(BM1_26_PE.FILT_NEG_XITN) ,OTE(BM1_26_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_26)[XIO(BM1_26_PE.POS_XITN_MEM) OTE(BM1_26_PE.POS_XITN) ,OTE(BM1_26_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_34_MTR.COMM)[[XIO(I_PE_BM1_34) ,XIC(BM1_34_PE.TOF.DN) ] TON(BM1_34_PE.TON,?,?) ,XIO(I_PE_BM1_34) XIC(BM1_34_PE.TON.DN) TOF(BM1_34_PE.TOF,?,?) ,XIC(BM1_34_PE.TOF.DN) OTE(BM1_34_PE.FILT) ];
				N: XIC(BM1_34_PE.FILT)[XIO(BM1_34_PE.FILT_POS_XITN_MEM) OTE(BM1_34_PE.FILT_POS_XITN) ,OTE(BM1_34_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_34_PE.FILT)[XIO(BM1_34_PE.FILT_NEG_XITN_MEM) OTE(BM1_34_PE.FILT_NEG_XITN) ,OTE(BM1_34_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_34)[XIO(BM1_34_PE.POS_XITN_MEM) OTE(BM1_34_PE.POS_XITN) ,OTE(BM1_34_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_35_MTR.COMM)[[XIO(I_PE_BM1_35) ,XIC(BM1_35_PE.TOF.DN) ] TON(BM1_35_PE.TON,?,?) ,XIO(I_PE_BM1_35) XIC(BM1_35_PE.TON.DN) TOF(BM1_35_PE.TOF,?,?) ,XIC(BM1_35_PE.TOF.DN) OTE(BM1_35_PE.FILT) ];
				N: XIC(BM1_35_PE.FILT)[XIO(BM1_35_PE.FILT_POS_XITN_MEM) OTE(BM1_35_PE.FILT_POS_XITN) ,OTE(BM1_35_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_35_PE.FILT)[XIO(BM1_35_PE.FILT_NEG_XITN_MEM) OTE(BM1_35_PE.FILT_NEG_XITN) ,OTE(BM1_35_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_35)[XIO(BM1_35_PE.POS_XITN_MEM) OTE(BM1_35_PE.POS_XITN) ,OTE(BM1_35_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_36_MTR.COMM)[[XIO(I_PE_BM1_36) ,XIC(BM1_36_PE.TOF.DN) ] TON(BM1_36_PE.TON,?,?) ,XIO(I_PE_BM1_36) XIC(BM1_36_PE.TON.DN) TOF(BM1_36_PE.TOF,?,?) ,XIC(BM1_36_PE.TOF.DN) OTE(BM1_36_PE.FILT) ];
				N: XIC(BM1_36_PE.FILT)[XIO(BM1_36_PE.FILT_POS_XITN_MEM) OTE(BM1_36_PE.FILT_POS_XITN) ,OTE(BM1_36_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_36_PE.FILT)[XIO(BM1_36_PE.FILT_NEG_XITN_MEM) OTE(BM1_36_PE.FILT_NEG_XITN) ,OTE(BM1_36_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_36)[XIO(BM1_36_PE.POS_XITN_MEM) OTE(BM1_36_PE.POS_XITN) ,OTE(BM1_36_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_37_MTR.COMM)[[XIO(I_PE_BM1_37) ,XIC(BM1_37_PE.TOF.DN) ] TON(BM1_37_PE.TON,?,?) ,XIO(I_PE_BM1_37) XIC(BM1_37_PE.TON.DN) TOF(BM1_37_PE.TOF,?,?) ,XIC(BM1_37_PE.TOF.DN) OTE(BM1_37_PE.FILT) ];
				N: XIC(BM1_37_PE.FILT)[XIO(BM1_37_PE.FILT_POS_XITN_MEM) OTE(BM1_37_PE.FILT_POS_XITN) ,OTE(BM1_37_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_37_PE.FILT)[XIO(BM1_37_PE.FILT_NEG_XITN_MEM) OTE(BM1_37_PE.FILT_NEG_XITN) ,OTE(BM1_37_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_37)[XIO(BM1_37_PE.POS_XITN_MEM) OTE(BM1_37_PE.POS_XITN) ,OTE(BM1_37_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_38_MTR.COMM)[[XIO(I_PE_BM1_38) ,XIC(BM1_38_PE.TOF.DN) ] TON(BM1_38_PE.TON,?,?) ,XIO(I_PE_BM1_38) XIC(BM1_38_PE.TON.DN) TOF(BM1_38_PE.TOF,?,?) ,XIC(BM1_38_PE.TOF.DN) OTE(BM1_38_PE.FILT) ];
				N: XIC(BM1_38_PE.FILT)[XIO(BM1_38_PE.FILT_POS_XITN_MEM) OTE(BM1_38_PE.FILT_POS_XITN) ,OTE(BM1_38_PE.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_38_PE.FILT)[XIO(BM1_38_PE.FILT_NEG_XITN_MEM) OTE(BM1_38_PE.FILT_NEG_XITN) ,OTE(BM1_38_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_BM1_38)[XIO(BM1_38_PE.POS_XITN_MEM) OTE(BM1_38_PE.POS_XITN) ,OTE(BM1_38_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE BM1_B_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_26_MTR.COMM);
				N: XIC(O_C_BM1_26)XIC(BM1_26_MTR.CONV_RUN)OTE(BM1_26_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_26_VFD_FAULT);
				N: [XIC(I_MOL_BM1_26) ,XIC(F_BM1_26_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_26_MOL) OTE(BM1_26_MTR.MOL_ONS) ,OTE(F_BM1_26_MOL) ];
				N: XIO(I_MSD_BM1_26)XIO(BM1_26_MTR.COMM)[XIO(F_BM1_26_MSD_OFF) OTE(BM1_26_MTR.MSD_ONS) ,OTE(F_BM1_26_MSD_OFF) ];
				N: XIC(O_C_BM1_26)XIO(I_C_BM1_26)TON(BM1_26_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_26_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_26_CTCTR_FAULT) XIO(I_C_BM1_26) ][XIO(F_BM1_26_CTCTR_FAULT) OTE(BM1_26_MTR.MS_FLT_ONS) ,OTE(F_BM1_26_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_26_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_26_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_26_MTR.FIRE_ALM);
				N: XIO(BM1_26_MTR.CONV_RUN)XIC(BM1_26_MTR.INTL_MTR)OTE(BM1_26_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_26_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_26_OVRIDE_REQ)[XIO(F_BM1_26_OVRIDE) OTE(BM1_26_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_26_OVRIDE) ];
				N: XIC(HMI_BM1_26_OUTSERV_REQ)[XIO(F_BM1_26_OUTSERV) OTE(BM1_26_MTR.OOS_ONS) ,OTE(F_BM1_26_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_26_MTR.MB_JAMMED);
				N: [XIC(F_BM1_25_PE_JAMMED) ,XIC(F_BM1_26_PE_JAMMED) ,XIC(BM1_26_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_26_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_25_MTR.COMM);
				N: XIC(O_C_BM1_25)XIC(BM1_25_MTR.CONV_RUN)OTE(BM1_25_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_25_VFD_FAULT);
				N: [XIC(I_MOL_BM1_25) ,XIC(F_BM1_25_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_25_MOL) OTE(BM1_25_MTR.MOL_ONS) ,OTE(F_BM1_25_MOL) ];
				N: XIO(I_MSD_BM1_25)XIO(BM1_25_MTR.COMM)[XIO(F_BM1_25_MSD_OFF) OTE(BM1_25_MTR.MSD_ONS) ,OTE(F_BM1_25_MSD_OFF) ];
				N: XIC(O_C_BM1_25)XIO(I_C_BM1_25)TON(BM1_25_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_25_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_25_CTCTR_FAULT) XIO(I_C_BM1_25) ][XIO(F_BM1_25_CTCTR_FAULT) OTE(BM1_25_MTR.MS_FLT_ONS) ,OTE(F_BM1_25_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_25_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_25_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_25_MTR.FIRE_ALM);
				N: XIO(BM1_25_MTR.CONV_RUN)XIC(BM1_25_MTR.INTL_MTR)OTE(BM1_25_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_25_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_25_OVRIDE_REQ)[XIO(F_BM1_25_OVRIDE) OTE(BM1_25_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_25_OVRIDE) ];
				N: XIC(HMI_BM1_25_OUTSERV_REQ)[XIO(F_BM1_25_OUTSERV) OTE(BM1_25_MTR.OOS_ONS) ,OTE(F_BM1_25_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_25_MTR.MB_JAMMED);
				N: [XIC(F_BM1_24_PE_JAMMED) ,XIC(F_BM1_25_PE_JAMMED) ,XIC(BM1_25_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_25_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_24_MTR.COMM);
				N: XIC(O_C_BM1_24)XIC(BM1_24_MTR.CONV_RUN)OTE(BM1_24_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_24_VFD_FAULT);
				N: [XIC(I_MOL_BM1_24) ,XIC(F_BM1_24_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_24_MOL) OTE(BM1_24_MTR.MOL_ONS) ,OTE(F_BM1_24_MOL) ];
				N: XIO(I_MSD_BM1_24)XIO(BM1_24_MTR.COMM)[XIO(F_BM1_24_MSD_OFF) OTE(BM1_24_MTR.MSD_ONS) ,OTE(F_BM1_24_MSD_OFF) ];
				N: XIC(O_C_BM1_24)XIO(I_C_BM1_24)TON(BM1_24_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_24_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_24_CTCTR_FAULT) XIO(I_C_BM1_24) ][XIO(F_BM1_24_CTCTR_FAULT) OTE(BM1_24_MTR.MS_FLT_ONS) ,OTE(F_BM1_24_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_24_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_24_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_24_MTR.FIRE_ALM);
				N: XIO(BM1_24_MTR.CONV_RUN)XIC(BM1_24_MTR.INTL_MTR)OTE(BM1_24_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_24_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_24_OVRIDE_REQ)[XIO(F_BM1_24_OVRIDE) OTE(BM1_24_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_24_OVRIDE) ];
				N: XIC(HMI_BM1_24_OUTSERV_REQ)[XIO(F_BM1_24_OUTSERV) OTE(BM1_24_MTR.OOS_ONS) ,OTE(F_BM1_24_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_24_MTR.MB_JAMMED);
				N: [XIC(F_BM1_23_PE1_JAMMED) ,XIC(F_BM1_24_PE_JAMMED) ,XIC(BM1_24_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_24_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_23_MTR.COMM);
				N: XIC(O_C_BM1_23)XIC(BM1_23_MTR.CONV_RUN)OTE(BM1_23_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_23_VFD_FAULT);
				N: [XIC(I_MOL_BM1_23) ,XIC(F_BM1_23_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_23_MOL) OTE(BM1_23_MTR.MOL_ONS) ,OTE(F_BM1_23_MOL) ];
				N: XIO(I_MSD_BM1_23)XIO(BM1_23_MTR.COMM)[XIO(F_BM1_23_MSD_OFF) OTE(BM1_23_MTR.MSD_ONS) ,OTE(F_BM1_23_MSD_OFF) ];
				N: XIC(O_C_BM1_23)XIO(I_C_BM1_23)TON(BM1_23_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_23_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_23_CTCTR_FAULT) XIO(I_C_BM1_23) ][XIO(F_BM1_23_CTCTR_FAULT) OTE(BM1_23_MTR.MS_FLT_ONS) ,OTE(F_BM1_23_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_23_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_23_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_23_MTR.FIRE_ALM);
				N: XIO(BM1_23_MTR.CONV_RUN)XIC(BM1_23_MTR.INTL_MTR)OTE(BM1_23_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_23_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_23_OVRIDE_REQ)[XIO(F_BM1_23_OVRIDE) OTE(BM1_23_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_23_OVRIDE) ];
				N: XIC(HMI_BM1_23_OUTSERV_REQ)[XIO(F_BM1_23_OUTSERV) OTE(BM1_23_MTR.OOS_ONS) ,OTE(F_BM1_23_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_23_MTR.MB_JAMMED);
				N: [XIC(F_BM1_22_PE_JAMMED) ,XIC(F_BM1_23_PE3_JAMMED) ,XIC(F_BM1_23_PE2_JAMMED) ,XIC(F_BM1_23_PE1_JAMMED) ,XIC(BM1_23_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_23_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_22_MTR.COMM);
				N: XIC(O_C_BM1_22)XIC(BM1_22_MTR.CONV_RUN)OTE(BM1_22_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_22_VFD_FAULT);
				N: [XIC(I_MOL_BM1_22) ,XIC(F_BM1_22_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_22_MOL) OTE(BM1_22_MTR.MOL_ONS) ,OTE(F_BM1_22_MOL) ];
				N: XIO(I_MSD_BM1_22)XIO(BM1_22_MTR.COMM)[XIO(F_BM1_22_MSD_OFF) OTE(BM1_22_MTR.MSD_ONS) ,OTE(F_BM1_22_MSD_OFF) ];
				N: XIC(O_C_BM1_22)XIO(I_C_BM1_22)TON(BM1_22_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_22_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_22_CTCTR_FAULT) XIO(I_C_BM1_22) ][XIO(F_BM1_22_CTCTR_FAULT) OTE(BM1_22_MTR.MS_FLT_ONS) ,OTE(F_BM1_22_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_22_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_22_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_22_MTR.FIRE_ALM);
				N: XIO(BM1_22_MTR.CONV_RUN)XIC(BM1_22_MTR.INTL_MTR)OTE(BM1_22_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_22_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_22_OVRIDE_REQ)[XIO(F_BM1_22_OVRIDE) OTE(BM1_22_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_22_OVRIDE) ];
				N: XIC(HMI_BM1_22_OUTSERV_REQ)[XIO(F_BM1_22_OUTSERV) OTE(BM1_22_MTR.OOS_ONS) ,OTE(F_BM1_22_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_22_MTR.MB_JAMMED);
				N: [XIC(F_BM1_21_PE_JAMMED) ,XIC(F_BM1_22_PE_JAMMED) ,XIC(BM1_22_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_22_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_21_MTR.COMM);
				N: XIC(O_C_BM1_21)XIC(BM1_21_MTR.CONV_RUN)OTE(BM1_21_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_21_VFD_FAULT);
				N: [XIC(I_MOL_BM1_21) ,XIC(F_BM1_21_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_21_MOL) OTE(BM1_21_MTR.MOL_ONS) ,OTE(F_BM1_21_MOL) ];
				N: XIO(I_MSD_BM1_21)XIO(BM1_21_MTR.COMM)[XIO(F_BM1_21_MSD_OFF) OTE(BM1_21_MTR.MSD_ONS) ,OTE(F_BM1_21_MSD_OFF) ];
				N: XIC(O_C_BM1_21)XIO(I_C_BM1_21)TON(BM1_21_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_21_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_21_CTCTR_FAULT) XIO(I_C_BM1_21) ][XIO(F_BM1_21_CTCTR_FAULT) OTE(BM1_21_MTR.MS_FLT_ONS) ,OTE(F_BM1_21_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_21_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_21_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_21_MTR.FIRE_ALM);
				N: XIO(BM1_21_MTR.CONV_RUN)XIC(BM1_21_MTR.INTL_MTR)OTE(BM1_21_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_21_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_21_OVRIDE_REQ)[XIO(F_BM1_21_OVRIDE) OTE(BM1_21_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_21_OVRIDE) ];
				N: XIC(HMI_BM1_21_OUTSERV_REQ)[XIO(F_BM1_21_OUTSERV) OTE(BM1_21_MTR.OOS_ONS) ,OTE(F_BM1_21_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_21_MTR.MB_JAMMED);
				N: [XIC(F_BM1_20_PE_JAMMED) ,XIC(F_BM1_21_PE_JAMMED) ,XIC(BM1_21_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_21_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_20_MTR.COMM);
				N: XIC(O_C_BM1_20)XIC(BM1_20_MTR.CONV_RUN)OTE(BM1_20_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_20_VFD_FAULT);
				N: [XIC(I_MOL_BM1_20) ,XIC(F_BM1_20_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_20_MOL) OTE(BM1_20_MTR.MOL_ONS) ,OTE(F_BM1_20_MOL) ];
				N: XIO(I_MSD_BM1_20)XIO(BM1_20_MTR.COMM)[XIO(F_BM1_20_MSD_OFF) OTE(BM1_20_MTR.MSD_ONS) ,OTE(F_BM1_20_MSD_OFF) ];
				N: XIC(O_C_BM1_20)XIO(I_C_BM1_20)TON(BM1_20_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_20_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_20_CTCTR_FAULT) XIO(I_C_BM1_20) ][XIO(F_BM1_20_CTCTR_FAULT) OTE(BM1_20_MTR.MS_FLT_ONS) ,OTE(F_BM1_20_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_20_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_20_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_20_MTR.FIRE_ALM);
				N: XIO(BM1_20_MTR.CONV_RUN)XIC(BM1_20_MTR.INTL_MTR)OTE(BM1_20_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_20_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_20_OVRIDE_REQ)[XIO(F_BM1_20_OVRIDE) OTE(BM1_20_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_20_OVRIDE) ];
				N: XIC(HMI_BM1_20_OUTSERV_REQ)[XIO(F_BM1_20_OUTSERV) OTE(BM1_20_MTR.OOS_ONS) ,OTE(F_BM1_20_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_20_MTR.MB_JAMMED);
				N: [XIC(F_BM1_19_PE1_JAMMED) ,XIC(F_BM1_20_PE_JAMMED) ,XIC(BM1_20_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_20_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_19_MTR.COMM);
				N: XIC(O_C_BM1_19)XIC(BM1_19_MTR.CONV_RUN)OTE(BM1_19_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_19_VFD_FAULT);
				N: [XIC(I_MOL_BM1_19) ,XIC(F_BM1_19_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_19_MOL) OTE(BM1_19_MTR.MOL_ONS) ,OTE(F_BM1_19_MOL) ];
				N: XIO(I_MSD_BM1_19)XIO(BM1_19_MTR.COMM)[XIO(F_BM1_19_MSD_OFF) OTE(BM1_19_MTR.MSD_ONS) ,OTE(F_BM1_19_MSD_OFF) ];
				N: XIC(O_C_BM1_19)XIO(I_C_BM1_19)TON(BM1_19_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_19_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_19_CTCTR_FAULT) XIO(I_C_BM1_19) ][XIO(F_BM1_19_CTCTR_FAULT) OTE(BM1_19_MTR.MS_FLT_ONS) ,OTE(F_BM1_19_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_19_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_19_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_19_MTR.FIRE_ALM);
				N: XIO(BM1_19_MTR.CONV_RUN)XIC(BM1_19_MTR.INTL_MTR)OTE(BM1_19_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_19_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_19_OVRIDE_REQ)[XIO(F_BM1_19_OVRIDE) OTE(BM1_19_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_19_OVRIDE) ];
				N: XIC(HMI_BM1_19_OUTSERV_REQ)[XIO(F_BM1_19_OUTSERV) OTE(BM1_19_MTR.OOS_ONS) ,OTE(F_BM1_19_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_19_MTR.MB_JAMMED);
				N: [XIC(F_BM1_18_PE_JAMMED) ,XIC(F_BM1_19_PE1_JAMMED) ,XIC(BM1_19_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_19_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_18_MTR.COMM);
				N: XIC(O_C_BM1_18)XIC(BM1_18_MTR.CONV_RUN)OTE(BM1_18_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_18_VFD_FAULT);
				N: [XIC(I_MOL_BM1_18) ,XIC(F_BM1_18_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_18_MOL) OTE(BM1_18_MTR.MOL_ONS) ,OTE(F_BM1_18_MOL) ];
				N: XIO(I_MSD_BM1_18)XIO(BM1_18_MTR.COMM)[XIO(F_BM1_18_MSD_OFF) OTE(BM1_18_MTR.MSD_ONS) ,OTE(F_BM1_18_MSD_OFF) ];
				N: XIC(O_C_BM1_18)XIO(I_C_BM1_18)TON(BM1_18_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_18_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_18_CTCTR_FAULT) XIO(I_C_BM1_18) ][XIO(F_BM1_18_CTCTR_FAULT) OTE(BM1_18_MTR.MS_FLT_ONS) ,OTE(F_BM1_18_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_18_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_18_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_18_MTR.FIRE_ALM);
				N: XIO(BM1_18_MTR.CONV_RUN)XIC(BM1_18_MTR.INTL_MTR)OTE(BM1_18_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_18_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_18_OVRIDE_REQ)[XIO(F_BM1_18_OVRIDE) OTE(BM1_18_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_18_OVRIDE) ];
				N: XIC(HMI_BM1_18_OUTSERV_REQ)[XIO(F_BM1_18_OUTSERV) OTE(BM1_18_MTR.OOS_ONS) ,OTE(F_BM1_18_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_18_MTR.MB_JAMMED);
				N: [XIC(F_BM1_17_PE_JAMMED) ,XIC(F_BM1_18_PE_JAMMED) ,XIC(BM1_18_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_18_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_17_MTR.COMM);
				N: XIC(O_C_BM1_17)XIC(BM1_17_MTR.CONV_RUN)OTE(BM1_17_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_17_VFD_FAULT);
				N: [XIC(I_MOL_BM1_17) ,XIC(F_BM1_17_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_17_MOL) OTE(BM1_17_MTR.MOL_ONS) ,OTE(F_BM1_17_MOL) ];
				N: XIO(I_MSD_BM1_17)XIO(BM1_17_MTR.COMM)[XIO(F_BM1_17_MSD_OFF) OTE(BM1_17_MTR.MSD_ONS) ,OTE(F_BM1_17_MSD_OFF) ];
				N: XIC(O_C_BM1_17)XIO(I_C_BM1_17)TON(BM1_17_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_17_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_17_CTCTR_FAULT) XIO(I_C_BM1_17) ][XIO(F_BM1_17_CTCTR_FAULT) OTE(BM1_17_MTR.MS_FLT_ONS) ,OTE(F_BM1_17_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_17_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_17_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_17_MTR.FIRE_ALM);
				N: XIO(BM1_17_MTR.CONV_RUN)XIC(BM1_17_MTR.INTL_MTR)OTE(BM1_17_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_17_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_17_OVRIDE_REQ)[XIO(F_BM1_17_OVRIDE) OTE(BM1_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_17_OVRIDE) ];
				N: XIC(HMI_BM1_17_OUTSERV_REQ)[XIO(F_BM1_17_OUTSERV) OTE(BM1_17_MTR.OOS_ONS) ,OTE(F_BM1_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_17_MTR.MB_JAMMED);
				N: [XIC(F_BM1_16_PE_JAMMED) ,XIC(F_BM1_17_PE_JAMMED) ,XIC(BM1_17_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_17_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_16_MTR.COMM);
				N: XIC(O_C_BM1_16)XIC(BM1_16_MTR.CONV_RUN)OTE(BM1_16_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_16_VFD_FAULT);
				N: [XIC(I_MOL_BM1_16) ,XIC(F_BM1_16_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_16_MOL) OTE(BM1_16_MTR.MOL_ONS) ,OTE(F_BM1_16_MOL) ];
				N: XIO(I_MSD_BM1_16)XIO(BM1_16_MTR.COMM)[XIO(F_BM1_16_MSD_OFF) OTE(BM1_16_MTR.MSD_ONS) ,OTE(F_BM1_16_MSD_OFF) ];
				N: XIC(O_C_BM1_16)XIO(I_C_BM1_16)TON(BM1_16_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_16_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_16_CTCTR_FAULT) XIO(I_C_BM1_16) ][XIO(F_BM1_16_CTCTR_FAULT) OTE(BM1_16_MTR.MS_FLT_ONS) ,OTE(F_BM1_16_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_16_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_16_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_16_MTR.FIRE_ALM);
				N: XIO(BM1_16_MTR.CONV_RUN)XIC(BM1_16_MTR.INTL_MTR)OTE(BM1_16_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_16_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_16_OVRIDE_REQ)[XIO(F_BM1_16_OVRIDE) OTE(BM1_16_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_16_OVRIDE) ];
				N: XIC(HMI_BM1_16_OUTSERV_REQ)[XIO(F_BM1_16_OUTSERV) OTE(BM1_16_MTR.OOS_ONS) ,OTE(F_BM1_16_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_16_MTR.MB_JAMMED);
				N: [XIC(F_BM1_15_PE_JAMMED) ,XIC(F_BM1_16_PE_JAMMED) ,XIC(BM1_16_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_16_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_15_MTR.COMM);
				N: XIC(O_C_BM1_15)XIC(BM1_15_MTR.CONV_RUN)OTE(BM1_15_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_15_VFD_FAULT);
				N: [XIC(I_MOL_BM1_15) ,XIC(F_BM1_15_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_15_MOL) OTE(BM1_15_MTR.MOL_ONS) ,OTE(F_BM1_15_MOL) ];
				N: XIO(I_MSD_BM1_15)XIO(BM1_15_MTR.COMM)[XIO(F_BM1_15_MSD_OFF) OTE(BM1_15_MTR.MSD_ONS) ,OTE(F_BM1_15_MSD_OFF) ];
				N: XIC(O_C_BM1_15)XIO(I_C_BM1_15)TON(BM1_15_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_15_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_15_CTCTR_FAULT) XIO(I_C_BM1_15) ][XIO(F_BM1_15_CTCTR_FAULT) OTE(BM1_15_MTR.MS_FLT_ONS) ,OTE(F_BM1_15_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_15_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_15_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_15_MTR.FIRE_ALM);
				N: XIO(BM1_15_MTR.CONV_RUN)XIC(BM1_15_MTR.INTL_MTR)OTE(BM1_15_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_15_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_15_OVRIDE_REQ)[XIO(F_BM1_15_OVRIDE) OTE(BM1_15_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_15_OVRIDE) ];
				N: XIC(HMI_BM1_15_OUTSERV_REQ)[XIO(F_BM1_15_OUTSERV) OTE(BM1_15_MTR.OOS_ONS) ,OTE(F_BM1_15_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_15_MTR.MB_JAMMED);
				N: [XIC(F_BM1_14_PE1_JAMMED) ,XIC(F_BM1_15_PE_JAMMED) ,XIC(BM1_15_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_15_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_14_MTR.COMM);
				N: XIC(O_C_BM1_14)XIC(BM1_14_MTR.CONV_RUN)OTE(BM1_14_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_14_VFD_FAULT);
				N: [XIC(I_MOL_BM1_14) ,XIC(F_BM1_14_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_14_MOL) OTE(BM1_14_MTR.MOL_ONS) ,OTE(F_BM1_14_MOL) ];
				N: XIO(I_MSD_BM1_14)XIO(BM1_14_MTR.COMM)[XIO(F_BM1_14_MSD_OFF) OTE(BM1_14_MTR.MSD_ONS) ,OTE(F_BM1_14_MSD_OFF) ];
				N: XIC(O_C_BM1_14)XIO(I_C_BM1_14)TON(BM1_14_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_14_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_14_CTCTR_FAULT) XIO(I_C_BM1_14) ][XIO(F_BM1_14_CTCTR_FAULT) OTE(BM1_14_MTR.MS_FLT_ONS) ,OTE(F_BM1_14_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_14_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_14_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_14_MTR.FIRE_ALM);
				N: XIO(BM1_14_MTR.CONV_RUN)XIC(BM1_14_MTR.INTL_MTR)OTE(BM1_14_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_14_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_14_OVRIDE_REQ)[XIO(F_BM1_14_OVRIDE) OTE(BM1_14_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_14_OVRIDE) ];
				N: XIC(HMI_BM1_14_OUTSERV_REQ)[XIO(F_BM1_14_OUTSERV) OTE(BM1_14_MTR.OOS_ONS) ,OTE(F_BM1_14_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_14_MTR.MB_JAMMED);
				N: [XIC(F_BM1_13_PE_JAMMED) ,XIC(F_O2T_18_PE_JAMMED) ,XIC(F_BM1_14_PE1_JAMMED) ,XIC(F_BM1_38_PE_JAMMED) ,XIC(F_BM1_14_PE2_JAMMED) ,XIC(F_BM1_38_PE_JAMMED) ,XIC(BM1_14_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_14_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_38_MTR.COMM);
				N: XIC(O_C_BM1_38)XIC(BM1_38_MTR.CONV_RUN)OTE(BM1_38_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_38_VFD_FAULT);
				N: [XIC(I_MOL_BM1_38) ,XIC(F_BM1_38_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_38_MOL) OTE(BM1_38_MTR.MOL_ONS) ,OTE(F_BM1_38_MOL) ];
				N: XIO(I_MSD_BM1_38)XIO(BM1_38_MTR.COMM)[XIO(F_BM1_38_MSD_OFF) OTE(BM1_38_MTR.MSD_ONS) ,OTE(F_BM1_38_MSD_OFF) ];
				N: XIC(O_C_BM1_38)XIO(I_C_BM1_38)TON(BM1_38_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_38_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_38_CTCTR_FAULT) XIO(I_C_BM1_38) ][XIO(F_BM1_38_CTCTR_FAULT) OTE(BM1_38_MTR.MS_FLT_ONS) ,OTE(F_BM1_38_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_38_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_38_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_38_MTR.FIRE_ALM);
				N: XIO(BM1_38_MTR.CONV_RUN)XIC(BM1_38_MTR.INTL_MTR)OTE(BM1_38_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_38_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_38_OVRIDE_REQ)[XIO(F_BM1_38_OVRIDE) OTE(BM1_38_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_38_OVRIDE) ];
				N: XIC(HMI_BM1_38_OUTSERV_REQ)[XIO(F_BM1_38_OUTSERV) OTE(BM1_38_MTR.OOS_ONS) ,OTE(F_BM1_38_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_38_MTR.MB_JAMMED);
				N: [XIC(F_BM1_37_PE_JAMMED) ,XIC(F_BM1_38_PE_JAMMED) ,XIC(BM1_38_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_38_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_37_MTR.COMM);
				N: XIC(O_C_BM1_37)XIC(BM1_37_MTR.CONV_RUN)OTE(BM1_37_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_37_VFD_FAULT);
				N: [XIC(I_MOL_BM1_37) ,XIC(F_BM1_37_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_37_MOL) OTE(BM1_37_MTR.MOL_ONS) ,OTE(F_BM1_37_MOL) ];
				N: XIO(I_MSD_BM1_37)XIO(BM1_37_MTR.COMM)[XIO(F_BM1_37_MSD_OFF) OTE(BM1_37_MTR.MSD_ONS) ,OTE(F_BM1_37_MSD_OFF) ];
				N: XIC(O_C_BM1_37)XIO(I_C_BM1_37)TON(BM1_37_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_37_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_37_CTCTR_FAULT) XIO(I_C_BM1_37) ][XIO(F_BM1_37_CTCTR_FAULT) OTE(BM1_37_MTR.MS_FLT_ONS) ,OTE(F_BM1_37_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_37_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_37_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_37_MTR.FIRE_ALM);
				N: XIO(BM1_37_MTR.CONV_RUN)XIC(BM1_37_MTR.INTL_MTR)OTE(BM1_37_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_37_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_37_OVRIDE_REQ)[XIO(F_BM1_37_OVRIDE) OTE(BM1_37_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_37_OVRIDE) ];
				N: XIC(HMI_BM1_37_OUTSERV_REQ)[XIO(F_BM1_37_OUTSERV) OTE(BM1_37_MTR.OOS_ONS) ,OTE(F_BM1_37_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_37_MTR.MB_JAMMED);
				N: [XIC(F_BM1_36_PE_JAMMED) ,XIC(F_BM1_37_PE_JAMMED) ,XIC(BM1_37_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_37_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_36_MTR.COMM);
				N: XIC(O_C_BM1_36)XIC(BM1_36_MTR.CONV_RUN)OTE(BM1_36_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_36_VFD_FAULT);
				N: [XIC(I_MOL_BM1_36) ,XIC(F_BM1_36_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_36_MOL) OTE(BM1_36_MTR.MOL_ONS) ,OTE(F_BM1_36_MOL) ];
				N: XIO(I_MSD_BM1_36)XIO(BM1_36_MTR.COMM)[XIO(F_BM1_36_MSD_OFF) OTE(BM1_36_MTR.MSD_ONS) ,OTE(F_BM1_36_MSD_OFF) ];
				N: XIC(O_C_BM1_36)XIO(I_C_BM1_36)TON(BM1_36_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_36_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_36_CTCTR_FAULT) XIO(I_C_BM1_36) ][XIO(F_BM1_36_CTCTR_FAULT) OTE(BM1_36_MTR.MS_FLT_ONS) ,OTE(F_BM1_36_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_36_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_36_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_36_MTR.FIRE_ALM);
				N: XIO(BM1_36_MTR.CONV_RUN)XIC(BM1_36_MTR.INTL_MTR)OTE(BM1_36_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_36_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_36_OVRIDE_REQ)[XIO(F_BM1_36_OVRIDE) OTE(BM1_36_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_36_OVRIDE) ];
				N: XIC(HMI_BM1_36_OUTSERV_REQ)[XIO(F_BM1_36_OUTSERV) OTE(BM1_36_MTR.OOS_ONS) ,OTE(F_BM1_36_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_36_MTR.MB_JAMMED);
				N: [XIC(F_BM1_35_PE_JAMMED) ,XIC(F_BM1_36_PE_JAMMED) ,XIC(BM1_36_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_36_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_35_MTR.COMM);
				N: XIC(O_C_BM1_35)XIC(BM1_35_MTR.CONV_RUN)OTE(BM1_35_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_35_VFD_FAULT);
				N: [XIC(I_MOL_BM1_35) ,XIC(F_BM1_35_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_35_MOL) OTE(BM1_35_MTR.MOL_ONS) ,OTE(F_BM1_35_MOL) ];
				N: XIO(I_MSD_BM1_35)XIO(BM1_35_MTR.COMM)[XIO(F_BM1_35_MSD_OFF) OTE(BM1_35_MTR.MSD_ONS) ,OTE(F_BM1_35_MSD_OFF) ];
				N: XIC(O_C_BM1_35)XIO(I_C_BM1_35)TON(BM1_35_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_35_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_35_CTCTR_FAULT) XIO(I_C_BM1_35) ][XIO(F_BM1_35_CTCTR_FAULT) OTE(BM1_35_MTR.MS_FLT_ONS) ,OTE(F_BM1_35_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_35_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_35_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_35_MTR.FIRE_ALM);
				N: XIO(BM1_35_MTR.CONV_RUN)XIC(BM1_35_MTR.INTL_MTR)OTE(BM1_35_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_35_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_35_OVRIDE_REQ)[XIO(F_BM1_35_OVRIDE) OTE(BM1_35_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_35_OVRIDE) ];
				N: XIC(HMI_BM1_35_OUTSERV_REQ)[XIO(F_BM1_35_OUTSERV) OTE(BM1_35_MTR.OOS_ONS) ,OTE(F_BM1_35_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_35_MTR.MB_JAMMED);
				N: [XIC(F_BM1_34_PE_JAMMED) ,XIC(F_BM1_35_PE_JAMMED) ,XIC(BM1_35_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_35_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_34_MTR.COMM);
				N: XIC(O_C_BM1_34)XIC(BM1_34_MTR.CONV_RUN)OTE(BM1_34_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_34_VFD_FAULT);
				N: [XIC(I_MOL_BM1_34) ,XIC(F_BM1_34_MOL) XIO(I_CS_BM1_MCP_RPBA) ][XIO(F_BM1_34_MOL) OTE(BM1_34_MTR.MOL_ONS) ,OTE(F_BM1_34_MOL) ];
				N: XIO(I_MSD_BM1_34)XIO(BM1_34_MTR.COMM)[XIO(F_BM1_34_MSD_OFF) OTE(BM1_34_MTR.MSD_ONS) ,OTE(F_BM1_34_MSD_OFF) ];
				N: XIC(O_C_BM1_34)XIO(I_C_BM1_34)TON(BM1_34_MTR.CTCTR_FLT_TMR,?,?);
				N: [XIC(BM1_34_MTR.CTCTR_FLT_TMR.DN) ,XIC(F_BM1_34_CTCTR_FAULT) XIO(I_C_BM1_34) ][XIO(F_BM1_34_CTCTR_FAULT) OTE(BM1_34_MTR.MS_FLT_ONS) ,OTE(F_BM1_34_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_34_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_34_MTR.E_STOP_RES);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(BM1_34_MTR.FIRE_ALM);
				N: XIO(BM1_34_MTR.CONV_RUN)XIC(BM1_34_MTR.INTL_MTR)OTE(BM1_34_MTR.CASC);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(BM1_34_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_34_OVRIDE_REQ)[XIO(F_BM1_34_OVRIDE) OTE(BM1_34_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_34_OVRIDE) ];
				N: XIC(HMI_BM1_34_OUTSERV_REQ)[XIO(F_BM1_34_OUTSERV) OTE(BM1_34_MTR.OOS_ONS) ,OTE(F_BM1_34_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_34_MTR.MB_JAMMED);
				N: [XIC(F_BM1_34_PE_JAMMED) ,XIC(BM1_34_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_34_MTR.JAMMED);
		END_ROUTINE

		ROUTINE BM1_B_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE BM1_C_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_27_PE2_JAMMED) XIC(I_PE2_BM1_27) ,XIC(F_BM1_27_PE1_JAMMED) XIC(I_PE1_BM1_27) ,XIC(F_BM1_27_CS1_E_STOP) XIO(I_CS1_BM1_27_EPB) ,XIC(F_BM1_27_CS3_E_STOP) XIO(I_CS3_BM1_27_EPB) ,AFI() ]OTE(CS_BM1_27_LTA1_FLASH);
				N: [[XIC(F_BM1_27_PE2_JAMMED) ,XIC(F_BM1_27_PE1_JAMMED) ] XIO(CS_BM1_27_LTA1_FLASH) ,XIC(CS_BM1_27_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_27_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_27_EPB) ]OTE(O_CS1_BM1_27_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_27_CS2_E_STOP) XIO(I_CS2_BM1_27_EPB) ,XIC(F_BM1_27_CS3_E_STOP1) XIO(I_CS4_BM1_27_EPB) ]OTE(CS_BM1_27_LTA2_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_27_LTA2_FLASH) ,XIC(CS_BM1_27_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_27_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_27_EPB) ]OTE(O_CS2_BM1_27_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_BM1_27_EPB) ]OTE(O_CS3_BM1_27_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS4_BM1_27_EPB) ]OTE(O_CS4_BM1_27_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_27_CS5_E_STOP) XIO(I_CS5_BM1_27_EPB) ,XIC(F_BM1_27_PE2_JAMMED) XIC(I_PE2_BM1_27) ,XIC(F_BM1_26_PE_JAMMED) XIC(I_PE_BM1_26) ,AFI() ]OTE(CS_BM1_27_LTA5_FLASH);
				N: [[XIC(F_BM1_27_CS5_E_STOP) ,XIC(F_BM1_27_PE2_JAMMED) ,XIC(F_BM1_26_PE_JAMMED) ] XIO(CS_BM1_27_LTA5_FLASH) ,XIC(CS_BM1_27_LTA5_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS5_BM1_27_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS5_BM1_27_EPB) ]OTE(O_CS5_BM1_27_EPB);
				N: XIC(F_BM1_27_CS5_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS5_BM1_27_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_28_PE2_JAMMED) XIC(I_PE2_BM1_28) ,XIC(F_BM1_28_PE1_JAMMED) XIC(I_PE1_BM1_28) ]OTE(CS_BM1_28_LTA1_FLASH);
				N: [[XIC(F_BM1_28_PE2_JAMMED) ,XIC(F_BM1_28_PE1_JAMMED) ] XIO(CS_BM1_28_LTA1_FLASH) ,XIC(CS_BM1_28_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_28_RPBA);
				N: [XIC(F_BM1_30_PE2_OVERHEIGHT) XIC(I_PE2_BM1_30) ,AFI() ]OTE(CS_BM1_28_LTW1_FLASH);
				N: [[XIC(F_BM1_30_PE2_OVERHEIGHT) ,AFI() ] XIO(CS_BM1_28_LTW1_FLASH) ,XIC(CS_BM1_28_LTW1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_28_LTW);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_28_EPB) ]OTE(O_CS1_BM1_28_EPB);
				N: XIC(F_BM1_28_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_BM1_28_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_28_CS2_E_STOP) XIO(I_CS2_BM1_28_EPB) ,AFI() ]OTE(CS_BM1_28_LTA2_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_28_LTA2_FLASH) ,XIC(CS_BM1_28_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_28_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_28_EPB) ]OTE(O_CS2_BM1_28_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_BM1_28_EPB) ]OTE(O_CS3_BM1_28_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_28_PE2_JAMMED) XIC(I_PE2_BM1_28) ,XIC(F_BM1_28_PE1_JAMMED) XIC(I_PE1_BM1_28) ,AFI() ]OTE(CS_BM1_28_LTA4_FLASH);
				N: [[AFI() ,XIC(F_BM1_28_PE2_JAMMED) ,XIC(F_BM1_28_PE1_JAMMED) ,AFI() ] XIO(CS_BM1_28_LTA4_FLASH) ,XIC(CS_BM1_28_LTA4_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS4_BM1_28_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS4_BM1_28_EPB) ]OTE(O_CS4_BM1_28_EPB);
				N: XIC(F_BM1_28_CS4_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS4_BM1_28_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_29_CS1_E_STOP) XIO(I_CS1_BM1_29_EPB) ,AFI() ]OTE(CS_BM1_29_LTA1_FLASH);
				N: [[AFI() ,AFI() ] XIO(CS_BM1_29_LTA1_FLASH) ,XIC(CS_BM1_29_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_29_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_29_EPB) ]OTE(O_CS1_BM1_29_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_29_PE2_JAMMED) XIC(I_PE2_BM1_29) ,XIC(F_BM1_29_PE1_JAMMED) XIC(I_PE1_BM1_29) ]OTE(CS_BM1_29_LTA2_FLASH);
				N: [[XIC(F_BM1_29_PE2_JAMMED) ,XIC(F_BM1_29_PE1_JAMMED) ] XIO(CS_BM1_29_LTA2_FLASH) ,XIC(CS_BM1_29_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_29_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_29_EPB) ]OTE(O_CS2_BM1_29_EPB);
				N: XIC(F_BM1_29_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_BM1_29_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_BM1_29_EPB) ]OTE(O_CS3_BM1_29_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS4_BM1_29_EPB) ]OTE(O_CS4_BM1_29_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_BM1_30_PE2_OVERHEIGHT)XIC(I_PE2_BM1_30)OTE(CS_BM1_30_LTW1_FLASH);
				N: [XIC(F_BM1_30_PE2_OVERHEIGHT) XIO(CS_BM1_30_LTW1_FLASH) ,XIC(CS_BM1_30_LTW1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_30_LTW);
				N: [XIC(F_BM1_30_PE3_JAMMED) XIC(I_PE3_BM1_30) ,XIC(F_BM1_30_PE1_JAMMED) XIC(I_PE1_BM1_30) ,XIC(F_O4T_10_PE1_JAMMED) XIC(I_PE_O4T_13) ,XIC(F_BM1_30_CS1_E_STOP) XIO(I_CS1_BM1_30_EPB) ]OTE(CS_BM1_30_LTA1_FLASH);
				N: [[XIC(F_BM1_30_PE3_JAMMED) ,XIC(F_BM1_30_PE1_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ] XIO(CS_BM1_29_LTA2_FLASH) ,XIC(CS_BM1_29_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_BM1_30_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_BM1_30_EPB) ]OTE(O_CS1_BM1_30_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_30_CS2_E_STOP) XIO(I_CS2_BM1_30_EPB) ,XIC(F_BM1_30_PE3_JAMMED) XIO(I_PE3_BM1_30) ,XIC(F_BM1_29_PE1_JAMMED) XIO(I_PE1_BM1_29) ,AFI() ]OTE(CS_BM1_30_LTA2_FLASH);
				N: [[XIC(F_BM1_30_PE3_JAMMED) ,XIC(F_BM1_29_PE1_JAMMED) ,AFI() ] XIO(CS_BM1_30_LTA2_FLASH) ,XIC(CS_BM1_30_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_BM1_30_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_BM1_30_EPB) ]OTE(O_CS2_BM1_30_EPB);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_BM1_30_PE3_JAMMED) XIC(I_PE3_BM1_30) ,XIC(F_BM1_30_PE1_JAMMED) XIC(I_PE1_BM1_30) ,AFI() ]OTE(CS_BM1_30_LTA3_FLASH);
				N: [[XIC(F_BM1_30_PE3_JAMMED) ,XIC(F_BM1_30_PE1_JAMMED) ,AFI() ] XIO(CS_BM1_30_LTA3_FLASH) ,XIC(CS_BM1_30_LTA3_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS3_BM1_30_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_BM1_30_EPB) ]OTE(O_CS3_BM1_30_EPB);
				N: XIC(F_BM1_30_CS3_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS3_BM1_30_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS4_BM1_30_EPB) ]OTE(O_CS4_BM1_30_EPB);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_BM1_28_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MSD_OFF_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_28_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_BM1_30_LTR);
				N: [[XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ]OTE(O_WA_BM1_30_ALM);
		END_ROUTINE

		ROUTINE BM1_C_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_30_MTR.G) ,XIC(BM1_30_MTR.RUNNING) MOV(Status.ConvRunning,BM1_30_MTR.G) ,XIC(BM1_30_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_30_MTR.G) ,[XIC(BM1_30_MTR.IM_TMR.TT) ,XIC(BM1_30_MTR.INDEX_EN) ,AFI() ] MOV(Status.ConvIdle,BM1_30_MTR.G) ,XIC(BM1_30_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_30_MTR.G) ,XIC(F_BM1_30_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_30_MTR.G) ,XIC(BM1_30_MTR.CASC) MOV(Status.ConvCascade,BM1_30_MTR.G) ,[XIC(BM1_30_MTR.CASC) ,XIC(BM1_30_MTR.INDEX_EN) ] XIO(I_PE1_BM1_30) MOV(Status.ConvBagPresCasc,BM1_30_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_30_MTR.G) ,XIC(F_BM1_30_MSD_OFF) MOV(Status.ConvDisc,BM1_30_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_30_MTR.G) ,XIC(BM1_30_MTR.JAMMED) MOV(Status.ConvJammed,BM1_30_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_30_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_30_MTR.G) ,XIC(F_BM1_30_VFD_FAULT) MOV(Status.ConvVFDFlt,BM1_30_MTR.G) ,XIC(F_BM1_30_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_30_MTR.G) ,AFI() MOV(Status.ConvOverLoad,BM1_30_MTR.G) ,XIC(F_BM1_30_OVRIDE) MOV(Status.ConvOverRide,BM1_30_MTR.G) ,XIC(BM1_30_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_30_MTR.G) ,XIC(BM1_30_MTR.E_STOP) XIO(BM1_30_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_30_MTR.G) ,XIC(F_BM1_30_OUTSERV) MOV(Status.ConvOutOfServ,BM1_30_MTR.G) ,XIC(BM1_30_MTR.COMM) MOV(Status.ConvCommFault,BM1_30_MTR.G) ,MOV(BM1_30_MTR.G,G_BM1_30_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_29_MTR.G) ,XIC(BM1_29_MTR.RUNNING) MOV(Status.ConvRunning,BM1_29_MTR.G) ,XIC(BM1_29_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_29_MTR.G) ,[XIC(BM1_29_MTR.IM_TMR.TT) ,XIC(BM1_29_MTR.INDEX_EN) ,AFI() ] MOV(Status.ConvIdle,BM1_29_MTR.G) ,XIC(BM1_29_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_29_MTR.G) ,XIC(F_BM1_29_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_29_MTR.G) ,XIC(BM1_29_MTR.CASC) MOV(Status.ConvCascade,BM1_29_MTR.G) ,[XIC(BM1_29_MTR.CASC) ,XIC(BM1_29_MTR.INDEX_EN) ] XIO(I_PE1_BM1_29) MOV(Status.ConvBagPresCasc,BM1_29_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_29_MTR.G) ,XIC(F_BM1_29_MSD_OFF) MOV(Status.ConvDisc,BM1_29_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_29_MTR.G) ,XIC(BM1_29_MTR.JAMMED) MOV(Status.ConvJammed,BM1_29_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_29_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_29_MTR.G) ,XIC(F_BM1_29_VFD_FAULT) MOV(Status.ConvVFDFlt,BM1_29_MTR.G) ,XIC(F_BM1_29_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_29_MTR.G) ,AFI() MOV(Status.ConvOverLoad,BM1_29_MTR.G) ,XIC(F_BM1_29_OVRIDE) MOV(Status.ConvOverRide,BM1_29_MTR.G) ,XIC(BM1_29_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_29_MTR.G) ,XIC(BM1_29_MTR.E_STOP) XIO(BM1_29_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_29_MTR.G) ,XIC(F_BM1_29_OUTSERV) MOV(Status.ConvOutOfServ,BM1_29_MTR.G) ,XIC(BM1_29_MTR.COMM) MOV(Status.ConvCommFault,BM1_29_MTR.G) ,MOV(BM1_29_MTR.G,G_BM1_29_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_28_MTR.G) ,XIC(BM1_28_MTR.RUNNING) MOV(Status.ConvRunning,BM1_28_MTR.G) ,XIC(BM1_28_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_28_MTR.G) ,[XIC(BM1_28_MTR.IM_TMR.TT) ,XIC(BM1_28_MTR.INDEX_EN) ,AFI() ] MOV(Status.ConvIdle,BM1_28_MTR.G) ,XIC(BM1_28_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_28_MTR.G) ,XIC(F_BM1_28_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_28_MTR.G) ,XIC(BM1_28_MTR.CASC) MOV(Status.ConvCascade,BM1_28_MTR.G) ,[XIC(BM1_28_MTR.CASC) ,XIC(BM1_28_MTR.INDEX_EN) ] XIO(I_PE1_BM1_28) MOV(Status.ConvBagPresCasc,BM1_28_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_28_MTR.G) ,XIC(F_BM1_28_MSD_OFF) MOV(Status.ConvDisc,BM1_28_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_28_MTR.G) ,XIC(BM1_28_MTR.JAMMED) MOV(Status.ConvJammed,BM1_28_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_28_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_28_MTR.G) ,XIC(F_BM1_28_VFD_FAULT) MOV(Status.ConvVFDFlt,BM1_28_MTR.G) ,XIC(F_BM1_28_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_28_MTR.G) ,AFI() MOV(Status.ConvOverLoad,BM1_28_MTR.G) ,XIC(F_BM1_28_OVRIDE) MOV(Status.ConvOverRide,BM1_28_MTR.G) ,XIC(BM1_28_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_28_MTR.G) ,XIC(BM1_28_MTR.E_STOP) XIO(BM1_28_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_28_MTR.G) ,XIC(F_BM1_28_OUTSERV) MOV(Status.ConvOutOfServ,BM1_28_MTR.G) ,XIC(BM1_28_MTR.COMM) MOV(Status.ConvCommFault,BM1_28_MTR.G) ,MOV(BM1_28_MTR.G,G_BM1_28_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,BM1_27_MTR.G) ,XIC(BM1_27_MTR.RUNNING) MOV(Status.ConvRunning,BM1_27_MTR.G) ,XIC(BM1_27_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,BM1_27_MTR.G) ,[XIC(BM1_27_MTR.IM_TMR.TT) ,XIC(BM1_27_MTR.INDEX_EN) ,AFI() ] MOV(Status.ConvIdle,BM1_27_MTR.G) ,XIC(BM1_27_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,BM1_27_MTR.G) ,XIC(F_BM1_27_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,BM1_27_MTR.G) ,XIC(BM1_27_MTR.CASC) MOV(Status.ConvCascade,BM1_27_MTR.G) ,[XIC(BM1_27_MTR.CASC) ,XIC(BM1_27_MTR.INDEX_EN) ] XIO(I_PE1_BM1_27) MOV(Status.ConvBagPresCasc,BM1_27_MTR.G) ,AFI() MOV(Status.ConvFull,BM1_27_MTR.G) ,XIC(F_BM1_27_MSD_OFF) MOV(Status.ConvDisc,BM1_27_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,BM1_27_MTR.G) ,XIC(BM1_27_MTR.JAMMED) MOV(Status.ConvJammed,BM1_27_MTR.G) ,AFI() MOV(Status.ConvMBJam,BM1_27_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,BM1_27_MTR.G) ,XIC(F_BM1_27_VFD_FAULT) MOV(Status.ConvVFDFlt,BM1_27_MTR.G) ,XIC(F_BM1_27_CTCTR_FAULT) MOV(Status.ConvCTCFlt,BM1_27_MTR.G) ,AFI() MOV(Status.ConvOverLoad,BM1_27_MTR.G) ,XIC(F_BM1_27_OVRIDE) MOV(Status.ConvOverRide,BM1_27_MTR.G) ,XIC(BM1_27_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,BM1_27_MTR.G) ,XIC(BM1_27_MTR.E_STOP) XIO(BM1_27_MTR.E_STOP_RES) MOV(Status.ConvEStop,BM1_27_MTR.G) ,XIC(F_BM1_27_OUTSERV) MOV(Status.ConvOutOfServ,BM1_27_MTR.G) ,XIC(BM1_27_MTR.COMM) MOV(Status.ConvCommFault,BM1_27_MTR.G) ,MOV(BM1_27_MTR.G,G_BM1_27_STS) ];
		END_ROUTINE

		ROUTINE BM1_C_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_27_MTR.CONV_RUN)RTO(BM1_27_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_27_RPBA) ,XIC(I_CS2_BM1_27_RPBA) ,XIC(I_CS5_BM1_27_RPBA) ,XIC(I_CS_BM1_25_RPBA) ] XIC(BM1_27_PE2.JAM_TMR.DN) ,XIO(BM1_27_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_27)RES(BM1_27_PE2.JAM_TMR);
				N: XIC(BM1_27_PE2.JAM_TMR.DN)[XIO(F_BM1_27_PE2_JAMMED) [ADD(S_BM1_27_PE2_JAM,1,S_BM1_27_PE2_JAM) ,OTE(BM1_27_PE2.JAM_ONS) ] ,OTE(F_BM1_27_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_27_MTR.CONV_RUN)RTO(BM1_27_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_27_RPBA) ,XIC(I_CS2_BM1_27_RPBA) ,XIC(I_CS5_BM1_27_RPBA) ,XIC(I_CS5_BM1_28_SPBG) ] XIC(BM1_27_PE1.JAM_TMR.DN) ,XIO(BM1_27_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_27)RES(BM1_27_PE1.JAM_TMR);
				N: XIC(BM1_27_PE1.JAM_TMR.DN)[XIO(F_BM1_27_PE1_JAMMED) [ADD(S_BM1_27_PE1_JAM,1,S_BM1_27_PE1_JAM) ,OTE(BM1_27_PE1.JAM_ONS) ] ,OTE(F_BM1_27_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_28_MTR.CONV_RUN)RTO(BM1_28_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS4_BM1_28_SPBG) ,XIC(I_CS1_BM1_28_RPBA) ,XIC(I_CS1_BM1_27_RPBA) ] XIC(BM1_28_PE2.JAM_TMR.DN) ,XIO(BM1_28_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_28)RES(BM1_28_PE2.JAM_TMR);
				N: XIC(BM1_28_PE2.JAM_TMR.DN)[XIO(F_BM1_28_PE2_JAMMED) [ADD(S_BM1_28_PE2_JAM,1,S_BM1_28_PE2_JAM) ,OTE(BM1_28_PE2.JAM_ONS) ] ,OTE(F_BM1_28_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_28_MTR.CONV_RUN)RTO(BM1_28_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS4_BM1_28_SPBG) ,XIC(I_CS1_BM1_28_RPBA) ,XIC(I_CS2_BM1_29_RPBA) ] XIC(BM1_28_PE1.JAM_TMR.DN) ,XIO(BM1_28_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_28)RES(BM1_28_PE1.JAM_TMR);
				N: XIC(BM1_28_PE1.JAM_TMR.DN)[XIO(F_BM1_28_PE1_JAMMED) [ADD(S_BM1_28_PE1_JAM,1,S_BM1_28_PE1_JAM) ,OTE(BM1_28_PE1.JAM_ONS) ] ,OTE(F_BM1_28_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_29_MTR.CONV_RUN)RTO(BM1_29_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS2_BM1_29_RPBA) ,XIC(I_CS1_BM1_29_RPBA) ,XIC(I_CS4_BM1_28_SPBG) ] XIC(BM1_29_PE2.JAM_TMR.DN) ,XIO(BM1_29_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_29)RES(BM1_29_PE2.JAM_TMR);
				N: XIC(BM1_29_PE2.JAM_TMR.DN)[XIO(F_BM1_29_PE2_JAMMED) [ADD(S_BM1_29_PE2_JAM,1,S_BM1_29_PE2_JAM) ,OTE(BM1_29_PE2.JAM_ONS) ] ,OTE(F_BM1_29_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_29_MTR.CONV_RUN)RTO(BM1_29_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS2_BM1_29_RPBA) ,XIC(I_CS2_BM1_29_SPBG) ,XIC(I_CS1_BM1_29_RPBA) ] XIC(BM1_29_PE1.JAM_TMR.DN) ,XIO(BM1_29_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_29)RES(BM1_29_PE1.JAM_TMR);
				N: XIC(BM1_29_PE1.JAM_TMR.DN)[XIO(F_BM1_29_PE1_JAMMED) [ADD(S_BM1_29_PE1_JAM,1,S_BM1_29_PE1_JAM) ,OTE(BM1_29_PE1.JAM_ONS) ] ,OTE(F_BM1_29_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_30_MTR.CONV_RUN)RTO(BM1_30_PE3.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_30_RPBA) ,XIC(I_CS2_BM1_30_RPBA) ,XIC(I_CS1_BM1_29_RPBA) ,XIC(I_CS2_BM1_29_RPBA) ] XIC(BM1_30_PE3.JAM_TMR.DN) ,XIO(BM1_30_PE3.JAM_TMR.DN) ]XIC(I_PE3_BM1_30)RES(BM1_30_PE3.JAM_TMR);
				N: XIC(BM1_30_PE3.JAM_TMR.DN)[XIO(F_BM1_30_PE3_JAMMED) [ADD(S_BM1_30_PE3_JAM,1,S_BM1_30_PE3_JAM) ,OTE(BM1_30_PE3.JAM_ONS) ] ,OTE(F_BM1_30_PE3_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_30_MTR.CONV_RUN)RTO(BM1_30_PE2.JAM_TMR,?,?);
				N: [XIC(I_CS1_BM1_30_RPBA) XIC(BM1_30_PE2.JAM_TMR.DN) ,XIO(BM1_30_PE2.JAM_TMR.DN) ]XIC(I_PE2_BM1_30)RES(BM1_30_PE2.JAM_TMR);
				N: XIC(BM1_30_PE2.JAM_TMR.DN)[XIO(F_BM1_30_PE2_OVERHEIGHT) [ADD(S_BM1_30_PE2_OH,1,S_BM1_30_PE2_OH) ,OTE(BM1_30_PE2.JAM_ONS) ] ,OTE(F_BM1_30_PE2_OVERHEIGHT) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(BM1_30_MTR.CONV_RUN)RTO(BM1_30_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS1_BM1_30_RPBA) ,XIC(I_CS2_BM1_30_RPBA) ] XIC(BM1_30_PE1.JAM_TMR.DN) ,XIO(BM1_30_PE1.JAM_TMR.DN) ]XIC(I_PE1_BM1_30)RES(BM1_30_PE1.JAM_TMR);
				N: XIC(BM1_30_PE1.JAM_TMR.DN)[XIO(F_BM1_30_PE1_JAMMED) [ADD(S_BM1_30_PE1_JAM,1,S_BM1_30_PE1_JAM) ,OTE(BM1_30_PE1.JAM_ONS) ] ,OTE(F_BM1_30_PE1_JAMMED) ];
		END_ROUTINE

		ROUTINE BM1_C_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS1_BM1_27_RPBA) ,XIC(I_CS2_BM1_27_RPBA) ,XIC(I_CS5_BM1_27_SPBG) ,XIC(I_CS4_BM1_28_SPBG) ,XIC(I_CS1_BM1_28_RPBA) ,XIC(I_CS5_BM1_28_SPBG) ,XIC(I_CS1_BM1_29_RPBA) ,XIC(I_CS2_BM1_29_SPBG) ,XIC(I_CS1_BM1_30_RPBA) ,XIC(I_CS2_BM1_30_RPBA) ,XIC(I_CS3_BM1_30_SPBG) ,XIC(O4T.MTR_GRP.START_DS) ,XIC(BM1_B.MTR_GRP.START_DS) ]OTE(BM1_C.MTR_GRP.START);
				N: XIC(I_BAL_BM1_27)XIO(I_CS5_BM1_27_FWD)OTE(BAL_BM1_27_REV);
				N: [XIC(I_BAL_BM1_27) XIO(I_CS5_BM1_27_FWD) XIO(I_CS4_BM1_28_FWD) ,XIC(I_BAL_BM1_28) XIO(I_CS4_BM1_28_FWD) ]OTE(BAL_BM1_28_REV);
				N: [XIC(I_BAL_BM1_27) XIO(I_CS5_BM1_27_FWD) XIO(I_CS4_BM1_28_FWD) XIO(I_CS2_BM1_29_FWD) ,XIC(I_BAL_BM1_28) XIO(I_CS4_BM1_28_FWD) XIO(I_CS2_BM1_29_FWD) ,XIC(I_BAL_BM1_29) XIO(I_CS2_BM1_29_FWD) ]OTE(BAL_BM1_29_REV);
				N: [XIC(I_BAL_BM1_27) XIO(I_CS5_BM1_27_FWD) XIO(I_CS4_BM1_28_FWD) XIO(I_CS2_BM1_29_FWD) XIO(I_CS3_BM1_30_FWD) ,XIC(I_BAL_BM1_28) XIO(I_CS4_BM1_28_FWD) XIO(I_CS2_BM1_29_FWD) XIO(I_CS3_BM1_30_FWD) ,XIC(I_BAL_BM1_29) XIO(I_CS2_BM1_29_FWD) XIO(I_CS3_BM1_30_FWD) ,XIC(I_BAL_BM1_30) XIO(I_CS3_BM1_30_FWD) ]OTE(BAL_BM1_30_REV);
				N: XIC(I_BAL_BM1_30)XIC(I_CS3_BM1_30_FWD)OTE(BAL_BM1_30_FWD);
				N: [XIC(I_BAL_BM1_30) XIC(I_CS3_BM1_30_FWD) XIC(I_CS2_BM1_29_FWD) ,XIC(I_BAL_BM1_29) XIC(I_CS2_BM1_29_FWD) ]OTE(BAL_BM1_29_FWD);
				N: [XIC(I_BAL_BM1_30) XIC(I_CS3_BM1_30_FWD) XIC(I_CS2_BM1_29_FWD) XIC(I_CS4_BM1_28_FWD) ,XIC(I_BAL_BM1_29) XIC(I_CS2_BM1_29_FWD) XIC(I_CS4_BM1_28_FWD) ,XIC(I_BAL_BM1_28) XIC(I_CS4_BM1_28_FWD) ]OTE(BAL_BM1_28_FWD);
				N: [XIC(I_BAL_BM1_28) XIC(I_CS4_BM1_28_FWD) XIC(I_CS5_BM1_27_FWD) ,XIC(I_BAL_BM1_29) XIC(I_CS2_BM1_29_FWD) XIC(I_CS4_BM1_28_FWD) XIC(I_CS5_BM1_27_FWD) ,XIC(I_BAL_BM1_30) XIC(I_CS3_BM1_30_FWD) XIC(I_CS2_BM1_29_FWD) XIC(I_CS4_BM1_28_FWD) XIC(I_CS5_BM1_27_FWD) ,XIC(I_BAL_BM1_27) XIC(I_CS5_BM1_27_FWD) ]OTE(BAL_BM1_27_FWD);
				N: XIO(I_BAL_BM1_27)[XIO(BAL_BM1_27_XITN_MEM) OTE(BAL_BM1_27_NEG_XITN_STOP) ,OTE(BAL_BM1_27_XITN_MEM) ];
				N: XIO(I_BAL_BM1_28)[XIO(BAL_BM1_28_XITN_MEM) OTE(BAL_BM1_28_NEG_XITN_STOP) ,OTE(BAL_BM1_28_XITN_MEM) ];
				N: XIO(I_BAL_BM1_29)[XIO(BAL_BM1_29_XITN_MEM) OTE(BAL_BM1_29_NEG_XITN_STOP) ,OTE(BAL_BM1_29_XITN_MEM) ];
				N: XIO(I_BAL_BM1_30)[XIO(BAL_BM1_30_XITN_MEM) OTE(BAL_BM1_30_NEG_XITN_STOP) ,OTE(BAL_BM1_30_XITN_MEM) ];
				RC: "Motor run expander.";
				N: XIC(BM1_30_MTR.CONV_RUN)XIC(BM1_29_MTR.CONV_RUN)XIC(BM1_28_MTR.CONV_RUN)XIC(BM1_27_MTR.CONV_RUN)OTE(BM1_C.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE2_BM1_27) ,XIO(I_PE1_BM1_27) ,XIO(I_PE2_BM1_28) ,XIO(I_PE1_BM1_28) ,XIO(I_PE2_BM1_29) ,XIO(I_PE1_BM1_29) ,XIO(I_PE3_BM1_30) ,XIO(I_PE2_BM1_30) ,XIO(I_PE1_BM1_30) ,AFI() ]OTE(BM1_C.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(BM1_C.MTR_GRP.START) ,XIC(BM1_C.MTR_GRP.PEs) XIO(BM1_C.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(BM1_C.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(BM1_C.MTR_GRP.RUN_LATCH)XIC(BM1_C.MTR_GRP.PEs)OTE(BM1_C.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(BM1_C.MTR_GRP.RUN_EXPAND)RTO(BM1_C.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(BM1_C.MTR_GRP.START) ,XIC(BM1_C.MTR_GRP.RUN_LATCH) ]XIO(BM1_C.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(BM1_C.STATUS.FIRE_ALM)OTE(BM1_C.MTR_GRP.RUN_LATCH);
				RC: "The sync stop of the post indexing belt should in effect once the photo-eye is blocked up until the bag is off of the belt. This logic is for when a bag is transitioning from the indexing belt to the downstream belt and the indexing belt were to stop. We want the sync_stop logic to stop belt the downstream belt";
				N: XIC(BM1_28_MTR.INDEX_EN)XIO(BM1_28_MTR.INDEX_FWD)XIC(F_BM1_28_RUN_REV)XIC(F_BM1_27_RUN_REV)XIO(BM1_28_PE2.FILT)OTE(BM1_27_MTR.SYNC_STOP);
				N: [XIC(BM1_29_MTR.INDEX_EN) XIO(BM1_29_MTR.INDEX_FWD) XIC(F_BM1_29_RUN_REV) XIC(F_BM1_28_RUN_REV) XIO(BM1_29_PE2.FILT) ,XIC(BM1_27_MTR.INDEX_EN) XIO(BM1_27_MTR.INDEX_FWD) XIO(F_BM1_27_RUN_REV) XIO(F_BM1_28_RUN_REV) XIO(BM1_27_PE1.FILT) ]OTE(BM1_28_MTR.SYNC_STOP);
				N: [XIC(BM1_28_MTR.INDEX_EN) XIO(BM1_28_MTR.INDEX_FWD) XIO(F_BM1_28_RUN_REV) XIO(F_BM1_29_RUN_REV) XIO(BM1_28_PE1.FILT) ,XIC(BM1_30_MTR.INDEX_EN) XIO(BM1_30_MTR.INDEX_FWD) XIC(F_BM1_30_RUN_REV) XIC(F_BM1_29_RUN_REV) XIO(BM1_30_PE3.FILT) ]OTE(BM1_29_MTR.SYNC_STOP);
				N: XIC(BM1_29_MTR.INDEX_EN)XIO(BM1_29_MTR.INDEX_FWD)XIO(F_BM1_29_RUN_REV)XIO(F_BM1_30_RUN_REV)XIO(BM1_29_PE1.FILT)OTE(BM1_30_MTR.SYNC_STOP);
				RC: "Reset Indexing timer when upstream PE is blocked$N"
				    "Positive transition memory bit is used to prevent indexing timer from resetting if conveyor is spacing$N"
				    "";
				N: [XIO(F_BM1_27_RUN_REV) XIC(BM1_26_PE.POS_XITN_MEM) XIO(BM1_26_MTR.SPACE) ,XIC(F_BM1_28_RUN_REV) XIC(F_BM1_27_RUN_REV) XIC(BM1_28_PE2.POS_XITN_MEM) XIO(BM1_28_MTR.SPACE) ]RES(BM1_27_MTR.INDEX_TMR);
				N: [XIO(F_BM1_27_RUN_REV) XIO(F_BM1_28_RUN_REV) XIC(BM1_27_PE1.POS_XITN_MEM) XIO(BM1_27_MTR.SPACE) ,XIC(F_BM1_29_RUN_REV) XIC(F_BM1_28_RUN_REV) XIC(BM1_29_PE2.POS_XITN_MEM) XIO(BM1_29_MTR.SPACE) ]RES(BM1_28_MTR.INDEX_TMR);
				N: [XIO(F_BM1_28_RUN_REV) XIO(F_BM1_29_RUN_REV) XIC(BM1_28_PE1.POS_XITN_MEM) XIO(BM1_28_MTR.SPACE) ,XIC(F_BM1_30_RUN_REV) XIC(F_BM1_29_RUN_REV) XIC(BM1_30_PE3.POS_XITN_MEM) XIO(BM1_30_MTR.SPACE) ]RES(BM1_29_MTR.INDEX_TMR);
				N: [XIO(F_BM1_29_RUN_REV) XIO(F_BM1_30_RUN_REV) XIC(BM1_29_PE1.POS_XITN_MEM) XIO(BM1_29_MTR.SPACE) ,XIC(F_BM1_30_RUN_REV) XIC(O4T_13_PE.POS_XITN_MEM) XIO(O4T_13_MTR.SPACE) ]RES(BM1_30_MTR.INDEX_TMR);
				RC: "Motor BM1_30$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_30_RUN_REV)XIC(F_BM1_29_MSD_OFF)OTE(BM1_30_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_30_MTR.E_STOP)[XIC(BM1_30_VFD.READY) XIO(BM1_30_MTR.JAMMED) ,XIC(F_BM1_30_OVRIDE) ]XIO(F_BM1_30_MSD_OFF)XIO(F_BM1_30_OUTSERV)XIO(BM1_30_MTR.COMM)OTE(BM1_30_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_C.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_30_OVRIDE) ]XIC(BM1_30_MTR.NO_FAULT)TON(BM1_30_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_30_MTR.IM_TMR.DN)[XIO(BM1_30_MTR.INTL_MTR) OTE(BM1_30_MTR.IM_ONS) ,OTE(BM1_30_MTR.INTL_MTR) ];
				N: XIC(F_BM1_30_RUN_REV)XIC(BM1_29_MTR.INDEX_EN)XIO(BM1_29_MTR.INDEX_TMR.DN)OTE(BM1_30_MTR.SYNC_RUN);
				RC: "Indexing Control$N"
				    "When Indexing is enabled and the upstream PE is blocked, turn on the index forward and leave it on until the indexing timer has expired$N"
				    "";
				N: XIC(BM1_30_MTR.INDEX_EN)[XIO(F_BM1_30_RUN_REV) XIO(F_BM1_29_RUN_REV) XIO(I_PE1_BM1_29) ,XIC(F_BM1_30_RUN_REV) XIO(I_PE_O4T_13) ,XIO(BM1_30_MTR.INDEX_TMR.DN) ]OTE(BM1_30_MTR.INDEX_FWD);
				RC: "Only run the indexing timer while the indexing belt is running";
				N: XIC(BM1_30_MTR.CONV_RUN)RTO(BM1_30_MTR.INDEX_TMR,?,?);
				RC: "Conveyor Running.";
				N: [XIO(F_BM1_30_RUN_REV) XIC(BM1_30_MTR.OFF_TMR.DN) ,XIC(F_BM1_30_RUN_REV) XIC(F_BM1_29_RUN_REV) XIC(BM1_29_MTR.ON_TMR.DN) XIC(BM1_30_MTR.OFF_TMR.DN) ,XIO(F_BM1_30_RUN_REV) XIC(BM1_30_MTR.IM_ONS) ,XIC(F_BM1_30_RUN_REV) XIC(F_BM1_29_RUN_REV) XIO(BM1_29_MTR.IM_ONS) XIC(BM1_30_MTR.IM_ONS) ,XIC(BM1_30_MTR.ANTI_CASC) XIC(F_BM1_30_RUN_REV) XIC(I_PE3_BM1_30) ,XIC(BM1_30_MTR.INDEX_EN) ,XIC(BM1_30_MTR.SYNC_RUN) ,XIC(BAL_BM1_30_FWD) ,XIC(BAL_BM1_30_REV) ]OTE(BM1_30_MTR.START_EN);
				N: [XIO(F_BM1_30_RUN_REV) XIO(I_PE1_BM1_30) ,[XIO(BM1_29_MTR.ON_TMR.DN) ,XIO(F_BM1_29_RUN_REV) ] XIC(F_BM1_30_RUN_REV) [XIO(I_PE3_BM1_30) ,XIC(BM1_30_MTR.SYNC_RUN) ] ,XIC(BAL_BM1_30_NEG_XITN_STOP) ]OTE(BM1_30_MTR.STOP);
				N: XIC(BM1_30_MTR.INTL_MTR)[[XIC(BM1_30_MTR.START_EN) ,XIC(BM1_30_MTR.CONV_RUN) ] XIO(BM1_30_MTR.STOP) ,XIC(F_BM1_30_OVRIDE) ][OTE(BM1_30_MTR.CONV_RUN) ,XIO(F_BM1_30_RUN_REV) TON(BM1_30_RUN_FWD_TMR,?,?) ,XIC(BM1_30_RUN_FWD_TMR.DN) OTE(O_C_BM1_30) ,XIC(F_BM1_30_RUN_REV) TON(BM1_30_RUN_REV_TMR,?,?) ,XIC(BM1_30_RUN_REV_TMR.DN) OTE(O_VFD_BM1_30_REV) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_30_MTR.CONV_RUN)TON(BM1_30_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_30_MTR.CONV_RUN)TON(BM1_30_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_29$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: [XIO(F_BM1_29_RUN_REV) XIC(F_BM1_30_MSD_OFF) ,XIC(F_BM1_29_RUN_REV) XIC(F_BM1_28_MSD_OFF) ]OTE(BM1_29_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_29_MTR.E_STOP)[XIC(BM1_29_VFD.READY) XIO(BM1_29_MTR.JAMMED) ,XIC(F_BM1_29_OVRIDE) ]XIO(F_BM1_29_MSD_OFF)XIO(F_BM1_29_OUTSERV)XIO(BM1_29_MTR.COMM)OTE(BM1_29_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_C.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_29_OVRIDE) ]XIC(BM1_29_MTR.NO_FAULT)TON(BM1_29_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_29_MTR.IM_TMR.DN)[XIO(BM1_29_MTR.INTL_MTR) OTE(BM1_29_MTR.IM_ONS) ,OTE(BM1_29_MTR.INTL_MTR) ];
				N: [XIO(F_BM1_29_RUN_REV) XIC(BM1_30_MTR.INDEX_EN) XIO(BM1_30_MTR.INDEX_TMR.DN) ,XIC(F_BM1_29_RUN_REV) XIC(BM1_28_MTR.INDEX_EN) XIO(BM1_28_MTR.INDEX_TMR.DN) ]OTE(BM1_29_MTR.SYNC_RUN);
				RC: "Indexing Control$N"
				    "When Indexing is enabled and the upstream PE is blocked, turn on the index forward and leave it on until the indexing timer has expired$N"
				    "";
				N: XIC(BM1_29_MTR.INDEX_EN)[XIO(F_BM1_28_RUN_REV) XIO(F_BM1_29_RUN_REV) XIO(I_PE1_BM1_28) ,XIC(F_BM1_29_RUN_REV) XIC(F_BM1_30_RUN_REV) XIO(I_PE3_BM1_30) ,XIO(BM1_29_MTR.INDEX_TMR.DN) ]OTE(BM1_29_MTR.INDEX_FWD);
				RC: "Only run the indexing timer while the indexing belt is running";
				N: XIC(BM1_29_MTR.CONV_RUN)RTO(BM1_29_MTR.INDEX_TMR,?,?);
				RC: "Conveyor Running.";
				N: [XIO(F_BM1_29_RUN_REV) XIO(F_BM1_30_RUN_REV) XIC(BM1_30_MTR.ON_TMR.DN) XIC(BM1_29_MTR.OFF_TMR.DN) ,XIC(F_BM1_29_RUN_REV) XIC(F_BM1_28_RUN_REV) XIC(BM1_28_MTR.ON_TMR.DN) XIC(BM1_29_MTR.OFF_TMR.DN) ,XIO(F_BM1_29_RUN_REV) XIO(F_BM1_30_RUN_REV) [XIO(BM1_30_MTR.IM_ONS) ,XIC(BM1_30_MTR.INDEX_EN) ] XIC(BM1_29_MTR.IM_ONS) ,XIC(F_BM1_29_RUN_REV) XIC(F_BM1_28_RUN_REV) [XIO(BM1_28_MTR.IM_ONS) ,XIC(BM1_28_MTR.INDEX_EN) ] XIC(BM1_29_MTR.IM_ONS) ,XIC(BM1_29_MTR.ANTI_CASC) [XIO(F_BM1_29_RUN_REV) XIC(I_PE1_BM1_29) ,XIC(F_BM1_29_RUN_REV) XIC(I_PE2_BM1_29) ] ,XIC(BM1_29_MTR.INDEX_EN) ,XIC(BM1_29_MTR.SYNC_RUN) ,XIC(BAL_BM1_29_FWD) ,XIC(BAL_BM1_29_REV) ]OTE(BM1_29_MTR.START_EN);
				N: [[XIO(BM1_30_MTR.ON_TMR.DN) ,XIC(F_BM1_30_RUN_REV) ] XIO(F_BM1_29_RUN_REV) [XIO(I_PE1_BM1_29) ,XIC(BM1_29_MTR.SYNC_RUN) ] ,[XIO(BM1_28_MTR.ON_TMR.DN) ,XIO(F_BM1_28_RUN_REV) ] XIC(F_BM1_29_RUN_REV) [XIO(I_PE2_BM1_29) ,XIC(BM1_29_MTR.SYNC_RUN) ] ,XIC(BAL_BM1_29_NEG_XITN_STOP) ]OTE(BM1_29_MTR.STOP);
				N: XIC(BM1_29_MTR.INTL_MTR)[[XIC(BM1_29_MTR.START_EN) ,XIC(BM1_29_MTR.CONV_RUN) ] XIO(BM1_29_MTR.STOP) ,XIC(F_BM1_29_OVRIDE) ][OTE(BM1_29_MTR.CONV_RUN) ,XIO(F_BM1_29_RUN_REV) TON(BM1_29_RUN_FWD_TMR,?,?) ,XIC(BM1_29_RUN_FWD_TMR.DN) OTE(O_C_BM1_29) ,XIC(F_BM1_29_RUN_REV) TON(BM1_29_RUN_REV_TMR,?,?) ,XIC(BM1_29_RUN_REV_TMR.DN) OTE(O_VFD_BM1_29_REV) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_29_MTR.CONV_RUN)TON(BM1_29_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_29_MTR.CONV_RUN)TON(BM1_29_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_28$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: [XIO(F_BM1_28_RUN_REV) XIC(F_BM1_29_MSD_OFF) ,XIC(F_BM1_28_RUN_REV) XIC(F_BM1_27_MSD_OFF) ]OTE(BM1_28_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_28_MTR.E_STOP)[XIC(BM1_28_VFD.READY) XIO(BM1_28_MTR.JAMMED) ,XIC(F_BM1_28_OVRIDE) ]XIO(F_BM1_28_MSD_OFF)XIO(F_BM1_28_OUTSERV)XIO(BM1_28_MTR.COMM)OTE(BM1_28_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_C.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_28_OVRIDE) ]XIC(BM1_28_MTR.NO_FAULT)TON(BM1_28_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_28_MTR.IM_TMR.DN)[XIO(BM1_28_MTR.INTL_MTR) OTE(BM1_28_MTR.IM_ONS) ,OTE(BM1_28_MTR.INTL_MTR) ];
				N: [XIO(F_BM1_28_RUN_REV) XIC(BM1_29_MTR.INDEX_EN) XIO(BM1_29_MTR.INDEX_TMR.DN) ,XIC(F_BM1_28_RUN_REV) XIC(BM1_27_MTR.INDEX_EN) XIO(BM1_27_MTR.INDEX_TMR.DN) ]OTE(BM1_28_MTR.SYNC_RUN);
				RC: "Indexing Control$N"
				    "When Indexing is enabled and the upstream PE is blocked, turn on the index forward and leave it on until the indexing timer has expired$N"
				    "";
				N: XIC(BM1_28_MTR.INDEX_EN)[XIO(F_BM1_28_RUN_REV) XIO(F_BM1_27_RUN_REV) XIO(I_PE1_BM1_27) ,XIC(F_BM1_28_RUN_REV) XIC(F_BM1_29_RUN_REV) XIO(I_PE2_BM1_29) ,XIO(BM1_28_MTR.INDEX_TMR.DN) ]OTE(BM1_28_MTR.INDEX_FWD);
				RC: "Only run the indexing timer while the indexing belt is running";
				N: XIC(BM1_28_MTR.CONV_RUN)RTO(BM1_28_MTR.INDEX_TMR,?,?);
				RC: "Conveyor Running.";
				N: [XIO(F_BM1_28_RUN_REV) XIO(F_BM1_29_RUN_REV) XIC(BM1_29_MTR.ON_TMR.DN) XIC(BM1_28_MTR.OFF_TMR.DN) ,XIC(F_BM1_28_RUN_REV) XIC(F_BM1_27_RUN_REV) XIC(BM1_27_MTR.ON_TMR.DN) XIC(BM1_28_MTR.OFF_TMR.DN) ,XIO(F_BM1_28_RUN_REV) XIO(F_BM1_29_RUN_REV) [XIO(BM1_29_MTR.IM_ONS) ,XIC(BM1_29_MTR.INDEX_EN) ] XIC(BM1_28_MTR.IM_ONS) ,XIC(F_BM1_28_RUN_REV) XIC(F_BM1_27_RUN_REV) [XIO(BM1_27_MTR.IM_ONS) ,XIC(BM1_27_MTR.INDEX_EN) ] XIC(BM1_28_MTR.IM_ONS) ,XIC(BM1_28_MTR.ANTI_CASC) [XIO(F_BM1_28_RUN_REV) XIC(I_PE1_BM1_28) ,XIC(F_BM1_28_RUN_REV) XIC(I_PE1_BM1_28) ] ,XIC(BM1_28_MTR.INDEX_EN) ,XIC(BM1_28_MTR.SYNC_RUN) ,XIC(BAL_BM1_28_FWD) ,XIC(BAL_BM1_28_REV) ]OTE(BM1_28_MTR.START_EN);
				N: [[XIO(BM1_29_MTR.ON_TMR.DN) ,XIC(F_BM1_29_RUN_REV) ] XIO(F_BM1_28_RUN_REV) [XIO(I_PE1_BM1_28) ,XIC(BM1_28_MTR.SYNC_RUN) ] ,[XIO(BM1_27_MTR.ON_TMR.DN) ,XIO(F_BM1_27_RUN_REV) ] XIC(F_BM1_28_RUN_REV) [XIO(I_PE2_BM1_28) ,XIC(BM1_28_MTR.SYNC_RUN) ] ,XIC(BAL_BM1_28_NEG_XITN_STOP) ]OTE(BM1_28_MTR.STOP);
				N: XIC(BM1_28_MTR.INTL_MTR)[[XIC(BM1_28_MTR.START_EN) ,XIC(BM1_28_MTR.CONV_RUN) ] XIO(BM1_28_MTR.STOP) ,XIC(F_BM1_28_OVRIDE) ][OTE(BM1_28_MTR.CONV_RUN) ,XIO(F_BM1_28_RUN_REV) TON(BM1_28_RUN_FWD_TMR,?,?) ,XIC(BM1_28_RUN_FWD_TMR.DN) OTE(O_C_BM1_28) ,XIC(F_BM1_28_RUN_REV) TON(BM1_28_RUN_REV_TMR,?,?) ,XIC(BM1_28_RUN_REV_TMR.DN) OTE(O_VFD_BM1_28_REV) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_28_MTR.CONV_RUN)TON(BM1_28_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_28_MTR.CONV_RUN)TON(BM1_28_MTR.OFF_TMR,?,?);
				RC: "Motor BM1_27$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIO(F_BM1_27_RUN_REV)XIC(F_BM1_28_MSD_OFF)OTE(BM1_27_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(BM1_27_MTR.E_STOP)[XIC(BM1_27_VFD.READY) XIO(BM1_27_MTR.JAMMED) ,XIC(F_BM1_27_OVRIDE) ]XIO(F_BM1_27_MSD_OFF)XIO(F_BM1_27_OUTSERV)XIO(BM1_27_MTR.COMM)OTE(BM1_27_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(BM1_C.MTR_GRP.RUN_LATCH) ,XIC(F_BM1_27_OVRIDE) ]XIC(BM1_27_MTR.NO_FAULT)TON(BM1_27_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(BM1_27_MTR.IM_TMR.DN)[XIO(BM1_27_MTR.INTL_MTR) OTE(BM1_27_MTR.IM_ONS) ,OTE(BM1_27_MTR.INTL_MTR) ];
				N: XIC(BM1_28_MTR.INDEX_EN)XIO(BM1_28_MTR.INDEX_TMR.DN)OTE(BM1_27_MTR.SYNC_RUN);
				RC: "Indexing Control$N"
				    "When Indexing is enabled and the upstream PE is blocked, turn on the index forward and leave it on until the indexing timer has expired$N"
				    "";
				N: XIC(BM1_27_MTR.INDEX_EN)[XIO(F_BM1_27_RUN_REV) XIO(I_PE_BM1_26) ,XIC(F_BM1_27_RUN_REV) XIC(F_BM1_28_RUN_REV) XIO(I_PE2_BM1_28) ,XIO(BM1_27_MTR.INDEX_TMR.DN) ]OTE(BM1_27_MTR.INDEX_FWD);
				RC: "Only run the indexing timer while the indexing belt is running";
				N: XIC(BM1_27_MTR.CONV_RUN)RTO(BM1_27_MTR.INDEX_TMR,?,?);
				RC: "Conveyor Running.";
				N: [XIO(F_BM1_27_RUN_REV) XIO(F_BM1_28_RUN_REV) XIC(BM1_28_MTR.ON_TMR.DN) XIC(BM1_27_MTR.OFF_TMR.DN) ,XIC(F_BM1_27_RUN_REV) XIC(BM1_27_MTR.OFF_TMR.DN) ,XIO(F_BM1_27_RUN_REV) XIO(F_BM1_28_RUN_REV) [XIO(BM1_28_MTR.IM_ONS) ,XIC(BM1_28_MTR.INDEX_EN) ] XIC(BM1_27_MTR.IM_ONS) ,XIC(F_BM1_27_RUN_REV) XIC(BM1_27_MTR.IM_ONS) ,XIC(BM1_27_MTR.ANTI_CASC) XIO(F_BM1_27_RUN_REV) XIC(I_PE1_BM1_27) ,XIC(BM1_27_MTR.INDEX_EN) ,XIC(BM1_27_MTR.SYNC_RUN) ,XIC(BAL_BM1_27_FWD) ,XIC(BAL_BM1_27_REV) ]OTE(BM1_27_MTR.START_EN);
				N: [[XIO(BM1_28_MTR.ON_TMR.DN) ,XIC(F_BM1_28_RUN_REV) ] XIO(F_BM1_27_RUN_REV) [XIO(I_PE1_BM1_27) ,XIC(BM1_27_MTR.SYNC_RUN) ] ,XIC(F_BM1_27_RUN_REV) XIO(I_PE2_BM1_27) ,XIC(BAL_BM1_27_NEG_XITN_STOP) ]OTE(BM1_27_MTR.STOP);
				N: XIC(BM1_27_MTR.INTL_MTR)[[XIC(BM1_27_MTR.START_EN) ,XIC(BM1_27_MTR.CONV_RUN) ] XIO(BM1_27_MTR.STOP) ,XIC(F_BM1_27_OVRIDE) ][OTE(BM1_27_MTR.CONV_RUN) ,XIO(F_BM1_27_RUN_REV) TON(BM1_27_RUN_FWD_TMR,?,?) ,XIC(BM1_27_RUN_FWD_TMR.DN) OTE(O_C_BM1_27) ,XIC(F_BM1_27_RUN_REV) TON(BM1_27_RUN_REV_TMR,?,?) ,XIC(BM1_27_RUN_REV_TMR.DN) OTE(O_VFD_BM1_27_REV) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(BM1_27_MTR.CONV_RUN)TON(BM1_27_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(BM1_27_MTR.CONV_RUN)TON(BM1_27_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE BM1_C_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(BM1_27_MTR.COMM)[[XIO(I_PE2_BM1_27) ,XIC(BM1_27_PE2.TOF.DN) ] TON(BM1_27_PE2.TON,?,?) ,XIO(I_PE2_BM1_27) XIC(BM1_27_PE2.TON.DN) TOF(BM1_27_PE2.TOF,?,?) ,XIC(BM1_27_PE2.TOF.DN) OTE(BM1_27_PE2.FILT) ];
				N: XIC(BM1_27_PE2.FILT)[XIO(BM1_27_PE2.FILT_POS_XITN_MEM) OTE(BM1_27_PE2.FILT_POS_XITN) ,OTE(BM1_27_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_27_PE2.FILT)[XIO(BM1_27_PE2.FILT_NEG_XITN_MEM) OTE(BM1_27_PE2.FILT_NEG_XITN) ,OTE(BM1_27_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_27_MTR.COMM)[[XIO(I_PE1_BM1_27) ,XIC(BM1_27_PE1.TOF.DN) ] TON(BM1_27_PE1.TON,?,?) ,XIO(I_PE1_BM1_27) XIC(BM1_27_PE1.TON.DN) TOF(BM1_27_PE1.TOF,?,?) ,XIC(BM1_27_PE1.TOF.DN) OTE(BM1_27_PE1.FILT) ];
				N: XIC(BM1_27_PE1.FILT)[XIO(BM1_27_PE1.FILT_POS_XITN_MEM) OTE(BM1_27_PE1.FILT_POS_XITN) ,OTE(BM1_27_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_27_PE1.FILT)[XIO(BM1_27_PE1.FILT_NEG_XITN_MEM) OTE(BM1_27_PE1.FILT_NEG_XITN) ,OTE(BM1_27_PE1.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_28_MTR.COMM)[[XIO(I_PE2_BM1_28) ,XIC(BM1_28_PE2.TOF.DN) ] TON(BM1_28_PE2.TON,?,?) ,XIO(I_PE2_BM1_28) XIC(BM1_28_PE2.TON.DN) TOF(BM1_28_PE2.TOF,?,?) ,XIC(BM1_28_PE2.TOF.DN) OTE(BM1_28_PE2.FILT) ];
				N: XIC(BM1_28_PE2.FILT)[XIO(BM1_28_PE2.FILT_POS_XITN_MEM) OTE(BM1_28_PE2.FILT_POS_XITN) ,OTE(BM1_28_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_28_PE2.FILT)[XIO(BM1_28_PE2.FILT_NEG_XITN_MEM) OTE(BM1_28_PE2.FILT_NEG_XITN) ,OTE(BM1_28_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_28_MTR.COMM)[[XIO(I_PE1_BM1_28) ,XIC(BM1_28_PE1.TOF.DN) ] TON(BM1_28_PE1.TON,?,?) ,XIO(I_PE1_BM1_28) XIC(BM1_28_PE1.TON.DN) TOF(BM1_28_PE1.TOF,?,?) ,XIC(BM1_28_PE1.TOF.DN) OTE(BM1_28_PE1.FILT) ];
				N: XIC(BM1_28_PE1.FILT)[XIO(BM1_28_PE1.FILT_POS_XITN_MEM) OTE(BM1_28_PE1.FILT_POS_XITN) ,OTE(BM1_28_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_28_PE1.FILT)[XIO(BM1_28_PE1.FILT_NEG_XITN_MEM) OTE(BM1_28_PE1.FILT_NEG_XITN) ,OTE(BM1_28_PE1.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_29_MTR.COMM)[[XIO(I_PE2_BM1_29) ,XIC(BM1_29_PE2.TOF.DN) ] TON(BM1_29_PE2.TON,?,?) ,XIO(I_PE2_BM1_29) XIC(BM1_29_PE2.TON.DN) TOF(BM1_29_PE2.TOF,?,?) ,XIC(BM1_29_PE2.TOF.DN) OTE(BM1_29_PE2.FILT) ];
				N: XIC(BM1_29_PE2.FILT)[XIO(BM1_29_PE2.FILT_POS_XITN_MEM) OTE(BM1_29_PE2.FILT_POS_XITN) ,OTE(BM1_29_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_29_PE2.FILT)[XIO(BM1_29_PE2.FILT_NEG_XITN_MEM) OTE(BM1_29_PE2.FILT_NEG_XITN) ,OTE(BM1_29_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_29_MTR.COMM)[[XIO(I_PE1_BM1_29) ,XIC(BM1_29_PE1.TOF.DN) ] TON(BM1_29_PE1.TON,?,?) ,XIO(I_PE1_BM1_29) XIC(BM1_29_PE1.TON.DN) TOF(BM1_29_PE1.TOF,?,?) ,XIC(BM1_29_PE1.TOF.DN) OTE(BM1_29_PE1.FILT) ];
				N: XIC(BM1_29_PE1.FILT)[XIO(BM1_29_PE1.FILT_POS_XITN_MEM) OTE(BM1_29_PE1.FILT_POS_XITN) ,OTE(BM1_29_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_29_PE1.FILT)[XIO(BM1_29_PE1.FILT_NEG_XITN_MEM) OTE(BM1_29_PE1.FILT_NEG_XITN) ,OTE(BM1_29_PE1.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_30_MTR.COMM)[[XIO(I_PE3_BM1_30) ,XIC(BM1_30_PE3.TOF.DN) ] TON(BM1_30_PE3.TON,?,?) ,XIO(I_PE3_BM1_30) XIC(BM1_30_PE3.TON.DN) TOF(BM1_30_PE3.TOF,?,?) ,XIC(BM1_30_PE3.TOF.DN) OTE(BM1_30_PE3.FILT) ];
				N: XIC(BM1_30_PE3.FILT)[XIO(BM1_30_PE3.FILT_POS_XITN_MEM) OTE(BM1_30_PE3.FILT_POS_XITN) ,OTE(BM1_30_PE3.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_30_PE3.FILT)[XIO(BM1_30_PE3.FILT_NEG_XITN_MEM) OTE(BM1_30_PE3.FILT_NEG_XITN) ,OTE(BM1_30_PE3.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_30_MTR.COMM)[[XIO(I_PE2_BM1_30) ,XIC(BM1_30_PE2.TOF.DN) ] TON(BM1_30_PE2.TON,?,?) ,XIO(I_PE2_BM1_30) XIC(BM1_30_PE2.TON.DN) TOF(BM1_30_PE2.TOF,?,?) ,XIC(BM1_30_PE2.TOF.DN) OTE(BM1_30_PE2.FILT) ];
				N: XIC(BM1_30_PE2.FILT)[XIO(BM1_30_PE2.FILT_POS_XITN_MEM) OTE(BM1_30_PE2.FILT_POS_XITN) ,OTE(BM1_30_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_30_PE2.FILT)[XIO(BM1_30_PE2.FILT_NEG_XITN_MEM) OTE(BM1_30_PE2.FILT_NEG_XITN) ,OTE(BM1_30_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(BM1_30_MTR.COMM)[[XIO(I_PE1_BM1_30) ,XIC(BM1_30_PE1.TOF.DN) ] TON(BM1_30_PE1.TON,?,?) ,XIO(I_PE1_BM1_30) XIC(BM1_30_PE1.TON.DN) TOF(BM1_30_PE1.TOF,?,?) ,XIC(BM1_30_PE1.TOF.DN) OTE(BM1_30_PE1.FILT) ];
				N: XIC(BM1_30_PE1.FILT)[XIO(BM1_30_PE1.FILT_POS_XITN_MEM) OTE(BM1_30_PE1.FILT_POS_XITN) ,OTE(BM1_30_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(BM1_30_PE1.FILT)[XIO(BM1_30_PE1.FILT_NEG_XITN_MEM) OTE(BM1_30_PE1.FILT_NEG_XITN) ,OTE(BM1_30_PE1.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE BM1_C_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_30_MTR.COMM);
				N: [XIC(O_C_BM1_30) ,XIC(O_VFD_BM1_30_REV) ]XIC(BM1_30_MTR.CONV_RUN)OTE(BM1_30_MTR.RUNNING);
				N: XIO(I_CS3_BM1_30_FWD)OTE(F_BM1_30_RUN_REV);
				N: XIC(I_CS3_BM1_30_FWD)OTE(F_BM1_30_RUN_FWD);
				N: XIC(BM1_30_VFD.FAULTED)[XIO(F_BM1_30_VFD_FAULT) OTE(BM1_30_VFD.FAULT_ONS) ,OTE(F_BM1_30_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_30_MOL);
				N: XIO(I_MSD_BM1_30)XIO(BM1_30_MTR.COMM)[XIO(F_BM1_30_MSD_OFF) OTE(BM1_30_MTR.MSD_ONS) ,OTE(F_BM1_30_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_BM1_30_CTCTR_FAULT) OTE(BM1_30_MTR.MS_FLT_ONS) ,OTE(F_BM1_30_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_30_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_30_MTR.E_STOP_RES);
				N: XIC(BM1_C.STATUS.FIRE_ALM)OTE(BM1_30_MTR.FIRE_ALM);
				N: XIO(BM1_30_MTR.CONV_RUN)XIC(BM1_30_MTR.INTL_MTR)XIO(BM1_30_MTR.INDEX_EN)OTE(BM1_30_MTR.CASC);
				N: XIO(BM1_C.MTR_GRP.RUN_LATCH)OTE(BM1_30_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_30_OVRIDE_REQ)[XIO(F_BM1_30_OVRIDE) OTE(BM1_30_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_30_OVRIDE) ];
				N: XIC(HMI_BM1_30_OUTSERV_REQ)[XIO(F_BM1_30_OUTSERV) OTE(BM1_30_MTR.OOS_ONS) ,OTE(F_BM1_30_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_30_MTR.MB_JAMMED);
				N: [XIC(F_BM1_29_PE1_JAMMED) ,XIC(F_BM1_30_PE1_JAMMED) ,XIC(F_BM1_30_PE3_JAMMED) ,XIC(BM1_30_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_30_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_29_MTR.COMM);
				N: [XIC(O_C_BM1_29) ,XIC(O_VFD_BM1_29_REV) ]XIC(BM1_29_MTR.CONV_RUN)OTE(BM1_29_MTR.RUNNING);
				N: XIO(I_CS2_BM1_29_FWD)OTE(F_BM1_29_RUN_REV);
				N: XIC(I_CS2_BM1_29_FWD)OTE(F_BM1_29_RUN_FWD);
				N: XIC(BM1_29_VFD.FAULTED)[XIO(F_BM1_29_VFD_FAULT) OTE(BM1_29_VFD.FAULT_ONS) ,OTE(F_BM1_29_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_29_MOL);
				N: XIO(I_MSD_BM1_29)XIO(BM1_29_MTR.COMM)[XIO(F_BM1_29_MSD_OFF) OTE(BM1_29_MTR.MSD_ONS) ,OTE(F_BM1_29_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_BM1_29_CTCTR_FAULT) OTE(BM1_29_MTR.MS_FLT_ONS) ,OTE(F_BM1_29_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_29_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_29_MTR.E_STOP_RES);
				N: XIC(BM1_C.STATUS.FIRE_ALM)OTE(BM1_29_MTR.FIRE_ALM);
				N: XIO(BM1_29_MTR.CONV_RUN)XIC(BM1_29_MTR.INTL_MTR)XIO(BM1_29_MTR.INDEX_EN)OTE(BM1_29_MTR.CASC);
				N: XIO(BM1_C.MTR_GRP.RUN_LATCH)OTE(BM1_29_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_29_OVRIDE_REQ)[XIO(F_BM1_29_OVRIDE) OTE(BM1_29_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_29_OVRIDE) ];
				N: XIC(HMI_BM1_29_OUTSERV_REQ)[XIO(F_BM1_29_OUTSERV) OTE(BM1_29_MTR.OOS_ONS) ,OTE(F_BM1_29_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_29_MTR.MB_JAMMED);
				N: [XIC(F_BM1_28_PE1_JAMMED) ,XIC(F_BM1_29_PE1_JAMMED) ,XIC(F_BM1_29_PE2_JAMMED) ,XIC(BM1_29_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_29_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_28_MTR.COMM);
				N: [XIC(O_C_BM1_28) ,XIC(O_VFD_BM1_28_REV) ]XIC(BM1_28_MTR.CONV_RUN)OTE(BM1_28_MTR.RUNNING);
				N: XIO(I_CS4_BM1_28_FWD)OTE(F_BM1_28_RUN_REV);
				N: XIC(I_CS4_BM1_28_FWD)OTE(F_BM1_28_RUN_FWD);
				N: XIC(BM1_28_VFD.FAULTED)[XIO(F_BM1_28_VFD_FAULT) OTE(BM1_28_VFD.FAULT_ONS) ,OTE(F_BM1_28_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_28_MOL);
				N: XIO(I_MSD_BM1_28)XIO(BM1_28_MTR.COMM)[XIO(F_BM1_28_MSD_OFF) OTE(BM1_28_MTR.MSD_ONS) ,OTE(F_BM1_28_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_BM1_28_CTCTR_FAULT) OTE(BM1_28_MTR.MS_FLT_ONS) ,OTE(F_BM1_28_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_28_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_28_MTR.E_STOP_RES);
				N: XIC(BM1_C.STATUS.FIRE_ALM)OTE(BM1_28_MTR.FIRE_ALM);
				N: XIO(BM1_28_MTR.CONV_RUN)XIC(BM1_28_MTR.INTL_MTR)XIO(BM1_28_MTR.INDEX_EN)OTE(BM1_28_MTR.CASC);
				N: XIO(BM1_C.MTR_GRP.RUN_LATCH)OTE(BM1_28_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_28_OVRIDE_REQ)[XIO(F_BM1_28_OVRIDE) OTE(BM1_28_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_28_OVRIDE) ];
				N: XIC(HMI_BM1_28_OUTSERV_REQ)[XIO(F_BM1_28_OUTSERV) OTE(BM1_28_MTR.OOS_ONS) ,OTE(F_BM1_28_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_28_MTR.MB_JAMMED);
				N: [XIC(F_BM1_27_PE1_JAMMED) ,XIC(F_BM1_28_PE1_JAMMED) ,XIC(F_BM1_28_PE2_JAMMED) ,XIC(BM1_28_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_28_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(BM1_27_MTR.COMM);
				N: [XIC(O_C_BM1_27) ,XIC(O_VFD_BM1_27_REV) ]XIC(BM1_27_MTR.CONV_RUN)OTE(BM1_27_MTR.RUNNING);
				N: XIO(I_CS5_BM1_27_FWD)OTE(F_BM1_27_RUN_REV);
				N: XIC(I_CS5_BM1_27_FWD)OTE(F_BM1_27_RUN_FWD);
				N: XIC(BM1_27_VFD.FAULTED)[XIO(F_BM1_27_VFD_FAULT) OTE(BM1_27_VFD.FAULT_ONS) ,OTE(F_BM1_27_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_BM1_27_MOL);
				N: XIO(I_MSD_BM1_27)XIO(BM1_27_MTR.COMM)[XIO(F_BM1_27_MSD_OFF) OTE(BM1_27_MTR.MSD_ONS) ,OTE(F_BM1_27_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_BM1_27_CTCTR_FAULT) OTE(BM1_27_MTR.MS_FLT_ONS) ,OTE(F_BM1_27_CTCTR_FAULT) ];
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(BM1_27_MTR.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(BM1_27_MTR.E_STOP_RES);
				N: XIC(BM1_C.STATUS.FIRE_ALM)OTE(BM1_27_MTR.FIRE_ALM);
				N: XIO(BM1_27_MTR.CONV_RUN)XIC(BM1_27_MTR.INTL_MTR)XIO(BM1_27_MTR.INDEX_EN)OTE(BM1_27_MTR.CASC);
				N: XIO(BM1_C.MTR_GRP.RUN_LATCH)OTE(BM1_27_MTR.AUTO_STOP);
				N: XIC(HMI_BM1_27_OVRIDE_REQ)[XIO(F_BM1_27_OVRIDE) OTE(BM1_27_MTR.HMI_OVERRIDE_ONS) ,OTE(F_BM1_27_OVRIDE) ];
				N: XIC(HMI_BM1_27_OUTSERV_REQ)[XIO(F_BM1_27_OUTSERV) OTE(BM1_27_MTR.OOS_ONS) ,OTE(F_BM1_27_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(BM1_27_MTR.MB_JAMMED);
				N: [XIC(F_BM1_26_PE_JAMMED) ,XIC(F_BM1_27_PE1_JAMMED) ,XIC(F_BM1_27_PE2_JAMMED) ,XIC(BM1_27_MTR.MB_JAMMED) ,AFI() ]OTE(BM1_27_MTR.JAMMED);
		END_ROUTINE

		ROUTINE BM1_C_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor BM1_30 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(BM1_30_MTR.COMM)XIO(BM1_30_MTR.E_STOP)XIO(F_BM1_30_MSD_OFF)TON(BM1_30_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(BM1_30_VFD.POWERED_DLY_TMR.DN)[XIO(I_C_BM1_30) OTE(BM1_30_VFD.FAULTED) ,XIO(BM1_30_VFD.FAULTED) OTE(BM1_30_VFD.READY) ];
				RC: "Motor BM1_29 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(BM1_29_MTR.COMM)XIO(BM1_29_MTR.E_STOP)XIO(F_BM1_29_MSD_OFF)TON(BM1_29_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(BM1_29_VFD.POWERED_DLY_TMR.DN)[XIO(I_C_BM1_29) OTE(BM1_29_VFD.FAULTED) ,XIO(BM1_29_VFD.FAULTED) OTE(BM1_29_VFD.READY) ];
				RC: "Motor BM1_28 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(BM1_28_MTR.COMM)XIO(BM1_28_MTR.E_STOP)XIO(F_BM1_28_MSD_OFF)TON(BM1_28_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(BM1_28_VFD.POWERED_DLY_TMR.DN)[XIO(I_C_BM1_28) OTE(BM1_28_VFD.FAULTED) ,XIO(BM1_28_VFD.FAULTED) OTE(BM1_28_VFD.READY) ];
				RC: "Motor BM1_27 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(BM1_27_MTR.COMM)XIO(BM1_27_MTR.E_STOP)XIO(F_BM1_27_MSD_OFF)TON(BM1_27_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(BM1_27_VFD.POWERED_DLY_TMR.DN)[XIO(I_C_BM1_27) OTE(BM1_27_VFD.FAULTED) ,XIO(BM1_27_VFD.FAULTED) OTE(BM1_27_VFD.READY) ];
		END_ROUTINE

		ROUTINE BT_BM1_12_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_12_MTR.CONV_RUN)XIC(BM1_12_BT.INT_PULSE)XIO(BM1_12_BT.RAMP_CNT_DN)ADD(BM1_12_BT.RAMP_CNT,1,BM1_12_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_12_MTR.CONV_RUN)[GEQ(BM1_12_BT.RAMP_CNT,BM1_12_BTx.RAMP_UP_SET) ,XIC(BM1_12_BT.RAMP_CNT_DN) ][XIO(BM1_12_BT.RAMP_CNT_DN) MOV(BM1_12_BTx.RAMP_DN_SET,BM1_12_BT.RAMP_CNT) ,OTE(BM1_12_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_12_MTR.CONV_RUN)XIC(BM1_12_BT.INT_PULSE)XIC(BM1_12_BT.MOVING)SUB(BM1_12_BT.RAMP_CNT,1,BM1_12_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_12_BT.RAMP_CNT,0)OTE(BM1_12_BT.MOVING);
				N: XIC(BM1_12_MTR.CONV_RUN)[XIO(BM1_12_BT.RUN) [OTE(BM1_12_BT.RUN_ONS) ,ADD(CST[0],BM1_12_BT.TIMELEFT,BM1_12_BT.SIM_PULSE_TIME) ] ,OTE(BM1_12_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_12_MTR.CONV_RUN)XIO(BM1_12_BT.LU_ONS)[XIO(BM1_12_BT.RUN_ONS) XIO(BM1_12_BT.STRT_MEM) ADD(CST[0],BM1_12_BTx.PULSE_PERIOD,BM1_12_BT.SIM_PULSE_TIME) ,OTE(BM1_12_BT.STRT_MEM) ,TON(BM1_12_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_12_MTR.CONV_RUN)[XIO(BM1_12_BT.NORUN) SUB(BM1_12_BT.SIM_PULSE_TIME,CST[0],BM1_12_BT.TIMELEFT) ,OTE(BM1_12_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_12_BT.SIM_PULSE_TIME.31)[XIO(BM1_12_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_12_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_12_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_12_MTR.CONV_RUN) ,XIC(BM1_12_BT.MOVING) ][XIC(BM1_12_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_12_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_12_BT.LU_ONS)OTE(BM1_12_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_12_BT.SIM_PULSE_TIME) XIO(BM1_12_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_12_BT.SIM_PULSE_TIME.31) ][OTE(BM1_12_BT.INT_PULSE) ,ADD(BM1_12_BT.SIM_PULSE_TIME,BM1_12_BTx.PULSE_PERIOD,BM1_12_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_12_MTR.CONV_RUN) XIC(BM1_12_BT.RAMP_CNT_DN) ,XIO(BM1_12_MTR.CONV_RUN) XIC(BM1_12_BT.MOVING) ]XIC(BM1_12_BT.INT_PULSE)OTE(BM1_12_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_12_BT.BT_PULSE)ADD(BM1_12_BT.ACCUM,1,BM1_12_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_12_BT.ACCUM,BM1_12_BT.CAPT) ,MOV(0,BM1_12_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_12_BT.RAMP_UP_TMR.DN)XIO(BM1_12_BT.FAULT_TIMER.DN)XIO(BM1_12_BT.BT_PULSE)TON(BM1_12_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_12_MTR.CONV_RUN) ,XIC(BM1_12_BT.MOVING) ][XIO(BM1_12_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_12_BT.SIM_PULSE_TIME,BM1_12_BT.PULSE_TIME_DIF) ABS(BM1_12_BT.PULSE_TIME_DIF,BM1_12_BT.PULSE_TIME_DIF) GRT(BM1_12_BT.PULSE_TIME_DIF,BM1_12_BTx.PULSE_PERIOD) ,XIC(BM1_12_BT.FAULT_TIMER.DN) ][XIO(BM1_12_BT.LU_DET) OTE(BM1_12_BT.LU_ONS) ,OTE(BM1_12_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_12_BT.LU_ONS)ADD(BM1_12_BT.LU_COUNTER,1,BM1_12_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_12_PE.POS_XITN)CLR(BM1_12_BT.CFG_CNT);
				N: XIO(I_PE_BM1_12)[XIO(BM1_12_BT.CFG_RAMP_UP) XIC(BM1_12_BT.BT_PULSE) ,XIC(BM1_12_BT.CFG_RAMP_UP) XIC(BM1_12_BT.INT_PULSE) XIC(BM1_12_MTR.CONV_RUN) ]ADD(BM1_12_BT.CFG_CNT,1,BM1_12_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_BM1_13_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_13_MTR.CONV_RUN)XIC(BM1_13_BT.INT_PULSE)XIO(BM1_13_BT.RAMP_CNT_DN)ADD(BM1_13_BT.RAMP_CNT,1,BM1_13_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_13_MTR.CONV_RUN)[GEQ(BM1_13_BT.RAMP_CNT,BM1_13_BTx.RAMP_UP_SET) ,XIC(BM1_13_BT.RAMP_CNT_DN) ][XIO(BM1_13_BT.RAMP_CNT_DN) MOV(BM1_13_BTx.RAMP_DN_SET,BM1_13_BT.RAMP_CNT) ,OTE(BM1_13_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_13_MTR.CONV_RUN)XIC(BM1_13_BT.INT_PULSE)XIC(BM1_13_BT.MOVING)SUB(BM1_13_BT.RAMP_CNT,1,BM1_13_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_13_BT.RAMP_CNT,0)OTE(BM1_13_BT.MOVING);
				N: XIC(BM1_13_MTR.CONV_RUN)[XIO(BM1_13_BT.RUN) [OTE(BM1_13_BT.RUN_ONS) ,ADD(CST[0],BM1_13_BT.TIMELEFT,BM1_13_BT.SIM_PULSE_TIME) ] ,OTE(BM1_13_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_13_MTR.CONV_RUN)XIO(BM1_13_BT.LU_ONS)[XIO(BM1_13_BT.RUN_ONS) XIO(BM1_13_BT.STRT_MEM) ADD(CST[0],BM1_13_BTx.PULSE_PERIOD,BM1_13_BT.SIM_PULSE_TIME) ,OTE(BM1_13_BT.STRT_MEM) ,TON(BM1_13_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_13_MTR.CONV_RUN)[XIO(BM1_13_BT.NORUN) SUB(BM1_13_BT.SIM_PULSE_TIME,CST[0],BM1_13_BT.TIMELEFT) ,OTE(BM1_13_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_13_BT.SIM_PULSE_TIME.31)[XIO(BM1_13_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_13_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_13_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_13_MTR.CONV_RUN) ,XIC(BM1_13_BT.MOVING) ][XIC(BM1_13_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_13_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_13_BT.LU_ONS)OTE(BM1_13_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_13_BT.SIM_PULSE_TIME) XIO(BM1_13_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_13_BT.SIM_PULSE_TIME.31) ][OTE(BM1_13_BT.INT_PULSE) ,ADD(BM1_13_BT.SIM_PULSE_TIME,BM1_13_BTx.PULSE_PERIOD,BM1_13_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_13_MTR.CONV_RUN) XIC(BM1_13_BT.RAMP_CNT_DN) ,XIO(BM1_13_MTR.CONV_RUN) XIC(BM1_13_BT.MOVING) ]XIC(BM1_13_BT.INT_PULSE)OTE(BM1_13_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_13_BT.BT_PULSE)ADD(BM1_13_BT.ACCUM,1,BM1_13_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_13_BT.ACCUM,BM1_13_BT.CAPT) ,MOV(0,BM1_13_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_13_BT.RAMP_UP_TMR.DN)XIO(BM1_13_BT.FAULT_TIMER.DN)XIO(BM1_13_BT.BT_PULSE)TON(BM1_13_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_13_MTR.CONV_RUN) ,XIC(BM1_13_BT.MOVING) ][XIO(BM1_13_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_13_BT.SIM_PULSE_TIME,BM1_13_BT.PULSE_TIME_DIF) ABS(BM1_13_BT.PULSE_TIME_DIF,BM1_13_BT.PULSE_TIME_DIF) GRT(BM1_13_BT.PULSE_TIME_DIF,BM1_13_BTx.PULSE_PERIOD) ,XIC(BM1_13_BT.FAULT_TIMER.DN) ][XIO(BM1_13_BT.LU_DET) OTE(BM1_13_BT.LU_ONS) ,OTE(BM1_13_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_13_BT.LU_ONS)ADD(BM1_13_BT.LU_COUNTER,1,BM1_13_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_13_PE.POS_XITN)CLR(BM1_13_BT.CFG_CNT);
				N: XIO(I_PE_BM1_13)[XIO(BM1_13_BT.CFG_RAMP_UP) XIC(BM1_13_BT.BT_PULSE) ,XIC(BM1_13_BT.CFG_RAMP_UP) XIC(BM1_13_BT.INT_PULSE) XIC(BM1_13_MTR.CONV_RUN) ]ADD(BM1_13_BT.CFG_CNT,1,BM1_13_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_BM1_14_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_14_MTR.CONV_RUN)XIC(BM1_14_BT.INT_PULSE)XIO(BM1_14_BT.RAMP_CNT_DN)ADD(BM1_14_BT.RAMP_CNT,1,BM1_14_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_14_MTR.CONV_RUN)[GEQ(BM1_14_BT.RAMP_CNT,BM1_14_BTx.RAMP_UP_SET) ,XIC(BM1_14_BT.RAMP_CNT_DN) ][XIO(BM1_14_BT.RAMP_CNT_DN) MOV(BM1_14_BTx.RAMP_DN_SET,BM1_14_BT.RAMP_CNT) ,OTE(BM1_14_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_14_MTR.CONV_RUN)XIC(BM1_14_BT.INT_PULSE)XIC(BM1_14_BT.MOVING)SUB(BM1_14_BT.RAMP_CNT,1,BM1_14_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_14_BT.RAMP_CNT,0)OTE(BM1_14_BT.MOVING);
				N: XIC(BM1_14_MTR.CONV_RUN)[XIO(BM1_14_BT.RUN) [OTE(BM1_14_BT.RUN_ONS) ,ADD(CST[0],BM1_14_BT.TIMELEFT,BM1_14_BT.SIM_PULSE_TIME) ] ,OTE(BM1_14_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_14_MTR.CONV_RUN)XIO(BM1_14_BT.LU_ONS)[XIO(BM1_14_BT.RUN_ONS) XIO(BM1_14_BT.STRT_MEM) ADD(CST[0],BM1_14_BTx.PULSE_PERIOD,BM1_14_BT.SIM_PULSE_TIME) ,OTE(BM1_14_BT.STRT_MEM) ,TON(BM1_14_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_14_MTR.CONV_RUN)[XIO(BM1_14_BT.NORUN) SUB(BM1_14_BT.SIM_PULSE_TIME,CST[0],BM1_14_BT.TIMELEFT) ,OTE(BM1_14_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_14_BT.SIM_PULSE_TIME.31)[XIO(BM1_14_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_14_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_14_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_14_MTR.CONV_RUN) ,XIC(BM1_14_BT.MOVING) ][XIC(BM1_14_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_14_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_14_BT.LU_ONS)OTE(BM1_14_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_14_BT.SIM_PULSE_TIME) XIO(BM1_14_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_14_BT.SIM_PULSE_TIME.31) ][OTE(BM1_14_BT.INT_PULSE) ,ADD(BM1_14_BT.SIM_PULSE_TIME,BM1_14_BTx.PULSE_PERIOD,BM1_14_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_14_MTR.CONV_RUN) XIC(BM1_14_BT.RAMP_CNT_DN) ,XIO(BM1_14_MTR.CONV_RUN) XIC(BM1_14_BT.MOVING) ]XIC(BM1_14_BT.INT_PULSE)OTE(BM1_14_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_14_BT.BT_PULSE)ADD(BM1_14_BT.ACCUM,1,BM1_14_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_14_BT.ACCUM,BM1_14_BT.CAPT) ,MOV(0,BM1_14_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_14_BT.RAMP_UP_TMR.DN)XIO(BM1_14_BT.FAULT_TIMER.DN)XIO(BM1_14_BT.BT_PULSE)TON(BM1_14_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_14_MTR.CONV_RUN) ,XIC(BM1_14_BT.MOVING) ][XIO(BM1_14_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_14_BT.SIM_PULSE_TIME,BM1_14_BT.PULSE_TIME_DIF) ABS(BM1_14_BT.PULSE_TIME_DIF,BM1_14_BT.PULSE_TIME_DIF) GRT(BM1_14_BT.PULSE_TIME_DIF,BM1_14_BTx.PULSE_PERIOD) ,XIC(BM1_14_BT.FAULT_TIMER.DN) ][XIO(BM1_14_BT.LU_DET) OTE(BM1_14_BT.LU_ONS) ,OTE(BM1_14_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_14_BT.LU_ONS)ADD(BM1_14_BT.LU_COUNTER,1,BM1_14_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_14_PE1.POS_XITN)CLR(BM1_14_BT.CFG_CNT);
				N: XIO(I_PE1_BM1_14)[XIO(BM1_14_BT.CFG_RAMP_UP) XIC(BM1_14_BT.BT_PULSE) ,XIC(BM1_14_BT.CFG_RAMP_UP) XIC(BM1_14_BT.INT_PULSE) XIC(BM1_14_MTR.CONV_RUN) ]ADD(BM1_14_BT.CFG_CNT,1,BM1_14_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_BM1_22_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_22_MTR.CONV_RUN)XIC(BM1_22_BT.INT_PULSE)XIO(BM1_22_BT.RAMP_CNT_DN)ADD(BM1_22_BT.RAMP_CNT,1,BM1_22_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_22_MTR.CONV_RUN)[GEQ(BM1_22_BT.RAMP_CNT,BM1_22_BTx.RAMP_UP_SET) ,XIC(BM1_22_BT.RAMP_CNT_DN) ][XIO(BM1_22_BT.RAMP_CNT_DN) MOV(BM1_22_BTx.RAMP_DN_SET,BM1_22_BT.RAMP_CNT) ,OTE(BM1_22_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_22_MTR.CONV_RUN)XIC(BM1_22_BT.INT_PULSE)XIC(BM1_22_BT.MOVING)SUB(BM1_22_BT.RAMP_CNT,1,BM1_22_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_22_BT.RAMP_CNT,0)OTE(BM1_22_BT.MOVING);
				N: XIC(BM1_22_MTR.CONV_RUN)[XIO(BM1_22_BT.RUN) [OTE(BM1_22_BT.RUN_ONS) ,ADD(CST[0],BM1_22_BT.TIMELEFT,BM1_22_BT.SIM_PULSE_TIME) ] ,OTE(BM1_22_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_22_MTR.CONV_RUN)XIO(BM1_22_BT.LU_ONS)[XIO(BM1_22_BT.RUN_ONS) XIO(BM1_22_BT.STRT_MEM) ADD(CST[0],BM1_22_BTx.PULSE_PERIOD,BM1_22_BT.SIM_PULSE_TIME) ,OTE(BM1_22_BT.STRT_MEM) ,TON(BM1_22_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_22_MTR.CONV_RUN)[XIO(BM1_22_BT.NORUN) SUB(BM1_22_BT.SIM_PULSE_TIME,CST[0],BM1_22_BT.TIMELEFT) ,OTE(BM1_22_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_22_BT.SIM_PULSE_TIME.31)[XIO(BM1_22_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_22_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_22_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_22_MTR.CONV_RUN) ,XIC(BM1_22_BT.MOVING) ][XIC(BM1_22_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_22_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_22_BT.LU_ONS)OTE(BM1_22_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_22_BT.SIM_PULSE_TIME) XIO(BM1_22_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_22_BT.SIM_PULSE_TIME.31) ][OTE(BM1_22_BT.INT_PULSE) ,ADD(BM1_22_BT.SIM_PULSE_TIME,BM1_22_BTx.PULSE_PERIOD,BM1_22_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_22_MTR.CONV_RUN) XIC(BM1_22_BT.RAMP_CNT_DN) ,XIO(BM1_22_MTR.CONV_RUN) XIC(BM1_22_BT.MOVING) ]XIC(BM1_22_BT.INT_PULSE)OTE(BM1_22_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_22_BT.BT_PULSE)ADD(BM1_22_BT.ACCUM,1,BM1_22_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_22_BT.ACCUM,BM1_22_BT.CAPT) ,MOV(0,BM1_22_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_22_BT.RAMP_UP_TMR.DN)XIO(BM1_22_BT.FAULT_TIMER.DN)XIO(BM1_22_BT.BT_PULSE)TON(BM1_22_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_22_MTR.CONV_RUN) ,XIC(BM1_22_BT.MOVING) ][XIO(BM1_22_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_22_BT.SIM_PULSE_TIME,BM1_22_BT.PULSE_TIME_DIF) ABS(BM1_22_BT.PULSE_TIME_DIF,BM1_22_BT.PULSE_TIME_DIF) GRT(BM1_22_BT.PULSE_TIME_DIF,BM1_22_BTx.PULSE_PERIOD) ,XIC(BM1_22_BT.FAULT_TIMER.DN) ][XIO(BM1_22_BT.LU_DET) OTE(BM1_22_BT.LU_ONS) ,OTE(BM1_22_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_22_BT.LU_ONS)ADD(BM1_22_BT.LU_COUNTER,1,BM1_22_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_22_PE.POS_XITN)CLR(BM1_22_BT.CFG_CNT);
				N: XIO(I_PE_BM1_22)[XIO(BM1_22_BT.CFG_RAMP_UP) XIC(BM1_22_BT.BT_PULSE) ,XIC(BM1_22_BT.CFG_RAMP_UP) XIC(BM1_22_BT.INT_PULSE) XIC(BM1_22_MTR.CONV_RUN) ]ADD(BM1_22_BT.CFG_CNT,1,BM1_22_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_BM1_23_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_23_MTR.CONV_RUN)XIC(BM1_23_BT.INT_PULSE)XIO(BM1_23_BT.RAMP_CNT_DN)ADD(BM1_23_BT.RAMP_CNT,1,BM1_23_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_23_MTR.CONV_RUN)[GEQ(BM1_23_BT.RAMP_CNT,BM1_23_BTx.RAMP_UP_SET) ,XIC(BM1_23_BT.RAMP_CNT_DN) ][XIO(BM1_23_BT.RAMP_CNT_DN) MOV(BM1_23_BTx.RAMP_DN_SET,BM1_23_BT.RAMP_CNT) ,OTE(BM1_23_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_23_MTR.CONV_RUN)XIC(BM1_23_BT.INT_PULSE)XIC(BM1_23_BT.MOVING)SUB(BM1_23_BT.RAMP_CNT,1,BM1_23_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_23_BT.RAMP_CNT,0)OTE(BM1_23_BT.MOVING);
				N: XIC(BM1_23_MTR.CONV_RUN)[XIO(BM1_23_BT.RUN) [OTE(BM1_23_BT.RUN_ONS) ,ADD(CST[0],BM1_23_BT.TIMELEFT,BM1_23_BT.SIM_PULSE_TIME) ] ,OTE(BM1_23_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_23_MTR.CONV_RUN)XIO(BM1_23_BT.LU_ONS)[XIO(BM1_23_BT.RUN_ONS) XIO(BM1_23_BT.STRT_MEM) ADD(CST[0],BM1_23_BTx.PULSE_PERIOD,BM1_23_BT.SIM_PULSE_TIME) ,OTE(BM1_23_BT.STRT_MEM) ,TON(BM1_23_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_23_MTR.CONV_RUN)[XIO(BM1_23_BT.NORUN) SUB(BM1_23_BT.SIM_PULSE_TIME,CST[0],BM1_23_BT.TIMELEFT) ,OTE(BM1_23_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_23_BT.SIM_PULSE_TIME.31)[XIO(BM1_23_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_23_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_23_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_23_MTR.CONV_RUN) ,XIC(BM1_23_BT.MOVING) ][XIC(BM1_23_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_23_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_23_BT.LU_ONS)OTE(BM1_23_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_23_BT.SIM_PULSE_TIME) XIO(BM1_23_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_23_BT.SIM_PULSE_TIME.31) ][OTE(BM1_23_BT.INT_PULSE) ,ADD(BM1_23_BT.SIM_PULSE_TIME,BM1_23_BTx.PULSE_PERIOD,BM1_23_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_23_MTR.CONV_RUN) XIC(BM1_23_BT.RAMP_CNT_DN) ,XIO(BM1_23_MTR.CONV_RUN) XIC(BM1_23_BT.MOVING) ]XIC(BM1_23_BT.INT_PULSE)OTE(BM1_23_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_23_BT.BT_PULSE)ADD(BM1_23_BT.ACCUM,1,BM1_23_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_23_BT.ACCUM,BM1_23_BT.CAPT) ,MOV(0,BM1_23_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_23_BT.RAMP_UP_TMR.DN)XIO(BM1_23_BT.FAULT_TIMER.DN)XIO(BM1_23_BT.BT_PULSE)TON(BM1_23_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_23_MTR.CONV_RUN) ,XIC(BM1_23_BT.MOVING) ][XIO(BM1_23_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_23_BT.SIM_PULSE_TIME,BM1_23_BT.PULSE_TIME_DIF) ABS(BM1_23_BT.PULSE_TIME_DIF,BM1_23_BT.PULSE_TIME_DIF) GRT(BM1_23_BT.PULSE_TIME_DIF,BM1_23_BTx.PULSE_PERIOD) ,XIC(BM1_23_BT.FAULT_TIMER.DN) ][XIO(BM1_23_BT.LU_DET) OTE(BM1_23_BT.LU_ONS) ,OTE(BM1_23_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_23_BT.LU_ONS)ADD(BM1_23_BT.LU_COUNTER,1,BM1_23_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_23_PE.POS_XITN)CLR(BM1_23_BT.CFG_CNT);
				N: XIO(I_PE_BM1_23)[XIO(BM1_23_BT.CFG_RAMP_UP) XIC(BM1_23_BT.BT_PULSE) ,XIC(BM1_23_BT.CFG_RAMP_UP) XIC(BM1_23_BT.INT_PULSE) XIC(BM1_23_MTR.CONV_RUN) ]ADD(BM1_23_BT.CFG_CNT,1,BM1_23_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_BM1_38_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(BM1_38_MTR.CONV_RUN)XIC(BM1_38_BT.INT_PULSE)XIO(BM1_38_BT.RAMP_CNT_DN)ADD(BM1_38_BT.RAMP_CNT,1,BM1_38_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(BM1_38_MTR.CONV_RUN)[GEQ(BM1_38_BT.RAMP_CNT,BM1_38_BTx.RAMP_UP_SET) ,XIC(BM1_38_BT.RAMP_CNT_DN) ][XIO(BM1_38_BT.RAMP_CNT_DN) MOV(BM1_38_BTx.RAMP_DN_SET,BM1_38_BT.RAMP_CNT) ,OTE(BM1_38_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(BM1_38_MTR.CONV_RUN)XIC(BM1_38_BT.INT_PULSE)XIC(BM1_38_BT.MOVING)SUB(BM1_38_BT.RAMP_CNT,1,BM1_38_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(BM1_38_BT.RAMP_CNT,0)OTE(BM1_38_BT.MOVING);
				N: XIC(BM1_38_MTR.CONV_RUN)[XIO(BM1_38_BT.RUN) [OTE(BM1_38_BT.RUN_ONS) ,ADD(CST[0],BM1_38_BT.TIMELEFT,BM1_38_BT.SIM_PULSE_TIME) ] ,OTE(BM1_38_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(BM1_38_MTR.CONV_RUN)XIO(BM1_38_BT.LU_ONS)[XIO(BM1_38_BT.RUN_ONS) XIO(BM1_38_BT.STRT_MEM) ADD(CST[0],BM1_38_BTx.PULSE_PERIOD,BM1_38_BT.SIM_PULSE_TIME) ,OTE(BM1_38_BT.STRT_MEM) ,TON(BM1_38_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(BM1_38_MTR.CONV_RUN)[XIO(BM1_38_BT.NORUN) SUB(BM1_38_BT.SIM_PULSE_TIME,CST[0],BM1_38_BT.TIMELEFT) ,OTE(BM1_38_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(BM1_38_BT.SIM_PULSE_TIME.31)[XIO(BM1_38_BT.SIM_PULSE_TIME_NEG_MEM) OTE(BM1_38_BT.SIM_PULSE_TIME_NEG) ,OTE(BM1_38_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(BM1_38_MTR.CONV_RUN) ,XIC(BM1_38_BT.MOVING) ][XIC(BM1_38_BT.SIM_PULSE_TIME_NEG) ,XIC(BM1_38_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(BM1_38_BT.LU_ONS)OTE(BM1_38_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],BM1_38_BT.SIM_PULSE_TIME) XIO(BM1_38_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(BM1_38_BT.SIM_PULSE_TIME.31) ][OTE(BM1_38_BT.INT_PULSE) ,ADD(BM1_38_BT.SIM_PULSE_TIME,BM1_38_BTx.PULSE_PERIOD,BM1_38_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(BM1_38_MTR.CONV_RUN) XIC(BM1_38_BT.RAMP_CNT_DN) ,XIO(BM1_38_MTR.CONV_RUN) XIC(BM1_38_BT.MOVING) ]XIC(BM1_38_BT.INT_PULSE)OTE(BM1_38_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(BM1_38_BT.BT_PULSE)ADD(BM1_38_BT.ACCUM,1,BM1_38_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(BM1_38_BT.ACCUM,BM1_38_BT.CAPT) ,MOV(0,BM1_38_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(BM1_38_BT.RAMP_UP_TMR.DN)XIO(BM1_38_BT.FAULT_TIMER.DN)XIO(BM1_38_BT.BT_PULSE)TON(BM1_38_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(BM1_38_MTR.CONV_RUN) ,XIC(BM1_38_BT.MOVING) ][XIO(BM1_38_BT.SIM_PULSE_ROLL) SUB(CST[0],BM1_38_BT.SIM_PULSE_TIME,BM1_38_BT.PULSE_TIME_DIF) ABS(BM1_38_BT.PULSE_TIME_DIF,BM1_38_BT.PULSE_TIME_DIF) GRT(BM1_38_BT.PULSE_TIME_DIF,BM1_38_BTx.PULSE_PERIOD) ,XIC(BM1_38_BT.FAULT_TIMER.DN) ][XIO(BM1_38_BT.LU_DET) OTE(BM1_38_BT.LU_ONS) ,OTE(BM1_38_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(BM1_38_BT.LU_ONS)ADD(BM1_38_BT.LU_COUNTER,1,BM1_38_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(BM1_38_PE.POS_XITN)CLR(BM1_38_BT.CFG_CNT);
				N: XIO(I_PE_BM1_38)[XIO(BM1_38_BT.CFG_RAMP_UP) XIC(BM1_38_BT.BT_PULSE) ,XIC(BM1_38_BT.CFG_RAMP_UP) XIC(BM1_38_BT.INT_PULSE) XIC(BM1_38_MTR.CONV_RUN) ]ADD(BM1_38_BT.CFG_CNT,1,BM1_38_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_C2T_16_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(C2T_16_MTR.CONV_RUN)XIC(C2T_16_BT.INT_PULSE)XIO(C2T_16_BT.RAMP_CNT_DN)ADD(C2T_16_BT.RAMP_CNT,1,C2T_16_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(C2T_16_MTR.CONV_RUN)[GEQ(C2T_16_BT.RAMP_CNT,C2T_16_BTx.RAMP_UP_SET) ,XIC(C2T_16_BT.RAMP_CNT_DN) ][XIO(C2T_16_BT.RAMP_CNT_DN) MOV(C2T_16_BTx.RAMP_DN_SET,C2T_16_BT.RAMP_CNT) ,OTE(C2T_16_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(C2T_16_MTR.CONV_RUN)XIC(C2T_16_BT.INT_PULSE)XIC(C2T_16_BT.MOVING)SUB(C2T_16_BT.RAMP_CNT,1,C2T_16_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(C2T_16_BT.RAMP_CNT,0)OTE(C2T_16_BT.MOVING);
				N: XIC(C2T_16_MTR.CONV_RUN)[XIO(C2T_16_BT.RUN) [OTE(C2T_16_BT.RUN_ONS) ,ADD(CST[0],C2T_16_BT.TIMELEFT,C2T_16_BT.SIM_PULSE_TIME) ] ,OTE(C2T_16_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(C2T_16_MTR.CONV_RUN)XIO(C2T_16_BT.LU_ONS)[XIO(C2T_16_BT.RUN_ONS) XIO(C2T_16_BT.STRT_MEM) ADD(CST[0],C2T_16_BTx.PULSE_PERIOD,C2T_16_BT.SIM_PULSE_TIME) ,OTE(C2T_16_BT.STRT_MEM) ,TON(C2T_16_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(C2T_16_MTR.CONV_RUN)[XIO(C2T_16_BT.NORUN) SUB(C2T_16_BT.SIM_PULSE_TIME,CST[0],C2T_16_BT.TIMELEFT) ,OTE(C2T_16_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(C2T_16_BT.SIM_PULSE_TIME.31)[XIO(C2T_16_BT.SIM_PULSE_TIME_NEG_MEM) OTE(C2T_16_BT.SIM_PULSE_TIME_NEG) ,OTE(C2T_16_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(C2T_16_MTR.CONV_RUN) ,XIC(C2T_16_BT.MOVING) ][XIC(C2T_16_BT.SIM_PULSE_TIME_NEG) ,XIC(C2T_16_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(C2T_16_BT.LU_ONS)OTE(C2T_16_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],C2T_16_BT.SIM_PULSE_TIME) XIO(C2T_16_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(C2T_16_BT.SIM_PULSE_TIME.31) ][OTE(C2T_16_BT.INT_PULSE) ,ADD(C2T_16_BT.SIM_PULSE_TIME,C2T_16_BTx.PULSE_PERIOD,C2T_16_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(C2T_16_MTR.CONV_RUN) XIC(C2T_16_BT.RAMP_CNT_DN) ,XIO(C2T_16_MTR.CONV_RUN) XIC(C2T_16_BT.MOVING) ]XIC(C2T_16_BT.INT_PULSE)OTE(C2T_16_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(C2T_16_BT.BT_PULSE)ADD(C2T_16_BT.ACCUM,1,C2T_16_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(C2T_16_BT.ACCUM,C2T_16_BT.CAPT) ,MOV(0,C2T_16_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(C2T_16_BT.RAMP_UP_TMR.DN)XIO(C2T_16_BT.FAULT_TIMER.DN)XIO(C2T_16_BT.BT_PULSE)TON(C2T_16_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(C2T_16_MTR.CONV_RUN) ,XIC(C2T_16_BT.MOVING) ][XIO(C2T_16_BT.SIM_PULSE_ROLL) SUB(CST[0],C2T_16_BT.SIM_PULSE_TIME,C2T_16_BT.PULSE_TIME_DIF) ABS(C2T_16_BT.PULSE_TIME_DIF,C2T_16_BT.PULSE_TIME_DIF) GRT(C2T_16_BT.PULSE_TIME_DIF,C2T_16_BTx.PULSE_PERIOD) ,XIC(C2T_16_BT.FAULT_TIMER.DN) ][XIO(C2T_16_BT.LU_DET) OTE(C2T_16_BT.LU_ONS) ,OTE(C2T_16_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(C2T_16_BT.LU_ONS)ADD(C2T_16_BT.LU_COUNTER,1,C2T_16_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(C2T_16_PE.POS_XITN)CLR(C2T_16_BT.CFG_CNT);
				N: XIO(I_PE_C2T_16)[XIO(C2T_16_BT.CFG_RAMP_UP) XIC(C2T_16_BT.BT_PULSE) ,XIC(C2T_16_BT.CFG_RAMP_UP) XIC(C2T_16_BT.INT_PULSE) XIC(C2T_16_MTR.CONV_RUN) ]ADD(C2T_16_BT.CFG_CNT,1,C2T_16_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_C2T_17_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(C2T_17_MTR.CONV_RUN)XIC(C2T_17_BT.INT_PULSE)XIO(C2T_17_BT.RAMP_CNT_DN)ADD(C2T_17_BT.RAMP_CNT,1,C2T_17_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(C2T_17_MTR.CONV_RUN)[GEQ(C2T_17_BT.RAMP_CNT,C2T_17_BTx.RAMP_UP_SET) ,XIC(C2T_17_BT.RAMP_CNT_DN) ][XIO(C2T_17_BT.RAMP_CNT_DN) MOV(C2T_17_BTx.RAMP_DN_SET,C2T_17_BT.RAMP_CNT) ,OTE(C2T_17_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(C2T_17_MTR.CONV_RUN)XIC(C2T_17_BT.INT_PULSE)XIC(C2T_17_BT.MOVING)SUB(C2T_17_BT.RAMP_CNT,1,C2T_17_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(C2T_17_BT.RAMP_CNT,0)OTE(C2T_17_BT.MOVING);
				N: XIC(C2T_17_MTR.CONV_RUN)[XIO(C2T_17_BT.RUN) [OTE(C2T_17_BT.RUN_ONS) ,ADD(CST[0],C2T_17_BT.TIMELEFT,C2T_17_BT.SIM_PULSE_TIME) ] ,OTE(C2T_17_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(C2T_17_MTR.CONV_RUN)XIO(C2T_17_BT.LU_ONS)[XIO(C2T_17_BT.RUN_ONS) XIO(C2T_17_BT.STRT_MEM) ADD(CST[0],C2T_17_BTx.PULSE_PERIOD,C2T_17_BT.SIM_PULSE_TIME) ,OTE(C2T_17_BT.STRT_MEM) ,TON(C2T_17_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(C2T_17_MTR.CONV_RUN)[XIO(C2T_17_BT.NORUN) SUB(C2T_17_BT.SIM_PULSE_TIME,CST[0],C2T_17_BT.TIMELEFT) ,OTE(C2T_17_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(C2T_17_BT.SIM_PULSE_TIME.31)[XIO(C2T_17_BT.SIM_PULSE_TIME_NEG_MEM) OTE(C2T_17_BT.SIM_PULSE_TIME_NEG) ,OTE(C2T_17_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(C2T_17_MTR.CONV_RUN) ,XIC(C2T_17_BT.MOVING) ][XIC(C2T_17_BT.SIM_PULSE_TIME_NEG) ,XIC(C2T_17_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(C2T_17_BT.LU_ONS)OTE(C2T_17_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],C2T_17_BT.SIM_PULSE_TIME) XIO(C2T_17_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(C2T_17_BT.SIM_PULSE_TIME.31) ][OTE(C2T_17_BT.INT_PULSE) ,ADD(C2T_17_BT.SIM_PULSE_TIME,C2T_17_BTx.PULSE_PERIOD,C2T_17_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(C2T_17_MTR.CONV_RUN) XIC(C2T_17_BT.RAMP_CNT_DN) ,XIO(C2T_17_MTR.CONV_RUN) XIC(C2T_17_BT.MOVING) ]XIC(C2T_17_BT.INT_PULSE)OTE(C2T_17_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(C2T_17_BT.BT_PULSE)ADD(C2T_17_BT.ACCUM,1,C2T_17_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(C2T_17_BT.ACCUM,C2T_17_BT.CAPT) ,MOV(0,C2T_17_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(C2T_17_BT.RAMP_UP_TMR.DN)XIO(C2T_17_BT.FAULT_TIMER.DN)XIO(C2T_17_BT.BT_PULSE)TON(C2T_17_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(C2T_17_MTR.CONV_RUN) ,XIC(C2T_17_BT.MOVING) ][XIO(C2T_17_BT.SIM_PULSE_ROLL) SUB(CST[0],C2T_17_BT.SIM_PULSE_TIME,C2T_17_BT.PULSE_TIME_DIF) ABS(C2T_17_BT.PULSE_TIME_DIF,C2T_17_BT.PULSE_TIME_DIF) GRT(C2T_17_BT.PULSE_TIME_DIF,C2T_17_BTx.PULSE_PERIOD) ,XIC(C2T_17_BT.FAULT_TIMER.DN) ][XIO(C2T_17_BT.LU_DET) OTE(C2T_17_BT.LU_ONS) ,OTE(C2T_17_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(C2T_17_BT.LU_ONS)ADD(C2T_17_BT.LU_COUNTER,1,C2T_17_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(C2T_17_PE.POS_XITN)CLR(C2T_17_BT.CFG_CNT);
				N: XIO(I_PE_C2T_17)[XIO(C2T_17_BT.CFG_RAMP_UP) XIC(C2T_17_BT.BT_PULSE) ,XIC(C2T_17_BT.CFG_RAMP_UP) XIC(C2T_17_BT.INT_PULSE) XIC(C2T_17_MTR.CONV_RUN) ]ADD(C2T_17_BT.CFG_CNT,1,C2T_17_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_C4_09_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(I_INT_C4_09_RUN)XIC(C4_09_BT.INT_PULSE)XIO(C4_09_BT.RAMP_CNT_DN)ADD(C4_09_BT.RAMP_CNT,1,C4_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(I_INT_C4_09_RUN)[GEQ(C4_09_BT.RAMP_CNT,C4_09_BTx.RAMP_UP_SET) ,XIC(C4_09_BT.RAMP_CNT_DN) ][XIO(C4_09_BT.RAMP_CNT_DN) MOV(C4_09_BTx.RAMP_DN_SET,C4_09_BT.RAMP_CNT) ,OTE(C4_09_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(I_INT_C4_09_RUN)XIC(C4_09_BT.INT_PULSE)XIC(C4_09_BT.MOVING)SUB(C4_09_BT.RAMP_CNT,1,C4_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(C4_09_BT.RAMP_CNT,0)OTE(C4_09_BT.MOVING);
				N: XIC(I_INT_C4_09_RUN)[XIO(C4_09_BT.RUN) [OTE(C4_09_BT.RUN_ONS) ,ADD(CST[0],C4_09_BT.TIMELEFT,C4_09_BT.SIM_PULSE_TIME) ] ,OTE(C4_09_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(I_INT_C4_09_RUN)XIO(C4_09_BT.LU_ONS)[XIO(C4_09_BT.RUN_ONS) XIO(C4_09_BT.STRT_MEM) ADD(CST[0],C4_09_BTx.PULSE_PERIOD,C4_09_BT.SIM_PULSE_TIME) ,OTE(C4_09_BT.STRT_MEM) ,TON(C4_09_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(I_INT_C4_09_RUN)[XIO(C4_09_BT.NORUN) SUB(C4_09_BT.SIM_PULSE_TIME,CST[0],C4_09_BT.TIMELEFT) ,OTE(C4_09_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(C4_09_BT.SIM_PULSE_TIME.31)[XIO(C4_09_BT.SIM_PULSE_TIME_NEG_MEM) OTE(C4_09_BT.SIM_PULSE_TIME_NEG) ,OTE(C4_09_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(I_INT_C4_09_RUN) ,XIC(C4_09_BT.MOVING) ][XIC(C4_09_BT.SIM_PULSE_TIME_NEG) ,XIC(C4_09_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(C4_09_BT.LU_ONS)OTE(C4_09_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],C4_09_BT.SIM_PULSE_TIME) XIO(C4_09_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(C4_09_BT.SIM_PULSE_TIME.31) ][OTE(C4_09_BT.INT_PULSE) ,ADD(C4_09_BT.SIM_PULSE_TIME,C4_09_BTx.PULSE_PERIOD,C4_09_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(I_INT_C4_09_RUN) XIC(C4_09_BT.RAMP_CNT_DN) ,XIO(I_INT_C4_09_RUN) XIC(C4_09_BT.MOVING) ]XIC(C4_09_BT.INT_PULSE)OTE(C4_09_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(C4_09_BT.BT_PULSE)ADD(C4_09_BT.ACCUM,1,C4_09_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(C4_09_BT.ACCUM,C4_09_BT.CAPT) ,MOV(0,C4_09_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(C4_09_BT.RAMP_UP_TMR.DN)XIO(C4_09_BT.FAULT_TIMER.DN)XIO(C4_09_BT.BT_PULSE)TON(C4_09_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(I_INT_C4_09_RUN) ,XIC(C4_09_BT.MOVING) ][XIO(C4_09_BT.SIM_PULSE_ROLL) SUB(CST[0],C4_09_BT.SIM_PULSE_TIME,C4_09_BT.PULSE_TIME_DIF) ABS(C4_09_BT.PULSE_TIME_DIF,C4_09_BT.PULSE_TIME_DIF) GRT(C4_09_BT.PULSE_TIME_DIF,C4_09_BTx.PULSE_PERIOD) ,XIC(C4_09_BT.FAULT_TIMER.DN) ][XIO(C4_09_BT.LU_DET) OTE(C4_09_BT.LU_ONS) ,OTE(C4_09_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(C4_09_BT.LU_ONS)ADD(C4_09_BT.LU_COUNTER,1,C4_09_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(zzC4_09_PE_POS_XITN)CLR(C4_09_BT.CFG_CNT);
				N: XIO(zzI_PE_C4_09)[XIO(C4_09_BT.CFG_RAMP_UP) XIC(C4_09_BT.BT_PULSE) ,XIC(C4_09_BT.CFG_RAMP_UP) XIC(C4_09_BT.INT_PULSE) XIC(I_INT_C4_09_RUN) ]ADD(C4_09_BT.CFG_CNT,1,C4_09_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_CL12T_35_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(CL12T_35_MTR.CONV_RUN)XIC(CL12T_35_BTP.INT_PULSE)XIO(CL12T_35_BTP.RAMP_CNT_DN)ADD(CL12T_35_BTP.RAMP_CNT,1,CL12T_35_BTP.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(CL12T_35_MTR.CONV_RUN)[GEQ(CL12T_35_BTP.RAMP_CNT,CL12T_35_BTx.RAMP_UP_SET) ,XIC(CL12T_35_BTP.RAMP_CNT_DN) ][XIO(CL12T_35_BTP.RAMP_CNT_DN) MOV(CL12T_35_BTx.RAMP_DN_SET,CL12T_35_BTP.RAMP_CNT) ,OTE(CL12T_35_BTP.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(CL12T_35_MTR.CONV_RUN)XIC(CL12T_35_BTP.INT_PULSE)XIC(CL12T_35_BTP.MOVING)SUB(CL12T_35_BTP.RAMP_CNT,1,CL12T_35_BTP.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(CL12T_35_BTP.RAMP_CNT,0)OTE(CL12T_35_BTP.MOVING);
				N: XIC(CL12T_35_MTR.CONV_RUN)[XIO(CL12T_35_BTP.RUN) [OTE(CL12T_35_BTP.RUN_ONS) ,ADD(CST[0],CL12T_35_BTP.TIMELEFT,CL12T_35_BTP.SIM_PULSE_TIME) ] ,OTE(CL12T_35_BTP.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(CL12T_35_MTR.CONV_RUN)XIO(CL12T_35_BTP.LU_ONS)[XIO(CL12T_35_BTP.RUN_ONS) XIO(CL12T_35_BTP.STRT_MEM) ADD(CST[0],CL12T_35_BTx.PULSE_PERIOD,CL12T_35_BTP.SIM_PULSE_TIME) ,OTE(CL12T_35_BTP.STRT_MEM) ,TON(CL12T_35_BTP.RAMP_UP_TMR,?,?) ];
				N: XIO(CL12T_35_MTR.CONV_RUN)[XIO(CL12T_35_BTP.NORUN) SUB(CL12T_35_BTP.SIM_PULSE_TIME,CST[0],CL12T_35_BTP.TIMELEFT) ,OTE(CL12T_35_BTP.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(CL12T_35_BTP.SIM_PULSE_TIME.31)[XIO(CL12T_35_BTP.SIM_PULSE_TIME_NEG_MEM) OTE(CL12T_35_BTP.SIM_PULSE_TIME_NEG) ,OTE(CL12T_35_BTP.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(CL12T_35_MTR.CONV_RUN) ,XIC(CL12T_35_BTP.MOVING) ][XIC(CL12T_35_BTP.SIM_PULSE_TIME_NEG) ,XIC(CL12T_35_BTP.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(CL12T_35_BTP.LU_ONS)OTE(CL12T_35_BTP.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],CL12T_35_BTP.SIM_PULSE_TIME) XIO(CL12T_35_BTP.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(CL12T_35_BTP.SIM_PULSE_TIME.31) ][OTE(CL12T_35_BTP.INT_PULSE) ,ADD(CL12T_35_BTP.SIM_PULSE_TIME,CL12T_35_BTx.PULSE_PERIOD,CL12T_35_BTP.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(CL12T_35_MTR.CONV_RUN) XIC(CL12T_35_BTP.RAMP_CNT_DN) ,XIO(CL12T_35_MTR.CONV_RUN) XIC(CL12T_35_BTP.MOVING) ]XIC(CL12T_35_BTP.INT_PULSE)OTE(CL12T_35_BTP.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(CL12T_35_BTP.BT_PULSE)ADD(CL12T_35_BTP.ACCUM,1,CL12T_35_BTP.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(CL12T_35_BTP.ACCUM,CL12T_35_BTP.CAPT) ,MOV(0,CL12T_35_BTP.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(CL12T_35_BTP.RAMP_UP_TMR.DN)XIO(CL12T_35_BTP.FAULT_TIMER.DN)XIO(CL12T_35_BTP.BT_PULSE)TON(CL12T_35_BTP.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(CL12T_35_MTR.CONV_RUN) ,XIC(CL12T_35_BTP.MOVING) ][XIO(CL12T_35_BTP.SIM_PULSE_ROLL) SUB(CST[0],CL12T_35_BTP.SIM_PULSE_TIME,CL12T_35_BTP.PULSE_TIME_DIF) ABS(CL12T_35_BTP.PULSE_TIME_DIF,CL12T_35_BTP.PULSE_TIME_DIF) GRT(CL12T_35_BTP.PULSE_TIME_DIF,CL12T_35_BTx.PULSE_PERIOD) ,XIC(CL12T_35_BTP.FAULT_TIMER.DN) ][XIO(CL12T_35_BTP.LU_DET) OTE(CL12T_35_BTP.LU_ONS) ,OTE(CL12T_35_BTP.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(CL12T_35_BTP.LU_ONS)ADD(CL12T_35_BTP.LU_COUNTER,1,CL12T_35_BTP.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(CL12T_35_PE.POS_XITN)CLR(CL12T_35_BTP.CFG_CNT);
				N: XIO(I_PE_CL12T_35)[XIO(CL12T_35_BTP.CFG_RAMP_UP) XIC(CL12T_35_BTP.BT_PULSE) ,XIC(CL12T_35_BTP.CFG_RAMP_UP) XIC(CL12T_35_BTP.INT_PULSE) XIC(CL12T_35_MTR.CONV_RUN) ]ADD(CL12T_35_BTP.CFG_CNT,1,CL12T_35_BTP.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_CL12T_36_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(CL12T_36_MTR.CONV_RUN)XIC(CL12T_36_BT.INT_PULSE)XIO(CL12T_36_BT.RAMP_CNT_DN)ADD(CL12T_36_BT.RAMP_CNT,1,CL12T_36_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(CL12T_36_MTR.CONV_RUN)[GEQ(CL12T_36_BT.RAMP_CNT,CL12T_36_BTx.RAMP_UP_SET) ,XIC(CL12T_36_BT.RAMP_CNT_DN) ][XIO(CL12T_36_BT.RAMP_CNT_DN) MOV(CL12T_36_BTx.RAMP_DN_SET,CL12T_36_BT.RAMP_CNT) ,OTE(CL12T_36_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(CL12T_36_MTR.CONV_RUN)XIC(CL12T_36_BT.INT_PULSE)XIC(CL12T_36_BT.MOVING)SUB(CL12T_36_BT.RAMP_CNT,1,CL12T_36_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(CL12T_36_BT.RAMP_CNT,0)OTE(CL12T_36_BT.MOVING);
				N: XIC(CL12T_36_MTR.CONV_RUN)[XIO(CL12T_36_BT.RUN) [OTE(CL12T_36_BT.RUN_ONS) ,ADD(CST[0],CL12T_36_BT.TIMELEFT,CL12T_36_BT.SIM_PULSE_TIME) ] ,OTE(CL12T_36_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(CL12T_36_MTR.CONV_RUN)XIO(CL12T_36_BT.LU_ONS)[XIO(CL12T_36_BT.RUN_ONS) XIO(CL12T_36_BT.STRT_MEM) ADD(CST[0],CL12T_36_BTx.PULSE_PERIOD,CL12T_36_BT.SIM_PULSE_TIME) ,OTE(CL12T_36_BT.STRT_MEM) ,TON(CL12T_36_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(CL12T_36_MTR.CONV_RUN)[XIO(CL12T_36_BT.NORUN) SUB(CL12T_36_BT.SIM_PULSE_TIME,CST[0],CL12T_36_BT.TIMELEFT) ,OTE(CL12T_36_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(CL12T_36_BT.SIM_PULSE_TIME.31)[XIO(CL12T_36_BT.SIM_PULSE_TIME_NEG_MEM) OTE(CL12T_36_BT.SIM_PULSE_TIME_NEG) ,OTE(CL12T_36_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(CL12T_36_MTR.CONV_RUN) ,XIC(CL12T_36_BT.MOVING) ][XIC(CL12T_36_BT.SIM_PULSE_TIME_NEG) ,XIC(CL12T_36_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(CL12T_36_BT.LU_ONS)OTE(CL12T_36_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],CL12T_36_BT.SIM_PULSE_TIME) XIO(CL12T_36_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(CL12T_36_BT.SIM_PULSE_TIME.31) ][OTE(CL12T_36_BT.INT_PULSE) ,ADD(CL12T_36_BT.SIM_PULSE_TIME,CL12T_36_BTx.PULSE_PERIOD,CL12T_36_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(CL12T_36_MTR.CONV_RUN) XIC(CL12T_36_BT.RAMP_CNT_DN) ,XIO(CL12T_36_MTR.CONV_RUN) XIC(CL12T_36_BT.MOVING) ]XIC(CL12T_36_BT.INT_PULSE)OTE(CL12T_36_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(CL12T_36_BT.BT_PULSE)ADD(CL12T_36_BT.ACCUM,1,CL12T_36_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(CL12T_36_BT.ACCUM,CL12T_36_BT.CAPT) ,MOV(0,CL12T_36_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(CL12T_36_BT.RAMP_UP_TMR.DN)XIO(CL12T_36_BT.FAULT_TIMER.DN)XIO(CL12T_36_BT.BT_PULSE)TON(CL12T_36_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(CL12T_36_MTR.CONV_RUN) ,XIC(CL12T_36_BT.MOVING) ][XIO(CL12T_36_BT.SIM_PULSE_ROLL) SUB(CST[0],CL12T_36_BT.SIM_PULSE_TIME,CL12T_36_BT.PULSE_TIME_DIF) ABS(CL12T_36_BT.PULSE_TIME_DIF,CL12T_36_BT.PULSE_TIME_DIF) GRT(CL12T_36_BT.PULSE_TIME_DIF,CL12T_36_BTx.PULSE_PERIOD) ,XIC(CL12T_36_BT.FAULT_TIMER.DN) ][XIO(CL12T_36_BT.LU_DET) OTE(CL12T_36_BT.LU_ONS) ,OTE(CL12T_36_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(CL12T_36_BT.LU_ONS)ADD(CL12T_36_BT.LU_COUNTER,1,CL12T_36_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(CL12T_36_PE.POS_XITN)CLR(CL12T_36_BT.CFG_CNT);
				N: XIO(I_PE_CL12T_36)[XIO(CL12T_36_BT.CFG_RAMP_UP) XIC(CL12T_36_BT.BT_PULSE) ,XIC(CL12T_36_BT.CFG_RAMP_UP) XIC(CL12T_36_BT.INT_PULSE) XIC(CL12T_36_MTR.CONV_RUN) ]ADD(CL12T_36_BT.CFG_CNT,1,CL12T_36_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_CL1T_26_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(CL1T_26_MTR.CONV_RUN)XIC(CL1T_26_BT.INT_PULSE)XIO(CL1T_26_BT.RAMP_CNT_DN)ADD(CL1T_26_BT.RAMP_CNT,1,CL1T_26_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(CL1T_26_MTR.CONV_RUN)[GEQ(CL1T_26_BT.RAMP_CNT,CL1T_26_BTx.RAMP_UP_SET) ,XIC(CL1T_26_BT.RAMP_CNT_DN) ][XIO(CL1T_26_BT.RAMP_CNT_DN) MOV(CL1T_26_BTx.RAMP_DN_SET,CL1T_26_BT.RAMP_CNT) ,OTE(CL1T_26_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(CL1T_26_MTR.CONV_RUN)XIC(CL1T_26_BT.INT_PULSE)XIC(CL1T_26_BT.MOVING)SUB(CL1T_26_BT.RAMP_CNT,1,CL1T_26_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(CL1T_26_BT.RAMP_CNT,0)OTE(CL1T_26_BT.MOVING);
				N: XIC(CL1T_26_MTR.CONV_RUN)[XIO(CL1T_26_BT.RUN) [OTE(CL1T_26_BT.RUN_ONS) ,ADD(CST[0],CL1T_26_BT.TIMELEFT,CL1T_26_BT.SIM_PULSE_TIME) ] ,OTE(CL1T_26_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(CL1T_26_MTR.CONV_RUN)XIO(CL1T_26_BT.LU_ONS)[XIO(CL1T_26_BT.RUN_ONS) XIO(CL1T_26_BT.STRT_MEM) ADD(CST[0],CL1T_26_BTx.PULSE_PERIOD,CL1T_26_BT.SIM_PULSE_TIME) ,OTE(CL1T_26_BT.STRT_MEM) ,TON(CL1T_26_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(CL1T_26_MTR.CONV_RUN)[XIO(CL1T_26_BT.NORUN) SUB(CL1T_26_BT.SIM_PULSE_TIME,CST[0],CL1T_26_BT.TIMELEFT) ,OTE(CL1T_26_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(CL1T_26_BT.SIM_PULSE_TIME.31)[XIO(CL1T_26_BT.SIM_PULSE_TIME_NEG_MEM) OTE(CL1T_26_BT.SIM_PULSE_TIME_NEG) ,OTE(CL1T_26_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(CL1T_26_MTR.CONV_RUN) ,XIC(CL1T_26_BT.MOVING) ][XIC(CL1T_26_BT.SIM_PULSE_TIME_NEG) ,XIC(CL1T_26_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(CL1T_26_BT.LU_ONS)OTE(CL1T_26_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],CL1T_26_BT.SIM_PULSE_TIME) XIO(CL1T_26_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(CL1T_26_BT.SIM_PULSE_TIME.31) ][OTE(CL1T_26_BT.INT_PULSE) ,ADD(CL1T_26_BT.SIM_PULSE_TIME,CL1T_26_BTx.PULSE_PERIOD,CL1T_26_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(CL1T_26_MTR.CONV_RUN) XIC(CL1T_26_BT.RAMP_CNT_DN) ,XIO(CL1T_26_MTR.CONV_RUN) XIC(CL1T_26_BT.MOVING) ]XIC(CL1T_26_BT.INT_PULSE)OTE(CL1T_26_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(CL1T_26_BT.BT_PULSE)ADD(CL1T_26_BT.ACCUM,1,CL1T_26_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(CL1T_26_BT.ACCUM,CL1T_26_BT.CAPT) ,MOV(0,CL1T_26_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(CL1T_26_BT.RAMP_UP_TMR.DN)XIO(CL1T_26_BT.FAULT_TIMER.DN)XIO(CL1T_26_BT.BT_PULSE)TON(CL1T_26_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(CL1T_26_MTR.CONV_RUN) ,XIC(CL1T_26_BT.MOVING) ][XIO(CL1T_26_BT.SIM_PULSE_ROLL) SUB(CST[0],CL1T_26_BT.SIM_PULSE_TIME,CL1T_26_BT.PULSE_TIME_DIF) ABS(CL1T_26_BT.PULSE_TIME_DIF,CL1T_26_BT.PULSE_TIME_DIF) GRT(CL1T_26_BT.PULSE_TIME_DIF,CL1T_26_BTx.PULSE_PERIOD) ,XIC(CL1T_26_BT.FAULT_TIMER.DN) ][XIO(CL1T_26_BT.LU_DET) OTE(CL1T_26_BT.LU_ONS) ,OTE(CL1T_26_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(CL1T_26_BT.LU_ONS)ADD(CL1T_26_BT.LU_COUNTER,1,CL1T_26_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(CL1T_26_PE1.POS_XITN)CLR(CL1T_26_BT.CFG_CNT);
				N: XIO(I_PE1_CL1T_26)[XIO(CL1T_26_BT.CFG_RAMP_UP) XIC(CL1T_26_BT.BT_PULSE) ,XIC(CL1T_26_BT.CFG_RAMP_UP) XIC(CL1T_26_BT.INT_PULSE) XIC(CL1T_26_MTR.CONV_RUN) ]ADD(CL1T_26_BT.CFG_CNT,1,CL1T_26_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_HX1T_09_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(HX1T_09_MTR.CONV_RUN)XIC(HX1T_09_BT.INT_PULSE)XIO(HX1T_09_BT.RAMP_CNT_DN)ADD(HX1T_09_BT.RAMP_CNT,1,HX1T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(HX1T_09_MTR.CONV_RUN)[GEQ(HX1T_09_BT.RAMP_CNT,HX1T_09_BTx.RAMP_UP_SET) ,XIC(HX1T_09_BT.RAMP_CNT_DN) ][XIO(HX1T_09_BT.RAMP_CNT_DN) MOV(HX1T_09_BTx.RAMP_DN_SET,HX1T_09_BT.RAMP_CNT) ,OTE(HX1T_09_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(HX1T_09_MTR.CONV_RUN)XIC(HX1T_09_BT.INT_PULSE)XIC(HX1T_09_BT.MOVING)SUB(HX1T_09_BT.RAMP_CNT,1,HX1T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(HX1T_09_BT.RAMP_CNT,0)OTE(HX1T_09_BT.MOVING);
				N: XIC(HX1T_09_MTR.CONV_RUN)[XIO(HX1T_09_BT.RUN) [OTE(HX1T_09_BT.RUN_ONS) ,ADD(CST[0],HX1T_09_BT.TIMELEFT,HX1T_09_BT.SIM_PULSE_TIME) ] ,OTE(HX1T_09_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(HX1T_09_MTR.CONV_RUN)XIO(HX1T_09_BT.LU_ONS)[XIO(HX1T_09_BT.RUN_ONS) XIO(HX1T_09_BT.STRT_MEM) ADD(CST[0],HX1T_09_BTx.PULSE_PERIOD,HX1T_09_BT.SIM_PULSE_TIME) ,OTE(HX1T_09_BT.STRT_MEM) ,TON(HX1T_09_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(HX1T_09_MTR.CONV_RUN)[XIO(HX1T_09_BT.NORUN) SUB(HX1T_09_BT.SIM_PULSE_TIME,CST[0],HX1T_09_BT.TIMELEFT) ,OTE(HX1T_09_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(HX1T_09_BT.SIM_PULSE_TIME.31)[XIO(HX1T_09_BT.SIM_PULSE_TIME_NEG_MEM) OTE(HX1T_09_BT.SIM_PULSE_TIME_NEG) ,OTE(HX1T_09_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(HX1T_09_MTR.CONV_RUN) ,XIC(HX1T_09_BT.MOVING) ][XIC(HX1T_09_BT.SIM_PULSE_TIME_NEG) ,XIC(HX1T_09_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(HX1T_09_BT.LU_ONS)OTE(HX1T_09_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],HX1T_09_BT.SIM_PULSE_TIME) XIO(HX1T_09_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(HX1T_09_BT.SIM_PULSE_TIME.31) ][OTE(HX1T_09_BT.INT_PULSE) ,ADD(HX1T_09_BT.SIM_PULSE_TIME,HX1T_09_BTx.PULSE_PERIOD,HX1T_09_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(HX1T_09_MTR.CONV_RUN) XIC(HX1T_09_BT.RAMP_CNT_DN) ,XIO(HX1T_09_MTR.CONV_RUN) XIC(HX1T_09_BT.MOVING) ]XIC(HX1T_09_BT.INT_PULSE)OTE(HX1T_09_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(HX1T_09_BT.BT_PULSE)ADD(HX1T_09_BT.ACCUM,1,HX1T_09_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(HX1T_09_BT.ACCUM,HX1T_09_BT.CAPT) ,MOV(0,HX1T_09_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(HX1T_09_BT.RAMP_UP_TMR.DN)XIO(HX1T_09_BT.FAULT_TIMER.DN)XIO(HX1T_09_BT.BT_PULSE)TON(HX1T_09_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(HX1T_09_MTR.CONV_RUN) ,XIC(HX1T_09_BT.MOVING) ][XIO(HX1T_09_BT.SIM_PULSE_ROLL) SUB(CST[0],HX1T_09_BT.SIM_PULSE_TIME,HX1T_09_BT.PULSE_TIME_DIF) ABS(HX1T_09_BT.PULSE_TIME_DIF,HX1T_09_BT.PULSE_TIME_DIF) GRT(HX1T_09_BT.PULSE_TIME_DIF,HX1T_09_BTx.PULSE_PERIOD) ,XIC(HX1T_09_BT.FAULT_TIMER.DN) ][XIO(HX1T_09_BT.LU_DET) OTE(HX1T_09_BT.LU_ONS) ,OTE(HX1T_09_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(HX1T_09_BT.LU_ONS)ADD(HX1T_09_BT.LU_COUNTER,1,HX1T_09_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(HX1T_09_PE.POS_XITN)CLR(HX1T_09_BT.CFG_CNT);
				N: XIO(I_PE_HX1T_09)[XIO(HX1T_09_BT.CFG_RAMP_UP) XIC(HX1T_09_BT.BT_PULSE) ,XIC(HX1T_09_BT.CFG_RAMP_UP) XIC(HX1T_09_BT.INT_PULSE) XIC(HX1T_09_MTR.CONV_RUN) ]ADD(HX1T_09_BT.CFG_CNT,1,HX1T_09_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_HX1T_10_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(HX1T_10_MTR.CONV_RUN)XIC(HX1T_10_BT.INT_PULSE)XIO(HX1T_10_BT.RAMP_CNT_DN)ADD(HX1T_10_BT.RAMP_CNT,1,HX1T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(HX1T_10_MTR.CONV_RUN)[GEQ(HX1T_10_BT.RAMP_CNT,HX1T_10_BTx.RAMP_UP_SET) ,XIC(HX1T_10_BT.RAMP_CNT_DN) ][XIO(HX1T_10_BT.RAMP_CNT_DN) MOV(HX1T_10_BTx.RAMP_DN_SET,HX1T_10_BT.RAMP_CNT) ,OTE(HX1T_10_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(HX1T_10_MTR.CONV_RUN)XIC(HX1T_10_BT.INT_PULSE)XIC(HX1T_10_BT.MOVING)SUB(HX1T_10_BT.RAMP_CNT,1,HX1T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(HX1T_10_BT.RAMP_CNT,0)OTE(HX1T_10_BT.MOVING);
				N: XIC(HX1T_10_MTR.CONV_RUN)[XIO(HX1T_10_BT.RUN) [OTE(HX1T_10_BT.RUN_ONS) ,ADD(CST[0],HX1T_10_BT.TIMELEFT,HX1T_10_BT.SIM_PULSE_TIME) ] ,OTE(HX1T_10_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(HX1T_10_MTR.CONV_RUN)XIO(HX1T_10_BT.LU_ONS)[XIO(HX1T_10_BT.RUN_ONS) XIO(HX1T_10_BT.STRT_MEM) ADD(CST[0],HX1T_10_BTx.PULSE_PERIOD,HX1T_10_BT.SIM_PULSE_TIME) ,OTE(HX1T_10_BT.STRT_MEM) ,TON(HX1T_10_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(HX1T_10_MTR.CONV_RUN)[XIO(HX1T_10_BT.NORUN) SUB(HX1T_10_BT.SIM_PULSE_TIME,CST[0],HX1T_10_BT.TIMELEFT) ,OTE(HX1T_10_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(HX1T_10_BT.SIM_PULSE_TIME.31)[XIO(HX1T_10_BT.SIM_PULSE_TIME_NEG_MEM) OTE(HX1T_10_BT.SIM_PULSE_TIME_NEG) ,OTE(HX1T_10_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(HX1T_10_MTR.CONV_RUN) ,XIC(HX1T_10_BT.MOVING) ][XIC(HX1T_10_BT.SIM_PULSE_TIME_NEG) ,XIC(HX1T_10_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(HX1T_10_BT.LU_ONS)OTE(HX1T_10_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],HX1T_10_BT.SIM_PULSE_TIME) XIO(HX1T_10_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(HX1T_10_BT.SIM_PULSE_TIME.31) ][OTE(HX1T_10_BT.INT_PULSE) ,ADD(HX1T_10_BT.SIM_PULSE_TIME,HX1T_10_BTx.PULSE_PERIOD,HX1T_10_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(HX1T_10_MTR.CONV_RUN) XIC(HX1T_10_BT.RAMP_CNT_DN) ,XIO(HX1T_10_MTR.CONV_RUN) XIC(HX1T_10_BT.MOVING) ]XIC(HX1T_10_BT.INT_PULSE)OTE(HX1T_10_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(HX1T_10_BT.BT_PULSE)ADD(HX1T_10_BT.ACCUM,1,HX1T_10_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(HX1T_10_BT.ACCUM,HX1T_10_BT.CAPT) ,MOV(0,HX1T_10_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(HX1T_10_BT.RAMP_UP_TMR.DN)XIO(HX1T_10_BT.FAULT_TIMER.DN)XIO(HX1T_10_BT.BT_PULSE)TON(HX1T_10_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(HX1T_10_MTR.CONV_RUN) ,XIC(HX1T_10_BT.MOVING) ][XIO(HX1T_10_BT.SIM_PULSE_ROLL) SUB(CST[0],HX1T_10_BT.SIM_PULSE_TIME,HX1T_10_BT.PULSE_TIME_DIF) ABS(HX1T_10_BT.PULSE_TIME_DIF,HX1T_10_BT.PULSE_TIME_DIF) GRT(HX1T_10_BT.PULSE_TIME_DIF,HX1T_10_BTx.PULSE_PERIOD) ,XIC(HX1T_10_BT.FAULT_TIMER.DN) ][XIO(HX1T_10_BT.LU_DET) OTE(HX1T_10_BT.LU_ONS) ,OTE(HX1T_10_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(HX1T_10_BT.LU_ONS)ADD(HX1T_10_BT.LU_COUNTER,1,HX1T_10_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(HX1T_10_PE.POS_XITN)CLR(HX1T_10_BT.CFG_CNT);
				N: XIO(I_PE_HX1T_10)[XIO(HX1T_10_BT.CFG_RAMP_UP) XIC(HX1T_10_BT.BT_PULSE) ,XIC(HX1T_10_BT.CFG_RAMP_UP) XIC(HX1T_10_BT.INT_PULSE) XIC(HX1T_10_MTR.CONV_RUN) ]ADD(HX1T_10_BT.CFG_CNT,1,HX1T_10_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O2T_10_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O2T_10_MTR.CONV_RUN)XIC(O2T_10_BT.INT_PULSE)XIO(O2T_10_BT.RAMP_CNT_DN)ADD(O2T_10_BT.RAMP_CNT,1,O2T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O2T_10_MTR.CONV_RUN)[GEQ(O2T_10_BT.RAMP_CNT,O2T_10_BTx.RAMP_UP_SET) ,XIC(O2T_10_BT.RAMP_CNT_DN) ][XIO(O2T_10_BT.RAMP_CNT_DN) MOV(O2T_10_BTx.RAMP_DN_SET,O2T_10_BT.RAMP_CNT) ,OTE(O2T_10_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O2T_10_MTR.CONV_RUN)XIC(O2T_10_BT.INT_PULSE)XIC(O2T_10_BT.MOVING)SUB(O2T_10_BT.RAMP_CNT,1,O2T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O2T_10_BT.RAMP_CNT,0)OTE(O2T_10_BT.MOVING);
				N: XIC(O2T_10_MTR.CONV_RUN)[XIO(O2T_10_BT.RUN) [OTE(O2T_10_BT.RUN_ONS) ,ADD(CST[0],O2T_10_BT.TIMELEFT,O2T_10_BT.SIM_PULSE_TIME) ] ,OTE(O2T_10_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O2T_10_MTR.CONV_RUN)XIO(O2T_10_BT.LU_ONS)[XIO(O2T_10_BT.RUN_ONS) XIO(O2T_10_BT.STRT_MEM) ADD(CST[0],O2T_10_BTx.PULSE_PERIOD,O2T_10_BT.SIM_PULSE_TIME) ,OTE(O2T_10_BT.STRT_MEM) ,TON(O2T_10_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O2T_10_MTR.CONV_RUN)[XIO(O2T_10_BT.NORUN) SUB(O2T_10_BT.SIM_PULSE_TIME,CST[0],O2T_10_BT.TIMELEFT) ,OTE(O2T_10_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O2T_10_BT.SIM_PULSE_TIME.31)[XIO(O2T_10_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O2T_10_BT.SIM_PULSE_TIME_NEG) ,OTE(O2T_10_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O2T_10_MTR.CONV_RUN) ,XIC(O2T_10_BT.MOVING) ][XIC(O2T_10_BT.SIM_PULSE_TIME_NEG) ,XIC(O2T_10_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O2T_10_BT.LU_ONS)OTE(O2T_10_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O2T_10_BT.SIM_PULSE_TIME) XIO(O2T_10_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O2T_10_BT.SIM_PULSE_TIME.31) ][OTE(O2T_10_BT.INT_PULSE) ,ADD(O2T_10_BT.SIM_PULSE_TIME,O2T_10_BTx.PULSE_PERIOD,O2T_10_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O2T_10_MTR.CONV_RUN) XIC(O2T_10_BT.RAMP_CNT_DN) ,XIO(O2T_10_MTR.CONV_RUN) XIC(O2T_10_BT.MOVING) ]XIC(O2T_10_BT.INT_PULSE)OTE(O2T_10_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O2T_10_BT.BT_PULSE)ADD(O2T_10_BT.ACCUM,1,O2T_10_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O2T_10_BT.ACCUM,O2T_10_BT.CAPT) ,MOV(0,O2T_10_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O2T_10_BT.RAMP_UP_TMR.DN)XIO(O2T_10_BT.FAULT_TIMER.DN)XIO(O2T_10_BT.BT_PULSE)TON(O2T_10_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O2T_10_MTR.CONV_RUN) ,XIC(O2T_10_BT.MOVING) ][XIO(O2T_10_BT.SIM_PULSE_ROLL) SUB(CST[0],O2T_10_BT.SIM_PULSE_TIME,O2T_10_BT.PULSE_TIME_DIF) ABS(O2T_10_BT.PULSE_TIME_DIF,O2T_10_BT.PULSE_TIME_DIF) GRT(O2T_10_BT.PULSE_TIME_DIF,O2T_10_BTx.PULSE_PERIOD) ,XIC(O2T_10_BT.FAULT_TIMER.DN) ][XIO(O2T_10_BT.LU_DET) OTE(O2T_10_BT.LU_ONS) ,OTE(O2T_10_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O2T_10_BT.LU_ONS)ADD(O2T_10_BT.LU_COUNTER,1,O2T_10_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O2T_10_PE.POS_XITN)CLR(O2T_10_BT.CFG_CNT);
				N: XIO(I_PE_O2T_10)[XIO(O2T_10_BT.CFG_RAMP_UP) XIC(O2T_10_BT.BT_PULSE) ,XIC(O2T_10_BT.CFG_RAMP_UP) XIC(O2T_10_BT.INT_PULSE) XIC(O2T_10_MTR.CONV_RUN) ]ADD(O2T_10_BT.CFG_CNT,1,O2T_10_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O2T_17_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O2T_17_MTR.CONV_RUN)XIC(O2T_17_BT.INT_PULSE)XIO(O2T_17_BT.RAMP_CNT_DN)ADD(O2T_17_BT.RAMP_CNT,1,O2T_17_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O2T_17_MTR.CONV_RUN)[GEQ(O2T_17_BT.RAMP_CNT,O2T_17_BTx.RAMP_UP_SET) ,XIC(O2T_17_BT.RAMP_CNT_DN) ][XIO(O2T_17_BT.RAMP_CNT_DN) MOV(O2T_17_BTx.RAMP_DN_SET,O2T_17_BT.RAMP_CNT) ,OTE(O2T_17_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O2T_17_MTR.CONV_RUN)XIC(O2T_17_BT.INT_PULSE)XIC(O2T_17_BT.MOVING)SUB(O2T_17_BT.RAMP_CNT,1,O2T_17_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O2T_17_BT.RAMP_CNT,0)OTE(O2T_17_BT.MOVING);
				N: XIC(O2T_17_MTR.CONV_RUN)[XIO(O2T_17_BT.RUN) [OTE(O2T_17_BT.RUN_ONS) ,ADD(CST[0],O2T_17_BT.TIMELEFT,O2T_17_BT.SIM_PULSE_TIME) ] ,OTE(O2T_17_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O2T_17_MTR.CONV_RUN)XIO(O2T_17_BT.LU_ONS)[XIO(O2T_17_BT.RUN_ONS) XIO(O2T_17_BT.STRT_MEM) ADD(CST[0],O2T_17_BTx.PULSE_PERIOD,O2T_17_BT.SIM_PULSE_TIME) ,OTE(O2T_17_BT.STRT_MEM) ,TON(O2T_17_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O2T_17_MTR.CONV_RUN)[XIO(O2T_17_BT.NORUN) SUB(O2T_17_BT.SIM_PULSE_TIME,CST[0],O2T_17_BT.TIMELEFT) ,OTE(O2T_17_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O2T_17_BT.SIM_PULSE_TIME.31)[XIO(O2T_17_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O2T_17_BT.SIM_PULSE_TIME_NEG) ,OTE(O2T_17_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O2T_17_MTR.CONV_RUN) ,XIC(O2T_17_BT.MOVING) ][XIC(O2T_17_BT.SIM_PULSE_TIME_NEG) ,XIC(O2T_17_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O2T_17_BT.LU_ONS)OTE(O2T_17_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O2T_17_BT.SIM_PULSE_TIME) XIO(O2T_17_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O2T_17_BT.SIM_PULSE_TIME.31) ][OTE(O2T_17_BT.INT_PULSE) ,ADD(O2T_17_BT.SIM_PULSE_TIME,O2T_17_BTx.PULSE_PERIOD,O2T_17_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O2T_17_MTR.CONV_RUN) XIC(O2T_17_BT.RAMP_CNT_DN) ,XIO(O2T_17_MTR.CONV_RUN) XIC(O2T_17_BT.MOVING) ]XIC(O2T_17_BT.INT_PULSE)OTE(O2T_17_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O2T_17_BT.BT_PULSE)ADD(O2T_17_BT.ACCUM,1,O2T_17_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O2T_17_BT.ACCUM,O2T_17_BT.CAPT) ,MOV(0,O2T_17_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O2T_17_BT.RAMP_UP_TMR.DN)XIO(O2T_17_BT.FAULT_TIMER.DN)XIO(O2T_17_BT.BT_PULSE)TON(O2T_17_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O2T_17_MTR.CONV_RUN) ,XIC(O2T_17_BT.MOVING) ][XIO(O2T_17_BT.SIM_PULSE_ROLL) SUB(CST[0],O2T_17_BT.SIM_PULSE_TIME,O2T_17_BT.PULSE_TIME_DIF) ABS(O2T_17_BT.PULSE_TIME_DIF,O2T_17_BT.PULSE_TIME_DIF) GRT(O2T_17_BT.PULSE_TIME_DIF,O2T_17_BTx.PULSE_PERIOD) ,XIC(O2T_17_BT.FAULT_TIMER.DN) ][XIO(O2T_17_BT.LU_DET) OTE(O2T_17_BT.LU_ONS) ,OTE(O2T_17_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O2T_17_BT.LU_ONS)ADD(O2T_17_BT.LU_COUNTER,1,O2T_17_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O2T_17_PE.POS_XITN)CLR(O2T_17_BT.CFG_CNT);
				N: XIO(I_PE_O2T_17)[XIO(O2T_17_BT.CFG_RAMP_UP) XIC(O2T_17_BT.BT_PULSE) ,XIC(O2T_17_BT.CFG_RAMP_UP) XIC(O2T_17_BT.INT_PULSE) XIC(O2T_17_MTR.CONV_RUN) ]ADD(O2T_17_BT.CFG_CNT,1,O2T_17_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O2T_18_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O2T_18_MTR.CONV_RUN)XIC(O2T_18_BT.INT_PULSE)XIO(O2T_18_BT.RAMP_CNT_DN)ADD(O2T_18_BT.RAMP_CNT,1,O2T_18_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O2T_18_MTR.CONV_RUN)[GEQ(O2T_18_BT.RAMP_CNT,O2T_18_BTx.RAMP_UP_SET) ,XIC(O2T_18_BT.RAMP_CNT_DN) ][XIO(O2T_18_BT.RAMP_CNT_DN) MOV(O2T_18_BTx.RAMP_DN_SET,O2T_18_BT.RAMP_CNT) ,OTE(O2T_18_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O2T_18_MTR.CONV_RUN)XIC(O2T_18_BT.INT_PULSE)XIC(O2T_18_BT.MOVING)SUB(O2T_18_BT.RAMP_CNT,1,O2T_18_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O2T_18_BT.RAMP_CNT,0)OTE(O2T_18_BT.MOVING);
				N: XIC(O2T_18_MTR.CONV_RUN)[XIO(O2T_18_BT.RUN) [OTE(O2T_18_BT.RUN_ONS) ,ADD(CST[0],O2T_18_BT.TIMELEFT,O2T_18_BT.SIM_PULSE_TIME) ] ,OTE(O2T_18_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O2T_18_MTR.CONV_RUN)XIO(O2T_18_BT.LU_ONS)[XIO(O2T_18_BT.RUN_ONS) XIO(O2T_18_BT.STRT_MEM) ADD(CST[0],O2T_18_BTx.PULSE_PERIOD,O2T_18_BT.SIM_PULSE_TIME) ,OTE(O2T_18_BT.STRT_MEM) ,TON(O2T_18_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O2T_18_MTR.CONV_RUN)[XIO(O2T_18_BT.NORUN) SUB(O2T_18_BT.SIM_PULSE_TIME,CST[0],O2T_18_BT.TIMELEFT) ,OTE(O2T_18_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O2T_18_BT.SIM_PULSE_TIME.31)[XIO(O2T_18_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O2T_18_BT.SIM_PULSE_TIME_NEG) ,OTE(O2T_18_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O2T_18_MTR.CONV_RUN) ,XIC(O2T_18_BT.MOVING) ][XIC(O2T_18_BT.SIM_PULSE_TIME_NEG) ,XIC(O2T_18_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O2T_18_BT.LU_ONS)OTE(O2T_18_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O2T_18_BT.SIM_PULSE_TIME) XIO(O2T_18_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O2T_18_BT.SIM_PULSE_TIME.31) ][OTE(O2T_18_BT.INT_PULSE) ,ADD(O2T_18_BT.SIM_PULSE_TIME,O2T_18_BTx.PULSE_PERIOD,O2T_18_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O2T_18_MTR.CONV_RUN) XIC(O2T_18_BT.RAMP_CNT_DN) ,XIO(O2T_18_MTR.CONV_RUN) XIC(O2T_18_BT.MOVING) ]XIC(O2T_18_BT.INT_PULSE)OTE(O2T_18_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O2T_18_BT.BT_PULSE)ADD(O2T_18_BT.ACCUM,1,O2T_18_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O2T_18_BT.ACCUM,O2T_18_BT.CAPT) ,MOV(0,O2T_18_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O2T_18_BT.RAMP_UP_TMR.DN)XIO(O2T_18_BT.FAULT_TIMER.DN)XIO(O2T_18_BT.BT_PULSE)TON(O2T_18_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O2T_18_MTR.CONV_RUN) ,XIC(O2T_18_BT.MOVING) ][XIO(O2T_18_BT.SIM_PULSE_ROLL) SUB(CST[0],O2T_18_BT.SIM_PULSE_TIME,O2T_18_BT.PULSE_TIME_DIF) ABS(O2T_18_BT.PULSE_TIME_DIF,O2T_18_BT.PULSE_TIME_DIF) GRT(O2T_18_BT.PULSE_TIME_DIF,O2T_18_BTx.PULSE_PERIOD) ,XIC(O2T_18_BT.FAULT_TIMER.DN) ][XIO(O2T_18_BT.LU_DET) OTE(O2T_18_BT.LU_ONS) ,OTE(O2T_18_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O2T_18_BT.LU_ONS)ADD(O2T_18_BT.LU_COUNTER,1,O2T_18_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O2T_18_PE.POS_XITN)CLR(O2T_18_BT.CFG_CNT);
				N: XIO(I_PE_O2T_18)[XIO(O2T_18_BT.CFG_RAMP_UP) XIC(O2T_18_BT.BT_PULSE) ,XIC(O2T_18_BT.CFG_RAMP_UP) XIC(O2T_18_BT.INT_PULSE) XIC(O2T_18_MTR.CONV_RUN) ]ADD(O2T_18_BT.CFG_CNT,1,O2T_18_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O4T_09_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O4T_09_MTR.CONV_RUN)XIC(O4T_09_BT.INT_PULSE)XIO(O4T_09_BT.RAMP_CNT_DN)ADD(O4T_09_BT.RAMP_CNT,1,O4T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O4T_09_MTR.CONV_RUN)[GEQ(O4T_09_BT.RAMP_CNT,O4T_09_BTx.RAMP_UP_SET) ,XIC(O4T_09_BT.RAMP_CNT_DN) ][XIO(O4T_09_BT.RAMP_CNT_DN) MOV(O4T_09_BTx.RAMP_DN_SET,O4T_09_BT.RAMP_CNT) ,OTE(O4T_09_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O4T_09_MTR.CONV_RUN)XIC(O4T_09_BT.INT_PULSE)XIC(O4T_09_BT.MOVING)SUB(O4T_09_BT.RAMP_CNT,1,O4T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O4T_09_BT.RAMP_CNT,0)OTE(O4T_09_BT.MOVING);
				N: XIC(O4T_09_MTR.CONV_RUN)[XIO(O4T_09_BT.RUN) [OTE(O4T_09_BT.RUN_ONS) ,ADD(CST[0],O4T_09_BT.TIMELEFT,O4T_09_BT.SIM_PULSE_TIME) ] ,OTE(O4T_09_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O4T_09_MTR.CONV_RUN)XIO(O4T_09_BT.LU_ONS)[XIO(O4T_09_BT.RUN_ONS) XIO(O4T_09_BT.STRT_MEM) ADD(CST[0],O4T_09_BTx.PULSE_PERIOD,O4T_09_BT.SIM_PULSE_TIME) ,OTE(O4T_09_BT.STRT_MEM) ,TON(O4T_09_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O4T_09_MTR.CONV_RUN)[XIO(O4T_09_BT.NORUN) SUB(O4T_09_BT.SIM_PULSE_TIME,CST[0],O4T_09_BT.TIMELEFT) ,OTE(O4T_09_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O4T_09_BT.SIM_PULSE_TIME.31)[XIO(O4T_09_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O4T_09_BT.SIM_PULSE_TIME_NEG) ,OTE(O4T_09_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O4T_09_MTR.CONV_RUN) ,XIC(O4T_09_BT.MOVING) ][XIC(O4T_09_BT.SIM_PULSE_TIME_NEG) ,XIC(O4T_09_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O4T_09_BT.LU_ONS)OTE(O4T_09_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O4T_09_BT.SIM_PULSE_TIME) XIO(O4T_09_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O4T_09_BT.SIM_PULSE_TIME.31) ][OTE(O4T_09_BT.INT_PULSE) ,ADD(O4T_09_BT.SIM_PULSE_TIME,O4T_09_BTx.PULSE_PERIOD,O4T_09_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O4T_09_MTR.CONV_RUN) XIC(O4T_09_BT.RAMP_CNT_DN) ,XIO(O4T_09_MTR.CONV_RUN) XIC(O4T_09_BT.MOVING) ]XIC(O4T_09_BT.INT_PULSE)OTE(O4T_09_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O4T_09_BT.BT_PULSE)ADD(O4T_09_BT.ACCUM,1,O4T_09_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O4T_09_BT.ACCUM,O4T_09_BT.CAPT) ,MOV(0,O4T_09_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O4T_09_BT.RAMP_UP_TMR.DN)XIO(O4T_09_BT.FAULT_TIMER.DN)XIO(O4T_09_BT.BT_PULSE)TON(O4T_09_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O4T_09_MTR.CONV_RUN) ,XIC(O4T_09_BT.MOVING) ][XIO(O4T_09_BT.SIM_PULSE_ROLL) SUB(CST[0],O4T_09_BT.SIM_PULSE_TIME,O4T_09_BT.PULSE_TIME_DIF) ABS(O4T_09_BT.PULSE_TIME_DIF,O4T_09_BT.PULSE_TIME_DIF) GRT(O4T_09_BT.PULSE_TIME_DIF,O4T_09_BTx.PULSE_PERIOD) ,XIC(O4T_09_BT.FAULT_TIMER.DN) ][XIO(O4T_09_BT.LU_DET) OTE(O4T_09_BT.LU_ONS) ,OTE(O4T_09_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O4T_09_BT.LU_ONS)ADD(O4T_09_BT.LU_COUNTER,1,O4T_09_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O4T_09_PE.POS_XITN)CLR(O4T_09_BT.CFG_CNT);
				N: XIO(I_PE_O4T_09)[XIO(O4T_09_BT.CFG_RAMP_UP) XIC(O4T_09_BT.BT_PULSE) ,XIC(O4T_09_BT.CFG_RAMP_UP) XIC(O4T_09_BT.INT_PULSE) XIC(O4T_09_MTR.CONV_RUN) ]ADD(O4T_09_BT.CFG_CNT,1,O4T_09_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O4T_10_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O4T_10_MTR.CONV_RUN)XIC(O4T_10_BT.INT_PULSE)XIO(O4T_10_BT.RAMP_CNT_DN)ADD(O4T_10_BT.RAMP_CNT,1,O4T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O4T_10_MTR.CONV_RUN)[GEQ(O4T_10_BT.RAMP_CNT,O4T_10_BTx.RAMP_UP_SET) ,XIC(O4T_10_BT.RAMP_CNT_DN) ][XIO(O4T_10_BT.RAMP_CNT_DN) MOV(O4T_10_BTx.RAMP_DN_SET,O4T_10_BT.RAMP_CNT) ,OTE(O4T_10_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O4T_10_MTR.CONV_RUN)XIC(O4T_10_BT.INT_PULSE)XIC(O4T_10_BT.MOVING)SUB(O4T_10_BT.RAMP_CNT,1,O4T_10_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O4T_10_BT.RAMP_CNT,0)OTE(O4T_10_BT.MOVING);
				N: XIC(O4T_10_MTR.CONV_RUN)[XIO(O4T_10_BT.RUN) [OTE(O4T_10_BT.RUN_ONS) ,ADD(CST[0],O4T_10_BT.TIMELEFT,O4T_10_BT.SIM_PULSE_TIME) ] ,OTE(O4T_10_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O4T_10_MTR.CONV_RUN)XIO(O4T_10_BT.LU_ONS)[XIO(O4T_10_BT.RUN_ONS) XIO(O4T_10_BT.STRT_MEM) ADD(CST[0],O4T_10_BTx.PULSE_PERIOD,O4T_10_BT.SIM_PULSE_TIME) ,OTE(O4T_10_BT.STRT_MEM) ,TON(O4T_10_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O4T_10_MTR.CONV_RUN)[XIO(O4T_10_BT.NORUN) SUB(O4T_10_BT.SIM_PULSE_TIME,CST[0],O4T_10_BT.TIMELEFT) ,OTE(O4T_10_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O4T_10_BT.SIM_PULSE_TIME.31)[XIO(O4T_10_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O4T_10_BT.SIM_PULSE_TIME_NEG) ,OTE(O4T_10_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O4T_10_MTR.CONV_RUN) ,XIC(O4T_10_BT.MOVING) ][XIC(O4T_10_BT.SIM_PULSE_TIME_NEG) ,XIC(O4T_10_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O4T_10_BT.LU_ONS)OTE(O4T_10_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O4T_10_BT.SIM_PULSE_TIME) XIO(O4T_10_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O4T_10_BT.SIM_PULSE_TIME.31) ][OTE(O4T_10_BT.INT_PULSE) ,ADD(O4T_10_BT.SIM_PULSE_TIME,O4T_10_BTx.PULSE_PERIOD,O4T_10_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O4T_10_MTR.CONV_RUN) XIC(O4T_10_BT.RAMP_CNT_DN) ,XIO(O4T_10_MTR.CONV_RUN) XIC(O4T_10_BT.MOVING) ]XIC(O4T_10_BT.INT_PULSE)OTE(O4T_10_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O4T_10_BT.BT_PULSE)ADD(O4T_10_BT.ACCUM,1,O4T_10_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O4T_10_BT.ACCUM,O4T_10_BT.CAPT) ,MOV(0,O4T_10_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O4T_10_BT.RAMP_UP_TMR.DN)XIO(O4T_10_BT.FAULT_TIMER.DN)XIO(O4T_10_BT.BT_PULSE)TON(O4T_10_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O4T_10_MTR.CONV_RUN) ,XIC(O4T_10_BT.MOVING) ][XIO(O4T_10_BT.SIM_PULSE_ROLL) SUB(CST[0],O4T_10_BT.SIM_PULSE_TIME,O4T_10_BT.PULSE_TIME_DIF) ABS(O4T_10_BT.PULSE_TIME_DIF,O4T_10_BT.PULSE_TIME_DIF) GRT(O4T_10_BT.PULSE_TIME_DIF,O4T_10_BTx.PULSE_PERIOD) ,XIC(O4T_10_BT.FAULT_TIMER.DN) ][XIO(O4T_10_BT.LU_DET) OTE(O4T_10_BT.LU_ONS) ,OTE(O4T_10_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O4T_10_BT.LU_ONS)ADD(O4T_10_BT.LU_COUNTER,1,O4T_10_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O4T_10_PE1.POS_XITN)CLR(O4T_10_BT.CFG_CNT);
				N: XIO(I_PE1_O4T_10)[XIO(O4T_10_BT.CFG_RAMP_UP) XIC(O4T_10_BT.BT_PULSE) ,XIC(O4T_10_BT.CFG_RAMP_UP) XIC(O4T_10_BT.INT_PULSE) XIC(O4T_10_MTR.CONV_RUN) ]ADD(O4T_10_BT.CFG_CNT,1,O4T_10_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O4T_20_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(O4T_20_MTR.CONV_RUN)XIC(O4T_20_BT.INT_PULSE)XIO(O4T_20_BT.RAMP_CNT_DN)ADD(O4T_20_BT.RAMP_CNT,1,O4T_20_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(O4T_20_MTR.CONV_RUN)[GEQ(O4T_20_BT.RAMP_CNT,O4T_20_BTx.RAMP_UP_SET) ,XIC(O4T_20_BT.RAMP_CNT_DN) ][XIO(O4T_20_BT.RAMP_CNT_DN) MOV(O4T_20_BTx.RAMP_DN_SET,O4T_20_BT.RAMP_CNT) ,OTE(O4T_20_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(O4T_20_MTR.CONV_RUN)XIC(O4T_20_BT.INT_PULSE)XIC(O4T_20_BT.MOVING)SUB(O4T_20_BT.RAMP_CNT,1,O4T_20_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O4T_20_BT.RAMP_CNT,0)OTE(O4T_20_BT.MOVING);
				N: XIC(O4T_20_MTR.CONV_RUN)[XIO(O4T_20_BT.RUN) [OTE(O4T_20_BT.RUN_ONS) ,ADD(CST[0],O4T_20_BT.TIMELEFT,O4T_20_BT.SIM_PULSE_TIME) ] ,OTE(O4T_20_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(O4T_20_MTR.CONV_RUN)XIO(O4T_20_BT.LU_ONS)[XIO(O4T_20_BT.RUN_ONS) XIO(O4T_20_BT.STRT_MEM) ADD(CST[0],O4T_20_BTx.PULSE_PERIOD,O4T_20_BT.SIM_PULSE_TIME) ,OTE(O4T_20_BT.STRT_MEM) ,TON(O4T_20_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(O4T_20_MTR.CONV_RUN)[XIO(O4T_20_BT.NORUN) SUB(O4T_20_BT.SIM_PULSE_TIME,CST[0],O4T_20_BT.TIMELEFT) ,OTE(O4T_20_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O4T_20_BT.SIM_PULSE_TIME.31)[XIO(O4T_20_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O4T_20_BT.SIM_PULSE_TIME_NEG) ,OTE(O4T_20_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(O4T_20_MTR.CONV_RUN) ,XIC(O4T_20_BT.MOVING) ][XIC(O4T_20_BT.SIM_PULSE_TIME_NEG) ,XIC(O4T_20_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O4T_20_BT.LU_ONS)OTE(O4T_20_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O4T_20_BT.SIM_PULSE_TIME) XIO(O4T_20_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O4T_20_BT.SIM_PULSE_TIME.31) ][OTE(O4T_20_BT.INT_PULSE) ,ADD(O4T_20_BT.SIM_PULSE_TIME,O4T_20_BTx.PULSE_PERIOD,O4T_20_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(O4T_20_MTR.CONV_RUN) XIC(O4T_20_BT.RAMP_CNT_DN) ,XIO(O4T_20_MTR.CONV_RUN) XIC(O4T_20_BT.MOVING) ]XIC(O4T_20_BT.INT_PULSE)OTE(O4T_20_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O4T_20_BT.BT_PULSE)ADD(O4T_20_BT.ACCUM,1,O4T_20_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O4T_20_BT.ACCUM,O4T_20_BT.CAPT) ,MOV(0,O4T_20_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O4T_20_BT.RAMP_UP_TMR.DN)XIO(O4T_20_BT.FAULT_TIMER.DN)XIO(O4T_20_BT.BT_PULSE)TON(O4T_20_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(O4T_20_MTR.CONV_RUN) ,XIC(O4T_20_BT.MOVING) ][XIO(O4T_20_BT.SIM_PULSE_ROLL) SUB(CST[0],O4T_20_BT.SIM_PULSE_TIME,O4T_20_BT.PULSE_TIME_DIF) ABS(O4T_20_BT.PULSE_TIME_DIF,O4T_20_BT.PULSE_TIME_DIF) GRT(O4T_20_BT.PULSE_TIME_DIF,O4T_20_BTx.PULSE_PERIOD) ,XIC(O4T_20_BT.FAULT_TIMER.DN) ][XIO(O4T_20_BT.LU_DET) OTE(O4T_20_BT.LU_ONS) ,OTE(O4T_20_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O4T_20_BT.LU_ONS)ADD(O4T_20_BT.LU_COUNTER,1,O4T_20_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(O4T_20_PE.POS_XITN)CLR(O4T_20_BT.CFG_CNT);
				N: XIO(I_PE_O4T_20)[XIO(O4T_20_BT.CFG_RAMP_UP) XIC(O4T_20_BT.BT_PULSE) ,XIC(O4T_20_BT.CFG_RAMP_UP) XIC(O4T_20_BT.INT_PULSE) XIC(O4T_20_MTR.CONV_RUN) ]ADD(O4T_20_BT.CFG_CNT,1,O4T_20_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_O4_04_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(I_INT_O4_04_RUN)XIC(O4_04_BT.INT_PULSE)XIO(O4_04_BT.RAMP_CNT_DN)ADD(O4_04_BT.RAMP_CNT,1,O4_04_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(I_INT_O4_04_RUN)[GEQ(O4_04_BT.RAMP_CNT,O4_04_BTx.RAMP_UP_SET) ,XIC(O4_04_BT.RAMP_CNT_DN) ][XIO(O4_04_BT.RAMP_CNT_DN) MOV(O4_04_BTx.RAMP_DN_SET,O4_04_BT.RAMP_CNT) ,OTE(O4_04_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(I_INT_O4_04_RUN)XIC(O4_04_BT.INT_PULSE)XIC(O4_04_BT.MOVING)SUB(O4_04_BT.RAMP_CNT,1,O4_04_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(O4_04_BT.RAMP_CNT,0)OTE(O4_04_BT.MOVING);
				N: XIC(I_INT_O4_04_RUN)[XIO(O4_04_BT.RUN) [OTE(O4_04_BT.RUN_ONS) ,ADD(CST[0],O4_04_BT.TIMELEFT,O4_04_BT.SIM_PULSE_TIME) ] ,OTE(O4_04_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(I_INT_O4_04_RUN)XIO(O4_04_BT.LU_ONS)[XIO(O4_04_BT.RUN_ONS) XIO(O4_04_BT.STRT_MEM) ADD(CST[0],O4_04_BTx.PULSE_PERIOD,O4_04_BT.SIM_PULSE_TIME) ,OTE(O4_04_BT.STRT_MEM) ,TON(O4_04_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(I_INT_O4_04_RUN)[XIO(O4_04_BT.NORUN) SUB(O4_04_BT.SIM_PULSE_TIME,CST[0],O4_04_BT.TIMELEFT) ,OTE(O4_04_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(O4_04_BT.SIM_PULSE_TIME.31)[XIO(O4_04_BT.SIM_PULSE_TIME_NEG_MEM) OTE(O4_04_BT.SIM_PULSE_TIME_NEG) ,OTE(O4_04_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(I_INT_O4_04_RUN) ,XIC(O4_04_BT.MOVING) ][XIC(O4_04_BT.SIM_PULSE_TIME_NEG) ,XIC(O4_04_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(O4_04_BT.LU_ONS)OTE(O4_04_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],O4_04_BT.SIM_PULSE_TIME) XIO(O4_04_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(O4_04_BT.SIM_PULSE_TIME.31) ][OTE(O4_04_BT.INT_PULSE) ,ADD(O4_04_BT.SIM_PULSE_TIME,O4_04_BTx.PULSE_PERIOD,O4_04_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(I_INT_O4_04_RUN) XIC(O4_04_BT.RAMP_CNT_DN) ,XIO(I_INT_O4_04_RUN) XIC(O4_04_BT.MOVING) ]XIC(O4_04_BT.INT_PULSE)OTE(O4_04_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(O4_04_BT.BT_PULSE)ADD(O4_04_BT.ACCUM,1,O4_04_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(O4_04_BT.ACCUM,O4_04_BT.CAPT) ,MOV(0,O4_04_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(O4_04_BT.RAMP_UP_TMR.DN)XIO(O4_04_BT.FAULT_TIMER.DN)XIO(O4_04_BT.BT_PULSE)TON(O4_04_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(I_INT_O4_04_RUN) ,XIC(O4_04_BT.MOVING) ][XIO(O4_04_BT.SIM_PULSE_ROLL) SUB(CST[0],O4_04_BT.SIM_PULSE_TIME,O4_04_BT.PULSE_TIME_DIF) ABS(O4_04_BT.PULSE_TIME_DIF,O4_04_BT.PULSE_TIME_DIF) GRT(O4_04_BT.PULSE_TIME_DIF,O4_04_BTx.PULSE_PERIOD) ,XIC(O4_04_BT.FAULT_TIMER.DN) ][XIO(O4_04_BT.LU_DET) OTE(O4_04_BT.LU_ONS) ,OTE(O4_04_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(O4_04_BT.LU_ONS)ADD(O4_04_BT.LU_COUNTER,1,O4_04_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(zzO4_04_PE_POS_XITN)CLR(O4_04_BT.CFG_CNT);
				N: XIO(zzI_PE_O4_04)[XIO(O4_04_BT.CFG_RAMP_UP) XIC(O4_04_BT.BT_PULSE) ,XIC(O4_04_BT.CFG_RAMP_UP) XIC(O4_04_BT.INT_PULSE) XIC(I_INT_O4_04_RUN) ]ADD(O4_04_BT.CFG_CNT,1,O4_04_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_SUBR_CALLS 
				RC: "****************************************************************************************************$N"
				    "This routine calls all of the Belt Tach (encoder) routines.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				N: JSR(BT_BM1_12_P,0);
				N: JSR(BT_BM1_13_P,0);
				N: JSR(BT_BM1_14_P,0);
				N: JSR(BT_BM1_38_P,0);
				N: JSR(BT_O2T_18_P,0);
				N: JSR(BT_O2T_17_P,0);
				N: JSR(BT_C2T_17_P,0);
				N: JSR(BT_C2T_16_P,0);
				N: JSR(BT_O2T_10_P,0);
				N: JSR(BT_CL1T_26_P,0);
				N: JSR(BT_HX1T_10_P,0);
				N: JSR(BT_HX1T_09_P,0);
				N: JSR(BT_T5T_08_P,0);
				N: JSR(BT_T5T_09_P,0);
				N: JSR(BT_XO2_05_P,0);
				N: JSR(BT_XO2_04_P,0);
				N: JSR(BT_O4T_10_P,0);
				N: JSR(BT_O4T_09_P,0);
				N: JSR(BT_BM1_23_P,0);
				N: JSR(BT_BM1_22_P,0);
				N: JSR(BT_O4T_20_P,0);
				N: JSR(BT_CL12T_36_P,0);
				N: JSR(BT_CL12T_35_P,0);
				N: JSR(BT_C4_09_P,0);
				N: JSR(BT_O4_04_P,0);
		END_ROUTINE

		ROUTINE BT_T5T_08_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(T5T_08_MTR.CONV_RUN)XIC(T5T_08_BT.INT_PULSE)XIO(T5T_08_BT.RAMP_CNT_DN)ADD(T5T_08_BT.RAMP_CNT,1,T5T_08_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(T5T_08_MTR.CONV_RUN)[GEQ(T5T_08_BT.RAMP_CNT,T5T_08_BTx.RAMP_UP_SET) ,XIC(T5T_08_BT.RAMP_CNT_DN) ][XIO(T5T_08_BT.RAMP_CNT_DN) MOV(T5T_08_BTx.RAMP_DN_SET,T5T_08_BT.RAMP_CNT) ,OTE(T5T_08_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(T5T_08_MTR.CONV_RUN)XIC(T5T_08_BT.INT_PULSE)XIC(T5T_08_BT.MOVING)SUB(T5T_08_BT.RAMP_CNT,1,T5T_08_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(T5T_08_BT.RAMP_CNT,0)OTE(T5T_08_BT.MOVING);
				N: XIC(T5T_08_MTR.CONV_RUN)[XIO(T5T_08_BT.RUN) [OTE(T5T_08_BT.RUN_ONS) ,ADD(CST[0],T5T_08_BT.TIMELEFT,T5T_08_BT.SIM_PULSE_TIME) ] ,OTE(T5T_08_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(T5T_08_MTR.CONV_RUN)XIO(T5T_08_BT.LU_ONS)[XIO(T5T_08_BT.RUN_ONS) XIO(T5T_08_BT.STRT_MEM) ADD(CST[0],T5T_08_BTx.PULSE_PERIOD,T5T_08_BT.SIM_PULSE_TIME) ,OTE(T5T_08_BT.STRT_MEM) ,TON(T5T_08_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(T5T_08_MTR.CONV_RUN)[XIO(T5T_08_BT.NORUN) SUB(T5T_08_BT.SIM_PULSE_TIME,CST[0],T5T_08_BT.TIMELEFT) ,OTE(T5T_08_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(T5T_08_BT.SIM_PULSE_TIME.31)[XIO(T5T_08_BT.SIM_PULSE_TIME_NEG_MEM) OTE(T5T_08_BT.SIM_PULSE_TIME_NEG) ,OTE(T5T_08_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(T5T_08_MTR.CONV_RUN) ,XIC(T5T_08_BT.MOVING) ][XIC(T5T_08_BT.SIM_PULSE_TIME_NEG) ,XIC(T5T_08_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(T5T_08_BT.LU_ONS)OTE(T5T_08_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],T5T_08_BT.SIM_PULSE_TIME) XIO(T5T_08_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(T5T_08_BT.SIM_PULSE_TIME.31) ][OTE(T5T_08_BT.INT_PULSE) ,ADD(T5T_08_BT.SIM_PULSE_TIME,T5T_08_BTx.PULSE_PERIOD,T5T_08_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(T5T_08_MTR.CONV_RUN) XIC(T5T_08_BT.RAMP_CNT_DN) ,XIO(T5T_08_MTR.CONV_RUN) XIC(T5T_08_BT.MOVING) ]XIC(T5T_08_BT.INT_PULSE)OTE(T5T_08_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(T5T_08_BT.BT_PULSE)ADD(T5T_08_BT.ACCUM,1,T5T_08_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(T5T_08_BT.ACCUM,T5T_08_BT.CAPT) ,MOV(0,T5T_08_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(T5T_08_BT.RAMP_UP_TMR.DN)XIO(T5T_08_BT.FAULT_TIMER.DN)XIO(T5T_08_BT.BT_PULSE)TON(T5T_08_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(T5T_08_MTR.CONV_RUN) ,XIC(T5T_08_BT.MOVING) ][XIO(T5T_08_BT.SIM_PULSE_ROLL) SUB(CST[0],T5T_08_BT.SIM_PULSE_TIME,T5T_08_BT.PULSE_TIME_DIF) ABS(T5T_08_BT.PULSE_TIME_DIF,T5T_08_BT.PULSE_TIME_DIF) GRT(T5T_08_BT.PULSE_TIME_DIF,T5T_08_BTx.PULSE_PERIOD) ,XIC(T5T_08_BT.FAULT_TIMER.DN) ][XIO(T5T_08_BT.LU_DET) OTE(T5T_08_BT.LU_ONS) ,OTE(T5T_08_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(T5T_08_BT.LU_ONS)ADD(T5T_08_BT.LU_COUNTER,1,T5T_08_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(T5T_08_PE.POS_XITN)CLR(T5T_08_BT.CFG_CNT);
				N: XIO(I_PE_T5T_08)[XIO(T5T_08_BT.CFG_RAMP_UP) XIC(T5T_08_BT.BT_PULSE) ,XIC(T5T_08_BT.CFG_RAMP_UP) XIC(T5T_08_BT.INT_PULSE) XIC(T5T_08_MTR.CONV_RUN) ]ADD(T5T_08_BT.CFG_CNT,1,T5T_08_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_T5T_09_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(T5T_09_MTR.CONV_RUN)XIC(T5T_09_BT.INT_PULSE)XIO(T5T_09_BT.RAMP_CNT_DN)ADD(T5T_09_BT.RAMP_CNT,1,T5T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(T5T_09_MTR.CONV_RUN)[GEQ(T5T_09_BT.RAMP_CNT,T5T_09_BTx.RAMP_UP_SET) ,XIC(T5T_09_BT.RAMP_CNT_DN) ][XIO(T5T_09_BT.RAMP_CNT_DN) MOV(T5T_09_BTx.RAMP_DN_SET,T5T_09_BT.RAMP_CNT) ,OTE(T5T_09_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(T5T_09_MTR.CONV_RUN)XIC(T5T_09_BT.INT_PULSE)XIC(T5T_09_BT.MOVING)SUB(T5T_09_BT.RAMP_CNT,1,T5T_09_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(T5T_09_BT.RAMP_CNT,0)OTE(T5T_09_BT.MOVING);
				N: XIC(T5T_09_MTR.CONV_RUN)[XIO(T5T_09_BT.RUN) [OTE(T5T_09_BT.RUN_ONS) ,ADD(CST[0],T5T_09_BT.TIMELEFT,T5T_09_BT.SIM_PULSE_TIME) ] ,OTE(T5T_09_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(T5T_09_MTR.CONV_RUN)XIO(T5T_09_BT.LU_ONS)[XIO(T5T_09_BT.RUN_ONS) XIO(T5T_09_BT.STRT_MEM) ADD(CST[0],T5T_09_BTx.PULSE_PERIOD,T5T_09_BT.SIM_PULSE_TIME) ,OTE(T5T_09_BT.STRT_MEM) ,TON(T5T_09_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(T5T_09_MTR.CONV_RUN)[XIO(T5T_09_BT.NORUN) SUB(T5T_09_BT.SIM_PULSE_TIME,CST[0],T5T_09_BT.TIMELEFT) ,OTE(T5T_09_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(T5T_09_BT.SIM_PULSE_TIME.31)[XIO(T5T_09_BT.SIM_PULSE_TIME_NEG_MEM) OTE(T5T_09_BT.SIM_PULSE_TIME_NEG) ,OTE(T5T_09_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(T5T_09_MTR.CONV_RUN) ,XIC(T5T_09_BT.MOVING) ][XIC(T5T_09_BT.SIM_PULSE_TIME_NEG) ,XIC(T5T_09_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(T5T_09_BT.LU_ONS)OTE(T5T_09_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],T5T_09_BT.SIM_PULSE_TIME) XIO(T5T_09_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(T5T_09_BT.SIM_PULSE_TIME.31) ][OTE(T5T_09_BT.INT_PULSE) ,ADD(T5T_09_BT.SIM_PULSE_TIME,T5T_09_BTx.PULSE_PERIOD,T5T_09_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(T5T_09_MTR.CONV_RUN) XIC(T5T_09_BT.RAMP_CNT_DN) ,XIO(T5T_09_MTR.CONV_RUN) XIC(T5T_09_BT.MOVING) ]XIC(T5T_09_BT.INT_PULSE)OTE(T5T_09_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(T5T_09_BT.BT_PULSE)ADD(T5T_09_BT.ACCUM,1,T5T_09_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(T5T_09_BT.ACCUM,T5T_09_BT.CAPT) ,MOV(0,T5T_09_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(T5T_09_BT.RAMP_UP_TMR.DN)XIO(T5T_09_BT.FAULT_TIMER.DN)XIO(T5T_09_BT.BT_PULSE)TON(T5T_09_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(T5T_09_MTR.CONV_RUN) ,XIC(T5T_09_BT.MOVING) ][XIO(T5T_09_BT.SIM_PULSE_ROLL) SUB(CST[0],T5T_09_BT.SIM_PULSE_TIME,T5T_09_BT.PULSE_TIME_DIF) ABS(T5T_09_BT.PULSE_TIME_DIF,T5T_09_BT.PULSE_TIME_DIF) GRT(T5T_09_BT.PULSE_TIME_DIF,T5T_09_BTx.PULSE_PERIOD) ,XIC(T5T_09_BT.FAULT_TIMER.DN) ][XIO(T5T_09_BT.LU_DET) OTE(T5T_09_BT.LU_ONS) ,OTE(T5T_09_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(T5T_09_BT.LU_ONS)ADD(T5T_09_BT.LU_COUNTER,1,T5T_09_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(T5T_09_PE.POS_XITN)CLR(T5T_09_BT.CFG_CNT);
				N: XIO(I_PE_T5T_09)[XIO(T5T_09_BT.CFG_RAMP_UP) XIC(T5T_09_BT.BT_PULSE) ,XIC(T5T_09_BT.CFG_RAMP_UP) XIC(T5T_09_BT.INT_PULSE) XIC(T5T_09_MTR.CONV_RUN) ]ADD(T5T_09_BT.CFG_CNT,1,T5T_09_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_XO2_04_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(XO2_04_MTR.CONV_RUN)XIC(XO2_04_BT.INT_PULSE)XIO(XO2_04_BT.RAMP_CNT_DN)ADD(XO2_04_BT.RAMP_CNT,1,XO2_04_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(XO2_04_MTR.CONV_RUN)[GEQ(XO2_04_BT.RAMP_CNT,XO2_04_BTx.RAMP_UP_SET) ,XIC(XO2_04_BT.RAMP_CNT_DN) ][XIO(XO2_04_BT.RAMP_CNT_DN) MOV(XO2_04_BTx.RAMP_DN_SET,XO2_04_BT.RAMP_CNT) ,OTE(XO2_04_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(XO2_04_MTR.CONV_RUN)XIC(XO2_04_BT.INT_PULSE)XIC(XO2_04_BT.MOVING)SUB(XO2_04_BT.RAMP_CNT,1,XO2_04_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(XO2_04_BT.RAMP_CNT,0)OTE(XO2_04_BT.MOVING);
				N: XIC(XO2_04_MTR.CONV_RUN)[XIO(XO2_04_BT.RUN) [OTE(XO2_04_BT.RUN_ONS) ,ADD(CST[0],XO2_04_BT.TIMELEFT,XO2_04_BT.SIM_PULSE_TIME) ] ,OTE(XO2_04_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(XO2_04_MTR.CONV_RUN)XIO(XO2_04_BT.LU_ONS)[XIO(XO2_04_BT.RUN_ONS) XIO(XO2_04_BT.STRT_MEM) ADD(CST[0],XO2_04_BTx.PULSE_PERIOD,XO2_04_BT.SIM_PULSE_TIME) ,OTE(XO2_04_BT.STRT_MEM) ,TON(XO2_04_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(XO2_04_MTR.CONV_RUN)[XIO(XO2_04_BT.NORUN) SUB(XO2_04_BT.SIM_PULSE_TIME,CST[0],XO2_04_BT.TIMELEFT) ,OTE(XO2_04_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(XO2_04_BT.SIM_PULSE_TIME.31)[XIO(XO2_04_BT.SIM_PULSE_TIME_NEG_MEM) OTE(XO2_04_BT.SIM_PULSE_TIME_NEG) ,OTE(XO2_04_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(XO2_04_MTR.CONV_RUN) ,XIC(XO2_04_BT.MOVING) ][XIC(XO2_04_BT.SIM_PULSE_TIME_NEG) ,XIC(XO2_04_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(XO2_04_BT.LU_ONS)OTE(XO2_04_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],XO2_04_BT.SIM_PULSE_TIME) XIO(XO2_04_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(XO2_04_BT.SIM_PULSE_TIME.31) ][OTE(XO2_04_BT.INT_PULSE) ,ADD(XO2_04_BT.SIM_PULSE_TIME,XO2_04_BTx.PULSE_PERIOD,XO2_04_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(XO2_04_MTR.CONV_RUN) XIC(XO2_04_BT.RAMP_CNT_DN) ,XIO(XO2_04_MTR.CONV_RUN) XIC(XO2_04_BT.MOVING) ]XIC(XO2_04_BT.INT_PULSE)OTE(XO2_04_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(XO2_04_BT.BT_PULSE)ADD(XO2_04_BT.ACCUM,1,XO2_04_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(XO2_04_BT.ACCUM,XO2_04_BT.CAPT) ,MOV(0,XO2_04_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(XO2_04_BT.RAMP_UP_TMR.DN)XIO(XO2_04_BT.FAULT_TIMER.DN)XIO(XO2_04_BT.BT_PULSE)TON(XO2_04_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(XO2_04_MTR.CONV_RUN) ,XIC(XO2_04_BT.MOVING) ][XIO(XO2_04_BT.SIM_PULSE_ROLL) SUB(CST[0],XO2_04_BT.SIM_PULSE_TIME,XO2_04_BT.PULSE_TIME_DIF) ABS(XO2_04_BT.PULSE_TIME_DIF,XO2_04_BT.PULSE_TIME_DIF) GRT(XO2_04_BT.PULSE_TIME_DIF,XO2_04_BTx.PULSE_PERIOD) ,XIC(XO2_04_BT.FAULT_TIMER.DN) ][XIO(XO2_04_BT.LU_DET) OTE(XO2_04_BT.LU_ONS) ,OTE(XO2_04_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(XO2_04_BT.LU_ONS)ADD(XO2_04_BT.LU_COUNTER,1,XO2_04_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(XO2_04_PE.POS_XITN)CLR(XO2_04_BT.CFG_CNT);
				N: XIO(I_PE_XO2_04)[XIO(XO2_04_BT.CFG_RAMP_UP) XIC(XO2_04_BT.BT_PULSE) ,XIC(XO2_04_BT.CFG_RAMP_UP) XIC(XO2_04_BT.INT_PULSE) XIC(XO2_04_MTR.CONV_RUN) ]ADD(XO2_04_BT.CFG_CNT,1,XO2_04_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE BT_XO2_05_P 
				RC: "****************************************************************$N"
				    "This subroutine monitors conveyor control and generates a simulated encoder pulse for use throughout the program.$N"
				    "This pulse is primarily used in tracking routines to track the bags.$N"
				    "The pseudo encoders are programmed to simulate ramp up and down of the conveyor upon starting and stopping.  A pulse counter is used for this.$N"
				    "****************************************************************$N"
				    "$N"
				    "If the conveyor is running, and the ramp count is not done, increment the ramp counter on each pulse generated.";
				N: XIC(XO2_05_MTR.CONV_RUN)XIC(XO2_05_BT.INT_PULSE)XIO(XO2_05_BT.RAMP_CNT_DN)ADD(XO2_05_BT.RAMP_CNT,1,XO2_05_BT.RAMP_CNT);
				RC: "If the ramp count is greater than or equal to the setpoint, the ramp count is done.";
				N: XIC(XO2_05_MTR.CONV_RUN)[GEQ(XO2_05_BT.RAMP_CNT,XO2_05_BTx.RAMP_UP_SET) ,XIC(XO2_05_BT.RAMP_CNT_DN) ][XIO(XO2_05_BT.RAMP_CNT_DN) MOV(XO2_05_BTx.RAMP_DN_SET,XO2_05_BT.RAMP_CNT) ,OTE(XO2_05_BT.RAMP_CNT_DN) ];
				RC: "If the conveyor is not running, decrement the ramp counter on each pulse generated.";
				N: XIO(XO2_05_MTR.CONV_RUN)XIC(XO2_05_BT.INT_PULSE)XIC(XO2_05_BT.MOVING)SUB(XO2_05_BT.RAMP_CNT,1,XO2_05_BT.RAMP_CNT);
				RC: "If the ramp count is greater than zero, then consider the conveyor to be moving.";
				N: GRT(XO2_05_BT.RAMP_CNT,0)OTE(XO2_05_BT.MOVING);
				N: XIC(XO2_05_MTR.CONV_RUN)[XIO(XO2_05_BT.RUN) [OTE(XO2_05_BT.RUN_ONS) ,ADD(CST[0],XO2_05_BT.TIMELEFT,XO2_05_BT.SIM_PULSE_TIME) ] ,OTE(XO2_05_BT.RUN) ];
				RC: "Upon the conveyor starting, calculate the CST value at which the first internal pulse should be generated.$N"
				    "Also run the ramp timer when the $Qconv_run$Q bit is on.";
				N: XIC(XO2_05_MTR.CONV_RUN)XIO(XO2_05_BT.LU_ONS)[XIO(XO2_05_BT.RUN_ONS) XIO(XO2_05_BT.STRT_MEM) ADD(CST[0],XO2_05_BTx.PULSE_PERIOD,XO2_05_BT.SIM_PULSE_TIME) ,OTE(XO2_05_BT.STRT_MEM) ,TON(XO2_05_BT.RAMP_UP_TMR,?,?) ];
				N: XIO(XO2_05_MTR.CONV_RUN)[XIO(XO2_05_BT.NORUN) SUB(XO2_05_BT.SIM_PULSE_TIME,CST[0],XO2_05_BT.TIMELEFT) ,OTE(XO2_05_BT.NORUN) ];
				RC: "One shot the calculated pulse time going negative.";
				N: XIC(XO2_05_BT.SIM_PULSE_TIME.31)[XIO(XO2_05_BT.SIM_PULSE_TIME_NEG_MEM) OTE(XO2_05_BT.SIM_PULSE_TIME_NEG) ,OTE(XO2_05_BT.SIM_PULSE_TIME_NEG_MEM) ];
				RC: "When the calculated pulse time is negative, but the CST is still positive, then seal in the $Qrollover$Q bit.";
				N: [XIC(XO2_05_MTR.CONV_RUN) ,XIC(XO2_05_BT.MOVING) ][XIC(XO2_05_BT.SIM_PULSE_TIME_NEG) ,XIC(XO2_05_BT.SIM_PULSE_ROLL) ]XIO(CST[0].31)XIO(XO2_05_BT.LU_ONS)OTE(XO2_05_BT.SIM_PULSE_ROLL);
				RC: "If the CST is greater than the calculated pulse time, then turn on the internal pulse bit, and calculate the next pulse time.  If the CST/pulse time are at a rollover point, don$'t pulse until both are negative.$N"
				    "If the CST goes negative, but the calculated pulse time is positive, then that means that the CST has actually surpassed the calculated pulse time, so pulse and calculate new pulse time.";
				N: [GEQ(CST[0],XO2_05_BT.SIM_PULSE_TIME) XIO(XO2_05_BT.SIM_PULSE_ROLL) ,XIC(INT.CST_Neg_ONS) XIO(XO2_05_BT.SIM_PULSE_TIME.31) ][OTE(XO2_05_BT.INT_PULSE) ,ADD(XO2_05_BT.SIM_PULSE_TIME,XO2_05_BTx.PULSE_PERIOD,XO2_05_BT.SIM_PULSE_TIME) ];
				RC: "If the $Qconv_run$Q bit is on and the ramp count is done, then create BT_PULSE output with the internal pulse bit.$N"
				    "If the $Qconv_run$Q bit is off, then create BT_PULSE output until the ramp count reaches zero (i.e. $QMOVING$Q bit is off).";
				N: [XIC(XO2_05_MTR.CONV_RUN) XIC(XO2_05_BT.RAMP_CNT_DN) ,XIO(XO2_05_MTR.CONV_RUN) XIC(XO2_05_BT.MOVING) ]XIC(XO2_05_BT.INT_PULSE)OTE(XO2_05_BT.BT_PULSE);
				RC: "Count the encoder pulses.";
				N: XIC(XO2_05_BT.BT_PULSE)ADD(XO2_05_BT.ACCUM,1,XO2_05_BT.ACCUM);
				RC: "On the timed pulse, record the encoder pulse count and reset the counter.";
				N: XIC(INT.TWO_S_PULSE)[MOV(XO2_05_BT.ACCUM,XO2_05_BT.CAPT) ,MOV(0,XO2_05_BT.ACCUM) ];
				RC: "When the motor is on, run the fault timer.  Reset the timer each time a pulse is detected.  This timer detects when no encoder pulses are being generated.";
				N: XIC(XO2_05_BT.RAMP_UP_TMR.DN)XIO(XO2_05_BT.FAULT_TIMER.DN)XIO(XO2_05_BT.BT_PULSE)TON(XO2_05_BT.FAULT_TIMER,?,?);
				RC: "When the difference between the CST and the SIM Pulse Time is greater than the Pulse Period, or the fault timer detected no encoder pulses being generated, or the Primary Chassis has switched, trigger a Lockup";
				N: [XIC(XO2_05_MTR.CONV_RUN) ,XIC(XO2_05_BT.MOVING) ][XIO(XO2_05_BT.SIM_PULSE_ROLL) SUB(CST[0],XO2_05_BT.SIM_PULSE_TIME,XO2_05_BT.PULSE_TIME_DIF) ABS(XO2_05_BT.PULSE_TIME_DIF,XO2_05_BT.PULSE_TIME_DIF) GRT(XO2_05_BT.PULSE_TIME_DIF,XO2_05_BTx.PULSE_PERIOD) ,XIC(XO2_05_BT.FAULT_TIMER.DN) ][XIO(XO2_05_BT.LU_DET) OTE(XO2_05_BT.LU_ONS) ,OTE(XO2_05_BT.LU_DET) ];
				RC: "Capture a lockup condition for troubleshooting purposes by programmers.";
				N: XIC(XO2_05_BT.LU_ONS)ADD(XO2_05_BT.LU_COUNTER,1,XO2_05_BT.LU_COUNTER);
				RC: "The configuration counter allows you to configure and evaluate the ramp counter setting of the pseudo BT. To evaluate the accuracy do the following:$N"
				    "$N"
				    "-Toggle CFG_RAMP_UP to OFF.$N"
				    "-Turn off the downstream conveyor.$N"
				    "-Drop a bag upstream of the head end PE of the pseudo BT conveyor and allow it to head end stop.$N"
				    "-Restart the downstream conveyor and allow the bag to transfer onto the downstream conveyor.$N"
				    "-Measure the bag with a measuring tape.$N"
				    "-Divide the bag$'s length by the pseudo BT$'s resolution.$N"
				    "-The CFG_CNT should match what you$'ve calculated as the bag$'s length in pulses.$N"
				    "$N"
				    "Notes:$N"
				    "-------------$N"
				    "-For contactor controlled conveyors, the ramp up is usually almost instantaneous and the ramp down is longer.$N"
				    "-For VFD belts with a configured ramp setting, the ramp up and ramp down are usually the same.";
				N: XIC(XO2_05_PE.POS_XITN)CLR(XO2_05_BT.CFG_CNT);
				N: XIO(I_PE_XO2_05)[XIO(XO2_05_BT.CFG_RAMP_UP) XIC(XO2_05_BT.BT_PULSE) ,XIC(XO2_05_BT.CFG_RAMP_UP) XIC(XO2_05_BT.INT_PULSE) XIC(XO2_05_MTR.CONV_RUN) ]ADD(XO2_05_BT.CFG_CNT,1,XO2_05_BT.CFG_CNT);
		END_ROUTINE

		ROUTINE C2T_17_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE_O2T_09)OTL(C2T_17_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(O2T_10_BT.BT_PULSE)[OTU(C2T_17_MRG.MainLineBScntrl.EN) ,BSR(C2T_17_MRG.MainLineBS[0],C2T_17_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(C2T_17_MRG.Lead_Gap_Acc.6) ADD(1,C2T_17_MRG.Lead_Gap_Acc,C2T_17_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(C2T_17_MRG.BagPastPE,C2T_17_MRGx.Lead_Gap,C2T_17_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(C2T_17_MRG.MainLineBScntrl.UL)CLR(C2T_17_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(C2T_17_MRG.Lead_Gap_Acc,C2T_17_MRG.Lead_Gap)OTE(C2T_17_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(C2T_17_MRG.MrgSeal)XIC(C2T_17_PE.FILT_NEG_XITN)RES(C2T_17_MRG.SyncRunTmr);
				N: [XIC(C2T_17_MTR.CONV_RUN) ,XIC(C2T_17_MTR.IM_TMR.TT) ]RTO(C2T_17_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_C2T_17) ,XIC(C2T_17_PE.FILT) ,XIC(C2T_17_MRG.PeSeal) XIO(C2T_17_MTR.ANTI_CASC) XIO(C2T_17_MTR.CONV_RUN) XIC(C2T_17_MTR.INTL_MTR) ][XIO(C2T_17_MRG.PeSeal) OTE(C2T_17_MRG.PeSeal_PosXitn) ,OTE(C2T_17_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(C2T_17_MRG.PeSeal_PosXitn)[MOV(C2T_17_MRG.Length,C2T_17_MRG.BagLength_Gap) CLR(C2T_17_MRG.Length) ,MOV(54,C2T_17_MRGx.MinLength) ,EQU(C2T_17_MRG.BagLength_Gap,0) DIV(C2T_17_MRGx.MinLength,C2T_17_BTx.RES,C2T_17_MRG.BagLength_Gap) ,ADD(C2T_17_MRG.BagLength_Gap,C2T_17_MRGx.Trail_Gap,C2T_17_MRG.BagLength_Gap) ,GRT(C2T_17_MRG.BagLength_Gap,C2T_17_MRGx.MaxLength) MOV(C2T_17_MRGx.MaxLength,C2T_17_MRG.BagLength_Gap) ,FLL(0,C2T_17_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[C2T_17_MRG.BagLength_Gap],C2T_17_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[C2T_17_MRG.BagLength_Gap],C2T_17_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[C2T_17_MRG.BagLength_Gap],C2T_17_MRG.MrgLineBS[2]) ,CLR(C2T_17_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(C2T_17_MRG.PeSeal)XIO(C2T_17_MRG.MrgSeal)XIC(C2T_17_BT.BT_PULSE)[OTU(C2T_17_MRG.MrgLineBScntrl.EN) ,BSR(C2T_17_MRG.MrgLineBS[0],C2T_17_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,C2T_17_MRG.BagPastPE,C2T_17_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(C2T_17_MRG.MainLineBS[0],C2T_17_MRG.MrgLineBS[0],C2T_17_MRG.Intrfr[0])AND(C2T_17_MRG.MainLineBS[1],C2T_17_MRG.MrgLineBS[1],C2T_17_MRG.Intrfr[1])AND(C2T_17_MRG.MainLineBS[2],C2T_17_MRG.MrgLineBS[2],C2T_17_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(C2T_17_MRG.Intrfr[0],0)EQU(C2T_17_MRG.Intrfr[1],0)EQU(C2T_17_MRG.Intrfr[2],0)[XIC(C2T_17_MRG.Lead_Gap_DN) ,XIC(C2T_17_MRG.Hold_Align) ][XIO(C2T_17_MRG.MrgOK) OTE(C2T_17_MRG.MrgOK_PosXitn) ,OTE(C2T_17_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(C2T_17_MTR.INTL_MTR) [XIO(C2T_17_MRG.Hold_MB) XIO(C2T_17_MRG.Hold_MA) XIO(C2T_17_MRG.Hold_Align) XIC(C2T_17_MRG.MrgOK) ,XIC(C2T_17_MRG.Hold_MA) XIO(C2T_17_MRG.MrgOK) ,XIC(C2T_17_MRG.MrgOK_PosXitn) ] ,XIC(C2T_17_MRG.MrgSeal) ]XIO(C2T_17_MTR.SPACE)XIC(C2T_17_MRG.PeSeal)[OTE(C2T_17_MRG.MrgSeal) ,OTU(C2T_17_MRG.Hold_MA) ,OTU(C2T_17_MRG.Hold_MB) ,OTU(C2T_17_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(C2T_17_MRG.PeSeal)XIC(O2T_10_MTR.CONV_RUN)RTO(C2T_17_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(C2T_17_MRG.MLPriorityTmr.DN)OTE(C2T_17_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(C2T_17_MRG.PriorityStop)XIC(C2T_17_MTR.CONV_RUN)RTO(C2T_17_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(C2T_17_MRG.MrgSeal)XIO(C2T_17_MRG.PriorityStop)RES(C2T_17_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(C2T_17_MRG.MrgLBagflow.DN)[XIO(C2T_17_MRG.PeSeal) RES(C2T_17_MRG.MLPriorityTmr) ,RES(C2T_17_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(C2T_17_MRG.MrgLPriorityTmr.DN)[RES(C2T_17_MRG.MrgLPriorityTmr) ,RES(C2T_17_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(C2T_16_PE.FILT)TON(C2T_17_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(C2T_16_MTR.CONV_RUN) [XIO(I_PE_C2T_16) ,XIC(C2T_16_PE.FILT) ] ,XIC(C2T_15_MTR.CONV_RUN) [XIO(I_PE_C2T_15) ,XIC(C2T_15_PE.FILT) ] ,XIC(C2T_17_MRG.PeSeal) ,XIC(C2T_17_MTR.IM_ONS) ,XIC(F_C2T_17_OVRIDE) ]RES(C2T_17_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(C2T_17_MTR.CONV_RUN)RTO(C2T_17_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(C2T_17_PE.FILT) XIC(C2T_17_MRG.MrgOK_PosXitn) ,XIC(C2T_17_PE.FILT_POS_XITN) XIC(C2T_17_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(56,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE C2T_17_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(O2T_10_PE.FILT_NEG_XITN)MOV(0,C2T_17_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(O2T_10_PE.POS_XITN)[MOV(C2T_17_MRG.HeadHeadAcc,C2T_17_MRG.HeadHeadCnt) ,MOV(C2T_17_MRG.TailHeadAcc,C2T_17_MRG.TailHeadCnt) ,MOV(0,C2T_17_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(O2T_10_BT.BT_PULSE)[ADD(1,C2T_17_MRG.HeadHeadAcc,C2T_17_MRG.HeadHeadAcc) ,ADD(1,C2T_17_MRG.TailHeadAcc,C2T_17_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(O2T_10_PE.POS_XITN)CPT(C2T_17_MRG.LastBagMrgWndo,C2T_17_MRG.HeadHeadCnt*O2T_10_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(O2T_10_PE.POS_XITN)CPT(C2T_17_MRG.LastBagGapDist,C2T_17_MRG.TailHeadCnt*O2T_10_BTx.RES);
		END_ROUTINE

		ROUTINE C2T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_C2T_14_PE_JAMMED) XIC(I_PE_C2T_14) ,XIC(F_C2T_13_PE_JAMMED) XIC(I_PE_C2T_13) ,XIC(F_C2T_12_PE_JAMMED) XIC(I_PE_C2T_12) ,XIC(F_C2T_16_PE_JAMMED) XIC(I_PE_C2T_16) ,XIC(F_C2T_15_PE_JAMMED) XIC(I_PE_C2T_15) ,XIC(F_C2T_13_CS_E_STOP) XIO(I_CS_C2T_13_EPB) ,AFI() ]OTE(CS_C2T_13_LTA_FLASH);
				N: [[XIC(F_C2T_14_PE_JAMMED) ,XIC(F_C2T_13_PE_JAMMED) ,XIC(F_C2T_12_PE_JAMMED) ,XIC(F_C2T_16_PE_JAMMED) ,XIC(F_C2T_15_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_C2T_13_LTA_FLASH) ,XIC(CS_C2T_13_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_C2T_13_RPBA);
				N: XIO(EZ_30102.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_C2T_13_EPB) ]OTE(O_CS_C2T_13_EPB);
				N: XIC(F_C2T_13_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_C2T_13_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_C2T_17_PE_JAMMED) XIC(I_PE_C2T_17) ,XIC(F_C2T_16_PE_JAMMED) XIC(I_PE_C2T_16) ,XIC(F_C2T_15_PE_JAMMED) XIC(I_PE_C2T_15) ,XIC(F_C2T_17_CS_E_STOP) XIO(I_CS_C2T_17_EPB) ,AFI() ]OTE(CS_C2T_17_LTA_FLASH);
				N: [[XIC(F_C2T_17_PE_JAMMED) ,XIC(F_C2T_16_PE_JAMMED) ,XIC(F_C2T_15_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_C2T_17_LTA_FLASH) ,XIC(CS_C2T_17_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_C2T_17_RPBA);
				N: XIO(EZ_30101.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_C2T_17_EPB) ]OTE(O_CS_C2T_17_EPB);
				N: XIC(F_C2T_17_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_C2T_17_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_B.STATUS.DR_FLT_MONITOR) ,XIC(BM1_B.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_B.STATUS.MOL_MONITOR) ,XIC(BM1_B.STATUS.JAM_MONITOR) ,XIC(BM1_B.STATUS.MB_JAM_MONITOR) ,XIC(BM1_B.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_C2T_13_LTA);
				N: XIC(BM1_B.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_C2T_13_LTR);
				N: [[XIC(BM1_B.STATUS.DR_FLT_ALARM) ,XIC(BM1_B.STATUS.MOL_ALARM) ,XIC(BM1_B.STATUS.JAM_ALARM) ,XIC(BM1_B.STATUS.MB_JAM_ALARM) ,XIC(BM1_B.STATUS.E_STOP_ALARM) ,XIC(BM1_B.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_C2T_13_ALM);
		END_ROUTINE

		ROUTINE C2T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_17_MTR.G) ,XIC(C2T_17_MTR.RUNNING) MOV(Status.ConvRunning,C2T_17_MTR.G) ,XIC(C2T_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_17_MTR.G) ,[XIC(C2T_17_MTR.IM_TMR.TT) ,XIO(C2T_17_MTR.AUTO_STOP) XIC(C2T_17_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,C2T_17_MTR.G) ,XIC(C2T_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_17_MTR.G) ,XIC(F_C2T_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_17_MTR.G) ,XIC(C2T_17_MTR.CASC) MOV(Status.ConvCascade,C2T_17_MTR.G) ,XIC(C2T_17_MTR.CASC) XIO(I_PE_C2T_17) MOV(Status.ConvBagPresCasc,C2T_17_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_17_MTR.G) ,XIC(F_C2T_17_MSD_OFF) MOV(Status.ConvDisc,C2T_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_17_MTR.G) ,XIC(C2T_17_MTR.JAMMED) MOV(Status.ConvJammed,C2T_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_17_MTR.G) ,XIC(F_C2T_17_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_17_MTR.G) ,XIC(F_C2T_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_17_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_17_MTR.G) ,XIC(F_C2T_17_OVRIDE) MOV(Status.ConvOverRide,C2T_17_MTR.G) ,XIC(C2T_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_17_MTR.G) ,XIC(C2T_17_MTR.E_STOP) XIO(C2T_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_17_MTR.G) ,XIC(F_C2T_17_OUTSERV) MOV(Status.ConvOutOfServ,C2T_17_MTR.G) ,XIC(C2T_17_MTR.COMM) MOV(Status.ConvCommFault,C2T_17_MTR.G) ,MOV(C2T_17_MTR.G,G_C2T_17_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_16_MTR.G) ,XIC(C2T_16_MTR.RUNNING) MOV(Status.ConvRunning,C2T_16_MTR.G) ,XIC(C2T_16_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_16_MTR.G) ,[XIC(C2T_16_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,C2T_16_MTR.G) ,XIC(C2T_16_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_16_MTR.G) ,XIC(F_C2T_16_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_16_MTR.G) ,XIC(C2T_16_MTR.CASC) MOV(Status.ConvCascade,C2T_16_MTR.G) ,XIC(C2T_16_MTR.CASC) XIO(I_PE_C2T_16) MOV(Status.ConvBagPresCasc,C2T_16_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_16_MTR.G) ,XIC(F_C2T_16_MSD_OFF) MOV(Status.ConvDisc,C2T_16_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_16_MTR.G) ,XIC(C2T_16_MTR.JAMMED) MOV(Status.ConvJammed,C2T_16_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_16_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_16_MTR.G) ,XIC(F_C2T_16_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_16_MTR.G) ,XIC(F_C2T_16_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_16_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_16_MTR.G) ,XIC(F_C2T_16_OVRIDE) MOV(Status.ConvOverRide,C2T_16_MTR.G) ,XIC(C2T_16_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_16_MTR.G) ,XIC(C2T_16_MTR.E_STOP) XIO(C2T_16_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_16_MTR.G) ,XIC(F_C2T_16_OUTSERV) MOV(Status.ConvOutOfServ,C2T_16_MTR.G) ,XIC(C2T_16_MTR.COMM) MOV(Status.ConvCommFault,C2T_16_MTR.G) ,MOV(C2T_16_MTR.G,G_C2T_16_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_15_MTR.G) ,XIC(C2T_15_MTR.RUNNING) MOV(Status.ConvRunning,C2T_15_MTR.G) ,XIC(C2T_15_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_15_MTR.G) ,[XIC(C2T_15_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,C2T_15_MTR.G) ,XIC(C2T_15_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_15_MTR.G) ,XIC(F_C2T_15_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_15_MTR.G) ,XIC(C2T_15_MTR.CASC) MOV(Status.ConvCascade,C2T_15_MTR.G) ,XIC(C2T_15_MTR.CASC) XIO(I_PE_C2T_15) MOV(Status.ConvBagPresCasc,C2T_15_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_15_MTR.G) ,XIC(F_C2T_15_MSD_OFF) MOV(Status.ConvDisc,C2T_15_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_15_MTR.G) ,XIC(C2T_15_MTR.JAMMED) MOV(Status.ConvJammed,C2T_15_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_15_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_15_MTR.G) ,XIC(F_C2T_15_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_15_MTR.G) ,XIC(F_C2T_15_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_15_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_15_MTR.G) ,XIC(F_C2T_15_OVRIDE) MOV(Status.ConvOverRide,C2T_15_MTR.G) ,XIC(C2T_15_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_15_MTR.G) ,XIC(C2T_15_MTR.E_STOP) XIO(C2T_15_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_15_MTR.G) ,XIC(F_C2T_15_OUTSERV) MOV(Status.ConvOutOfServ,C2T_15_MTR.G) ,XIC(C2T_15_MTR.COMM) MOV(Status.ConvCommFault,C2T_15_MTR.G) ,MOV(C2T_15_MTR.G,G_C2T_15_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_14_MTR.G) ,XIC(C2T_14_MTR.RUNNING) MOV(Status.ConvRunning,C2T_14_MTR.G) ,XIC(C2T_14_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_14_MTR.G) ,[XIC(C2T_14_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,C2T_14_MTR.G) ,XIC(C2T_14_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_14_MTR.G) ,XIC(F_C2T_14_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_14_MTR.G) ,XIC(C2T_14_MTR.CASC) MOV(Status.ConvCascade,C2T_14_MTR.G) ,XIC(C2T_14_MTR.CASC) XIO(I_PE_C2T_14) MOV(Status.ConvBagPresCasc,C2T_14_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_14_MTR.G) ,XIC(F_C2T_14_MSD_OFF) MOV(Status.ConvDisc,C2T_14_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_14_MTR.G) ,XIC(C2T_14_MTR.JAMMED) MOV(Status.ConvJammed,C2T_14_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_14_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_14_MTR.G) ,XIC(F_C2T_14_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_14_MTR.G) ,XIC(F_C2T_14_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_14_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_14_MTR.G) ,XIC(F_C2T_14_OVRIDE) MOV(Status.ConvOverRide,C2T_14_MTR.G) ,XIC(C2T_14_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_14_MTR.G) ,XIC(C2T_14_MTR.E_STOP) XIO(C2T_14_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_14_MTR.G) ,XIC(F_C2T_14_OUTSERV) MOV(Status.ConvOutOfServ,C2T_14_MTR.G) ,XIC(C2T_14_MTR.COMM) MOV(Status.ConvCommFault,C2T_14_MTR.G) ,MOV(C2T_14_MTR.G,G_C2T_14_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_13_MTR.G) ,XIC(C2T_13_MTR.RUNNING) MOV(Status.ConvRunning,C2T_13_MTR.G) ,XIC(C2T_13_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_13_MTR.G) ,[XIC(C2T_13_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,C2T_13_MTR.G) ,XIC(C2T_13_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_13_MTR.G) ,XIC(F_C2T_13_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_13_MTR.G) ,XIC(C2T_13_MTR.CASC) MOV(Status.ConvCascade,C2T_13_MTR.G) ,XIC(C2T_13_MTR.CASC) XIO(I_PE_C2T_13) MOV(Status.ConvBagPresCasc,C2T_13_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_13_MTR.G) ,XIC(F_C2T_13_MSD_OFF) MOV(Status.ConvDisc,C2T_13_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_13_MTR.G) ,XIC(C2T_13_MTR.JAMMED) MOV(Status.ConvJammed,C2T_13_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_13_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_13_MTR.G) ,XIC(F_C2T_13_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_13_MTR.G) ,XIC(F_C2T_13_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_13_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_13_MTR.G) ,XIC(F_C2T_13_OVRIDE) MOV(Status.ConvOverRide,C2T_13_MTR.G) ,XIC(C2T_13_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_13_MTR.G) ,XIC(C2T_13_MTR.E_STOP) XIO(C2T_13_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_13_MTR.G) ,XIC(F_C2T_13_OUTSERV) MOV(Status.ConvOutOfServ,C2T_13_MTR.G) ,XIC(C2T_13_MTR.COMM) MOV(Status.ConvCommFault,C2T_13_MTR.G) ,MOV(C2T_13_MTR.G,G_C2T_13_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,C2T_12_MTR.G) ,XIC(C2T_12_MTR.RUNNING) MOV(Status.ConvRunning,C2T_12_MTR.G) ,XIC(C2T_12_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,C2T_12_MTR.G) ,[XIC(C2T_12_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,C2T_12_MTR.G) ,XIC(C2T_12_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,C2T_12_MTR.G) ,XIC(F_C2T_12_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,C2T_12_MTR.G) ,XIC(C2T_12_MTR.CASC) MOV(Status.ConvCascade,C2T_12_MTR.G) ,XIC(C2T_12_MTR.CASC) XIO(I_PE_C2T_12) MOV(Status.ConvBagPresCasc,C2T_12_MTR.G) ,AFI() MOV(Status.ConvFull,C2T_12_MTR.G) ,XIC(F_C2T_12_MSD_OFF) MOV(Status.ConvDisc,C2T_12_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,C2T_12_MTR.G) ,XIC(C2T_12_MTR.JAMMED) MOV(Status.ConvJammed,C2T_12_MTR.G) ,AFI() MOV(Status.ConvMBJam,C2T_12_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,C2T_12_MTR.G) ,XIC(F_C2T_12_VFD_FAULT) MOV(Status.ConvVFDFlt,C2T_12_MTR.G) ,XIC(F_C2T_12_CTCTR_FAULT) MOV(Status.ConvCTCFlt,C2T_12_MTR.G) ,AFI() MOV(Status.ConvOverLoad,C2T_12_MTR.G) ,XIC(F_C2T_12_OVRIDE) MOV(Status.ConvOverRide,C2T_12_MTR.G) ,XIC(C2T_12_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,C2T_12_MTR.G) ,XIC(C2T_12_MTR.E_STOP) XIO(C2T_12_MTR.E_STOP_RES) MOV(Status.ConvEStop,C2T_12_MTR.G) ,XIC(F_C2T_12_OUTSERV) MOV(Status.ConvOutOfServ,C2T_12_MTR.G) ,XIC(C2T_12_MTR.COMM) MOV(Status.ConvCommFault,C2T_12_MTR.G) ,MOV(C2T_12_MTR.G,G_C2T_12_STS) ];
		END_ROUTINE

		ROUTINE C2T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_17_MTR.CONV_RUN)RTO(C2T_17_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_C2T_17_RPBA) ,XIC(I_CS_O2T_10_RPBA) ] XIC(C2T_17_PE.JAM_TMR.DN) ,XIO(C2T_17_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_17)RES(C2T_17_PE.JAM_TMR);
				N: XIC(C2T_17_PE.JAM_TMR.DN)[XIO(F_C2T_17_PE_JAMMED) [ADD(S_C2T_17_PE_JAM,1,S_C2T_17_PE_JAM) ,OTE(C2T_17_PE.JAM_ONS) ] ,OTE(F_C2T_17_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_16_MTR.CONV_RUN)RTO(C2T_16_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_C2T_17_RPBA) ,XIC(I_CS_C2T_13_RPBA) ] XIC(C2T_16_PE.JAM_TMR.DN) ,XIO(C2T_16_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_16)RES(C2T_16_PE.JAM_TMR);
				N: XIC(C2T_16_PE.JAM_TMR.DN)[XIO(F_C2T_16_PE_JAMMED) [ADD(S_C2T_16_PE_JAM,1,S_C2T_16_PE_JAM) ,OTE(C2T_16_PE.JAM_ONS) ] ,OTE(F_C2T_16_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_15_MTR.CONV_RUN)RTO(C2T_15_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_C2T_17_RPBA) ,XIC(I_CS_C2T_13_RPBA) ] XIC(C2T_15_PE.JAM_TMR.DN) ,XIO(C2T_15_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_15)RES(C2T_15_PE.JAM_TMR);
				N: XIC(C2T_15_PE.JAM_TMR.DN)[XIO(F_C2T_15_PE_JAMMED) [ADD(S_C2T_15_PE_JAM,1,S_C2T_15_PE_JAM) ,OTE(C2T_15_PE.JAM_ONS) ] ,OTE(F_C2T_15_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_14_MTR.CONV_RUN)RTO(C2T_14_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_C2T_13_RPBA) XIC(C2T_14_PE.JAM_TMR.DN) ,XIO(C2T_14_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_14)RES(C2T_14_PE.JAM_TMR);
				N: XIC(C2T_14_PE.JAM_TMR.DN)[XIO(F_C2T_14_PE_JAMMED) [ADD(S_C2T_14_PE_JAM,1,S_C2T_14_PE_JAM) ,OTE(C2T_14_PE.JAM_ONS) ] ,OTE(F_C2T_14_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_13_MTR.CONV_RUN)RTO(C2T_13_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_C2T_13_RPBA) XIC(C2T_13_PE.JAM_TMR.DN) ,XIO(C2T_13_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_13)RES(C2T_13_PE.JAM_TMR);
				N: XIC(C2T_13_PE.JAM_TMR.DN)[XIO(F_C2T_13_PE_JAMMED) [ADD(S_C2T_13_PE_JAM,1,S_C2T_13_PE_JAM) ,OTE(C2T_13_PE.JAM_ONS) ] ,OTE(F_C2T_13_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(C2T_12_MTR.CONV_RUN)RTO(C2T_12_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_C2T_13_RPBA) XIC(C2T_12_PE.JAM_TMR.DN) ,XIO(C2T_12_PE.JAM_TMR.DN) ]XIC(I_PE_C2T_12)RES(C2T_12_PE.JAM_TMR);
				N: XIC(C2T_12_PE.JAM_TMR.DN)[XIO(F_C2T_12_PE_JAMMED) [ADD(S_C2T_12_PE_JAM,1,S_C2T_12_PE_JAM) ,OTE(C2T_12_PE.JAM_ONS) ] ,OTE(F_C2T_12_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE C2T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_01_SPBG) ,XIC(I_INT_C2T_12_START) ,AFI() ]OTE(C2T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(C2T_17_MTR.INTL_MTR)XIC(C2T_16_MTR.CONV_RUN)XIC(C2T_15_MTR.CONV_RUN)XIC(C2T_14_MTR.CONV_RUN)XIC(C2T_13_MTR.CONV_RUN)XIC(C2T_12_MTR.CONV_RUN)OTE(C2T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_C2T_17) ,XIO(I_PE_C2T_16) ,XIO(I_PE_C2T_15) ,XIO(I_PE_C2T_14) ,XIO(I_PE_C2T_13) ,XIO(I_PE_C2T_12) ,AFI() ]OTE(C2T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(C2T.MTR_GRP.START) ,XIC(C2T.MTR_GRP.PEs) XIO(C2T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(C2T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(C2T.MTR_GRP.RUN_LATCH)XIC(C2T.MTR_GRP.PEs)OTE(C2T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(C2T.MTR_GRP.RUN_EXPAND)RTO(C2T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(C2T.MTR_GRP.START) ,XIC(C2T.MTR_GRP.RUN_LATCH) ]XIO(C2T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(C2T.STATUS.FIRE_ALM)OTE(C2T.MTR_GRP.RUN_LATCH);
				RC: "Motor C2T_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_10_MSD_OFF)OTE(C2T_17_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_C2T_17_JRB) TON(C2T_17_MTR.JRB_FILT_TON,?,?) ,XIC(C2T_17_MTR.JRB_FILT_TON.DN) OTE(C2T_17_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(C2T_17_MTR.E_STOP)[XIC(C2T_17_VFD.READY) XIO(C2T_17_MTR.JAMMED) ,XIC(F_C2T_17_OVRIDE) ,XIC(F_C2T_17_JOG_REVERSE) ]XIO(F_C2T_17_MSD_OFF)XIO(F_C2T_17_OUTSERV)XIO(C2T_17_MTR.COMM)OTE(C2T_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_17_OVRIDE) ]XIC(C2T_17_MTR.NO_FAULT)TON(C2T_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_17_MTR.IM_TMR.DN)[XIO(C2T_17_MTR.INTL_MTR) OTE(C2T_17_MTR.IM_ONS) ,OTE(C2T_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_17_PE.FILT_NEG_XITN)RES(C2T_17_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_10_MTR.CONV_RUN)RTO(C2T_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_17_PE.POS_XITN) XIC(C2T_17_MTR.INTL_MTR) ,XIC(C2T_17_MTR.T2H_SPACE) ]XIO(C2T_17_MTR.T2H_SPACE_TMR.DN)OTE(C2T_17_MTR.T2H_SPACE);
				N: XIC(C2T_17_MTR.T2H_SPACE)OTE(C2T_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_10_MTR.ON_TMR.DN) XIC(C2T_17_MTR.OFF_TMR.DN) ,XIO(O2T_10_MTR.IM_ONS) XIC(C2T_17_MTR.IM_ONS) ,XIC(C2T_17_MTR.ANTI_CASC) XIC(I_PE_C2T_17) ]OTE(C2T_17_MTR.START_EN);
				N: [[XIO(O2T_10_MTR.ON_TMR.DN) ,XIO(C2T_17_MRG.MrgSeal) ] [XIO(I_PE_C2T_17) ,XIC(C2T_17_MRG.PeSeal) ,XIO(C2T_17_MRG.SyncRunTmr.DN) ] ,XIO(C2T_17_MTR.ANTI_CASC) XIC(C2T_17_MTR.SPACE) ]OTE(C2T_17_MTR.STOP);
				N: XIC(C2T_17_MTR.INTL_MTR)XIO(F_C2T_17_JOG_REVERSE)[[XIC(C2T_17_MTR.START_EN) ,XIC(C2T_17_MTR.CONV_RUN) ] XIO(C2T_17_MTR.STOP) ,[XIO(C2T_17_MRG.SyncRunTmr.DN) ,XIC(C2T_17_MRG.MrgSeal) ] XIC(O2T_10_MTR.CONV_RUN) ,XIC(F_C2T_17_OVRIDE) ][OTE(C2T_17_MTR.CONV_RUN) ,XIO(C2T_17_MRG.MergeRunTmr.DN) OTE(O_VFD_C2T_17_FWD) ];
				N: XIC(F_C2T_17_JOG_REVERSE)XIC(C2T_17_MTR.JRB_FILT)XIO(C2T_17_MTR.E_STOP)XIC(C2T_17_VFD.READY)XIO(F_C2T_17_MSD_OFF)XIO(C2T_17_MTR.COMM)XIO(F_C2T_17_OVRIDE)OTE(O_VFD_C2T_17_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_17_MTR.CONV_RUN)TON(C2T_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_17_MTR.CONV_RUN)TON(C2T_17_MTR.OFF_TMR,?,?);
				RC: "Motor C2T_16$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_C2T_17_MSD_OFF)OTE(C2T_16_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(C2T_16_MTR.E_STOP)[XIC(C2T_16_VFD.READY) XIO(C2T_16_MTR.JAMMED) ,XIC(F_C2T_16_OVRIDE) ]XIO(F_C2T_16_MSD_OFF)XIO(F_C2T_16_OUTSERV)XIO(C2T_16_MTR.COMM)OTE(C2T_16_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_16_OVRIDE) ]XIC(C2T_16_MTR.NO_FAULT)TON(C2T_16_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_16_MTR.IM_TMR.DN)[XIO(C2T_16_MTR.INTL_MTR) OTE(C2T_16_MTR.IM_ONS) ,OTE(C2T_16_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_16_PE.FILT_NEG_XITN)RES(C2T_16_MTR.T2H_SPACE_TMR);
				N: XIC(C2T_17_MTR.CONV_RUN)RTO(C2T_16_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_16_PE.POS_XITN) XIC(C2T_16_MTR.INTL_MTR) ,XIC(C2T_16_MTR.T2H_SPACE) ]XIO(C2T_16_MTR.T2H_SPACE_TMR.DN)OTE(C2T_16_MTR.T2H_SPACE);
				N: XIC(C2T_16_MTR.T2H_SPACE)OTE(C2T_16_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(C2T_17_MTR.ON_TMR.DN) XIC(C2T_16_MTR.OFF_TMR.DN) ,XIO(C2T_17_MTR.IM_ONS) XIC(C2T_16_MTR.IM_ONS) ,XIC(C2T_16_MTR.ANTI_CASC) XIC(I_PE_C2T_16) ]OTE(C2T_16_MTR.START_EN);
				N: [XIO(C2T_17_MTR.ON_TMR.DN) XIO(I_PE_C2T_16) ,XIO(C2T_16_MTR.ANTI_CASC) XIC(C2T_16_MTR.SPACE) ]OTE(C2T_16_MTR.STOP);
				N: XIC(C2T_16_MTR.INTL_MTR)[[XIC(C2T_16_MTR.START_EN) ,XIC(C2T_16_MTR.CONV_RUN) ] XIO(C2T_16_MTR.STOP) ,XIC(F_C2T_16_OVRIDE) ][OTE(C2T_16_MTR.CONV_RUN) ,OTE(O_VFD_C2T_16_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_16_MTR.CONV_RUN)TON(C2T_16_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_16_MTR.CONV_RUN)TON(C2T_16_MTR.OFF_TMR,?,?);
				RC: "Motor C2T_15$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_C2T_16_MSD_OFF)OTE(C2T_15_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(C2T_15_MTR.E_STOP)[XIC(C2T_15_VFD.READY) XIO(C2T_15_MTR.JAMMED) ,XIC(F_C2T_15_OVRIDE) ]XIO(F_C2T_15_MSD_OFF)XIO(F_C2T_15_OUTSERV)XIO(C2T_15_MTR.COMM)OTE(C2T_15_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_15_OVRIDE) ]XIC(C2T_15_MTR.NO_FAULT)TON(C2T_15_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_15_MTR.IM_TMR.DN)[XIO(C2T_15_MTR.INTL_MTR) OTE(C2T_15_MTR.IM_ONS) ,OTE(C2T_15_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_15_PE.FILT_NEG_XITN)RES(C2T_15_MTR.T2H_SPACE_TMR);
				N: XIC(C2T_16_MTR.CONV_RUN)RTO(C2T_15_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_15_PE.POS_XITN) XIC(C2T_15_MTR.INTL_MTR) ,XIC(C2T_15_MTR.T2H_SPACE) ]XIO(C2T_15_MTR.T2H_SPACE_TMR.DN)OTE(C2T_15_MTR.T2H_SPACE);
				N: XIC(C2T_15_MTR.T2H_SPACE)OTE(C2T_15_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(C2T_16_MTR.ON_TMR.DN) XIC(C2T_15_MTR.OFF_TMR.DN) ,XIO(C2T_16_MTR.IM_ONS) XIC(C2T_15_MTR.IM_ONS) ,XIC(C2T_15_MTR.ANTI_CASC) XIC(I_PE_C2T_15) ]OTE(C2T_15_MTR.START_EN);
				N: [XIO(C2T_16_MTR.ON_TMR.DN) XIO(I_PE_C2T_15) ,XIO(C2T_15_MTR.ANTI_CASC) XIC(C2T_15_MTR.SPACE) ]OTE(C2T_15_MTR.STOP);
				N: XIC(C2T_15_MTR.INTL_MTR)[[XIC(C2T_15_MTR.START_EN) ,XIC(C2T_15_MTR.CONV_RUN) ] XIO(C2T_15_MTR.STOP) ,XIC(F_C2T_15_OVRIDE) ][OTE(C2T_15_MTR.CONV_RUN) ,OTE(O_VFD_C2T_15_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_15_MTR.CONV_RUN)TON(C2T_15_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_15_MTR.CONV_RUN)TON(C2T_15_MTR.OFF_TMR,?,?);
				RC: "Motor C2T_14$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_C2T_15_MSD_OFF)OTE(C2T_14_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(C2T_14_MTR.E_STOP)[XIC(C2T_14_VFD.READY) XIO(C2T_14_MTR.JAMMED) ,XIC(F_C2T_14_OVRIDE) ]XIO(F_C2T_14_MSD_OFF)XIO(F_C2T_14_OUTSERV)XIO(C2T_14_MTR.COMM)OTE(C2T_14_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_14_OVRIDE) ]XIC(C2T_14_MTR.NO_FAULT)TON(C2T_14_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_14_MTR.IM_TMR.DN)[XIO(C2T_14_MTR.INTL_MTR) OTE(C2T_14_MTR.IM_ONS) ,OTE(C2T_14_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_14_PE.FILT_NEG_XITN)RES(C2T_14_MTR.T2H_SPACE_TMR);
				N: XIC(C2T_15_MTR.CONV_RUN)RTO(C2T_14_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_14_PE.POS_XITN) XIC(C2T_14_MTR.INTL_MTR) ,XIC(C2T_14_MTR.T2H_SPACE) ]XIO(C2T_14_MTR.T2H_SPACE_TMR.DN)OTE(C2T_14_MTR.T2H_SPACE);
				N: XIC(C2T_14_MTR.T2H_SPACE)OTE(C2T_14_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(C2T_15_MTR.ON_TMR.DN) XIC(C2T_14_MTR.OFF_TMR.DN) ,XIO(C2T_15_MTR.IM_ONS) XIC(C2T_14_MTR.IM_ONS) ,XIC(C2T_14_MTR.ANTI_CASC) XIC(I_PE_C2T_14) ]OTE(C2T_14_MTR.START_EN);
				N: [XIO(C2T_15_MTR.ON_TMR.DN) XIO(I_PE_C2T_14) ,XIO(C2T_14_MTR.ANTI_CASC) XIC(C2T_14_MTR.SPACE) ]OTE(C2T_14_MTR.STOP);
				N: XIC(C2T_14_MTR.INTL_MTR)[[XIC(C2T_14_MTR.START_EN) ,XIC(C2T_14_MTR.CONV_RUN) ] XIO(C2T_14_MTR.STOP) ,XIC(F_C2T_14_OVRIDE) ][OTE(C2T_14_MTR.CONV_RUN) ,OTE(O_VFD_C2T_14_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_14_MTR.CONV_RUN)TON(C2T_14_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_14_MTR.CONV_RUN)TON(C2T_14_MTR.OFF_TMR,?,?);
				RC: "Motor C2T_13$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_C2T_14_MSD_OFF)OTE(C2T_13_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(C2T_13_MTR.E_STOP)[XIC(C2T_13_VFD.READY) XIO(C2T_13_MTR.JAMMED) ,XIC(F_C2T_13_OVRIDE) ]XIO(F_C2T_13_MSD_OFF)XIO(F_C2T_13_OUTSERV)XIO(C2T_13_MTR.COMM)OTE(C2T_13_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_13_OVRIDE) ]XIC(C2T_13_MTR.NO_FAULT)TON(C2T_13_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_13_MTR.IM_TMR.DN)[XIO(C2T_13_MTR.INTL_MTR) OTE(C2T_13_MTR.IM_ONS) ,OTE(C2T_13_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_13_PE.FILT_NEG_XITN)RES(C2T_13_MTR.T2H_SPACE_TMR);
				N: XIC(C2T_14_MTR.CONV_RUN)RTO(C2T_13_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_13_PE.POS_XITN) XIC(C2T_13_MTR.INTL_MTR) ,XIC(C2T_13_MTR.T2H_SPACE) ]XIO(C2T_13_MTR.T2H_SPACE_TMR.DN)OTE(C2T_13_MTR.T2H_SPACE);
				N: XIC(C2T_13_MTR.T2H_SPACE)OTE(C2T_13_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(C2T_14_MTR.ON_TMR.DN) XIC(C2T_13_MTR.OFF_TMR.DN) ,XIO(C2T_14_MTR.IM_ONS) XIC(C2T_13_MTR.IM_ONS) ,XIC(C2T_13_MTR.ANTI_CASC) XIC(I_PE_C2T_13) ]OTE(C2T_13_MTR.START_EN);
				N: [XIO(C2T_14_MTR.ON_TMR.DN) XIO(I_PE_C2T_13) ,XIO(C2T_13_MTR.ANTI_CASC) XIC(C2T_13_MTR.SPACE) ]OTE(C2T_13_MTR.STOP);
				N: XIC(C2T_13_MTR.INTL_MTR)[[XIC(C2T_13_MTR.START_EN) ,XIC(C2T_13_MTR.CONV_RUN) ] XIO(C2T_13_MTR.STOP) ,XIC(F_C2T_13_OVRIDE) ][OTE(C2T_13_MTR.CONV_RUN) ,OTE(O_VFD_C2T_13_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_13_MTR.CONV_RUN)TON(C2T_13_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_13_MTR.CONV_RUN)TON(C2T_13_MTR.OFF_TMR,?,?);
				RC: "Motor C2T_12$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_C2T_13_MSD_OFF)OTE(C2T_12_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(C2T_12_MTR.E_STOP)[XIC(C2T_12_VFD.READY) XIO(C2T_12_MTR.JAMMED) ,XIC(F_C2T_12_OVRIDE) ]XIO(F_C2T_12_MSD_OFF)XIO(F_C2T_12_OUTSERV)XIO(C2T_12_MTR.COMM)OTE(C2T_12_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(C2T.MTR_GRP.RUN_LATCH) ,XIC(F_C2T_12_OVRIDE) ]XIC(C2T_12_MTR.NO_FAULT)TON(C2T_12_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(C2T_12_MTR.IM_TMR.DN)[XIO(C2T_12_MTR.INTL_MTR) OTE(C2T_12_MTR.IM_ONS) ,OTE(C2T_12_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(C2T_12_PE.FILT_NEG_XITN)RES(C2T_12_MTR.T2H_SPACE_TMR);
				N: XIC(C2T_13_MTR.CONV_RUN)RTO(C2T_12_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(C2T_12_PE.POS_XITN) XIC(C2T_12_MTR.INTL_MTR) ,XIC(C2T_12_MTR.T2H_SPACE) ]XIO(C2T_12_MTR.T2H_SPACE_TMR.DN)OTE(C2T_12_MTR.T2H_SPACE);
				N: XIC(C2T_12_MTR.T2H_SPACE)OTE(C2T_12_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(C2T_13_MTR.ON_TMR.DN) XIC(C2T_12_MTR.OFF_TMR.DN) ,XIO(C2T_13_MTR.IM_ONS) XIC(C2T_12_MTR.IM_ONS) ,XIC(C2T_12_MTR.ANTI_CASC) XIC(I_PE_C2T_12) ]OTE(C2T_12_MTR.START_EN);
				N: [XIO(C2T_13_MTR.ON_TMR.DN) XIO(I_PE_C2T_12) ,XIO(C2T_12_MTR.ANTI_CASC) XIC(C2T_12_MTR.SPACE) ]OTE(C2T_12_MTR.STOP);
				N: XIC(C2T_12_MTR.INTL_MTR)[[XIC(C2T_12_MTR.START_EN) ,XIC(C2T_12_MTR.CONV_RUN) ] XIO(C2T_12_MTR.STOP) ,XIC(F_C2T_12_OVRIDE) ][OTE(C2T_12_MTR.CONV_RUN) ,OTE(O_VFD_C2T_12_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(C2T_12_MTR.CONV_RUN)TON(C2T_12_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(C2T_12_MTR.CONV_RUN)TON(C2T_12_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE C2T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(C2T_17_MTR.COMM)[[XIO(I_PE_C2T_17) ,XIC(C2T_17_PE.TOF.DN) ] TON(C2T_17_PE.TON,?,?) ,XIO(I_PE_C2T_17) XIC(C2T_17_PE.TON.DN) TOF(C2T_17_PE.TOF,?,?) ,XIC(C2T_17_PE.TOF.DN) OTE(C2T_17_PE.FILT) ];
				N: XIC(C2T_17_PE.FILT)[XIO(C2T_17_PE.FILT_POS_XITN_MEM) OTE(C2T_17_PE.FILT_POS_XITN) ,OTE(C2T_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_17_PE.FILT)[XIO(C2T_17_PE.FILT_NEG_XITN_MEM) OTE(C2T_17_PE.FILT_NEG_XITN) ,OTE(C2T_17_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(C2T_16_MTR.COMM)[[XIO(I_PE_C2T_16) ,XIC(C2T_16_PE.TOF.DN) ] TON(C2T_16_PE.TON,?,?) ,XIO(I_PE_C2T_16) XIC(C2T_16_PE.TON.DN) TOF(C2T_16_PE.TOF,?,?) ,XIC(C2T_16_PE.TOF.DN) OTE(C2T_16_PE.FILT) ];
				N: XIC(C2T_16_PE.FILT)[XIO(C2T_16_PE.FILT_POS_XITN_MEM) OTE(C2T_16_PE.FILT_POS_XITN) ,OTE(C2T_16_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_16_PE.FILT)[XIO(C2T_16_PE.FILT_NEG_XITN_MEM) OTE(C2T_16_PE.FILT_NEG_XITN) ,OTE(C2T_16_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C2T_16)[XIO(C2T_16_PE.POS_XITN_MEM) OTE(C2T_16_PE.POS_XITN) ,OTE(C2T_16_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(C2T_15_MTR.COMM)[[XIO(I_PE_C2T_15) ,XIC(C2T_15_PE.TOF.DN) ] TON(C2T_15_PE.TON,?,?) ,XIO(I_PE_C2T_15) XIC(C2T_15_PE.TON.DN) TOF(C2T_15_PE.TOF,?,?) ,XIC(C2T_15_PE.TOF.DN) OTE(C2T_15_PE.FILT) ];
				N: XIC(C2T_15_PE.FILT)[XIO(C2T_15_PE.FILT_POS_XITN_MEM) OTE(C2T_15_PE.FILT_POS_XITN) ,OTE(C2T_15_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_15_PE.FILT)[XIO(C2T_15_PE.FILT_NEG_XITN_MEM) OTE(C2T_15_PE.FILT_NEG_XITN) ,OTE(C2T_15_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C2T_15)[XIO(C2T_15_PE.POS_XITN_MEM) OTE(C2T_15_PE.POS_XITN) ,OTE(C2T_15_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(C2T_14_MTR.COMM)[[XIO(I_PE_C2T_14) ,XIC(C2T_14_PE.TOF.DN) ] TON(C2T_14_PE.TON,?,?) ,XIO(I_PE_C2T_14) XIC(C2T_14_PE.TON.DN) TOF(C2T_14_PE.TOF,?,?) ,XIC(C2T_14_PE.TOF.DN) OTE(C2T_14_PE.FILT) ];
				N: XIC(C2T_14_PE.FILT)[XIO(C2T_14_PE.FILT_POS_XITN_MEM) OTE(C2T_14_PE.FILT_POS_XITN) ,OTE(C2T_14_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_14_PE.FILT)[XIO(C2T_14_PE.FILT_NEG_XITN_MEM) OTE(C2T_14_PE.FILT_NEG_XITN) ,OTE(C2T_14_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C2T_14)[XIO(C2T_14_PE.POS_XITN_MEM) OTE(C2T_14_PE.POS_XITN) ,OTE(C2T_14_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(C2T_13_MTR.COMM)[[XIO(I_PE_C2T_13) ,XIC(C2T_13_PE.TOF.DN) ] TON(C2T_13_PE.TON,?,?) ,XIO(I_PE_C2T_13) XIC(C2T_13_PE.TON.DN) TOF(C2T_13_PE.TOF,?,?) ,XIC(C2T_13_PE.TOF.DN) OTE(C2T_13_PE.FILT) ];
				N: XIC(C2T_13_PE.FILT)[XIO(C2T_13_PE.FILT_POS_XITN_MEM) OTE(C2T_13_PE.FILT_POS_XITN) ,OTE(C2T_13_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_13_PE.FILT)[XIO(C2T_13_PE.FILT_NEG_XITN_MEM) OTE(C2T_13_PE.FILT_NEG_XITN) ,OTE(C2T_13_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C2T_13)[XIO(C2T_13_PE.POS_XITN_MEM) OTE(C2T_13_PE.POS_XITN) ,OTE(C2T_13_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(C2T_12_MTR.COMM)[[XIO(I_PE_C2T_12) ,XIC(C2T_12_PE.TOF.DN) ] TON(C2T_12_PE.TON,?,?) ,XIO(I_PE_C2T_12) XIC(C2T_12_PE.TON.DN) TOF(C2T_12_PE.TOF,?,?) ,XIC(C2T_12_PE.TOF.DN) OTE(C2T_12_PE.FILT) ];
				N: XIC(C2T_12_PE.FILT)[XIO(C2T_12_PE.FILT_POS_XITN_MEM) OTE(C2T_12_PE.FILT_POS_XITN) ,OTE(C2T_12_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C2T_12_PE.FILT)[XIO(C2T_12_PE.FILT_NEG_XITN_MEM) OTE(C2T_12_PE.FILT_NEG_XITN) ,OTE(C2T_12_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C2T_12)[XIO(C2T_12_PE.POS_XITN_MEM) OTE(C2T_12_PE.POS_XITN) ,OTE(C2T_12_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE C2T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_17_MTR.COMM);
				N: [XIC(O_VFD_C2T_17_FWD) ,XIC(O_VFD_C2T_17_REV) ]XIC(C2T_17_MTR.CONV_RUN)OTE(C2T_17_MTR.RUNNING);
				N: XIO(I_CS_C2T_17_AUTO)OTE(F_C2T_17_JOG_REVERSE);
				N: XIC(C2T_17_VFD.FAULTED)[XIO(F_C2T_17_VFD_FAULT) OTE(C2T_17_VFD.FAULT_ONS) ,OTE(F_C2T_17_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_17_MOL);
				N: XIO(I_MSD_C2T_17)XIO(C2T_17_MTR.COMM)[XIO(F_C2T_17_MSD_OFF) OTE(C2T_17_MTR.MSD_ONS) ,OTE(F_C2T_17_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_17_CTCTR_FAULT) OTE(C2T_17_MTR.MS_FLT_ONS) ,OTE(F_C2T_17_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(C2T_17_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(C2T_17_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_17_MTR.FIRE_ALM);
				N: XIO(C2T_17_MTR.CONV_RUN)XIC(C2T_17_MTR.INTL_MTR)OTE(C2T_17_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_17_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_17_OVRIDE_REQ)[XIO(F_C2T_17_OVRIDE) OTE(C2T_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_17_OVRIDE) ];
				N: XIC(HMI_C2T_17_OUTSERV_REQ)[XIO(F_C2T_17_OUTSERV) OTE(C2T_17_MTR.OOS_ONS) ,OTE(F_C2T_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_17_MTR.MB_JAMMED);
				N: [XIC(F_C2T_17_PE_JAMMED) ,XIC(F_C2T_16_PE_JAMMED) ,XIC(C2T_17_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_17_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_16_MTR.COMM);
				N: XIC(O_VFD_C2T_16_FWD)XIC(C2T_16_MTR.CONV_RUN)OTE(C2T_16_MTR.RUNNING);
				N: XIC(C2T_16_VFD.FAULTED)[XIO(F_C2T_16_VFD_FAULT) OTE(C2T_16_VFD.FAULT_ONS) ,OTE(F_C2T_16_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_16_MOL);
				N: XIO(I_MSD_C2T_16)XIO(C2T_16_MTR.COMM)[XIO(F_C2T_16_MSD_OFF) OTE(C2T_16_MTR.MSD_ONS) ,OTE(F_C2T_16_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_16_CTCTR_FAULT) OTE(C2T_16_MTR.MS_FLT_ONS) ,OTE(F_C2T_16_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30102.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(C2T_16_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30102.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(C2T_16_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_16_MTR.FIRE_ALM);
				N: XIO(C2T_16_MTR.CONV_RUN)XIC(C2T_16_MTR.INTL_MTR)OTE(C2T_16_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_16_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_16_OVRIDE_REQ)[XIO(F_C2T_16_OVRIDE) OTE(C2T_16_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_16_OVRIDE) ];
				N: XIC(HMI_C2T_16_OUTSERV_REQ)[XIO(F_C2T_16_OUTSERV) OTE(C2T_16_MTR.OOS_ONS) ,OTE(F_C2T_16_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_16_MTR.MB_JAMMED);
				N: [XIC(F_C2T_16_PE_JAMMED) ,XIC(F_C2T_15_PE_JAMMED) ,XIC(C2T_16_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_16_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_15_MTR.COMM);
				N: XIC(O_VFD_C2T_15_FWD)XIC(C2T_15_MTR.CONV_RUN)OTE(C2T_15_MTR.RUNNING);
				N: XIC(C2T_15_VFD.FAULTED)[XIO(F_C2T_15_VFD_FAULT) OTE(C2T_15_VFD.FAULT_ONS) ,OTE(F_C2T_15_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_15_MOL);
				N: XIO(I_MSD_C2T_15)XIO(C2T_15_MTR.COMM)[XIO(F_C2T_15_MSD_OFF) OTE(C2T_15_MTR.MSD_ONS) ,OTE(F_C2T_15_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_15_CTCTR_FAULT) OTE(C2T_15_MTR.MS_FLT_ONS) ,OTE(F_C2T_15_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30102.Zone_OK) ,AFI() ]OTE(C2T_15_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30102.Zone_RES) ,AFI() ]OTE(C2T_15_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_15_MTR.FIRE_ALM);
				N: XIO(C2T_15_MTR.CONV_RUN)XIC(C2T_15_MTR.INTL_MTR)OTE(C2T_15_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_15_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_15_OVRIDE_REQ)[XIO(F_C2T_15_OVRIDE) OTE(C2T_15_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_15_OVRIDE) ];
				N: XIC(HMI_C2T_15_OUTSERV_REQ)[XIO(F_C2T_15_OUTSERV) OTE(C2T_15_MTR.OOS_ONS) ,OTE(F_C2T_15_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_15_MTR.MB_JAMMED);
				N: [XIC(F_C2T_15_PE_JAMMED) ,XIC(F_C2T_14_PE_JAMMED) ,XIC(C2T_15_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_15_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_14_MTR.COMM);
				N: XIC(O_VFD_C2T_14_FWD)XIC(C2T_14_MTR.CONV_RUN)OTE(C2T_14_MTR.RUNNING);
				N: XIC(C2T_14_VFD.FAULTED)[XIO(F_C2T_14_VFD_FAULT) OTE(C2T_14_VFD.FAULT_ONS) ,OTE(F_C2T_14_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_14_MOL);
				N: XIO(I_MSD_C2T_14)XIO(C2T_14_MTR.COMM)[XIO(F_C2T_14_MSD_OFF) OTE(C2T_14_MTR.MSD_ONS) ,OTE(F_C2T_14_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_14_CTCTR_FAULT) OTE(C2T_14_MTR.MS_FLT_ONS) ,OTE(F_C2T_14_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30102.Zone_OK) ,AFI() ]OTE(C2T_14_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30102.Zone_RES) ,AFI() ]OTE(C2T_14_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_14_MTR.FIRE_ALM);
				N: XIO(C2T_14_MTR.CONV_RUN)XIC(C2T_14_MTR.INTL_MTR)OTE(C2T_14_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_14_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_14_OVRIDE_REQ)[XIO(F_C2T_14_OVRIDE) OTE(C2T_14_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_14_OVRIDE) ];
				N: XIC(HMI_C2T_14_OUTSERV_REQ)[XIO(F_C2T_14_OUTSERV) OTE(C2T_14_MTR.OOS_ONS) ,OTE(F_C2T_14_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_14_MTR.MB_JAMMED);
				N: [XIC(F_C2T_14_PE_JAMMED) ,XIC(F_C2T_13_PE_JAMMED) ,XIC(C2T_14_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_14_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_13_MTR.COMM);
				N: XIC(O_VFD_C2T_13_FWD)XIC(C2T_13_MTR.CONV_RUN)OTE(C2T_13_MTR.RUNNING);
				N: XIC(C2T_13_VFD.FAULTED)[XIO(F_C2T_13_VFD_FAULT) OTE(C2T_13_VFD.FAULT_ONS) ,OTE(F_C2T_13_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_13_MOL);
				N: XIO(I_MSD_C2T_13)XIO(C2T_13_MTR.COMM)[XIO(F_C2T_13_MSD_OFF) OTE(C2T_13_MTR.MSD_ONS) ,OTE(F_C2T_13_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_13_CTCTR_FAULT) OTE(C2T_13_MTR.MS_FLT_ONS) ,OTE(F_C2T_13_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30102.Zone_OK) ,AFI() ]OTE(C2T_13_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30102.Zone_RES) ,AFI() ]OTE(C2T_13_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_13_MTR.FIRE_ALM);
				N: XIO(C2T_13_MTR.CONV_RUN)XIC(C2T_13_MTR.INTL_MTR)OTE(C2T_13_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_13_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_13_OVRIDE_REQ)[XIO(F_C2T_13_OVRIDE) OTE(C2T_13_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_13_OVRIDE) ];
				N: XIC(HMI_C2T_13_OUTSERV_REQ)[XIO(F_C2T_13_OUTSERV) OTE(C2T_13_MTR.OOS_ONS) ,OTE(F_C2T_13_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_13_MTR.MB_JAMMED);
				N: [XIC(F_C2T_13_PE_JAMMED) ,XIC(F_C2T_12_PE_JAMMED) ,XIC(C2T_13_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_13_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(C2T_12_MTR.COMM);
				N: XIC(O_VFD_C2T_12_FWD)XIC(C2T_12_MTR.CONV_RUN)OTE(C2T_12_MTR.RUNNING);
				N: XIC(C2T_12_VFD.FAULTED)[XIO(F_C2T_12_VFD_FAULT) OTE(C2T_12_VFD.FAULT_ONS) ,OTE(F_C2T_12_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_C2T_12_MOL);
				N: XIO(I_MSD_C2T_12)XIO(C2T_12_MTR.COMM)[XIO(F_C2T_12_MSD_OFF) OTE(C2T_12_MTR.MSD_ONS) ,OTE(F_C2T_12_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_C2T_12_CTCTR_FAULT) OTE(C2T_12_MTR.MS_FLT_ONS) ,OTE(F_C2T_12_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30102.Zone_OK) ,AFI() ]OTE(C2T_12_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30102.Zone_RES) ,AFI() ]OTE(C2T_12_MTR.E_STOP_RES);
				N: XIC(C2T.STATUS.FIRE_ALM)OTE(C2T_12_MTR.FIRE_ALM);
				N: XIO(C2T_12_MTR.CONV_RUN)XIC(C2T_12_MTR.INTL_MTR)OTE(C2T_12_MTR.CASC);
				N: XIO(C2T.MTR_GRP.RUN_LATCH)OTE(C2T_12_MTR.AUTO_STOP);
				N: XIC(HMI_C2T_12_OVRIDE_REQ)[XIO(F_C2T_12_OVRIDE) OTE(C2T_12_MTR.HMI_OVERRIDE_ONS) ,OTE(F_C2T_12_OVRIDE) ];
				N: XIC(HMI_C2T_12_OUTSERV_REQ)[XIO(F_C2T_12_OUTSERV) OTE(C2T_12_MTR.OOS_ONS) ,OTE(F_C2T_12_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(C2T_12_MTR.MB_JAMMED);
				N: [XIC(F_C2T_12_PE_JAMMED) ,XIC(C2T_12_MTR.MB_JAMMED) ,AFI() ]OTE(C2T_12_MTR.JAMMED);
		END_ROUTINE

		ROUTINE C2T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor C2T_17 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_17_MTR.COMM)XIO(C2T_17_MTR.E_STOP)XIO(F_C2T_17_MSD_OFF)TON(C2T_17_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_17_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_17_RDY) OTE(C2T_17_VFD.FAULTED) ,XIO(C2T_17_VFD.FAULTED) OTE(C2T_17_VFD.READY) ];
				RC: "Motor C2T_16 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_16_MTR.COMM)XIO(C2T_16_MTR.E_STOP)XIO(F_C2T_16_MSD_OFF)TON(C2T_16_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_16_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_16_RDY) OTE(C2T_16_VFD.FAULTED) ,XIO(C2T_16_VFD.FAULTED) OTE(C2T_16_VFD.READY) ];
				RC: "Motor C2T_15 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_15_MTR.COMM)XIO(C2T_15_MTR.E_STOP)XIO(F_C2T_15_MSD_OFF)TON(C2T_15_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_15_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_15_RDY) OTE(C2T_15_VFD.FAULTED) ,XIO(C2T_15_VFD.FAULTED) OTE(C2T_15_VFD.READY) ];
				RC: "Motor C2T_14 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_14_MTR.COMM)XIO(C2T_14_MTR.E_STOP)XIO(F_C2T_14_MSD_OFF)TON(C2T_14_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_14_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_14_RDY) OTE(C2T_14_VFD.FAULTED) ,XIO(C2T_14_VFD.FAULTED) OTE(C2T_14_VFD.READY) ];
				RC: "Motor C2T_13 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_13_MTR.COMM)XIO(C2T_13_MTR.E_STOP)XIO(F_C2T_13_MSD_OFF)TON(C2T_13_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_13_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_13_RDY) OTE(C2T_13_VFD.FAULTED) ,XIO(C2T_13_VFD.FAULTED) OTE(C2T_13_VFD.READY) ];
				RC: "Motor C2T_12 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(C2T_12_MTR.COMM)XIO(C2T_12_MTR.E_STOP)XIO(F_C2T_12_MSD_OFF)TON(C2T_12_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(C2T_12_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_C2T_12_RDY) OTE(C2T_12_VFD.FAULTED) ,XIO(C2T_12_VFD.FAULTED) OTE(C2T_12_VFD.READY) ];
		END_ROUTINE

		ROUTINE CL12T_36_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE_O4T_19)OTL(CL12T_36_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(O4T_20_BT.BT_PULSE)[OTU(CL12T_36_MRG.MainLineBScntrl.EN) ,BSR(CL12T_36_MRG.MainLineBS[0],CL12T_36_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(CL12T_36_MRG.Lead_Gap_Acc.6) ADD(1,CL12T_36_MRG.Lead_Gap_Acc,CL12T_36_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(CL12T_36_MRG.BagPastPE,CL12T_36_MRGx.Lead_Gap,CL12T_36_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(CL12T_36_MRG.MainLineBScntrl.UL)CLR(CL12T_36_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(CL12T_36_MRG.Lead_Gap_Acc,CL12T_36_MRG.Lead_Gap)OTE(CL12T_36_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(CL12T_36_MRG.MrgSeal)XIC(CL12T_36_PE.FILT_NEG_XITN)RES(CL12T_36_MRG.SyncRunTmr);
				N: [XIC(CL12T_36_MTR.CONV_RUN) ,XIC(CL12T_36_MTR.IM_TMR.TT) ]RTO(CL12T_36_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_CL12T_36) ,XIC(CL12T_36_PE.FILT) ,XIC(CL12T_36_MRG.PeSeal) XIO(CL12T_36_MTR.ANTI_CASC) XIO(CL12T_36_MTR.CONV_RUN) XIC(CL12T_36_MTR.INTL_MTR) ][XIO(CL12T_36_MRG.PeSeal) OTE(CL12T_36_MRG.PeSeal_PosXitn) ,OTE(CL12T_36_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(CL12T_36_MRG.PeSeal_PosXitn)[MOV(CL12T_36_MRG.Length,CL12T_36_MRG.BagLength_Gap) CLR(CL12T_36_MRG.Length) ,MOV(54,CL12T_36_MRGx.MinLength) ,EQU(CL12T_36_MRG.BagLength_Gap,0) DIV(CL12T_36_MRGx.MinLength,CL12T_36_BTx.RES,CL12T_36_MRG.BagLength_Gap) ,ADD(CL12T_36_MRG.BagLength_Gap,CL12T_36_MRGx.Trail_Gap,CL12T_36_MRG.BagLength_Gap) ,GRT(CL12T_36_MRG.BagLength_Gap,CL12T_36_MRGx.MaxLength) MOV(CL12T_36_MRGx.MaxLength,CL12T_36_MRG.BagLength_Gap) ,FLL(0,CL12T_36_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[CL12T_36_MRG.BagLength_Gap],CL12T_36_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[CL12T_36_MRG.BagLength_Gap],CL12T_36_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[CL12T_36_MRG.BagLength_Gap],CL12T_36_MRG.MrgLineBS[2]) ,CLR(CL12T_36_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(CL12T_36_MRG.PeSeal)XIO(CL12T_36_MRG.MrgSeal)XIC(CL12T_36_BT.BT_PULSE)[OTU(CL12T_36_MRG.MrgLineBScntrl.EN) ,BSR(CL12T_36_MRG.MrgLineBS[0],CL12T_36_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,CL12T_36_MRG.BagPastPE,CL12T_36_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(CL12T_36_MRG.MainLineBS[0],CL12T_36_MRG.MrgLineBS[0],CL12T_36_MRG.Intrfr[0])AND(CL12T_36_MRG.MainLineBS[1],CL12T_36_MRG.MrgLineBS[1],CL12T_36_MRG.Intrfr[1])AND(CL12T_36_MRG.MainLineBS[2],CL12T_36_MRG.MrgLineBS[2],CL12T_36_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(CL12T_36_MRG.Intrfr[0],0)EQU(CL12T_36_MRG.Intrfr[1],0)EQU(CL12T_36_MRG.Intrfr[2],0)[XIC(CL12T_36_MRG.Lead_Gap_DN) ,XIC(CL12T_36_MRG.Hold_Align) ][XIO(CL12T_36_MRG.MrgOK) OTE(CL12T_36_MRG.MrgOK_PosXitn) ,OTE(CL12T_36_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(CL12T_36_MTR.INTL_MTR) [XIO(CL12T_36_MRG.Hold_MB) XIO(CL12T_36_MRG.Hold_MA) XIO(CL12T_36_MRG.Hold_Align) XIC(CL12T_36_MRG.MrgOK) ,XIC(CL12T_36_MRG.Hold_MA) XIO(CL12T_36_MRG.MrgOK) ,XIC(CL12T_36_MRG.MrgOK_PosXitn) ] ,XIC(CL12T_36_MRG.MrgSeal) ]XIO(CL12T_36_MTR.SPACE)XIC(CL12T_36_MRG.PeSeal)[OTE(CL12T_36_MRG.MrgSeal) ,OTU(CL12T_36_MRG.Hold_MA) ,OTU(CL12T_36_MRG.Hold_MB) ,OTU(CL12T_36_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(CL12T_36_MRG.PeSeal)XIC(O4T_20_MTR.CONV_RUN)RTO(CL12T_36_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(CL12T_36_MRG.MLPriorityTmr.DN)OTE(CL12T_36_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(CL12T_36_MRG.PriorityStop)XIC(CL12T_36_MTR.CONV_RUN)RTO(CL12T_36_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(CL12T_36_MRG.MrgSeal)XIO(CL12T_36_MRG.PriorityStop)RES(CL12T_36_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(CL12T_36_MRG.MrgLBagflow.DN)[XIO(CL12T_36_MRG.PeSeal) RES(CL12T_36_MRG.MLPriorityTmr) ,RES(CL12T_36_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(CL12T_36_MRG.MrgLPriorityTmr.DN)[RES(CL12T_36_MRG.MrgLPriorityTmr) ,RES(CL12T_36_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(CL12T_35_PE.FILT)TON(CL12T_36_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(CL12T_35_MTR.CONV_RUN) [XIO(I_PE_CL12T_35) ,XIC(CL12T_35_PE.FILT) ] ,XIC(CL12T_36_MRG.PeSeal) ,XIC(CL12T_36_MTR.IM_ONS) ,XIC(F_CL12T_36_OVRIDE) ]RES(CL12T_36_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(CL12T_36_MTR.CONV_RUN)RTO(CL12T_36_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(CL12T_36_PE.FILT) XIC(CL12T_36_MRG.MrgOK_PosXitn) ,XIC(CL12T_36_PE.FILT_POS_XITN) XIC(CL12T_36_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(142,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE CL12T_36_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(O4T_20_PE.FILT_NEG_XITN)MOV(0,CL12T_36_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(O4T_20_PE.POS_XITN)[MOV(CL12T_36_MRG.HeadHeadAcc,CL12T_36_MRG.HeadHeadCnt) ,MOV(CL12T_36_MRG.TailHeadAcc,CL12T_36_MRG.TailHeadCnt) ,MOV(0,CL12T_36_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(O4T_20_BT.BT_PULSE)[ADD(1,CL12T_36_MRG.HeadHeadAcc,CL12T_36_MRG.HeadHeadAcc) ,ADD(1,CL12T_36_MRG.TailHeadAcc,CL12T_36_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(O4T_20_PE.POS_XITN)CPT(CL12T_36_MRG.LastBagMrgWndo,CL12T_36_MRG.HeadHeadCnt*O4T_20_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(O4T_20_PE.POS_XITN)CPT(CL12T_36_MRG.LastBagGapDist,CL12T_36_MRG.TailHeadCnt*O4T_20_BTx.RES);
		END_ROUTINE

		ROUTINE CL12T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL12T_36_PE_JAMMED) XIC(I_PE_CL12T_36) ,XIC(F_CL12T_35_PE_JAMMED) XIC(I_PE_CL12T_35) ,XIC(F_CL12T_36_CS_E_STOP) XIO(I_CS_CL12T_36_EPB) ,AFI() ]OTE(zzzCS_CL12T_36_LTA_FLASH);
				N: [[XIC(F_CL12T_36_PE_JAMMED) ,XIC(F_CL12T_35_PE_JAMMED) ,AFI() ,AFI() ] XIO(zzzCS_CL12T_36_LTA_FLASH) ,XIC(zzzCS_CL12T_36_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL12T_36_RPBA);
				N: XIO(EZ_W15_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL12T_36_EPB) ]OTE(O_CS_CL12T_36_EPB);
				N: XIC(F_CL12T_36_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL12T_36_SPBG);
		END_ROUTINE

		ROUTINE CL12T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.RUNNING) MOV(Status.ConvRunning,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL12T_36_MTR.G) ,[XIC(CL12T_36_MTR.IM_TMR.TT) ,XIO(CL12T_36_MTR.AUTO_STOP) XIC(CL12T_36_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL12T_36_MTR.G) ,XIC(F_CL12T_36_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.CASC) MOV(Status.ConvCascade,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.CASC) XIO(I_PE_CL12T_36) MOV(Status.ConvBagPresCasc,CL12T_36_MTR.G) ,AFI() MOV(Status.ConvFull,CL12T_36_MTR.G) ,XIC(F_CL12T_36_MSD_OFF) MOV(Status.ConvDisc,CL12T_36_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.JAMMED) MOV(Status.ConvJammed,CL12T_36_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL12T_36_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL12T_36_MTR.G) ,XIC(F_CL12T_36_VFD_FAULT) MOV(Status.ConvVFDFlt,CL12T_36_MTR.G) ,XIC(F_CL12T_36_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL12T_36_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL12T_36_MTR.G) ,XIC(F_CL12T_36_OVRIDE) MOV(Status.ConvOverRide,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.E_STOP) XIO(CL12T_36_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL12T_36_MTR.G) ,XIC(F_CL12T_36_OUTSERV) MOV(Status.ConvOutOfServ,CL12T_36_MTR.G) ,XIC(CL12T_36_MTR.COMM) MOV(Status.ConvCommFault,CL12T_36_MTR.G) ,MOV(CL12T_36_MTR.G,G_CL12T_36_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.RUNNING) MOV(Status.ConvRunning,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL12T_35_MTR.G) ,[XIC(CL12T_35_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL12T_35_MTR.G) ,XIC(F_CL12T_35_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.CASC) MOV(Status.ConvCascade,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.CASC) XIO(I_PE_CL12T_35) MOV(Status.ConvBagPresCasc,CL12T_35_MTR.G) ,AFI() MOV(Status.ConvFull,CL12T_35_MTR.G) ,XIC(F_CL12T_35_MSD_OFF) MOV(Status.ConvDisc,CL12T_35_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.JAMMED) MOV(Status.ConvJammed,CL12T_35_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL12T_35_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL12T_35_MTR.G) ,XIC(F_CL12T_35_VFD_FAULT) MOV(Status.ConvVFDFlt,CL12T_35_MTR.G) ,XIC(F_CL12T_35_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL12T_35_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL12T_35_MTR.G) ,XIC(F_CL12T_35_OVRIDE) MOV(Status.ConvOverRide,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.E_STOP) XIO(CL12T_35_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL12T_35_MTR.G) ,XIC(F_CL12T_35_OUTSERV) MOV(Status.ConvOutOfServ,CL12T_35_MTR.G) ,XIC(CL12T_35_MTR.COMM) MOV(Status.ConvCommFault,CL12T_35_MTR.G) ,MOV(CL12T_35_MTR.G,G_CL12T_35_STS) ];
		END_ROUTINE

		ROUTINE CL12T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL12T_36_MTR.CONV_RUN)RTO(CL12T_36_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS_CL12T_36_RPBA) ] XIC(CL12T_36_PE.JAM_TMR.DN) ,XIO(CL12T_36_PE.JAM_TMR.DN) ]XIC(I_PE_CL12T_36)RES(CL12T_36_PE.JAM_TMR);
				N: XIC(CL12T_36_PE.JAM_TMR.DN)[XIO(F_CL12T_36_PE_JAMMED) [ADD(S_CL12T_36_PE_JAM,1,S_CL12T_36_PE_JAM) ,OTE(CL12T_36_PE.JAM_ONS) ] ,OTE(F_CL12T_36_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL12T_35_MTR.CONV_RUN)RTO(CL12T_35_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS_CL12T_36_RPBA) ] XIC(CL12T_35_PE.JAM_TMR.DN) ,XIO(CL12T_35_PE.JAM_TMR.DN) ]XIC(I_PE_CL12T_35)RES(CL12T_35_PE.JAM_TMR);
				N: XIC(CL12T_35_PE.JAM_TMR.DN)[XIO(F_CL12T_35_PE_JAMMED) [ADD(S_CL12T_35_PE_JAM,1,S_CL12T_35_PE_JAM) ,OTE(CL12T_35_PE.JAM_ONS) ] ,OTE(F_CL12T_35_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE CL12T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_16_SPBG) ,XIC(I_INT_CL12T_35_START) ,AFI() ]OTE(CL12T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(CL12T_36_MTR.INTL_MTR)XIC(CL12T_35_MTR.CONV_RUN)OTE(CL12T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_CL12T_36) ,XIO(I_PE_CL12T_35) ,AFI() ]OTE(CL12T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(CL12T.MTR_GRP.START) ,XIC(CL12T.MTR_GRP.PEs) XIO(CL12T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(CL12T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(CL12T.MTR_GRP.RUN_LATCH)XIC(CL12T.MTR_GRP.PEs)OTE(CL12T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(CL12T.MTR_GRP.RUN_EXPAND)RTO(CL12T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(CL12T.MTR_GRP.START) ,XIC(CL12T.MTR_GRP.RUN_LATCH) ]XIO(CL12T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(CL12T.STATUS.FIRE_ALM)OTE(CL12T.MTR_GRP.RUN_LATCH);
				RC: "Motor CL12T_36$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_20_MSD_OFF)OTE(CL12T_36_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_CL12T_36_JRB) TON(CL12T_36_MTR.JRB_FILT_TON,?,?) ,XIC(CL12T_36_MTR.JRB_FILT_TON.DN) OTE(CL12T_36_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(CL12T_36_MTR.E_STOP)[XIC(CL12T_36_VFD.READY) XIO(CL12T_36_MTR.JAMMED) ,XIC(F_CL12T_36_OVRIDE) ,XIC(F_CL12T_36_JOG_REVERSE) ]XIO(F_CL12T_36_MSD_OFF)XIO(F_CL12T_36_OUTSERV)XIO(CL12T_36_MTR.COMM)OTE(CL12T_36_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL12T.MTR_GRP.RUN_LATCH) ,XIC(F_CL12T_36_OVRIDE) ]XIC(CL12T_36_MTR.NO_FAULT)TON(CL12T_36_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL12T_36_MTR.IM_TMR.DN)[XIO(CL12T_36_MTR.INTL_MTR) OTE(CL12T_36_MTR.IM_ONS) ,OTE(CL12T_36_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL12T_36_PE.FILT_NEG_XITN)RES(CL12T_36_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_20_MTR.CONV_RUN)RTO(CL12T_36_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL12T_36_PE.POS_XITN) XIC(CL12T_36_MTR.INTL_MTR) ,XIC(CL12T_36_MTR.T2H_SPACE) ]XIO(CL12T_36_MTR.T2H_SPACE_TMR.DN)OTE(CL12T_36_MTR.T2H_SPACE);
				N: XIC(CL12T_36_MTR.T2H_SPACE)OTE(CL12T_36_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_20_MTR.ON_TMR.DN) XIC(CL12T_36_MTR.OFF_TMR.DN) ,XIO(O4T_20_MTR.IM_ONS) XIC(CL12T_36_MTR.IM_ONS) ,XIC(CL12T_36_MTR.ANTI_CASC) XIC(I_PE_CL12T_36) ]OTE(CL12T_36_MTR.START_EN);
				N: [[XIO(O4T_20_MTR.ON_TMR.DN) ,XIO(CL12T_36_MRG.MrgSeal) ] [XIO(I_PE_CL12T_36) ,XIC(CL12T_36_MRG.PeSeal) ,XIO(CL12T_36_MRG.SyncRunTmr.DN) ] ,XIO(CL12T_36_MTR.ANTI_CASC) XIC(CL12T_36_MTR.SPACE) ]OTE(CL12T_36_MTR.STOP);
				N: XIC(CL12T_36_MTR.INTL_MTR)XIO(F_CL12T_36_JOG_REVERSE)[[XIC(CL12T_36_MTR.START_EN) ,XIC(CL12T_36_MTR.CONV_RUN) ] XIO(CL12T_36_MTR.STOP) ,[XIO(CL12T_36_MRG.SyncRunTmr.DN) ,XIC(CL12T_36_MRG.MrgSeal) ] XIC(O4T_20_MTR.CONV_RUN) ,XIC(F_CL12T_36_OVRIDE) ][OTE(CL12T_36_MTR.CONV_RUN) ,XIO(CL12T_36_MRG.MergeRunTmr.DN) OTE(O_VFD_CL12T_36_FWD) ];
				N: XIC(F_CL12T_36_JOG_REVERSE)XIC(CL12T_36_MTR.JRB_FILT)XIO(CL12T_36_MTR.E_STOP)XIC(CL12T_36_VFD.READY)XIO(F_CL12T_36_MSD_OFF)XIO(CL12T_36_MTR.COMM)XIO(F_CL12T_36_OVRIDE)OTE(O_VFD_CL12T_36_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL12T_36_MTR.CONV_RUN)TON(CL12T_36_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL12T_36_MTR.CONV_RUN)TON(CL12T_36_MTR.OFF_TMR,?,?);
				RC: "Motor CL12T_35$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL12T_36_MSD_OFF)OTE(CL12T_35_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL12T_35_MTR.E_STOP)[XIC(CL12T_35_VFD.READY) XIO(CL12T_35_MTR.JAMMED) ,XIC(F_CL12T_35_OVRIDE) ]XIO(F_CL12T_35_MSD_OFF)XIO(F_CL12T_35_OUTSERV)XIO(CL12T_35_MTR.COMM)OTE(CL12T_35_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL12T.MTR_GRP.RUN_LATCH) ,XIC(F_CL12T_35_OVRIDE) ]XIC(CL12T_35_MTR.NO_FAULT)TON(CL12T_35_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL12T_35_MTR.IM_TMR.DN)[XIO(CL12T_35_MTR.INTL_MTR) OTE(CL12T_35_MTR.IM_ONS) ,OTE(CL12T_35_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL12T_35_PE.FILT_NEG_XITN)RES(CL12T_35_MTR.T2H_SPACE_TMR);
				N: XIC(CL12T_36_MTR.CONV_RUN)RTO(CL12T_35_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL12T_35_PE.POS_XITN) XIC(CL12T_35_MTR.INTL_MTR) ,XIC(CL12T_35_MTR.T2H_SPACE) ]XIO(CL12T_35_MTR.T2H_SPACE_TMR.DN)OTE(CL12T_35_MTR.T2H_SPACE);
				N: XIC(CL12T_35_MTR.T2H_SPACE)OTE(CL12T_35_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL12T_36_MTR.ON_TMR.DN) XIC(CL12T_35_MTR.OFF_TMR.DN) ,XIO(CL12T_36_MTR.IM_ONS) XIC(CL12T_35_MTR.IM_ONS) ,XIC(CL12T_35_MTR.ANTI_CASC) XIC(I_PE_CL12T_35) ]OTE(CL12T_35_MTR.START_EN);
				N: [XIO(CL12T_36_MTR.ON_TMR.DN) XIO(I_PE_CL12T_35) ,XIO(CL12T_35_MTR.ANTI_CASC) XIC(CL12T_35_MTR.SPACE) ]OTE(CL12T_35_MTR.STOP);
				N: XIC(CL12T_35_MTR.INTL_MTR)[[XIC(CL12T_35_MTR.START_EN) ,XIC(CL12T_35_MTR.CONV_RUN) ] XIO(CL12T_35_MTR.STOP) ,XIC(F_CL12T_35_OVRIDE) ][OTE(CL12T_35_MTR.CONV_RUN) ,OTE(O_VFD_CL12T_35_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL12T_35_MTR.CONV_RUN)TON(CL12T_35_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL12T_35_MTR.CONV_RUN)TON(CL12T_35_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE CL12T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(CL12T_36_MTR.COMM)[[XIO(I_PE_CL12T_36) ,XIC(CL12T_36_PE.TOF.DN) ] TON(CL12T_36_PE.TON,?,?) ,XIO(I_PE_CL12T_36) XIC(CL12T_36_PE.TON.DN) TOF(CL12T_36_PE.TOF,?,?) ,XIC(CL12T_36_PE.TOF.DN) OTE(CL12T_36_PE.FILT) ];
				N: XIC(CL12T_36_PE.FILT)[XIO(CL12T_36_PE.FILT_POS_XITN_MEM) OTE(CL12T_36_PE.FILT_POS_XITN) ,OTE(CL12T_36_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL12T_36_PE.FILT)[XIO(CL12T_36_PE.FILT_NEG_XITN_MEM) OTE(CL12T_36_PE.FILT_NEG_XITN) ,OTE(CL12T_36_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL12T_35_MTR.COMM)[[XIO(I_PE_CL12T_35) ,XIC(CL12T_35_PE.TOF.DN) ] TON(CL12T_35_PE.TON,?,?) ,XIO(I_PE_CL12T_35) XIC(CL12T_35_PE.TON.DN) TOF(CL12T_35_PE.TOF,?,?) ,XIC(CL12T_35_PE.TOF.DN) OTE(CL12T_35_PE.FILT) ];
				N: XIC(CL12T_35_PE.FILT)[XIO(CL12T_35_PE.FILT_POS_XITN_MEM) OTE(CL12T_35_PE.FILT_POS_XITN) ,OTE(CL12T_35_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL12T_35_PE.FILT)[XIO(CL12T_35_PE.FILT_NEG_XITN_MEM) OTE(CL12T_35_PE.FILT_NEG_XITN) ,OTE(CL12T_35_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL12T_35)[XIO(CL12T_35_PE.POS_XITN_MEM) OTE(CL12T_35_PE.POS_XITN) ,OTE(CL12T_35_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE CL12T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(CL12T_36_MTR.COMM);
				N: [XIC(O_VFD_CL12T_36_FWD) ,XIC(O_VFD_CL12T_36_REV) ]XIC(CL12T_36_MTR.CONV_RUN)OTE(CL12T_36_MTR.RUNNING);
				N: XIO(I_CS_CL12T_36_AUTO)OTE(F_CL12T_36_JOG_REVERSE);
				N: XIC(CL12T_36_VFD.FAULTED)[XIO(F_CL12T_36_VFD_FAULT) OTE(CL12T_36_VFD.FAULT_ONS) ,OTE(F_CL12T_36_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL12T_36_MOL);
				N: XIO(I_MSD_CL12T_36)XIO(CL12T_36_MTR.COMM)[XIO(F_CL12T_36_MSD_OFF) OTE(CL12T_36_MTR.MSD_ONS) ,OTE(F_CL12T_36_MSD_OFF) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) AFI() ]OTE(CL12T_36_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) AFI() ]OTE(CL12T_36_MTR.E_STOP_RES);
				N: XIC(CL12T.STATUS.FIRE_ALM)OTE(CL12T_36_MTR.FIRE_ALM);
				N: XIO(CL12T_36_MTR.CONV_RUN)XIC(CL12T_36_MTR.INTL_MTR)OTE(CL12T_36_MTR.CASC);
				N: XIO(CL12T.MTR_GRP.RUN_LATCH)OTE(CL12T_36_MTR.AUTO_STOP);
				N: XIC(HMI_CL12T_36_OVRIDE_REQ)[XIO(F_CL12T_36_OVRIDE) OTE(CL12T_36_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL12T_36_OVRIDE) ];
				N: XIC(HMI_CL12T_36_OUTSERV_REQ)[XIO(F_CL12T_36_OUTSERV) OTE(CL12T_36_MTR.OOS_ONS) ,OTE(F_CL12T_36_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL12T_36_MTR.MB_JAMMED);
				N: [XIC(F_CL12T_36_PE_JAMMED) ,XIC(F_CL12T_35_PE_JAMMED) ,XIC(CL12T_36_MTR.MB_JAMMED) ,AFI() ]OTE(CL12T_36_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(CL12T_35_MTR.COMM);
				N: XIC(O_VFD_CL12T_35_FWD)XIC(CL12T_35_MTR.CONV_RUN)OTE(CL12T_35_MTR.RUNNING);
				N: XIC(CL12T_35_VFD.FAULTED)[XIO(F_CL12T_35_VFD_FAULT) OTE(CL12T_35_VFD.FAULT_ONS) ,OTE(F_CL12T_35_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL12T_35_MOL);
				N: XIO(I_MSD_CL12T_35)XIO(CL12T_35_MTR.COMM)[XIO(F_CL12T_35_MSD_OFF) OTE(CL12T_35_MTR.MSD_ONS) ,OTE(F_CL12T_35_MSD_OFF) ];
				N: [XIO(EZ_31600.Zone_OK) ,AFI() ]OTE(CL12T_35_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,AFI() ]OTE(CL12T_35_MTR.E_STOP_RES);
				N: XIC(CL12T.STATUS.FIRE_ALM)OTE(CL12T_35_MTR.FIRE_ALM);
				N: XIO(CL12T_35_MTR.CONV_RUN)XIC(CL12T_35_MTR.INTL_MTR)OTE(CL12T_35_MTR.CASC);
				N: XIO(CL12T.MTR_GRP.RUN_LATCH)OTE(CL12T_35_MTR.AUTO_STOP);
				N: XIC(HMI_CL12T_35_OVRIDE_REQ)[XIO(F_CL12T_35_OVRIDE) OTE(CL12T_35_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL12T_35_OVRIDE) ];
				N: XIC(HMI_CL12T_35_OUTSERV_REQ)[XIO(F_CL12T_35_OUTSERV) OTE(CL12T_35_MTR.OOS_ONS) ,OTE(F_CL12T_35_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL12T_35_MTR.MB_JAMMED);
				N: [XIC(F_CL12T_35_PE_JAMMED) ,XIC(CL12T_35_MTR.MB_JAMMED) ]OTE(CL12T_35_MTR.JAMMED);
		END_ROUTINE

		ROUTINE CL12T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor CL12T_36 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL12T_36_MTR.COMM)XIO(CL12T_36_MTR.E_STOP)XIO(F_CL12T_36_MSD_OFF)TON(CL12T_36_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL12T_36_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL12T_36_RDY) OTE(CL12T_36_VFD.FAULTED) ,XIO(CL12T_36_VFD.FAULTED) OTE(CL12T_36_VFD.READY) ];
				RC: "Motor CL12T_35 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL12T_35_MTR.COMM)XIO(CL12T_35_MTR.E_STOP)XIO(F_CL12T_35_MSD_OFF)TON(CL12T_35_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL12T_35_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL12T_35_RDY) OTE(CL12T_35_VFD.FAULTED) ,XIO(CL12T_35_VFD.FAULTED) OTE(CL12T_35_VFD.READY) ];
		END_ROUTINE

		ROUTINE CL1T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL1T_01_EPB) ]OTE(O_CS1_CL1T_01_EPB);
				N: XIC(F_CL1T_01_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL1T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL1T_01_EPB) ]OTE(O_CS2_CL1T_01_EPB);
				N: XIC(F_CL1T_01_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL1T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_CL1T_01_EPB) ]OTE(O_CS3_CL1T_01_EPB);
				N: XIC(F_CL1T_01_CS3_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS3_CL1T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_03_PE_JAMMED) XIC(I_PE_CL1T_03) ,XIC(F_CL1T_02_PE_JAMMED) XIC(I_PE_CL1T_02) ,XIC(F_CL1T_01_PE_JAMMED) XIC(I_PE_CL1T_01) ,XIC(F_CL1T_02_CS1_E_STOP) XIO(I_CS1_CL1T_02_EPB) ,AFI() ]OTE(CS_CL1T_02_LTA1_FLASH);
				N: [[XIC(F_CL1T_03_PE_JAMMED) ,XIC(F_CL1T_02_PE_JAMMED) ,XIC(F_CL1T_01_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_02_LTA1_FLASH) ,XIC(CS_CL1T_02_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_CL1T_02_RPBA);
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL1T_02_EPB) ]OTE(O_CS1_CL1T_02_EPB);
				N: XIC(F_CL1T_02_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL1T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL1T_02_EPB) ]OTE(O_CS2_CL1T_02_EPB);
				N: XIC(F_CL1T_02_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL1T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_CL1T_02_EPB) ]OTE(O_CS3_CL1T_02_EPB);
				N: XIC(F_CL1T_02_CS3_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS3_CL1T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_06_PE_JAMMED) XIC(I_PE_CL1T_06) ,XIC(F_CL1T_05_PE_JAMMED) XIC(I_PE_CL1T_05) ,XIC(F_CL1T_04_PE_JAMMED) XIC(I_PE_CL1T_04) ,XIC(F_CL1T_05_CS_E_STOP) XIO(I_CS_CL1T_05_EPB) ,AFI() ]OTE(CS_CL1T_05_LTA_FLASH);
				N: [[XIC(F_CL1T_06_PE_JAMMED) ,XIC(F_CL1T_05_PE_JAMMED) ,XIC(F_CL1T_04_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_05_LTA_FLASH) ,XIC(CS_CL1T_05_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_05_RPBA);
				N: XIO(EZ_30301.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_05_EPB) ]OTE(O_CS_CL1T_05_EPB);
				N: XIC(F_CL1T_05_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_05_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_09_PE_JAMMED) XIC(I_PE_CL1T_09) ,XIC(F_CL1T_08_PE_JAMMED) XIC(I_PE_CL1T_08) ,XIC(F_CL1T_07_PE_JAMMED) XIC(I_PE_CL1T_07) ,XIC(F_CL1T_09_CS_E_STOP) XIO(I_CS_CL1T_09_EPB) ,AFI() ]OTE(CS_CL1T_09_LTA_FLASH);
				N: [[XIC(F_CL1T_09_PE_JAMMED) ,XIC(F_CL1T_08_PE_JAMMED) ,XIC(F_CL1T_07_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_09_LTA_FLASH) ,XIC(CS_CL1T_09_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_09_RPBA);
				N: XIO(EZ_30303.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_09_EPB) ]OTE(O_CS_CL1T_09_EPB);
				N: XIC(F_CL1T_09_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_09_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_12_PE_JAMMED) XIC(I_PE_CL1T_12) ,XIC(F_CL1T_11_PE_JAMMED) XIC(I_PE_CL1T_11) ,XIC(F_CL1T_10_PE_JAMMED) XIC(I_PE_CL1T_10) ,XIC(F_CL1T_09_PE_JAMMED) XIC(I_PE_CL1T_09) ,XIC(F_CL1T_11_CS_E_STOP) XIO(I_CS_CL1T_11_EPB) ,AFI() ]OTE(CS_CL1T_11_LTA_FLASH);
				N: [[XIC(F_CL1T_12_PE_JAMMED) ,XIC(F_CL1T_11_PE_JAMMED) ,XIC(F_CL1T_10_PE_JAMMED) ,XIC(F_CL1T_09_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_11_LTA_FLASH) ,XIC(CS_CL1T_11_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_11_RPBA);
				N: XIO(EZ_30303.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_11_EPB) ]OTE(O_CS_CL1T_11_EPB);
				N: XIC(F_CL1T_11_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_11_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_15_PE_JAMMED) XIC(I_PE_CL1T_15) ,XIC(F_CL1T_14_PE_JAMMED) XIC(I_PE_CL1T_14) ,XIC(F_CL1T_13_PE_JAMMED) XIC(I_PE_CL1T_13) ,XIC(F_CL1T_12_PE_JAMMED) XIC(I_PE_CL1T_12) ,XIC(F_CL1T_11_PE_JAMMED) XIC(I_PE_CL1T_11) ,XIC(F_CL1T_10_PE_JAMMED) XIC(I_PE_CL1T_10) ,XIC(F_CL1T_12_CS_E_STOP) XIO(I_CS_CL1T_12_EPB) ,AFI() ]OTE(CS_CL1T_12_LTA_FLASH);
				N: [[XIC(F_CL1T_15_PE_JAMMED) ,XIC(F_CL1T_14_PE_JAMMED) ,XIC(F_CL1T_13_PE_JAMMED) ,XIC(F_CL1T_12_PE_JAMMED) ,XIC(F_CL1T_11_PE_JAMMED) ,XIC(F_CL1T_10_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_12_LTA_FLASH) ,XIC(CS_CL1T_12_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_12_RPBA);
				N: XIO(EZ_30303.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_12_EPB) ]OTE(O_CS_CL1T_12_EPB);
				N: XIC(F_CL1T_12_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_12_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_19_PE_JAMMED) XIC(I_PE_CL1T_19) ,XIC(F_CL1T_18_PE_JAMMED) XIC(I_PE_CL1T_18) ,XIC(F_CL1T_17_PE_JAMMED) XIC(I_PE_CL1T_17) ,XIC(F_CL1T_16_PE_JAMMED) XIC(I_PE_CL1T_16) ,XIC(F_CL1T_16_CS_E_STOP) XIO(I_CS_CL1T_16_EPB) ,AFI() ]OTE(CS_CL1T_16_LTA_FLASH);
				N: [[XIC(F_CL1T_19_PE_JAMMED) ,XIC(F_CL1T_18_PE_JAMMED) ,XIC(F_CL1T_17_PE_JAMMED) ,XIC(F_CL1T_16_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_16_LTA_FLASH) ,XIC(CS_CL1T_16_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_16_RPBA);
				N: XIO(EZ_30304.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_16_EPB) ]OTE(O_CS_CL1T_16_EPB);
				N: XIC(F_CL1T_16_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_16_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_20_PE_JAMMED) XIC(I_PE_CL1T_20) ,XIC(F_CL1T_20_CS_E_STOP) XIO(I_CS_CL1T_20_EPB) ,AFI() ]OTE(CS_CL1T_20_LTA_FLASH);
				N: [[XIC(F_CL1T_20_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_20_LTA_FLASH) ,XIC(CS_CL1T_20_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_20_RPBA);
				N: XIO(EZ_30305.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_20_EPB) ]OTE(O_CS_CL1T_20_EPB);
				N: XIC(F_CL1T_20_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_20_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL1T_26_PE1_JAMMED) XIC(I_PE1_CL1T_26) ,XIC(F_CL1T_26_PE2_JAMMED) XIC(I_PE2_CL1T_26) ,XIC(F_CL1T_24_PE_JAMMED) XIC(I_PE_CL1T_24) ,XIC(F_CL1T_23_PE_JAMMED) XIC(I_PE_CL1T_23) ,XIC(F_CL1T_21_PE_JAMMED) XIC(I_PE_CL1T_21) ,XIC(F_CL1T_24_CS_E_STOP) XIO(I_CS_CL1T_24_EPB) ,AFI() ]OTE(CS_CL1T_24_LTA_FLASH);
				N: [[XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,XIC(F_CL1T_24_PE_JAMMED) ,XIC(F_CL1T_23_PE_JAMMED) ,XIC(F_CL1T_21_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL1T_24_LTA_FLASH) ,XIC(CS_CL1T_24_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL1T_24_RPBA);
				N: XIO(EZ_30305.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL1T_24_EPB) ]OTE(O_CS_CL1T_24_EPB);
				N: XIC(F_CL1T_24_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL1T_24_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(MCP_03.STATUS.DR_FLT_MONITOR) ,XIC(MCP_03.STATUS.MSD_OFF_MONITOR) ,XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_01_LTA);
				N: XIC(MCP_03.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL1T_01_LTR);
				N: [[XIC(MCP_03.STATUS.DR_FLT_ALARM) ,XIC(MCP_03.STATUS.MOL_ALARM) ,XIC(MCP_03.STATUS.JAM_ALARM) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) ,XIC(MCP_03.STATUS.E_STOP_ALARM) ,XIC(MCP_03.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_01_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(MCP_03.STATUS.DR_FLT_MONITOR) ,XIC(MCP_03.STATUS.MSD_OFF_MONITOR) ,XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_09_LTA);
				N: XIC(MCP_03.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL1T_09_LTR);
				N: [[XIC(MCP_03.STATUS.DR_FLT_ALARM) ,XIC(MCP_03.STATUS.MOL_ALARM) ,XIC(MCP_03.STATUS.JAM_ALARM) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) ,XIC(MCP_03.STATUS.E_STOP_ALARM) ,XIC(MCP_03.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_09_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(MCP_03.STATUS.DR_FLT_MONITOR) ,XIC(MCP_03.STATUS.MSD_OFF_MONITOR) ,XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_20_LTA);
				N: XIC(MCP_03.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL1T_20_LTR);
				N: [[XIC(MCP_03.STATUS.DR_FLT_ALARM) ,XIC(MCP_03.STATUS.MOL_ALARM) ,XIC(MCP_03.STATUS.JAM_ALARM) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) ,XIC(MCP_03.STATUS.E_STOP_ALARM) ,XIC(MCP_03.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ]OTE(O_WA_CL1T_20_ALM);
		END_ROUTINE

		ROUTINE CL1T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_26_MTR.G) ,[XIC(CL1T_26_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_26_MTR.G) ,XIC(F_CL1T_26_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.CASC) MOV(Status.ConvCascade,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.CASC) XIO(I_PE1_CL1T_26) MOV(Status.ConvBagPresCasc,CL1T_26_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_26_MTR.G) ,XIC(F_CL1T_26_MSD_OFF) MOV(Status.ConvDisc,CL1T_26_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_26_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_26_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_26_MTR.G) ,XIC(F_CL1T_26_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_26_MTR.G) ,XIC(F_CL1T_26_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_26_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_26_MTR.G) ,XIC(F_CL1T_26_OVRIDE) MOV(Status.ConvOverRide,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.E_STOP) XIO(CL1T_26_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_26_MTR.G) ,XIC(F_CL1T_26_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_26_MTR.G) ,XIC(CL1T_26_MTR.COMM) MOV(Status.ConvCommFault,CL1T_26_MTR.G) ,MOV(CL1T_26_MTR.G,G_CL1T_26_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_25_MTR.G) ,[XIC(CL1T_25_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_25_MTR.G) ,XIC(F_CL1T_25_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.CASC) MOV(Status.ConvCascade,CL1T_25_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,CL1T_25_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_25_MTR.G) ,XIC(F_CL1T_25_MSD_OFF) MOV(Status.ConvDisc,CL1T_25_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_25_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_25_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_25_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,CL1T_25_MTR.G) ,XIC(F_CL1T_25_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_25_MTR.G) ,XIC(F_CL1T_25_MOL) MOV(Status.ConvOverLoad,CL1T_25_MTR.G) ,XIC(F_CL1T_25_OVRIDE) MOV(Status.ConvOverRide,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.E_STOP) XIO(CL1T_25_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_25_MTR.G) ,XIC(F_CL1T_25_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_25_MTR.G) ,XIC(CL1T_25_MTR.COMM) MOV(Status.ConvCommFault,CL1T_25_MTR.G) ,MOV(CL1T_25_MTR.G,G_CL1T_25_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_24_MTR.G) ,[XIC(CL1T_24_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_24_MTR.G) ,XIC(F_CL1T_24_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.CASC) MOV(Status.ConvCascade,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.CASC) XIO(I_PE_CL1T_24) MOV(Status.ConvBagPresCasc,CL1T_24_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_24_MTR.G) ,XIC(F_CL1T_24_MSD_OFF) MOV(Status.ConvDisc,CL1T_24_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_24_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_24_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_24_MTR.G) ,XIC(F_CL1T_24_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_24_MTR.G) ,XIC(F_CL1T_24_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_24_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_24_MTR.G) ,XIC(F_CL1T_24_OVRIDE) MOV(Status.ConvOverRide,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.E_STOP) XIO(CL1T_24_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_24_MTR.G) ,XIC(F_CL1T_24_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_24_MTR.G) ,XIC(CL1T_24_MTR.COMM) MOV(Status.ConvCommFault,CL1T_24_MTR.G) ,MOV(CL1T_24_MTR.G,G_CL1T_24_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_23_MTR.G) ,[XIC(CL1T_23_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_23_MTR.G) ,XIC(F_CL1T_23_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.CASC) MOV(Status.ConvCascade,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.CASC) XIO(I_PE_CL1T_23) MOV(Status.ConvBagPresCasc,CL1T_23_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_23_MTR.G) ,XIC(F_CL1T_23_MSD_OFF) MOV(Status.ConvDisc,CL1T_23_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_23_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_23_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_23_MTR.G) ,XIC(F_CL1T_23_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_23_MTR.G) ,XIC(F_CL1T_23_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_23_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_23_MTR.G) ,XIC(F_CL1T_23_OVRIDE) MOV(Status.ConvOverRide,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.E_STOP) XIO(CL1T_23_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_23_MTR.G) ,XIC(F_CL1T_23_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_23_MTR.G) ,XIC(CL1T_23_MTR.COMM) MOV(Status.ConvCommFault,CL1T_23_MTR.G) ,MOV(CL1T_23_MTR.G,G_CL1T_23_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_22_MTR.G) ,[XIC(CL1T_22_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_22_MTR.G) ,XIC(F_CL1T_22_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.CASC) MOV(Status.ConvCascade,CL1T_22_MTR.G) ,AFI() MOV(Status.ConvBagPresCasc,CL1T_22_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_22_MTR.G) ,XIC(F_CL1T_22_MSD_OFF) MOV(Status.ConvDisc,CL1T_22_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_22_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_22_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_22_MTR.G) ,AFI() MOV(Status.ConvVFDFlt,CL1T_22_MTR.G) ,XIC(F_CL1T_22_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_22_MTR.G) ,XIC(F_CL1T_22_MOL) MOV(Status.ConvOverLoad,CL1T_22_MTR.G) ,XIC(F_CL1T_22_OVRIDE) MOV(Status.ConvOverRide,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.E_STOP) XIO(CL1T_22_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_22_MTR.G) ,XIC(F_CL1T_22_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_22_MTR.G) ,XIC(CL1T_22_MTR.COMM) MOV(Status.ConvCommFault,CL1T_22_MTR.G) ,MOV(CL1T_22_MTR.G,G_CL1T_22_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_21_MTR.G) ,[XIC(CL1T_21_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_21_MTR.G) ,XIC(F_CL1T_21_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.CASC) MOV(Status.ConvCascade,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.CASC) XIO(I_PE_CL1T_21) MOV(Status.ConvBagPresCasc,CL1T_21_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_21_MTR.G) ,XIC(F_CL1T_21_MSD_OFF) MOV(Status.ConvDisc,CL1T_21_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_21_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_21_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_21_MTR.G) ,XIC(F_CL1T_21_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_21_MTR.G) ,XIC(F_CL1T_21_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_21_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_21_MTR.G) ,XIC(F_CL1T_21_OVRIDE) MOV(Status.ConvOverRide,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.E_STOP) XIO(CL1T_21_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_21_MTR.G) ,XIC(F_CL1T_21_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_21_MTR.G) ,XIC(CL1T_21_MTR.COMM) MOV(Status.ConvCommFault,CL1T_21_MTR.G) ,MOV(CL1T_21_MTR.G,G_CL1T_21_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_20_MTR.G) ,[XIC(CL1T_20_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_20_MTR.G) ,XIC(F_CL1T_20_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.CASC) MOV(Status.ConvCascade,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.CASC) XIO(I_PE_CL1T_20) MOV(Status.ConvBagPresCasc,CL1T_20_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_20_MTR.G) ,XIC(F_CL1T_20_MSD_OFF) MOV(Status.ConvDisc,CL1T_20_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_20_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_20_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_20_MTR.G) ,XIC(F_CL1T_20_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_20_MTR.G) ,XIC(F_CL1T_20_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_20_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_20_MTR.G) ,XIC(F_CL1T_20_OVRIDE) MOV(Status.ConvOverRide,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.E_STOP) XIO(CL1T_20_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_20_MTR.G) ,XIC(F_CL1T_20_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_20_MTR.G) ,XIC(CL1T_20_MTR.COMM) MOV(Status.ConvCommFault,CL1T_20_MTR.G) ,MOV(CL1T_20_MTR.G,G_CL1T_20_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_19_MTR.G) ,[XIC(CL1T_19_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_19_MTR.G) ,XIC(F_CL1T_19_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.CASC) MOV(Status.ConvCascade,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.CASC) XIO(I_PE_CL1T_19) MOV(Status.ConvBagPresCasc,CL1T_19_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_19_MTR.G) ,XIC(F_CL1T_19_MSD_OFF) MOV(Status.ConvDisc,CL1T_19_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_19_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_19_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_19_MTR.G) ,XIC(F_CL1T_19_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_19_MTR.G) ,XIC(F_CL1T_19_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_19_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_19_MTR.G) ,XIC(F_CL1T_19_OVRIDE) MOV(Status.ConvOverRide,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.E_STOP) XIO(CL1T_19_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_19_MTR.G) ,XIC(F_CL1T_19_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_19_MTR.G) ,XIC(CL1T_19_MTR.COMM) MOV(Status.ConvCommFault,CL1T_19_MTR.G) ,MOV(CL1T_19_MTR.G,G_CL1T_19_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_18_MTR.G) ,[XIC(CL1T_18_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_18_MTR.G) ,XIC(F_CL1T_18_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.CASC) MOV(Status.ConvCascade,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.CASC) XIO(I_PE_CL1T_18) MOV(Status.ConvBagPresCasc,CL1T_18_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_18_MTR.G) ,XIC(F_CL1T_18_MSD_OFF) MOV(Status.ConvDisc,CL1T_18_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_18_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_18_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_18_MTR.G) ,XIC(F_CL1T_18_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_18_MTR.G) ,XIC(F_CL1T_18_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_18_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_18_MTR.G) ,XIC(F_CL1T_18_OVRIDE) MOV(Status.ConvOverRide,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.E_STOP) XIO(CL1T_18_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_18_MTR.G) ,XIC(F_CL1T_18_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_18_MTR.G) ,XIC(CL1T_18_MTR.COMM) MOV(Status.ConvCommFault,CL1T_18_MTR.G) ,MOV(CL1T_18_MTR.G,G_CL1T_18_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_17_MTR.G) ,[XIC(CL1T_17_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_17_MTR.G) ,XIC(F_CL1T_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.CASC) MOV(Status.ConvCascade,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.CASC) XIO(I_PE_CL1T_17) MOV(Status.ConvBagPresCasc,CL1T_17_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_17_MTR.G) ,XIC(F_CL1T_17_MSD_OFF) MOV(Status.ConvDisc,CL1T_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_17_MTR.G) ,XIC(F_CL1T_17_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_17_MTR.G) ,XIC(F_CL1T_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_17_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_17_MTR.G) ,XIC(F_CL1T_17_OVRIDE) MOV(Status.ConvOverRide,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.E_STOP) XIO(CL1T_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_17_MTR.G) ,XIC(F_CL1T_17_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_17_MTR.G) ,XIC(CL1T_17_MTR.COMM) MOV(Status.ConvCommFault,CL1T_17_MTR.G) ,MOV(CL1T_17_MTR.G,G_CL1T_17_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_16_MTR.G) ,[XIC(CL1T_16_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_16_MTR.G) ,XIC(F_CL1T_16_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.CASC) MOV(Status.ConvCascade,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.CASC) XIO(I_PE_CL1T_16) MOV(Status.ConvBagPresCasc,CL1T_16_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_16_MTR.G) ,XIC(F_CL1T_16_MSD_OFF) MOV(Status.ConvDisc,CL1T_16_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_16_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_16_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_16_MTR.G) ,XIC(F_CL1T_16_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_16_MTR.G) ,XIC(F_CL1T_16_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_16_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_16_MTR.G) ,XIC(F_CL1T_16_OVRIDE) MOV(Status.ConvOverRide,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.E_STOP) XIO(CL1T_16_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_16_MTR.G) ,XIC(F_CL1T_16_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_16_MTR.G) ,XIC(CL1T_16_MTR.COMM) MOV(Status.ConvCommFault,CL1T_16_MTR.G) ,MOV(CL1T_16_MTR.G,G_CL1T_16_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_15_MTR.G) ,[XIC(CL1T_15_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_15_MTR.G) ,XIC(F_CL1T_15_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.CASC) MOV(Status.ConvCascade,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.CASC) XIO(I_PE_CL1T_15) MOV(Status.ConvBagPresCasc,CL1T_15_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_15_MTR.G) ,XIC(F_CL1T_15_MSD_OFF) MOV(Status.ConvDisc,CL1T_15_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_15_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_15_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_15_MTR.G) ,XIC(F_CL1T_15_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_15_MTR.G) ,XIC(F_CL1T_15_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_15_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_15_MTR.G) ,XIC(F_CL1T_15_OVRIDE) MOV(Status.ConvOverRide,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.E_STOP) XIO(CL1T_15_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_15_MTR.G) ,XIC(F_CL1T_15_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_15_MTR.G) ,XIC(CL1T_15_MTR.COMM) MOV(Status.ConvCommFault,CL1T_15_MTR.G) ,MOV(CL1T_15_MTR.G,G_CL1T_15_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_14_MTR.G) ,[XIC(CL1T_14_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_14_MTR.G) ,XIC(F_CL1T_14_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.CASC) MOV(Status.ConvCascade,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.CASC) XIO(I_PE_CL1T_14) MOV(Status.ConvBagPresCasc,CL1T_14_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_14_MTR.G) ,XIC(F_CL1T_14_MSD_OFF) MOV(Status.ConvDisc,CL1T_14_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_14_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_14_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_14_MTR.G) ,XIC(F_CL1T_14_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_14_MTR.G) ,XIC(F_CL1T_14_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_14_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_14_MTR.G) ,XIC(F_CL1T_14_OVRIDE) MOV(Status.ConvOverRide,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.E_STOP) XIO(CL1T_14_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_14_MTR.G) ,XIC(F_CL1T_14_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_14_MTR.G) ,XIC(CL1T_14_MTR.COMM) MOV(Status.ConvCommFault,CL1T_14_MTR.G) ,MOV(CL1T_14_MTR.G,G_CL1T_14_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_13_MTR.G) ,[XIC(CL1T_13_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_13_MTR.G) ,XIC(F_CL1T_13_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.CASC) MOV(Status.ConvCascade,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.CASC) XIO(I_PE_CL1T_13) MOV(Status.ConvBagPresCasc,CL1T_13_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_13_MTR.G) ,XIC(F_CL1T_13_MSD_OFF) MOV(Status.ConvDisc,CL1T_13_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_13_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_13_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_13_MTR.G) ,XIC(F_CL1T_13_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_13_MTR.G) ,XIC(F_CL1T_13_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_13_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_13_MTR.G) ,XIC(F_CL1T_13_OVRIDE) MOV(Status.ConvOverRide,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.E_STOP) XIO(CL1T_13_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_13_MTR.G) ,XIC(F_CL1T_13_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_13_MTR.G) ,XIC(CL1T_13_MTR.COMM) MOV(Status.ConvCommFault,CL1T_13_MTR.G) ,MOV(CL1T_13_MTR.G,G_CL1T_13_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_12_MTR.G) ,[XIC(CL1T_12_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_12_MTR.G) ,XIC(F_CL1T_12_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.CASC) MOV(Status.ConvCascade,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.CASC) XIO(I_PE_CL1T_12) MOV(Status.ConvBagPresCasc,CL1T_12_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_12_MTR.G) ,XIC(F_CL1T_12_MSD_OFF) MOV(Status.ConvDisc,CL1T_12_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_12_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_12_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_12_MTR.G) ,XIC(F_CL1T_12_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_12_MTR.G) ,XIC(F_CL1T_12_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_12_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_12_MTR.G) ,XIC(F_CL1T_12_OVRIDE) MOV(Status.ConvOverRide,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.E_STOP) XIO(CL1T_12_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_12_MTR.G) ,XIC(F_CL1T_12_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_12_MTR.G) ,XIC(CL1T_12_MTR.COMM) MOV(Status.ConvCommFault,CL1T_12_MTR.G) ,MOV(CL1T_12_MTR.G,G_CL1T_12_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_11_MTR.G) ,[XIC(CL1T_11_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_11_MTR.G) ,XIC(F_CL1T_11_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.CASC) MOV(Status.ConvCascade,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.CASC) XIO(I_PE_CL1T_11) MOV(Status.ConvBagPresCasc,CL1T_11_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_11_MTR.G) ,XIC(F_CL1T_11_MSD_OFF) MOV(Status.ConvDisc,CL1T_11_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_11_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_11_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_11_MTR.G) ,XIC(F_CL1T_11_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_11_MTR.G) ,XIC(F_CL1T_11_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_11_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_11_MTR.G) ,XIC(F_CL1T_11_OVRIDE) MOV(Status.ConvOverRide,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.E_STOP) XIO(CL1T_11_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_11_MTR.G) ,XIC(F_CL1T_11_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_11_MTR.G) ,XIC(CL1T_11_MTR.COMM) MOV(Status.ConvCommFault,CL1T_11_MTR.G) ,MOV(CL1T_11_MTR.G,G_CL1T_11_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_10_MTR.G) ,[XIC(CL1T_10_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_10_MTR.G) ,XIC(F_CL1T_10_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.CASC) MOV(Status.ConvCascade,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.CASC) XIO(I_PE_CL1T_10) MOV(Status.ConvBagPresCasc,CL1T_10_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_10_MTR.G) ,XIC(F_CL1T_10_MSD_OFF) MOV(Status.ConvDisc,CL1T_10_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_10_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_10_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_10_MTR.G) ,XIC(F_CL1T_10_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_10_MTR.G) ,XIC(F_CL1T_10_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_10_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_10_MTR.G) ,XIC(F_CL1T_10_OVRIDE) MOV(Status.ConvOverRide,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.E_STOP) XIO(CL1T_10_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_10_MTR.G) ,XIC(F_CL1T_10_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_10_MTR.G) ,XIC(CL1T_10_MTR.COMM) MOV(Status.ConvCommFault,CL1T_10_MTR.G) ,MOV(CL1T_10_MTR.G,G_CL1T_10_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_09_MTR.G) ,[XIC(CL1T_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_09_MTR.G) ,XIC(F_CL1T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.CASC) MOV(Status.ConvCascade,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.CASC) XIO(I_PE_CL1T_09) MOV(Status.ConvBagPresCasc,CL1T_09_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_09_MTR.G) ,XIC(F_CL1T_09_MSD_OFF) MOV(Status.ConvDisc,CL1T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_09_MTR.G) ,XIC(F_CL1T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_09_MTR.G) ,XIC(F_CL1T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_09_MTR.G) ,XIC(F_CL1T_09_OVRIDE) MOV(Status.ConvOverRide,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.E_STOP) XIO(CL1T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_09_MTR.G) ,XIC(F_CL1T_09_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_09_MTR.G) ,XIC(CL1T_09_MTR.COMM) MOV(Status.ConvCommFault,CL1T_09_MTR.G) ,MOV(CL1T_09_MTR.G,G_CL1T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_08_MTR.G) ,[XIC(CL1T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_08_MTR.G) ,XIC(F_CL1T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.CASC) MOV(Status.ConvCascade,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.CASC) XIO(I_PE_CL1T_08) MOV(Status.ConvBagPresCasc,CL1T_08_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_08_MTR.G) ,XIC(F_CL1T_08_MSD_OFF) MOV(Status.ConvDisc,CL1T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_08_MTR.G) ,XIC(F_CL1T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_08_MTR.G) ,XIC(F_CL1T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_08_MTR.G) ,XIC(F_CL1T_08_OVRIDE) MOV(Status.ConvOverRide,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.E_STOP) XIO(CL1T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_08_MTR.G) ,XIC(F_CL1T_08_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_08_MTR.G) ,XIC(CL1T_08_MTR.COMM) MOV(Status.ConvCommFault,CL1T_08_MTR.G) ,MOV(CL1T_08_MTR.G,G_CL1T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_07_MTR.G) ,[XIC(CL1T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_07_MTR.G) ,XIC(F_CL1T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.CASC) MOV(Status.ConvCascade,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.CASC) XIO(I_PE_CL1T_07) MOV(Status.ConvBagPresCasc,CL1T_07_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_07_MTR.G) ,XIC(F_CL1T_07_MSD_OFF) MOV(Status.ConvDisc,CL1T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_07_MTR.G) ,XIC(F_CL1T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_07_MTR.G) ,XIC(F_CL1T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_07_MTR.G) ,XIC(F_CL1T_07_OVRIDE) MOV(Status.ConvOverRide,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.E_STOP) XIO(CL1T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_07_MTR.G) ,XIC(F_CL1T_07_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_07_MTR.G) ,XIC(CL1T_07_MTR.COMM) MOV(Status.ConvCommFault,CL1T_07_MTR.G) ,MOV(CL1T_07_MTR.G,G_CL1T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_06_MTR.G) ,[XIC(CL1T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_06_MTR.G) ,XIC(F_CL1T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.CASC) MOV(Status.ConvCascade,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.CASC) XIO(I_PE_CL1T_06) MOV(Status.ConvBagPresCasc,CL1T_06_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_06_MTR.G) ,XIC(F_CL1T_06_MSD_OFF) MOV(Status.ConvDisc,CL1T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_06_MTR.G) ,XIC(F_CL1T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_06_MTR.G) ,XIC(F_CL1T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_06_MTR.G) ,XIC(F_CL1T_06_OVRIDE) MOV(Status.ConvOverRide,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.E_STOP) XIO(CL1T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_06_MTR.G) ,XIC(F_CL1T_06_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_06_MTR.G) ,XIC(CL1T_06_MTR.COMM) MOV(Status.ConvCommFault,CL1T_06_MTR.G) ,MOV(CL1T_06_MTR.G,G_CL1T_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_05_MTR.G) ,[XIC(CL1T_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_05_MTR.G) ,XIC(F_CL1T_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.CASC) MOV(Status.ConvCascade,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.CASC) XIO(I_PE_CL1T_05) MOV(Status.ConvBagPresCasc,CL1T_05_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_05_MTR.G) ,XIC(F_CL1T_05_MSD_OFF) MOV(Status.ConvDisc,CL1T_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_05_MTR.G) ,XIC(F_CL1T_05_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_05_MTR.G) ,XIC(F_CL1T_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_05_MTR.G) ,XIC(F_CL1T_05_OVRIDE) MOV(Status.ConvOverRide,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.E_STOP) XIO(CL1T_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_05_MTR.G) ,XIC(F_CL1T_05_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_05_MTR.G) ,XIC(CL1T_05_MTR.COMM) MOV(Status.ConvCommFault,CL1T_05_MTR.G) ,MOV(CL1T_05_MTR.G,G_CL1T_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_04_MTR.G) ,[XIC(CL1T_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_04_MTR.G) ,XIC(F_CL1T_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.CASC) MOV(Status.ConvCascade,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.CASC) XIO(I_PE_CL1T_04) MOV(Status.ConvBagPresCasc,CL1T_04_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_04_MTR.G) ,XIC(F_CL1T_04_MSD_OFF) MOV(Status.ConvDisc,CL1T_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_04_MTR.G) ,XIC(F_CL1T_04_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_04_MTR.G) ,XIC(F_CL1T_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_04_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_04_MTR.G) ,XIC(F_CL1T_04_OVRIDE) MOV(Status.ConvOverRide,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.E_STOP) XIO(CL1T_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_04_MTR.G) ,XIC(F_CL1T_04_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_04_MTR.G) ,XIC(CL1T_04_MTR.COMM) MOV(Status.ConvCommFault,CL1T_04_MTR.G) ,MOV(CL1T_04_MTR.G,G_CL1T_04_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_03_MTR.G) ,[XIC(CL1T_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_03_MTR.G) ,XIC(F_CL1T_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.CASC) MOV(Status.ConvCascade,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.CASC) XIO(I_PE_CL1T_03) MOV(Status.ConvBagPresCasc,CL1T_03_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_03_MTR.G) ,XIC(F_CL1T_03_MSD_OFF) MOV(Status.ConvDisc,CL1T_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_03_MTR.G) ,XIC(F_CL1T_03_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_03_MTR.G) ,XIC(F_CL1T_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_03_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_03_MTR.G) ,XIC(F_CL1T_03_OVRIDE) MOV(Status.ConvOverRide,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.E_STOP) XIO(CL1T_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_03_MTR.G) ,XIC(F_CL1T_03_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_03_MTR.G) ,XIC(CL1T_03_MTR.COMM) MOV(Status.ConvCommFault,CL1T_03_MTR.G) ,MOV(CL1T_03_MTR.G,G_CL1T_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_02_MTR.G) ,[XIC(CL1T_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_02_MTR.G) ,XIC(F_CL1T_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.CASC) MOV(Status.ConvCascade,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.CASC) XIO(I_PE_CL1T_02) MOV(Status.ConvBagPresCasc,CL1T_02_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_02_MTR.G) ,XIC(F_CL1T_02_MSD_OFF) MOV(Status.ConvDisc,CL1T_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_02_MTR.G) ,XIC(F_CL1T_02_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_02_MTR.G) ,XIC(F_CL1T_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_02_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_02_MTR.G) ,XIC(F_CL1T_02_OVRIDE) MOV(Status.ConvOverRide,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.E_STOP) XIO(CL1T_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_02_MTR.G) ,XIC(F_CL1T_02_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_02_MTR.G) ,XIC(CL1T_02_MTR.COMM) MOV(Status.ConvCommFault,CL1T_02_MTR.G) ,MOV(CL1T_02_MTR.G,G_CL1T_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.RUNNING) MOV(Status.ConvRunning,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL1T_01_MTR.G) ,[XIC(CL1T_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL1T_01_MTR.G) ,XIC(F_CL1T_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.CASC) MOV(Status.ConvCascade,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.CASC) XIO(I_PE_CL1T_01) MOV(Status.ConvBagPresCasc,CL1T_01_MTR.G) ,AFI() MOV(Status.ConvFull,CL1T_01_MTR.G) ,XIC(F_CL1T_01_MSD_OFF) MOV(Status.ConvDisc,CL1T_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.JAMMED) MOV(Status.ConvJammed,CL1T_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL1T_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL1T_01_MTR.G) ,XIC(F_CL1T_01_VFD_FAULT) MOV(Status.ConvVFDFlt,CL1T_01_MTR.G) ,XIC(F_CL1T_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL1T_01_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL1T_01_MTR.G) ,XIC(F_CL1T_01_OVRIDE) MOV(Status.ConvOverRide,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.E_STOP) XIO(CL1T_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL1T_01_MTR.G) ,XIC(F_CL1T_01_OUTSERV) MOV(Status.ConvOutOfServ,CL1T_01_MTR.G) ,XIC(CL1T_01_MTR.COMM) MOV(Status.ConvCommFault,CL1T_01_MTR.G) ,MOV(CL1T_01_MTR.G,G_CL1T_01_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_10A_MTR.G) ,[XIC(HX1T_10A_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.CASC) MOV(Status.ConvCascade,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.CASC) XIO(I_PE_HX1T_10A) MOV(Status.ConvBagPresCasc,HX1T_10A_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_MSD_OFF) MOV(Status.ConvDisc,HX1T_10A_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_10A_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_10A_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_10A_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_OVRIDE) MOV(Status.ConvOverRide,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.E_STOP) XIO(HX1T_10A_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_10A_MTR.G) ,XIC(F_HX1T_10A_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_10A_MTR.G) ,XIC(HX1T_10A_MTR.COMM) MOV(Status.ConvCommFault,HX1T_10A_MTR.G) ,MOV(HX1T_10A_MTR.G,G_HX1T_10A_STS) ];
		END_ROUTINE

		ROUTINE CL1T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_26_MTR.CONV_RUN)RTO(CL1T_26_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS_CL1T_24_RPBA) ,XIC(I_CS_HX1T_10_RPBA) ] XIC(CL1T_26_PE1.JAM_TMR.DN) ,XIO(CL1T_26_PE1.JAM_TMR.DN) ]XIC(I_PE1_CL1T_26)RES(CL1T_26_PE1.JAM_TMR);
				N: XIC(CL1T_26_PE1.JAM_TMR.DN)[XIO(F_CL1T_26_PE1_JAMMED) [ADD(S_CL1T_26_PE1_JAM,1,S_CL1T_26_PE1_JAM) ,OTE(CL1T_26_PE1.JAM_ONS) ] ,OTE(F_CL1T_26_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_26_MTR.CONV_RUN)RTO(CL1T_26_PE2.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_24_RPBA) XIC(CL1T_26_PE2.JAM_TMR.DN) ,XIO(CL1T_26_PE2.JAM_TMR.DN) ]XIC(I_PE2_CL1T_26)RES(CL1T_26_PE2.JAM_TMR);
				N: XIC(CL1T_26_PE2.JAM_TMR.DN)[XIO(F_CL1T_26_PE2_JAMMED) [ADD(S_CL1T_26_PE2_JAM,1,S_CL1T_26_PE2_JAM) ,OTE(CL1T_26_PE2.JAM_ONS) ] ,OTE(F_CL1T_26_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_24_MTR.CONV_RUN)RTO(CL1T_24_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_24_RPBA) XIC(CL1T_24_PE.JAM_TMR.DN) ,XIO(CL1T_24_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_24)RES(CL1T_24_PE.JAM_TMR);
				N: XIC(CL1T_24_PE.JAM_TMR.DN)[XIO(F_CL1T_24_PE_JAMMED) [ADD(S_CL1T_24_PE_JAM,1,S_CL1T_24_PE_JAM) ,OTE(CL1T_24_PE.JAM_ONS) ] ,OTE(F_CL1T_24_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_23_MTR.CONV_RUN)RTO(CL1T_23_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_24_RPBA) XIC(CL1T_23_PE.JAM_TMR.DN) ,XIO(CL1T_23_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_23)RES(CL1T_23_PE.JAM_TMR);
				N: XIC(CL1T_23_PE.JAM_TMR.DN)[XIO(F_CL1T_23_PE_JAMMED) [ADD(S_CL1T_23_PE_JAM,1,S_CL1T_23_PE_JAM) ,OTE(CL1T_23_PE.JAM_ONS) ] ,OTE(F_CL1T_23_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_21_MTR.CONV_RUN)RTO(CL1T_21_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_24_RPBA) XIC(CL1T_21_PE.JAM_TMR.DN) ,XIO(CL1T_21_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_21)RES(CL1T_21_PE.JAM_TMR);
				N: XIC(CL1T_21_PE.JAM_TMR.DN)[XIO(F_CL1T_21_PE_JAMMED) [ADD(S_CL1T_21_PE_JAM,1,S_CL1T_21_PE_JAM) ,OTE(CL1T_21_PE.JAM_ONS) ] ,OTE(F_CL1T_21_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_20_MTR.CONV_RUN)RTO(CL1T_20_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_20_RPBA) XIC(CL1T_20_PE.JAM_TMR.DN) ,XIO(CL1T_20_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_20)RES(CL1T_20_PE.JAM_TMR);
				N: XIC(CL1T_20_PE.JAM_TMR.DN)[XIO(F_CL1T_20_PE_JAMMED) [ADD(S_CL1T_20_PE_JAM,1,S_CL1T_20_PE_JAM) ,OTE(CL1T_20_PE.JAM_ONS) ] ,OTE(F_CL1T_20_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_19_MTR.CONV_RUN)RTO(CL1T_19_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_16_RPBA) XIC(CL1T_19_PE.JAM_TMR.DN) ,XIO(CL1T_19_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_19)RES(CL1T_19_PE.JAM_TMR);
				N: XIC(CL1T_19_PE.JAM_TMR.DN)[XIO(F_CL1T_19_PE_JAMMED) [ADD(S_CL1T_19_PE_JAM,1,S_CL1T_19_PE_JAM) ,OTE(CL1T_19_PE.JAM_ONS) ] ,OTE(F_CL1T_19_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_18_MTR.CONV_RUN)RTO(CL1T_18_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_16_RPBA) XIC(CL1T_18_PE.JAM_TMR.DN) ,XIO(CL1T_18_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_18)RES(CL1T_18_PE.JAM_TMR);
				N: XIC(CL1T_18_PE.JAM_TMR.DN)[XIO(F_CL1T_18_PE_JAMMED) [ADD(S_CL1T_18_PE_JAM,1,S_CL1T_18_PE_JAM) ,OTE(CL1T_18_PE.JAM_ONS) ] ,OTE(F_CL1T_18_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_17_MTR.CONV_RUN)RTO(CL1T_17_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_16_RPBA) XIC(CL1T_17_PE.JAM_TMR.DN) ,XIO(CL1T_17_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_17)RES(CL1T_17_PE.JAM_TMR);
				N: XIC(CL1T_17_PE.JAM_TMR.DN)[XIO(F_CL1T_17_PE_JAMMED) [ADD(S_CL1T_17_PE_JAM,1,S_CL1T_17_PE_JAM) ,OTE(CL1T_17_PE.JAM_ONS) ] ,OTE(F_CL1T_17_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_16_MTR.CONV_RUN)RTO(CL1T_16_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_16_RPBA) XIC(CL1T_16_PE.JAM_TMR.DN) ,XIO(CL1T_16_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_16)RES(CL1T_16_PE.JAM_TMR);
				N: XIC(CL1T_16_PE.JAM_TMR.DN)[XIO(F_CL1T_16_PE_JAMMED) [ADD(S_CL1T_16_PE_JAM,1,S_CL1T_16_PE_JAM) ,OTE(CL1T_16_PE.JAM_ONS) ] ,OTE(F_CL1T_16_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_15_MTR.CONV_RUN)RTO(CL1T_15_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_12_RPBA) XIC(CL1T_15_PE.JAM_TMR.DN) ,XIO(CL1T_15_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_15)RES(CL1T_15_PE.JAM_TMR);
				N: XIC(CL1T_15_PE.JAM_TMR.DN)[XIO(F_CL1T_15_PE_JAMMED) [ADD(S_CL1T_15_PE_JAM,1,S_CL1T_15_PE_JAM) ,OTE(CL1T_15_PE.JAM_ONS) ] ,OTE(F_CL1T_15_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_14_MTR.CONV_RUN)RTO(CL1T_14_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_12_RPBA) XIC(CL1T_14_PE.JAM_TMR.DN) ,XIO(CL1T_14_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_14)RES(CL1T_14_PE.JAM_TMR);
				N: XIC(CL1T_14_PE.JAM_TMR.DN)[XIO(F_CL1T_14_PE_JAMMED) [ADD(S_CL1T_14_PE_JAM,1,S_CL1T_14_PE_JAM) ,OTE(CL1T_14_PE.JAM_ONS) ] ,OTE(F_CL1T_14_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_13_MTR.CONV_RUN)RTO(CL1T_13_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_12_RPBA) XIC(CL1T_13_PE.JAM_TMR.DN) ,XIO(CL1T_13_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_13)RES(CL1T_13_PE.JAM_TMR);
				N: XIC(CL1T_13_PE.JAM_TMR.DN)[XIO(F_CL1T_13_PE_JAMMED) [ADD(S_CL1T_13_PE_JAM,1,S_CL1T_13_PE_JAM) ,OTE(CL1T_13_PE.JAM_ONS) ] ,OTE(F_CL1T_13_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_12_MTR.CONV_RUN)RTO(CL1T_12_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_CL1T_12_RPBA) ,XIC(I_CS_CL1T_11_RPBA) ] XIC(CL1T_12_PE.JAM_TMR.DN) ,XIO(CL1T_12_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_12)RES(CL1T_12_PE.JAM_TMR);
				N: XIC(CL1T_12_PE.JAM_TMR.DN)[XIO(F_CL1T_12_PE_JAMMED) [ADD(S_CL1T_12_PE_JAM,1,S_CL1T_12_PE_JAM) ,OTE(CL1T_12_PE.JAM_ONS) ] ,OTE(F_CL1T_12_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_11_MTR.CONV_RUN)RTO(CL1T_11_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_CL1T_12_RPBA) ,XIC(I_CS_CL1T_11_RPBA) ] XIC(CL1T_11_PE.JAM_TMR.DN) ,XIO(CL1T_11_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_11)RES(CL1T_11_PE.JAM_TMR);
				N: XIC(CL1T_11_PE.JAM_TMR.DN)[XIO(F_CL1T_11_PE_JAMMED) [ADD(S_CL1T_11_PE_JAM,1,S_CL1T_11_PE_JAM) ,OTE(CL1T_11_PE.JAM_ONS) ] ,OTE(F_CL1T_11_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_10_MTR.CONV_RUN)RTO(CL1T_10_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_CL1T_12_RPBA) ,XIC(I_CS_CL1T_11_RPBA) ] XIC(CL1T_10_PE.JAM_TMR.DN) ,XIO(CL1T_10_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_10)RES(CL1T_10_PE.JAM_TMR);
				N: XIC(CL1T_10_PE.JAM_TMR.DN)[XIO(F_CL1T_10_PE_JAMMED) [ADD(S_CL1T_10_PE_JAM,1,S_CL1T_10_PE_JAM) ,OTE(CL1T_10_PE.JAM_ONS) ] ,OTE(F_CL1T_10_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_09_MTR.CONV_RUN)RTO(CL1T_09_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_CL1T_09_RPBA) ,XIC(I_CS_CL1T_11_RPBA) ] XIC(CL1T_09_PE.JAM_TMR.DN) ,XIO(CL1T_09_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_09)RES(CL1T_09_PE.JAM_TMR);
				N: XIC(CL1T_09_PE.JAM_TMR.DN)[XIO(F_CL1T_09_PE_JAMMED) [ADD(S_CL1T_09_PE_JAM,1,S_CL1T_09_PE_JAM) ,OTE(CL1T_09_PE.JAM_ONS) ] ,OTE(F_CL1T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_08_MTR.CONV_RUN)RTO(CL1T_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_09_RPBA) XIC(CL1T_08_PE.JAM_TMR.DN) ,XIO(CL1T_08_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_08)RES(CL1T_08_PE.JAM_TMR);
				N: XIC(CL1T_08_PE.JAM_TMR.DN)[XIO(F_CL1T_08_PE_JAMMED) [ADD(S_CL1T_08_PE_JAM,1,S_CL1T_08_PE_JAM) ,OTE(CL1T_08_PE.JAM_ONS) ] ,OTE(F_CL1T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_07_MTR.CONV_RUN)RTO(CL1T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_09_RPBA) XIC(CL1T_07_PE.JAM_TMR.DN) ,XIO(CL1T_07_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_07)RES(CL1T_07_PE.JAM_TMR);
				N: XIC(CL1T_07_PE.JAM_TMR.DN)[XIO(F_CL1T_07_PE_JAMMED) [ADD(S_CL1T_07_PE_JAM,1,S_CL1T_07_PE_JAM) ,OTE(CL1T_07_PE.JAM_ONS) ] ,OTE(F_CL1T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_06_MTR.CONV_RUN)RTO(CL1T_06_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_05_RPBA) XIC(CL1T_06_PE.JAM_TMR.DN) ,XIO(CL1T_06_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_06)RES(CL1T_06_PE.JAM_TMR);
				N: XIC(CL1T_06_PE.JAM_TMR.DN)[XIO(F_CL1T_06_PE_JAMMED) [ADD(S_CL1T_06_PE_JAM,1,S_CL1T_06_PE_JAM) ,OTE(CL1T_06_PE.JAM_ONS) ] ,OTE(F_CL1T_06_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_05_MTR.CONV_RUN)RTO(CL1T_05_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_05_RPBA) XIC(CL1T_05_PE.JAM_TMR.DN) ,XIO(CL1T_05_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_05)RES(CL1T_05_PE.JAM_TMR);
				N: XIC(CL1T_05_PE.JAM_TMR.DN)[XIO(F_CL1T_05_PE_JAMMED) [ADD(S_CL1T_05_PE_JAM,1,S_CL1T_05_PE_JAM) ,OTE(CL1T_05_PE.JAM_ONS) ] ,OTE(F_CL1T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_04_MTR.CONV_RUN)RTO(CL1T_04_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL1T_05_RPBA) XIC(CL1T_04_PE.JAM_TMR.DN) ,XIO(CL1T_04_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_04)RES(CL1T_04_PE.JAM_TMR);
				N: XIC(CL1T_04_PE.JAM_TMR.DN)[XIO(F_CL1T_04_PE_JAMMED) [ADD(S_CL1T_04_PE_JAM,1,S_CL1T_04_PE_JAM) ,OTE(CL1T_04_PE.JAM_ONS) ] ,OTE(F_CL1T_04_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_03_MTR.CONV_RUN)RTO(CL1T_03_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL1T_02_RPBA) XIC(CL1T_03_PE.JAM_TMR.DN) ,XIO(CL1T_03_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_03)RES(CL1T_03_PE.JAM_TMR);
				N: XIC(CL1T_03_PE.JAM_TMR.DN)[XIO(F_CL1T_03_PE_JAMMED) [ADD(S_CL1T_03_PE_JAM,1,S_CL1T_03_PE_JAM) ,OTE(CL1T_03_PE.JAM_ONS) ] ,OTE(F_CL1T_03_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_02_MTR.CONV_RUN)RTO(CL1T_02_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL1T_02_RPBA) XIC(CL1T_02_PE.JAM_TMR.DN) ,XIO(CL1T_02_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_02)RES(CL1T_02_PE.JAM_TMR);
				N: XIC(CL1T_02_PE.JAM_TMR.DN)[XIO(F_CL1T_02_PE_JAMMED) [ADD(S_CL1T_02_PE_JAM,1,S_CL1T_02_PE_JAM) ,OTE(CL1T_02_PE.JAM_ONS) ] ,OTE(F_CL1T_02_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL1T_01_MTR.CONV_RUN)RTO(CL1T_01_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL1T_02_RPBA) XIC(CL1T_01_PE.JAM_TMR.DN) ,XIO(CL1T_01_PE.JAM_TMR.DN) ]XIC(I_PE_CL1T_01)RES(CL1T_01_PE.JAM_TMR);
				N: XIC(CL1T_01_PE.JAM_TMR.DN)[XIO(F_CL1T_01_PE_JAMMED) [ADD(S_CL1T_01_PE_JAM,1,S_CL1T_01_PE_JAM) ,OTE(CL1T_01_PE.JAM_ONS) ] ,OTE(F_CL1T_01_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE CL1T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_03_SPBG) ,XIC(I_CS1_CL1T_01_SPBG) ,XIC(I_CS2_CL1T_01_SPBG) ,XIC(I_CS3_CL1T_01_SPBG) ,XIC(I_CS1_CL1T_02_SPBG) ,XIC(I_CS2_CL1T_02_SPBG) ,XIC(I_CS3_CL1T_02_SPBG) ,XIC(HX1T.MTR_GRP.START_DS) ,AFI() ]OTE(CL1T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(CL1T_26_MTR.CONV_RUN)XIC(CL1T_25_MTR.CONV_RUN)XIC(CL1T_24_MTR.CONV_RUN)XIC(CL1T_23_MTR.CONV_RUN)XIC(CL1T_22_MTR.CONV_RUN)XIC(CL1T_21_MTR.CONV_RUN)XIC(CL1T_20_MTR.CONV_RUN)XIC(CL1T_19_MTR.CONV_RUN)XIC(CL1T_18_MTR.CONV_RUN)XIC(CL1T_17_MTR.CONV_RUN)XIC(CL1T_16_MTR.CONV_RUN)XIC(CL1T_15_MTR.CONV_RUN)XIC(CL1T_14_MTR.CONV_RUN)XIC(CL1T_13_MTR.CONV_RUN)XIC(CL1T_12_MTR.CONV_RUN)XIC(CL1T_11_MTR.CONV_RUN)XIC(CL1T_10_MTR.CONV_RUN)XIC(CL1T_09_MTR.CONV_RUN)XIC(CL1T_08_MTR.CONV_RUN)XIC(CL1T_07_MTR.CONV_RUN)XIC(CL1T_06_MTR.CONV_RUN)XIC(CL1T_05_MTR.CONV_RUN)XIC(CL1T_04_MTR.CONV_RUN)XIC(CL1T_03_MTR.CONV_RUN)XIC(CL1T_02_MTR.CONV_RUN)XIC(CL1T_01_MTR.CONV_RUN)XIC(HX1T_10A_MTR.CONV_RUN)OTE(CL1T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE1_CL1T_26) ,XIO(I_PE2_CL1T_26) ,XIO(I_PE_CL1T_24) ,XIO(I_PE_CL1T_23) ,XIO(I_PE_CL1T_21) ,XIO(I_PE_CL1T_20) ,XIO(I_PE_CL1T_19) ,XIO(I_PE_CL1T_18) ,XIO(I_PE_CL1T_17) ,XIO(I_PE_CL1T_16) ,XIO(I_PE_CL1T_15) ,XIO(I_PE_CL1T_14) ,XIO(I_PE_CL1T_13) ,XIO(I_PE_CL1T_12) ,XIO(I_PE_CL1T_11) ,XIO(I_PE_CL1T_10) ,XIO(I_PE_CL1T_09) ,XIO(I_PE_CL1T_08) ,XIO(I_PE_CL1T_07) ,XIO(I_PE_CL1T_06) ,XIO(I_PE_CL1T_05) ,XIO(I_PE_CL1T_04) ,XIO(I_PE_CL1T_03) ,XIO(I_PE_CL1T_02) ,XIO(I_PE_CL1T_01) ,AFI() ]OTE(CL1T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(CL1T.MTR_GRP.START) ,XIC(CL1T.MTR_GRP.PEs) XIO(CL1T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(CL1T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(CL1T.MTR_GRP.RUN_LATCH)XIC(CL1T.MTR_GRP.PEs)OTE(CL1T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(CL1T.MTR_GRP.RUN_EXPAND)RTO(CL1T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(CL1T.MTR_GRP.START) ,XIC(CL1T.MTR_GRP.RUN_LATCH) ]XIO(CL1T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(CL1T.STATUS.FIRE_ALM)OTE(CL1T.MTR_GRP.RUN_LATCH);
				RC: "Motor CL1T_26$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(CL1T_26_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_26_MTR.E_STOP)[XIC(CL1T_26_VFD.READY) XIO(CL1T_26_MTR.JAMMED) ,XIC(F_CL1T_26_OVRIDE) ]XIO(F_CL1T_26_MSD_OFF)XIO(F_CL1T_26_OUTSERV)XIO(CL1T_26_MTR.COMM)OTE(CL1T_26_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_26_OVRIDE) ]XIC(CL1T_26_MTR.NO_FAULT)TON(CL1T_26_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_26_MTR.IM_TMR.DN)[XIO(CL1T_26_MTR.INTL_MTR) OTE(CL1T_26_MTR.IM_ONS) ,OTE(CL1T_26_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_26_PE1.FILT_NEG_XITN)RES(CL1T_26_MTR.T2H_SPACE_TMR);
				N: XIC(HX1T_10A_MTR.CONV_RUN)RTO(CL1T_26_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_26_PE1.POS_XITN) XIC(CL1T_26_MTR.INTL_MTR) ,XIC(CL1T_26_MTR.T2H_SPACE) ]XIO(CL1T_26_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_26_MTR.T2H_SPACE);
				N: XIC(CL1T_26_MTR.T2H_SPACE)OTE(CL1T_26_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(zzzHX1_10ZZ_MTR_ON_TMR_DN) XIC(CL1T_26_MTR.OFF_TMR.DN) ,XIO(zzzHX1_10ZZ_MTR_IM_ONS) XIC(CL1T_26_MTR.IM_ONS) ,XIC(CL1T_26_MTR.ANTI_CASC) XIC(I_PE1_CL1T_26) ]OTE(CL1T_26_MTR.START_EN);
				N: [XIO(zzzHX1_10ZZ_MTR_ON_TMR_DN) XIO(I_PE1_CL1T_26) ,XIO(CL1T_26_MTR.ANTI_CASC) XIC(CL1T_26_MTR.SPACE) ]OTE(CL1T_26_MTR.STOP);
				N: XIC(CL1T_26_MTR.INTL_MTR)[[XIC(CL1T_26_MTR.START_EN) ,XIC(CL1T_26_MTR.CONV_RUN) ] XIO(CL1T_26_MTR.STOP) ,XIC(F_CL1T_26_OVRIDE) ][OTE(CL1T_26_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_26_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_26_MTR.CONV_RUN)TON(CL1T_26_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_26_MTR.CONV_RUN)TON(CL1T_26_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_25$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(CL1T_25_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_25_MTR.E_STOP)[XIO(F_CL1T_25_MOL) XIO(CL1T_25_MTR.JAMMED) ,XIC(F_CL1T_25_OVRIDE) ]XIO(F_CL1T_25_MSD_OFF)XIO(F_CL1T_25_OUTSERV)XIO(CL1T_25_MTR.COMM)OTE(CL1T_25_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_25_OVRIDE) ]XIC(CL1T_25_MTR.NO_FAULT)TON(CL1T_25_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_25_MTR.IM_TMR.DN)[XIO(CL1T_25_MTR.INTL_MTR) OTE(CL1T_25_MTR.IM_ONS) ,OTE(CL1T_25_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(CL1T_25_MTR.INTL_MTR)[XIC(CL1T_26_MTR.CONV_RUN) ,XIC(F_CL1T_25_OVRIDE) ]OTE(CL1T_25_MTR.CONV_RUN);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_25_MTR.CONV_RUN)TON(CL1T_25_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_25_MTR.CONV_RUN)TON(CL1T_25_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_24$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_25_MSD_OFF)OTE(CL1T_24_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_24_MTR.E_STOP)[XIC(CL1T_24_VFD.READY) XIO(CL1T_24_MTR.JAMMED) ,XIC(F_CL1T_24_OVRIDE) ]XIO(F_CL1T_24_MSD_OFF)XIO(F_CL1T_24_OUTSERV)XIO(CL1T_24_MTR.COMM)OTE(CL1T_24_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_24_OVRIDE) ]XIC(CL1T_24_MTR.NO_FAULT)TON(CL1T_24_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_24_MTR.IM_TMR.DN)[XIO(CL1T_24_MTR.INTL_MTR) OTE(CL1T_24_MTR.IM_ONS) ,OTE(CL1T_24_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_24_PE.FILT_NEG_XITN)RES(CL1T_24_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_25_MTR.CONV_RUN)RTO(CL1T_24_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_24_PE.POS_XITN) XIC(CL1T_24_MTR.INTL_MTR) ,XIC(CL1T_24_MTR.T2H_SPACE) ]XIO(CL1T_24_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_24_MTR.T2H_SPACE);
				N: XIC(CL1T_24_MTR.T2H_SPACE)OTE(CL1T_24_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_25_MTR.ON_TMR.DN) XIC(CL1T_24_MTR.OFF_TMR.DN) ,XIO(CL1T_25_MTR.IM_ONS) XIC(CL1T_24_MTR.IM_ONS) ,XIC(CL1T_24_MTR.ANTI_CASC) XIC(I_PE_CL1T_24) ]OTE(CL1T_24_MTR.START_EN);
				N: [XIO(CL1T_25_MTR.ON_TMR.DN) XIO(I_PE_CL1T_24) ,XIO(CL1T_24_MTR.ANTI_CASC) XIC(CL1T_24_MTR.SPACE) ]OTE(CL1T_24_MTR.STOP);
				N: XIC(CL1T_24_MTR.INTL_MTR)[[XIC(CL1T_24_MTR.START_EN) ,XIC(CL1T_24_MTR.CONV_RUN) ] XIO(CL1T_24_MTR.STOP) ,XIC(F_CL1T_24_OVRIDE) ][OTE(CL1T_24_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_24_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_24_MTR.CONV_RUN)TON(CL1T_24_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_24_MTR.CONV_RUN)TON(CL1T_24_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_23$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_24_MSD_OFF)OTE(CL1T_23_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_23_MTR.E_STOP)[XIC(CL1T_23_VFD.READY) XIO(CL1T_23_MTR.JAMMED) ,XIC(F_CL1T_23_OVRIDE) ]XIO(F_CL1T_23_MSD_OFF)XIO(F_CL1T_23_OUTSERV)XIO(CL1T_23_MTR.COMM)OTE(CL1T_23_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_23_OVRIDE) ]XIC(CL1T_23_MTR.NO_FAULT)TON(CL1T_23_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_23_MTR.IM_TMR.DN)[XIO(CL1T_23_MTR.INTL_MTR) OTE(CL1T_23_MTR.IM_ONS) ,OTE(CL1T_23_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_23_PE.FILT_NEG_XITN)RES(CL1T_23_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_24_MTR.CONV_RUN)RTO(CL1T_23_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_23_PE.POS_XITN) XIC(CL1T_23_MTR.INTL_MTR) ,XIC(CL1T_23_MTR.T2H_SPACE) ]XIO(CL1T_23_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_23_MTR.T2H_SPACE);
				N: XIC(CL1T_23_MTR.T2H_SPACE)OTE(CL1T_23_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_24_MTR.ON_TMR.DN) XIC(CL1T_23_MTR.OFF_TMR.DN) ,XIO(CL1T_24_MTR.IM_ONS) XIC(CL1T_23_MTR.IM_ONS) ,XIC(CL1T_23_MTR.ANTI_CASC) XIC(I_PE_CL1T_23) ]OTE(CL1T_23_MTR.START_EN);
				N: [XIO(CL1T_24_MTR.ON_TMR.DN) XIO(I_PE_CL1T_23) ,XIO(CL1T_23_MTR.ANTI_CASC) XIC(CL1T_23_MTR.SPACE) ]OTE(CL1T_23_MTR.STOP);
				N: XIC(CL1T_23_MTR.INTL_MTR)[[XIC(CL1T_23_MTR.START_EN) ,XIC(CL1T_23_MTR.CONV_RUN) ] XIO(CL1T_23_MTR.STOP) ,XIC(F_CL1T_23_OVRIDE) ][OTE(CL1T_23_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_23_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_23_MTR.CONV_RUN)TON(CL1T_23_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_23_MTR.CONV_RUN)TON(CL1T_23_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_22$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: AFI()OTE(CL1T_22_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_22_MTR.E_STOP)[XIO(F_CL1T_22_MOL) XIO(CL1T_22_MTR.JAMMED) ,XIC(F_CL1T_22_OVRIDE) ]XIO(F_CL1T_22_MSD_OFF)XIO(F_CL1T_22_OUTSERV)XIO(CL1T_22_MTR.COMM)OTE(CL1T_22_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_22_OVRIDE) ]XIC(CL1T_22_MTR.NO_FAULT)TON(CL1T_22_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_22_MTR.IM_TMR.DN)[XIO(CL1T_22_MTR.INTL_MTR) OTE(CL1T_22_MTR.IM_ONS) ,OTE(CL1T_22_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: XIC(CL1T_22_MTR.INTL_MTR)[XIC(CL1T_23_MTR.CONV_RUN) ,XIC(F_CL1T_22_OVRIDE) ]OTE(CL1T_22_MTR.CONV_RUN);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_22_MTR.CONV_RUN)TON(CL1T_22_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_22_MTR.CONV_RUN)TON(CL1T_22_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_21$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_22_MSD_OFF)OTE(CL1T_21_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_21_MTR.E_STOP)[XIC(CL1T_21_VFD.READY) XIO(CL1T_21_MTR.JAMMED) ,XIC(F_CL1T_21_OVRIDE) ]XIO(F_CL1T_21_MSD_OFF)XIO(F_CL1T_21_OUTSERV)XIO(CL1T_21_MTR.COMM)OTE(CL1T_21_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_21_OVRIDE) ]XIC(CL1T_21_MTR.NO_FAULT)TON(CL1T_21_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_21_MTR.IM_TMR.DN)[XIO(CL1T_21_MTR.INTL_MTR) OTE(CL1T_21_MTR.IM_ONS) ,OTE(CL1T_21_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_21_PE.FILT_NEG_XITN)RES(CL1T_21_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_22_MTR.CONV_RUN)RTO(CL1T_21_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_21_PE.POS_XITN) XIC(CL1T_21_MTR.INTL_MTR) ,XIC(CL1T_21_MTR.T2H_SPACE) ]XIO(CL1T_21_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_21_MTR.T2H_SPACE);
				N: XIC(CL1T_21_MTR.T2H_SPACE)OTE(CL1T_21_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_22_MTR.ON_TMR.DN) XIC(CL1T_21_MTR.OFF_TMR.DN) ,XIO(CL1T_22_MTR.IM_ONS) XIC(CL1T_21_MTR.IM_ONS) ,XIC(CL1T_21_MTR.ANTI_CASC) XIC(I_PE_CL1T_21) ]OTE(CL1T_21_MTR.START_EN);
				N: [XIO(CL1T_22_MTR.ON_TMR.DN) XIO(I_PE_CL1T_21) ,XIO(CL1T_21_MTR.ANTI_CASC) XIC(CL1T_21_MTR.SPACE) ]OTE(CL1T_21_MTR.STOP);
				N: XIC(CL1T_21_MTR.INTL_MTR)[[XIC(CL1T_21_MTR.START_EN) ,XIC(CL1T_21_MTR.CONV_RUN) ] XIO(CL1T_21_MTR.STOP) ,XIC(F_CL1T_21_OVRIDE) ][OTE(CL1T_21_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_21_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_21_MTR.CONV_RUN)TON(CL1T_21_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_21_MTR.CONV_RUN)TON(CL1T_21_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_20$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_21_MSD_OFF)OTE(CL1T_20_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_20_MTR.E_STOP)[XIC(CL1T_20_VFD.READY) XIO(CL1T_20_MTR.JAMMED) ,XIC(F_CL1T_20_OVRIDE) ]XIO(F_CL1T_20_MSD_OFF)XIO(F_CL1T_20_OUTSERV)XIO(CL1T_20_MTR.COMM)OTE(CL1T_20_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_20_OVRIDE) ]XIC(CL1T_20_MTR.NO_FAULT)TON(CL1T_20_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_20_MTR.IM_TMR.DN)[XIO(CL1T_20_MTR.INTL_MTR) OTE(CL1T_20_MTR.IM_ONS) ,OTE(CL1T_20_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_20_PE.FILT_NEG_XITN)RES(CL1T_20_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_21_MTR.CONV_RUN)RTO(CL1T_20_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_20_PE.POS_XITN) XIC(CL1T_20_MTR.INTL_MTR) ,XIC(CL1T_20_MTR.T2H_SPACE) ]XIO(CL1T_20_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_20_MTR.T2H_SPACE);
				N: XIC(CL1T_20_MTR.T2H_SPACE)OTE(CL1T_20_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_21_MTR.ON_TMR.DN) XIC(CL1T_20_MTR.OFF_TMR.DN) ,XIO(CL1T_21_MTR.IM_ONS) XIC(CL1T_20_MTR.IM_ONS) ,XIC(CL1T_20_MTR.ANTI_CASC) XIC(I_PE_CL1T_20) ]OTE(CL1T_20_MTR.START_EN);
				N: [XIO(CL1T_21_MTR.ON_TMR.DN) XIO(I_PE_CL1T_20) ,XIO(CL1T_20_MTR.ANTI_CASC) XIC(CL1T_20_MTR.SPACE) ]OTE(CL1T_20_MTR.STOP);
				N: XIC(CL1T_20_MTR.INTL_MTR)[[XIC(CL1T_20_MTR.START_EN) ,XIC(CL1T_20_MTR.CONV_RUN) ] XIO(CL1T_20_MTR.STOP) ,XIC(F_CL1T_20_OVRIDE) ][OTE(CL1T_20_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_20_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_20_MTR.CONV_RUN)TON(CL1T_20_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_20_MTR.CONV_RUN)TON(CL1T_20_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_19$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_20_MSD_OFF)OTE(CL1T_19_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_19_MTR.E_STOP)[XIC(CL1T_19_VFD.READY) XIO(CL1T_19_MTR.JAMMED) ,XIC(F_CL1T_19_OVRIDE) ]XIO(F_CL1T_19_MSD_OFF)XIO(F_CL1T_19_OUTSERV)XIO(CL1T_19_MTR.COMM)OTE(CL1T_19_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_19_OVRIDE) ]XIC(CL1T_19_MTR.NO_FAULT)TON(CL1T_19_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_19_MTR.IM_TMR.DN)[XIO(CL1T_19_MTR.INTL_MTR) OTE(CL1T_19_MTR.IM_ONS) ,OTE(CL1T_19_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_19_PE.FILT_NEG_XITN)RES(CL1T_19_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_20_MTR.CONV_RUN)RTO(CL1T_19_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_19_PE.POS_XITN) XIC(CL1T_19_MTR.INTL_MTR) ,XIC(CL1T_19_MTR.T2H_SPACE) ]XIO(CL1T_19_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_19_MTR.T2H_SPACE);
				N: XIC(CL1T_19_MTR.T2H_SPACE)OTE(CL1T_19_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_20_MTR.ON_TMR.DN) XIC(CL1T_19_MTR.OFF_TMR.DN) ,XIO(CL1T_20_MTR.IM_ONS) XIC(CL1T_19_MTR.IM_ONS) ,XIC(CL1T_19_MTR.ANTI_CASC) XIC(I_PE_CL1T_19) ]OTE(CL1T_19_MTR.START_EN);
				N: [XIO(CL1T_20_MTR.ON_TMR.DN) XIO(I_PE_CL1T_19) ,XIO(CL1T_19_MTR.ANTI_CASC) XIC(CL1T_19_MTR.SPACE) ]OTE(CL1T_19_MTR.STOP);
				N: XIC(CL1T_19_MTR.INTL_MTR)[[XIC(CL1T_19_MTR.START_EN) ,XIC(CL1T_19_MTR.CONV_RUN) ] XIO(CL1T_19_MTR.STOP) ,XIC(F_CL1T_19_OVRIDE) ][OTE(CL1T_19_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_19_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_19_MTR.CONV_RUN)TON(CL1T_19_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_19_MTR.CONV_RUN)TON(CL1T_19_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_18$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_19_MSD_OFF)OTE(CL1T_18_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_18_MTR.E_STOP)[XIC(CL1T_18_VFD.READY) XIO(CL1T_18_MTR.JAMMED) ,XIC(F_CL1T_18_OVRIDE) ]XIO(F_CL1T_18_MSD_OFF)XIO(F_CL1T_18_OUTSERV)XIO(CL1T_18_MTR.COMM)OTE(CL1T_18_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_18_OVRIDE) ]XIC(CL1T_18_MTR.NO_FAULT)TON(CL1T_18_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_18_MTR.IM_TMR.DN)[XIO(CL1T_18_MTR.INTL_MTR) OTE(CL1T_18_MTR.IM_ONS) ,OTE(CL1T_18_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_18_PE.FILT_NEG_XITN)RES(CL1T_18_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_19_MTR.CONV_RUN)RTO(CL1T_18_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_18_PE.POS_XITN) XIC(CL1T_18_MTR.INTL_MTR) ,XIC(CL1T_18_MTR.T2H_SPACE) ]XIO(CL1T_18_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_18_MTR.T2H_SPACE);
				N: XIC(CL1T_18_MTR.T2H_SPACE)OTE(CL1T_18_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_19_MTR.ON_TMR.DN) XIC(CL1T_18_MTR.OFF_TMR.DN) ,XIO(CL1T_19_MTR.IM_ONS) XIC(CL1T_18_MTR.IM_ONS) ,XIC(CL1T_18_MTR.ANTI_CASC) XIC(I_PE_CL1T_18) ]OTE(CL1T_18_MTR.START_EN);
				N: [XIO(CL1T_19_MTR.ON_TMR.DN) XIO(I_PE_CL1T_18) ,XIO(CL1T_18_MTR.ANTI_CASC) XIC(CL1T_18_MTR.SPACE) ]OTE(CL1T_18_MTR.STOP);
				N: XIC(CL1T_18_MTR.INTL_MTR)[[XIC(CL1T_18_MTR.START_EN) ,XIC(CL1T_18_MTR.CONV_RUN) ] XIO(CL1T_18_MTR.STOP) ,XIC(F_CL1T_18_OVRIDE) ][OTE(CL1T_18_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_18_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_18_MTR.CONV_RUN)TON(CL1T_18_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_18_MTR.CONV_RUN)TON(CL1T_18_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_18_MSD_OFF)OTE(CL1T_17_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_17_MTR.E_STOP)[XIC(CL1T_17_VFD.READY) XIO(CL1T_17_MTR.JAMMED) ,XIC(F_CL1T_17_OVRIDE) ]XIO(F_CL1T_17_MSD_OFF)XIO(F_CL1T_17_OUTSERV)XIO(CL1T_17_MTR.COMM)OTE(CL1T_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_17_OVRIDE) ]XIC(CL1T_17_MTR.NO_FAULT)TON(CL1T_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_17_MTR.IM_TMR.DN)[XIO(CL1T_17_MTR.INTL_MTR) OTE(CL1T_17_MTR.IM_ONS) ,OTE(CL1T_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_17_PE.FILT_NEG_XITN)RES(CL1T_17_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_18_MTR.CONV_RUN)RTO(CL1T_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_17_PE.POS_XITN) XIC(CL1T_17_MTR.INTL_MTR) ,XIC(CL1T_17_MTR.T2H_SPACE) ]XIO(CL1T_17_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_17_MTR.T2H_SPACE);
				N: XIC(CL1T_17_MTR.T2H_SPACE)OTE(CL1T_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_18_MTR.ON_TMR.DN) XIC(CL1T_17_MTR.OFF_TMR.DN) ,XIO(CL1T_18_MTR.IM_ONS) XIC(CL1T_17_MTR.IM_ONS) ,XIC(CL1T_17_MTR.ANTI_CASC) XIC(I_PE_CL1T_17) ]OTE(CL1T_17_MTR.START_EN);
				N: [XIO(CL1T_18_MTR.ON_TMR.DN) XIO(I_PE_CL1T_17) ,XIO(CL1T_17_MTR.ANTI_CASC) XIC(CL1T_17_MTR.SPACE) ]OTE(CL1T_17_MTR.STOP);
				N: XIC(CL1T_17_MTR.INTL_MTR)[[XIC(CL1T_17_MTR.START_EN) ,XIC(CL1T_17_MTR.CONV_RUN) ] XIO(CL1T_17_MTR.STOP) ,XIC(F_CL1T_17_OVRIDE) ][OTE(CL1T_17_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_17_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_17_MTR.CONV_RUN)TON(CL1T_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_17_MTR.CONV_RUN)TON(CL1T_17_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_16$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_17_MSD_OFF)OTE(CL1T_16_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_16_MTR.E_STOP)[XIC(CL1T_16_VFD.READY) XIO(CL1T_16_MTR.JAMMED) ,XIC(F_CL1T_16_OVRIDE) ]XIO(F_CL1T_16_MSD_OFF)XIO(F_CL1T_16_OUTSERV)XIO(CL1T_16_MTR.COMM)OTE(CL1T_16_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_16_OVRIDE) ]XIC(CL1T_16_MTR.NO_FAULT)TON(CL1T_16_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_16_MTR.IM_TMR.DN)[XIO(CL1T_16_MTR.INTL_MTR) OTE(CL1T_16_MTR.IM_ONS) ,OTE(CL1T_16_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_16_PE.FILT_NEG_XITN)RES(CL1T_16_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_17_MTR.CONV_RUN)RTO(CL1T_16_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_16_PE.POS_XITN) XIC(CL1T_16_MTR.INTL_MTR) ,XIC(CL1T_16_MTR.T2H_SPACE) ]XIO(CL1T_16_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_16_MTR.T2H_SPACE);
				N: XIC(CL1T_16_MTR.T2H_SPACE)OTE(CL1T_16_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_17_MTR.ON_TMR.DN) XIC(CL1T_16_MTR.OFF_TMR.DN) ,XIO(CL1T_17_MTR.IM_ONS) XIC(CL1T_16_MTR.IM_ONS) ,XIC(CL1T_16_MTR.ANTI_CASC) XIC(I_PE_CL1T_16) ]OTE(CL1T_16_MTR.START_EN);
				N: [XIO(CL1T_17_MTR.ON_TMR.DN) XIO(I_PE_CL1T_16) ,XIO(CL1T_16_MTR.ANTI_CASC) XIC(CL1T_16_MTR.SPACE) ]OTE(CL1T_16_MTR.STOP);
				N: XIC(CL1T_16_MTR.INTL_MTR)[[XIC(CL1T_16_MTR.START_EN) ,XIC(CL1T_16_MTR.CONV_RUN) ] XIO(CL1T_16_MTR.STOP) ,XIC(F_CL1T_16_OVRIDE) ][OTE(CL1T_16_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_16_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_16_MTR.CONV_RUN)TON(CL1T_16_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_16_MTR.CONV_RUN)TON(CL1T_16_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_15$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_16_MSD_OFF)OTE(CL1T_15_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_15_MTR.E_STOP)[XIC(CL1T_15_VFD.READY) XIO(CL1T_15_MTR.JAMMED) ,XIC(F_CL1T_15_OVRIDE) ]XIO(F_CL1T_15_MSD_OFF)XIO(F_CL1T_15_OUTSERV)XIO(CL1T_15_MTR.COMM)OTE(CL1T_15_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_15_OVRIDE) ]XIC(CL1T_15_MTR.NO_FAULT)TON(CL1T_15_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_15_MTR.IM_TMR.DN)[XIO(CL1T_15_MTR.INTL_MTR) OTE(CL1T_15_MTR.IM_ONS) ,OTE(CL1T_15_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_15_PE.FILT_NEG_XITN)RES(CL1T_15_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_16_MTR.CONV_RUN)RTO(CL1T_15_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_15_PE.POS_XITN) XIC(CL1T_15_MTR.INTL_MTR) ,XIC(CL1T_15_MTR.T2H_SPACE) ]XIO(CL1T_15_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_15_MTR.T2H_SPACE);
				N: XIC(CL1T_15_MTR.T2H_SPACE)OTE(CL1T_15_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_16_MTR.ON_TMR.DN) XIC(CL1T_15_MTR.OFF_TMR.DN) ,XIO(CL1T_16_MTR.IM_ONS) XIC(CL1T_15_MTR.IM_ONS) ,XIC(CL1T_15_MTR.ANTI_CASC) XIC(I_PE_CL1T_15) ]OTE(CL1T_15_MTR.START_EN);
				N: [XIO(CL1T_16_MTR.ON_TMR.DN) XIO(I_PE_CL1T_15) ,XIO(CL1T_15_MTR.ANTI_CASC) XIC(CL1T_15_MTR.SPACE) ]OTE(CL1T_15_MTR.STOP);
				N: XIC(CL1T_15_MTR.INTL_MTR)[[XIC(CL1T_15_MTR.START_EN) ,XIC(CL1T_15_MTR.CONV_RUN) ] XIO(CL1T_15_MTR.STOP) ,XIC(F_CL1T_15_OVRIDE) ][OTE(CL1T_15_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_15_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_15_MTR.CONV_RUN)TON(CL1T_15_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_15_MTR.CONV_RUN)TON(CL1T_15_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_14$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_15_MSD_OFF)OTE(CL1T_14_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_14_MTR.E_STOP)[XIC(CL1T_14_VFD.READY) XIO(CL1T_14_MTR.JAMMED) ,XIC(F_CL1T_14_OVRIDE) ]XIO(F_CL1T_14_MSD_OFF)XIO(F_CL1T_14_OUTSERV)XIO(CL1T_14_MTR.COMM)OTE(CL1T_14_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_14_OVRIDE) ]XIC(CL1T_14_MTR.NO_FAULT)TON(CL1T_14_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_14_MTR.IM_TMR.DN)[XIO(CL1T_14_MTR.INTL_MTR) OTE(CL1T_14_MTR.IM_ONS) ,OTE(CL1T_14_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_14_PE.FILT_NEG_XITN)RES(CL1T_14_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_15_MTR.CONV_RUN)RTO(CL1T_14_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_14_PE.POS_XITN) XIC(CL1T_14_MTR.INTL_MTR) ,XIC(CL1T_14_MTR.T2H_SPACE) ]XIO(CL1T_14_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_14_MTR.T2H_SPACE);
				N: XIC(CL1T_14_MTR.T2H_SPACE)OTE(CL1T_14_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_15_MTR.ON_TMR.DN) XIC(CL1T_14_MTR.OFF_TMR.DN) ,XIO(CL1T_15_MTR.IM_ONS) XIC(CL1T_14_MTR.IM_ONS) ,XIC(CL1T_14_MTR.ANTI_CASC) XIC(I_PE_CL1T_14) ]OTE(CL1T_14_MTR.START_EN);
				N: [XIO(CL1T_15_MTR.ON_TMR.DN) XIO(I_PE_CL1T_14) ,XIO(CL1T_14_MTR.ANTI_CASC) XIC(CL1T_14_MTR.SPACE) ]OTE(CL1T_14_MTR.STOP);
				N: XIC(CL1T_14_MTR.INTL_MTR)[[XIC(CL1T_14_MTR.START_EN) ,XIC(CL1T_14_MTR.CONV_RUN) ] XIO(CL1T_14_MTR.STOP) ,XIC(F_CL1T_14_OVRIDE) ][OTE(CL1T_14_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_14_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_14_MTR.CONV_RUN)TON(CL1T_14_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_14_MTR.CONV_RUN)TON(CL1T_14_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_13$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_14_MSD_OFF)OTE(CL1T_13_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_13_MTR.E_STOP)[XIC(CL1T_13_VFD.READY) XIO(CL1T_13_MTR.JAMMED) ,XIC(F_CL1T_13_OVRIDE) ]XIO(F_CL1T_13_MSD_OFF)XIO(F_CL1T_13_OUTSERV)XIO(CL1T_13_MTR.COMM)OTE(CL1T_13_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_13_OVRIDE) ]XIC(CL1T_13_MTR.NO_FAULT)TON(CL1T_13_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_13_MTR.IM_TMR.DN)[XIO(CL1T_13_MTR.INTL_MTR) OTE(CL1T_13_MTR.IM_ONS) ,OTE(CL1T_13_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_13_PE.FILT_NEG_XITN)RES(CL1T_13_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_14_MTR.CONV_RUN)RTO(CL1T_13_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_13_PE.POS_XITN) XIC(CL1T_13_MTR.INTL_MTR) ,XIC(CL1T_13_MTR.T2H_SPACE) ]XIO(CL1T_13_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_13_MTR.T2H_SPACE);
				N: XIC(CL1T_13_MTR.T2H_SPACE)OTE(CL1T_13_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_14_MTR.ON_TMR.DN) XIC(CL1T_13_MTR.OFF_TMR.DN) ,XIO(CL1T_14_MTR.IM_ONS) XIC(CL1T_13_MTR.IM_ONS) ,XIC(CL1T_13_MTR.ANTI_CASC) XIC(I_PE_CL1T_13) ]OTE(CL1T_13_MTR.START_EN);
				N: [XIO(CL1T_14_MTR.ON_TMR.DN) XIO(I_PE_CL1T_13) ,XIO(CL1T_13_MTR.ANTI_CASC) XIC(CL1T_13_MTR.SPACE) ]OTE(CL1T_13_MTR.STOP);
				N: XIC(CL1T_13_MTR.INTL_MTR)[[XIC(CL1T_13_MTR.START_EN) ,XIC(CL1T_13_MTR.CONV_RUN) ] XIO(CL1T_13_MTR.STOP) ,XIC(F_CL1T_13_OVRIDE) ][OTE(CL1T_13_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_13_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_13_MTR.CONV_RUN)TON(CL1T_13_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_13_MTR.CONV_RUN)TON(CL1T_13_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_12$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_13_MSD_OFF)OTE(CL1T_12_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_12_MTR.E_STOP)[XIC(CL1T_12_VFD.READY) XIO(CL1T_12_MTR.JAMMED) ,XIC(F_CL1T_12_OVRIDE) ]XIO(F_CL1T_12_MSD_OFF)XIO(F_CL1T_12_OUTSERV)XIO(CL1T_12_MTR.COMM)OTE(CL1T_12_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_12_OVRIDE) ]XIC(CL1T_12_MTR.NO_FAULT)TON(CL1T_12_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_12_MTR.IM_TMR.DN)[XIO(CL1T_12_MTR.INTL_MTR) OTE(CL1T_12_MTR.IM_ONS) ,OTE(CL1T_12_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_12_PE.FILT_NEG_XITN)RES(CL1T_12_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_13_MTR.CONV_RUN)RTO(CL1T_12_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_12_PE.POS_XITN) XIC(CL1T_12_MTR.INTL_MTR) ,XIC(CL1T_12_MTR.T2H_SPACE) ]XIO(CL1T_12_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_12_MTR.T2H_SPACE);
				N: XIC(CL1T_12_MTR.T2H_SPACE)OTE(CL1T_12_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_13_MTR.ON_TMR.DN) XIC(CL1T_12_MTR.OFF_TMR.DN) ,XIO(CL1T_13_MTR.IM_ONS) XIC(CL1T_12_MTR.IM_ONS) ,XIC(CL1T_12_MTR.ANTI_CASC) XIC(I_PE_CL1T_12) ]OTE(CL1T_12_MTR.START_EN);
				N: [XIO(CL1T_13_MTR.ON_TMR.DN) XIO(I_PE_CL1T_12) ,XIO(CL1T_12_MTR.ANTI_CASC) XIC(CL1T_12_MTR.SPACE) ]OTE(CL1T_12_MTR.STOP);
				N: XIC(CL1T_12_MTR.INTL_MTR)[[XIC(CL1T_12_MTR.START_EN) ,XIC(CL1T_12_MTR.CONV_RUN) ] XIO(CL1T_12_MTR.STOP) ,XIC(F_CL1T_12_OVRIDE) ][OTE(CL1T_12_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_12_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_12_MTR.CONV_RUN)TON(CL1T_12_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_12_MTR.CONV_RUN)TON(CL1T_12_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_11$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_12_MSD_OFF)OTE(CL1T_11_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_11_MTR.E_STOP)[XIC(CL1T_11_VFD.READY) XIO(CL1T_11_MTR.JAMMED) ,XIC(F_CL1T_11_OVRIDE) ]XIO(F_CL1T_11_MSD_OFF)XIO(F_CL1T_11_OUTSERV)XIO(CL1T_11_MTR.COMM)OTE(CL1T_11_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_11_OVRIDE) ]XIC(CL1T_11_MTR.NO_FAULT)TON(CL1T_11_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_11_MTR.IM_TMR.DN)[XIO(CL1T_11_MTR.INTL_MTR) OTE(CL1T_11_MTR.IM_ONS) ,OTE(CL1T_11_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_11_PE.FILT_NEG_XITN)RES(CL1T_11_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_12_MTR.CONV_RUN)RTO(CL1T_11_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_11_PE.POS_XITN) XIC(CL1T_11_MTR.INTL_MTR) ,XIC(CL1T_11_MTR.T2H_SPACE) ]XIO(CL1T_11_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_11_MTR.T2H_SPACE);
				N: XIC(CL1T_11_MTR.T2H_SPACE)OTE(CL1T_11_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_12_MTR.ON_TMR.DN) XIC(CL1T_11_MTR.OFF_TMR.DN) ,XIO(CL1T_12_MTR.IM_ONS) XIC(CL1T_11_MTR.IM_ONS) ,XIC(CL1T_11_MTR.ANTI_CASC) XIC(I_PE_CL1T_11) ]OTE(CL1T_11_MTR.START_EN);
				N: [XIO(CL1T_12_MTR.ON_TMR.DN) XIO(I_PE_CL1T_11) ,XIO(CL1T_11_MTR.ANTI_CASC) XIC(CL1T_11_MTR.SPACE) ]OTE(CL1T_11_MTR.STOP);
				N: XIC(CL1T_11_MTR.INTL_MTR)[[XIC(CL1T_11_MTR.START_EN) ,XIC(CL1T_11_MTR.CONV_RUN) ] XIO(CL1T_11_MTR.STOP) ,XIC(F_CL1T_11_OVRIDE) ][OTE(CL1T_11_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_11_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_11_MTR.CONV_RUN)TON(CL1T_11_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_11_MTR.CONV_RUN)TON(CL1T_11_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_10$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_11_MSD_OFF)OTE(CL1T_10_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_10_MTR.E_STOP)[XIC(CL1T_10_VFD.READY) XIO(CL1T_10_MTR.JAMMED) ,XIC(F_CL1T_10_OVRIDE) ]XIO(F_CL1T_10_MSD_OFF)XIO(F_CL1T_10_OUTSERV)XIO(CL1T_10_MTR.COMM)OTE(CL1T_10_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_10_OVRIDE) ]XIC(CL1T_10_MTR.NO_FAULT)TON(CL1T_10_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_10_MTR.IM_TMR.DN)[XIO(CL1T_10_MTR.INTL_MTR) OTE(CL1T_10_MTR.IM_ONS) ,OTE(CL1T_10_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_10_PE.FILT_NEG_XITN)RES(CL1T_10_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_11_MTR.CONV_RUN)RTO(CL1T_10_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_10_PE.POS_XITN) XIC(CL1T_10_MTR.INTL_MTR) ,XIC(CL1T_10_MTR.T2H_SPACE) ]XIO(CL1T_10_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_10_MTR.T2H_SPACE);
				N: XIC(CL1T_10_MTR.T2H_SPACE)OTE(CL1T_10_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_11_MTR.ON_TMR.DN) XIC(CL1T_10_MTR.OFF_TMR.DN) ,XIO(CL1T_11_MTR.IM_ONS) XIC(CL1T_10_MTR.IM_ONS) ,XIC(CL1T_10_MTR.ANTI_CASC) XIC(I_PE_CL1T_10) ]OTE(CL1T_10_MTR.START_EN);
				N: [XIO(CL1T_11_MTR.ON_TMR.DN) XIO(I_PE_CL1T_10) ,XIO(CL1T_10_MTR.ANTI_CASC) XIC(CL1T_10_MTR.SPACE) ]OTE(CL1T_10_MTR.STOP);
				N: XIC(CL1T_10_MTR.INTL_MTR)[[XIC(CL1T_10_MTR.START_EN) ,XIC(CL1T_10_MTR.CONV_RUN) ] XIO(CL1T_10_MTR.STOP) ,XIC(F_CL1T_10_OVRIDE) ][OTE(CL1T_10_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_10_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_10_MTR.CONV_RUN)TON(CL1T_10_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_10_MTR.CONV_RUN)TON(CL1T_10_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_10_MSD_OFF)OTE(CL1T_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_09_MTR.E_STOP)[XIC(CL1T_09_VFD.READY) XIO(CL1T_09_MTR.JAMMED) ,XIC(F_CL1T_09_OVRIDE) ]XIO(F_CL1T_09_MSD_OFF)XIO(F_CL1T_09_OUTSERV)XIO(CL1T_09_MTR.COMM)OTE(CL1T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_09_OVRIDE) ]XIC(CL1T_09_MTR.NO_FAULT)TON(CL1T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_09_MTR.IM_TMR.DN)[XIO(CL1T_09_MTR.INTL_MTR) OTE(CL1T_09_MTR.IM_ONS) ,OTE(CL1T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_09_PE.FILT_NEG_XITN)RES(CL1T_09_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_10_MTR.CONV_RUN)RTO(CL1T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_09_PE.POS_XITN) XIC(CL1T_09_MTR.INTL_MTR) ,XIC(CL1T_09_MTR.T2H_SPACE) ]XIO(CL1T_09_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_09_MTR.T2H_SPACE);
				N: XIC(CL1T_09_MTR.T2H_SPACE)OTE(CL1T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_10_MTR.ON_TMR.DN) XIC(CL1T_09_MTR.OFF_TMR.DN) ,XIO(CL1T_10_MTR.IM_ONS) XIC(CL1T_09_MTR.IM_ONS) ,XIC(CL1T_09_MTR.ANTI_CASC) XIC(I_PE_CL1T_09) ]OTE(CL1T_09_MTR.START_EN);
				N: [XIO(CL1T_10_MTR.ON_TMR.DN) XIO(I_PE_CL1T_09) ,XIO(CL1T_09_MTR.ANTI_CASC) XIC(CL1T_09_MTR.SPACE) ]OTE(CL1T_09_MTR.STOP);
				N: XIC(CL1T_09_MTR.INTL_MTR)[[XIC(CL1T_09_MTR.START_EN) ,XIC(CL1T_09_MTR.CONV_RUN) ] XIO(CL1T_09_MTR.STOP) ,XIC(F_CL1T_09_OVRIDE) ][OTE(CL1T_09_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_09_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_09_MTR.CONV_RUN)TON(CL1T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_09_MTR.CONV_RUN)TON(CL1T_09_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_09_MSD_OFF)OTE(CL1T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_08_MTR.E_STOP)[XIC(CL1T_08_VFD.READY) XIO(CL1T_08_MTR.JAMMED) ,XIC(F_CL1T_08_OVRIDE) ]XIO(F_CL1T_08_MSD_OFF)XIO(F_CL1T_08_OUTSERV)XIO(CL1T_08_MTR.COMM)OTE(CL1T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_08_OVRIDE) ]XIC(CL1T_08_MTR.NO_FAULT)TON(CL1T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_08_MTR.IM_TMR.DN)[XIO(CL1T_08_MTR.INTL_MTR) OTE(CL1T_08_MTR.IM_ONS) ,OTE(CL1T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_08_PE.FILT_NEG_XITN)RES(CL1T_08_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_09_MTR.CONV_RUN)RTO(CL1T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_08_PE.POS_XITN) XIC(CL1T_08_MTR.INTL_MTR) ,XIC(CL1T_08_MTR.T2H_SPACE) ]XIO(CL1T_08_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_08_MTR.T2H_SPACE);
				N: XIC(CL1T_08_MTR.T2H_SPACE)OTE(CL1T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_09_MTR.ON_TMR.DN) XIC(CL1T_08_MTR.OFF_TMR.DN) ,XIO(CL1T_09_MTR.IM_ONS) XIC(CL1T_08_MTR.IM_ONS) ,XIC(CL1T_08_MTR.ANTI_CASC) XIC(I_PE_CL1T_08) ]OTE(CL1T_08_MTR.START_EN);
				N: [XIO(CL1T_09_MTR.ON_TMR.DN) XIO(I_PE_CL1T_08) ,XIO(CL1T_08_MTR.ANTI_CASC) XIC(CL1T_08_MTR.SPACE) ]OTE(CL1T_08_MTR.STOP);
				N: XIC(CL1T_08_MTR.INTL_MTR)[[XIC(CL1T_08_MTR.START_EN) ,XIC(CL1T_08_MTR.CONV_RUN) ] XIO(CL1T_08_MTR.STOP) ,XIC(F_CL1T_08_OVRIDE) ][OTE(CL1T_08_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_08_MTR.CONV_RUN)TON(CL1T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_08_MTR.CONV_RUN)TON(CL1T_08_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_08_MSD_OFF)OTE(CL1T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_07_MTR.E_STOP)[XIC(CL1T_07_VFD.READY) XIO(CL1T_07_MTR.JAMMED) ,XIC(F_CL1T_07_OVRIDE) ]XIO(F_CL1T_07_MSD_OFF)XIO(F_CL1T_07_OUTSERV)XIO(CL1T_07_MTR.COMM)OTE(CL1T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_07_OVRIDE) ]XIC(CL1T_07_MTR.NO_FAULT)TON(CL1T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_07_MTR.IM_TMR.DN)[XIO(CL1T_07_MTR.INTL_MTR) OTE(CL1T_07_MTR.IM_ONS) ,OTE(CL1T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_07_PE.FILT_NEG_XITN)RES(CL1T_07_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_08_MTR.CONV_RUN)RTO(CL1T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_07_PE.POS_XITN) XIC(CL1T_07_MTR.INTL_MTR) ,XIC(CL1T_07_MTR.T2H_SPACE) ]XIO(CL1T_07_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_07_MTR.T2H_SPACE);
				N: XIC(CL1T_07_MTR.T2H_SPACE)OTE(CL1T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_08_MTR.ON_TMR.DN) XIC(CL1T_07_MTR.OFF_TMR.DN) ,XIO(CL1T_08_MTR.IM_ONS) XIC(CL1T_07_MTR.IM_ONS) ,XIC(CL1T_07_MTR.ANTI_CASC) XIC(I_PE_CL1T_07) ]OTE(CL1T_07_MTR.START_EN);
				N: [XIO(CL1T_08_MTR.ON_TMR.DN) XIO(I_PE_CL1T_07) ,XIO(CL1T_07_MTR.ANTI_CASC) XIC(CL1T_07_MTR.SPACE) ]OTE(CL1T_07_MTR.STOP);
				N: XIC(CL1T_07_MTR.INTL_MTR)[[XIC(CL1T_07_MTR.START_EN) ,XIC(CL1T_07_MTR.CONV_RUN) ] XIO(CL1T_07_MTR.STOP) ,XIC(F_CL1T_07_OVRIDE) ][OTE(CL1T_07_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_07_MTR.CONV_RUN)TON(CL1T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_07_MTR.CONV_RUN)TON(CL1T_07_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_07_MSD_OFF)OTE(CL1T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_06_MTR.E_STOP)[XIC(CL1T_06_VFD.READY) XIO(CL1T_06_MTR.JAMMED) ,XIC(F_CL1T_06_OVRIDE) ]XIO(F_CL1T_06_MSD_OFF)XIO(F_CL1T_06_OUTSERV)XIO(CL1T_06_MTR.COMM)OTE(CL1T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_06_OVRIDE) ]XIC(CL1T_06_MTR.NO_FAULT)TON(CL1T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_06_MTR.IM_TMR.DN)[XIO(CL1T_06_MTR.INTL_MTR) OTE(CL1T_06_MTR.IM_ONS) ,OTE(CL1T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_06_PE.FILT_NEG_XITN)RES(CL1T_06_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_07_MTR.CONV_RUN)RTO(CL1T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_06_PE.POS_XITN) XIC(CL1T_06_MTR.INTL_MTR) ,XIC(CL1T_06_MTR.T2H_SPACE) ]XIO(CL1T_06_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_06_MTR.T2H_SPACE);
				N: XIC(CL1T_06_MTR.T2H_SPACE)OTE(CL1T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_07_MTR.ON_TMR.DN) XIC(CL1T_06_MTR.OFF_TMR.DN) ,XIO(CL1T_07_MTR.IM_ONS) XIC(CL1T_06_MTR.IM_ONS) ,XIC(CL1T_06_MTR.ANTI_CASC) XIC(I_PE_CL1T_06) ]OTE(CL1T_06_MTR.START_EN);
				N: [XIO(CL1T_07_MTR.ON_TMR.DN) XIO(I_PE_CL1T_06) ,XIO(CL1T_06_MTR.ANTI_CASC) XIC(CL1T_06_MTR.SPACE) ]OTE(CL1T_06_MTR.STOP);
				N: XIC(CL1T_06_MTR.INTL_MTR)[[XIC(CL1T_06_MTR.START_EN) ,XIC(CL1T_06_MTR.CONV_RUN) ] XIO(CL1T_06_MTR.STOP) ,XIC(F_CL1T_06_OVRIDE) ][OTE(CL1T_06_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_06_MTR.CONV_RUN)TON(CL1T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_06_MTR.CONV_RUN)TON(CL1T_06_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_06_MSD_OFF)OTE(CL1T_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_05_MTR.E_STOP)[XIC(CL1T_05_VFD.READY) XIO(CL1T_05_MTR.JAMMED) ,XIC(F_CL1T_05_OVRIDE) ]XIO(F_CL1T_05_MSD_OFF)XIO(F_CL1T_05_OUTSERV)XIO(CL1T_05_MTR.COMM)OTE(CL1T_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_05_OVRIDE) ]XIC(CL1T_05_MTR.NO_FAULT)TON(CL1T_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_05_MTR.IM_TMR.DN)[XIO(CL1T_05_MTR.INTL_MTR) OTE(CL1T_05_MTR.IM_ONS) ,OTE(CL1T_05_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_05_PE.FILT_NEG_XITN)RES(CL1T_05_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_06_MTR.CONV_RUN)RTO(CL1T_05_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_05_PE.POS_XITN) XIC(CL1T_05_MTR.INTL_MTR) ,XIC(CL1T_05_MTR.T2H_SPACE) ]XIO(CL1T_05_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_05_MTR.T2H_SPACE);
				N: XIC(CL1T_05_MTR.T2H_SPACE)OTE(CL1T_05_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_06_MTR.ON_TMR.DN) XIC(CL1T_05_MTR.OFF_TMR.DN) ,XIO(CL1T_06_MTR.IM_ONS) XIC(CL1T_05_MTR.IM_ONS) ,XIC(CL1T_05_MTR.ANTI_CASC) XIC(I_PE_CL1T_05) ]OTE(CL1T_05_MTR.START_EN);
				N: [XIO(CL1T_06_MTR.ON_TMR.DN) XIO(I_PE_CL1T_05) ,XIO(CL1T_05_MTR.ANTI_CASC) XIC(CL1T_05_MTR.SPACE) ]OTE(CL1T_05_MTR.STOP);
				N: XIC(CL1T_05_MTR.INTL_MTR)[[XIC(CL1T_05_MTR.START_EN) ,XIC(CL1T_05_MTR.CONV_RUN) ] XIO(CL1T_05_MTR.STOP) ,XIC(F_CL1T_05_OVRIDE) ][OTE(CL1T_05_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_05_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_05_MTR.CONV_RUN)TON(CL1T_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_05_MTR.CONV_RUN)TON(CL1T_05_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_05_MSD_OFF)OTE(CL1T_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_04_MTR.E_STOP)[XIC(CL1T_04_VFD.READY) XIO(CL1T_04_MTR.JAMMED) ,XIC(F_CL1T_04_OVRIDE) ]XIO(F_CL1T_04_MSD_OFF)XIO(F_CL1T_04_OUTSERV)XIO(CL1T_04_MTR.COMM)OTE(CL1T_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_04_OVRIDE) ]XIC(CL1T_04_MTR.NO_FAULT)TON(CL1T_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_04_MTR.IM_TMR.DN)[XIO(CL1T_04_MTR.INTL_MTR) OTE(CL1T_04_MTR.IM_ONS) ,OTE(CL1T_04_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL1T_04_PE.FILT_NEG_XITN)RES(CL1T_04_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_05_MTR.CONV_RUN)RTO(CL1T_04_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL1T_04_PE.POS_XITN) XIC(CL1T_04_MTR.INTL_MTR) ,XIC(CL1T_04_MTR.T2H_SPACE) ]XIO(CL1T_04_MTR.T2H_SPACE_TMR.DN)OTE(CL1T_04_MTR.T2H_SPACE);
				N: XIC(CL1T_04_MTR.T2H_SPACE)OTE(CL1T_04_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_05_MTR.ON_TMR.DN) XIC(CL1T_04_MTR.OFF_TMR.DN) ,XIO(CL1T_05_MTR.IM_ONS) XIC(CL1T_04_MTR.IM_ONS) ,XIC(CL1T_04_MTR.ANTI_CASC) XIC(I_PE_CL1T_04) ]OTE(CL1T_04_MTR.START_EN);
				N: [XIO(CL1T_05_MTR.ON_TMR.DN) XIO(I_PE_CL1T_04) ,XIO(CL1T_04_MTR.ANTI_CASC) XIC(CL1T_04_MTR.SPACE) ]OTE(CL1T_04_MTR.STOP);
				N: XIC(CL1T_04_MTR.INTL_MTR)[[XIC(CL1T_04_MTR.START_EN) ,XIC(CL1T_04_MTR.CONV_RUN) ] XIO(CL1T_04_MTR.STOP) ,XIC(F_CL1T_04_OVRIDE) ][OTE(CL1T_04_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_04_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_04_MTR.CONV_RUN)TON(CL1T_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_04_MTR.CONV_RUN)TON(CL1T_04_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_04_MSD_OFF)OTE(CL1T_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_03_MTR.E_STOP)[XIC(CL1T_03_VFD.READY) XIO(CL1T_03_MTR.JAMMED) ,XIC(F_CL1T_03_OVRIDE) ]XIO(F_CL1T_03_MSD_OFF)XIO(F_CL1T_03_OUTSERV)XIO(CL1T_03_MTR.COMM)OTE(CL1T_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_03_OVRIDE) ]XIC(CL1T_03_MTR.NO_FAULT)TON(CL1T_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_03_MTR.IM_TMR.DN)[XIO(CL1T_03_MTR.INTL_MTR) OTE(CL1T_03_MTR.IM_ONS) ,OTE(CL1T_03_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL1T_04_MTR.ON_TMR.DN) XIC(CL1T_03_MTR.OFF_TMR.DN) ,XIO(CL1T_04_MTR.IM_ONS) XIC(CL1T_03_MTR.IM_ONS) ,XIC(CL1T_03_MTR.ANTI_CASC) XIC(I_PE_CL1T_03) ]OTE(CL1T_03_MTR.START_EN);
				N: XIO(CL1T_04_MTR.ON_TMR.DN)XIO(I_PE_CL1T_03)OTE(CL1T_03_MTR.STOP);
				N: XIC(CL1T_03_MTR.INTL_MTR)[[XIC(CL1T_03_MTR.START_EN) ,XIC(CL1T_03_MTR.CONV_RUN) ] XIO(CL1T_03_MTR.STOP) ,XIC(F_CL1T_03_OVRIDE) ][OTE(CL1T_03_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_03_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_03_MTR.CONV_RUN)TON(CL1T_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_03_MTR.CONV_RUN)TON(CL1T_03_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_03_MSD_OFF)OTE(CL1T_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_02_MTR.E_STOP)[XIC(CL1T_02_VFD.READY) XIO(CL1T_02_MTR.JAMMED) ,XIC(F_CL1T_02_OVRIDE) ]XIO(F_CL1T_02_MSD_OFF)XIO(F_CL1T_02_OUTSERV)XIO(CL1T_02_MTR.COMM)OTE(CL1T_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_02_OVRIDE) ]XIC(CL1T_02_MTR.NO_FAULT)TON(CL1T_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_02_MTR.IM_TMR.DN)[XIO(CL1T_02_MTR.INTL_MTR) OTE(CL1T_02_MTR.IM_ONS) ,OTE(CL1T_02_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL1T_03_MTR.ON_TMR.DN) XIC(CL1T_02_MTR.OFF_TMR.DN) ,XIO(CL1T_03_MTR.IM_ONS) XIC(CL1T_02_MTR.IM_ONS) ,XIC(CL1T_02_MTR.ANTI_CASC) XIC(I_PE_CL1T_02) ]OTE(CL1T_02_MTR.START_EN);
				N: XIO(CL1T_03_MTR.ON_TMR.DN)XIO(I_PE_CL1T_02)OTE(CL1T_02_MTR.STOP);
				N: XIC(CL1T_02_MTR.INTL_MTR)[[XIC(CL1T_02_MTR.START_EN) ,XIC(CL1T_02_MTR.CONV_RUN) ] XIO(CL1T_02_MTR.STOP) ,XIC(F_CL1T_02_OVRIDE) ][OTE(CL1T_02_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_02_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_02_MTR.CONV_RUN)TON(CL1T_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_02_MTR.CONV_RUN)TON(CL1T_02_MTR.OFF_TMR,?,?);
				RC: "Motor CL1T_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_02_MSD_OFF)OTE(CL1T_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL1T_01_MTR.E_STOP)[XIC(CL1T_01_VFD.READY) XIO(CL1T_01_MTR.JAMMED) ,XIC(F_CL1T_01_OVRIDE) ]XIO(F_CL1T_01_MSD_OFF)XIO(F_CL1T_01_OUTSERV)XIO(CL1T_01_MTR.COMM)OTE(CL1T_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_CL1T_01_OVRIDE) ]XIC(CL1T_01_MTR.NO_FAULT)TON(CL1T_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL1T_01_MTR.IM_TMR.DN)[XIO(CL1T_01_MTR.INTL_MTR) OTE(CL1T_01_MTR.IM_ONS) ,OTE(CL1T_01_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL1T_02_MTR.ON_TMR.DN) XIC(CL1T_01_MTR.OFF_TMR.DN) ,XIO(CL1T_02_MTR.IM_ONS) XIC(CL1T_01_MTR.IM_ONS) ,XIC(CL1T_01_MTR.ANTI_CASC) XIC(I_PE_CL1T_01) ]OTE(CL1T_01_MTR.START_EN);
				N: XIO(CL1T_02_MTR.ON_TMR.DN)XIO(I_PE_CL1T_01)OTE(CL1T_01_MTR.STOP);
				N: XIC(CL1T_01_MTR.INTL_MTR)[[XIC(CL1T_01_MTR.START_EN) ,XIC(CL1T_01_MTR.CONV_RUN) ] XIO(CL1T_01_MTR.STOP) ,XIC(F_CL1T_01_OVRIDE) ][OTE(CL1T_01_MTR.CONV_RUN) ,OTE(O_VFD_CL1T_01_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL1T_01_MTR.CONV_RUN)TON(CL1T_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL1T_01_MTR.CONV_RUN)TON(CL1T_01_MTR.OFF_TMR,?,?);
				RC: "Motor HX1T_10_A$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(HX1T_10A_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(HX1T_10A_MTR.E_STOP)[XIC(HX1T_10A_VFD.READY) XIO(HX1T_10A_MTR.JAMMED) ,XIC(F_HX1T_10A_OVRIDE) ]XIO(F_HX1T_10A_MSD_OFF)XIO(F_HX1T_10A_OUTSERV)XIO(HX1T_10A_MTR.COMM)OTE(HX1T_10A_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_10A_OVRIDE) ]XIC(HX1T_10A_MTR.NO_FAULT)TON(HX1T_10A_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_10A_MTR.IM_TMR.DN)[XIO(HX1T_10A_MTR.INTL_MTR) OTE(HX1T_10A_MTR.IM_ONS) ,OTE(HX1T_10A_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(zzzHX_zz_MTR_ON_TMR_DN) XIC(HX1T_10A_MTR.OFF_TMR.DN) ,XIO(zzzHX_zz_MTR_IM_ONS) XIC(HX1T_10A_MTR.IM_ONS) ,XIC(HX1T_10A_MTR.ANTI_CASC) XIC(I_PE_HX1T_10A) ]OTE(HX1T_10A_MTR.START_EN);
				N: XIO(zzzHX_zz_MTR_ON_TMR_DN)XIO(I_PE_HX1T_10A)OTE(HX1T_10A_MTR.STOP);
				N: XIC(HX1T_10A_MTR.INTL_MTR)[[XIC(HX1T_10A_MTR.START_EN) ,XIC(HX1T_10A_MTR.CONV_RUN) ] XIO(HX1T_10A_MTR.STOP) ,XIC(F_HX1T_10A_OVRIDE) ][OTE(HX1T_10A_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_10A_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_10A_MTR.CONV_RUN)TON(HX1T_10A_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_10A_MTR.CONV_RUN)TON(HX1T_10A_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE CL1T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(CL1T_26_MTR.COMM)[[XIO(I_PE1_CL1T_26) ,XIC(CL1T_26_PE1.TOF.DN) ] TON(CL1T_26_PE1.TON,?,?) ,XIO(I_PE1_CL1T_26) XIC(CL1T_26_PE1.TON.DN) TOF(CL1T_26_PE1.TOF,?,?) ,XIC(CL1T_26_PE1.TOF.DN) OTE(CL1T_26_PE1.FILT) ];
				N: XIC(CL1T_26_PE1.FILT)[XIO(CL1T_26_PE1.FILT_POS_XITN_MEM) OTE(CL1T_26_PE1.FILT_POS_XITN) ,OTE(CL1T_26_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_26_PE1.FILT)[XIO(CL1T_26_PE1.FILT_NEG_XITN_MEM) OTE(CL1T_26_PE1.FILT_NEG_XITN) ,OTE(CL1T_26_PE1.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_CL1T_26)[XIO(CL1T_26_PE1.POS_XITN_MEM) OTE(CL1T_26_PE1.POS_XITN) ,OTE(CL1T_26_PE1.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_26_MTR.COMM)[[XIO(I_PE2_CL1T_26) ,XIC(CL1T_26_PE2.TOF.DN) ] TON(CL1T_26_PE2.TON,?,?) ,XIO(I_PE2_CL1T_26) XIC(CL1T_26_PE2.TON.DN) TOF(CL1T_26_PE2.TOF,?,?) ,XIC(CL1T_26_PE2.TOF.DN) OTE(CL1T_26_PE2.FILT) ];
				N: XIC(CL1T_26_PE2.FILT)[XIO(CL1T_26_PE2.FILT_POS_XITN_MEM) OTE(CL1T_26_PE2.FILT_POS_XITN) ,OTE(CL1T_26_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_26_PE2.FILT)[XIO(CL1T_26_PE2.FILT_NEG_XITN_MEM) OTE(CL1T_26_PE2.FILT_NEG_XITN) ,OTE(CL1T_26_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_24_MTR.COMM)[[XIO(I_PE_CL1T_24) ,XIC(CL1T_24_PE.TOF.DN) ] TON(CL1T_24_PE.TON,?,?) ,XIO(I_PE_CL1T_24) XIC(CL1T_24_PE.TON.DN) TOF(CL1T_24_PE.TOF,?,?) ,XIC(CL1T_24_PE.TOF.DN) OTE(CL1T_24_PE.FILT) ];
				N: XIC(CL1T_24_PE.FILT)[XIO(CL1T_24_PE.FILT_POS_XITN_MEM) OTE(CL1T_24_PE.FILT_POS_XITN) ,OTE(CL1T_24_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_24_PE.FILT)[XIO(CL1T_24_PE.FILT_NEG_XITN_MEM) OTE(CL1T_24_PE.FILT_NEG_XITN) ,OTE(CL1T_24_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_24)[XIO(CL1T_24_PE.POS_XITN_MEM) OTE(CL1T_24_PE.POS_XITN) ,OTE(CL1T_24_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_23_MTR.COMM)[[XIO(I_PE_CL1T_23) ,XIC(CL1T_23_PE.TOF.DN) ] TON(CL1T_23_PE.TON,?,?) ,XIO(I_PE_CL1T_23) XIC(CL1T_23_PE.TON.DN) TOF(CL1T_23_PE.TOF,?,?) ,XIC(CL1T_23_PE.TOF.DN) OTE(CL1T_23_PE.FILT) ];
				N: XIC(CL1T_23_PE.FILT)[XIO(CL1T_23_PE.FILT_POS_XITN_MEM) OTE(CL1T_23_PE.FILT_POS_XITN) ,OTE(CL1T_23_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_23_PE.FILT)[XIO(CL1T_23_PE.FILT_NEG_XITN_MEM) OTE(CL1T_23_PE.FILT_NEG_XITN) ,OTE(CL1T_23_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_23)[XIO(CL1T_23_PE.POS_XITN_MEM) OTE(CL1T_23_PE.POS_XITN) ,OTE(CL1T_23_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_21_MTR.COMM)[[XIO(I_PE_CL1T_21) ,XIC(CL1T_21_PE.TOF.DN) ] TON(CL1T_21_PE.TON,?,?) ,XIO(I_PE_CL1T_21) XIC(CL1T_21_PE.TON.DN) TOF(CL1T_21_PE.TOF,?,?) ,XIC(CL1T_21_PE.TOF.DN) OTE(CL1T_21_PE.FILT) ];
				N: XIC(CL1T_21_PE.FILT)[XIO(CL1T_21_PE.FILT_POS_XITN_MEM) OTE(CL1T_21_PE.FILT_POS_XITN) ,OTE(CL1T_21_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_21_PE.FILT)[XIO(CL1T_21_PE.FILT_NEG_XITN_MEM) OTE(CL1T_21_PE.FILT_NEG_XITN) ,OTE(CL1T_21_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_21)[XIO(CL1T_21_PE.POS_XITN_MEM) OTE(CL1T_21_PE.POS_XITN) ,OTE(CL1T_21_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_20_MTR.COMM)[[XIO(I_PE_CL1T_20) ,XIC(CL1T_20_PE.TOF.DN) ] TON(CL1T_20_PE.TON,?,?) ,XIO(I_PE_CL1T_20) XIC(CL1T_20_PE.TON.DN) TOF(CL1T_20_PE.TOF,?,?) ,XIC(CL1T_20_PE.TOF.DN) OTE(CL1T_20_PE.FILT) ];
				N: XIC(CL1T_20_PE.FILT)[XIO(CL1T_20_PE.FILT_POS_XITN_MEM) OTE(CL1T_20_PE.FILT_POS_XITN) ,OTE(CL1T_20_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_20_PE.FILT)[XIO(CL1T_20_PE.FILT_NEG_XITN_MEM) OTE(CL1T_20_PE.FILT_NEG_XITN) ,OTE(CL1T_20_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_20)[XIO(CL1T_20_PE.POS_XITN_MEM) OTE(CL1T_20_PE.POS_XITN) ,OTE(CL1T_20_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_19_MTR.COMM)[[XIO(I_PE_CL1T_19) ,XIC(CL1T_19_PE.TOF.DN) ] TON(CL1T_19_PE.TON,?,?) ,XIO(I_PE_CL1T_19) XIC(CL1T_19_PE.TON.DN) TOF(CL1T_19_PE.TOF,?,?) ,XIC(CL1T_19_PE.TOF.DN) OTE(CL1T_19_PE.FILT) ];
				N: XIC(CL1T_19_PE.FILT)[XIO(CL1T_19_PE.FILT_POS_XITN_MEM) OTE(CL1T_19_PE.FILT_POS_XITN) ,OTE(CL1T_19_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_19_PE.FILT)[XIO(CL1T_19_PE.FILT_NEG_XITN_MEM) OTE(CL1T_19_PE.FILT_NEG_XITN) ,OTE(CL1T_19_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_19)[XIO(CL1T_19_PE.POS_XITN_MEM) OTE(CL1T_19_PE.POS_XITN) ,OTE(CL1T_19_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_18_MTR.COMM)[[XIO(I_PE_CL1T_18) ,XIC(CL1T_18_PE.TOF.DN) ] TON(CL1T_18_PE.TON,?,?) ,XIO(I_PE_CL1T_18) XIC(CL1T_18_PE.TON.DN) TOF(CL1T_18_PE.TOF,?,?) ,XIC(CL1T_18_PE.TOF.DN) OTE(CL1T_18_PE.FILT) ];
				N: XIC(CL1T_18_PE.FILT)[XIO(CL1T_18_PE.FILT_POS_XITN_MEM) OTE(CL1T_18_PE.FILT_POS_XITN) ,OTE(CL1T_18_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_18_PE.FILT)[XIO(CL1T_18_PE.FILT_NEG_XITN_MEM) OTE(CL1T_18_PE.FILT_NEG_XITN) ,OTE(CL1T_18_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_18)[XIO(CL1T_18_PE.POS_XITN_MEM) OTE(CL1T_18_PE.POS_XITN) ,OTE(CL1T_18_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_17_MTR.COMM)[[XIO(I_PE_CL1T_17) ,XIC(CL1T_17_PE.TOF.DN) ] TON(CL1T_17_PE.TON,?,?) ,XIO(I_PE_CL1T_17) XIC(CL1T_17_PE.TON.DN) TOF(CL1T_17_PE.TOF,?,?) ,XIC(CL1T_17_PE.TOF.DN) OTE(CL1T_17_PE.FILT) ];
				N: XIC(CL1T_17_PE.FILT)[XIO(CL1T_17_PE.FILT_POS_XITN_MEM) OTE(CL1T_17_PE.FILT_POS_XITN) ,OTE(CL1T_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_17_PE.FILT)[XIO(CL1T_17_PE.FILT_NEG_XITN_MEM) OTE(CL1T_17_PE.FILT_NEG_XITN) ,OTE(CL1T_17_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_17)[XIO(CL1T_17_PE.POS_XITN_MEM) OTE(CL1T_17_PE.POS_XITN) ,OTE(CL1T_17_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_16_MTR.COMM)[[XIO(I_PE_CL1T_16) ,XIC(CL1T_16_PE.TOF.DN) ] TON(CL1T_16_PE.TON,?,?) ,XIO(I_PE_CL1T_16) XIC(CL1T_16_PE.TON.DN) TOF(CL1T_16_PE.TOF,?,?) ,XIC(CL1T_16_PE.TOF.DN) OTE(CL1T_16_PE.FILT) ];
				N: XIC(CL1T_16_PE.FILT)[XIO(CL1T_16_PE.FILT_POS_XITN_MEM) OTE(CL1T_16_PE.FILT_POS_XITN) ,OTE(CL1T_16_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_16_PE.FILT)[XIO(CL1T_16_PE.FILT_NEG_XITN_MEM) OTE(CL1T_16_PE.FILT_NEG_XITN) ,OTE(CL1T_16_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_16)[XIO(CL1T_16_PE.POS_XITN_MEM) OTE(CL1T_16_PE.POS_XITN) ,OTE(CL1T_16_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_15_MTR.COMM)[[XIO(I_PE_CL1T_15) ,XIC(CL1T_15_PE.TOF.DN) ] TON(CL1T_15_PE.TON,?,?) ,XIO(I_PE_CL1T_15) XIC(CL1T_15_PE.TON.DN) TOF(CL1T_15_PE.TOF,?,?) ,XIC(CL1T_15_PE.TOF.DN) OTE(CL1T_15_PE.FILT) ];
				N: XIC(CL1T_15_PE.FILT)[XIO(CL1T_15_PE.FILT_POS_XITN_MEM) OTE(CL1T_15_PE.FILT_POS_XITN) ,OTE(CL1T_15_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_15_PE.FILT)[XIO(CL1T_15_PE.FILT_NEG_XITN_MEM) OTE(CL1T_15_PE.FILT_NEG_XITN) ,OTE(CL1T_15_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_15)[XIO(CL1T_15_PE.POS_XITN_MEM) OTE(CL1T_15_PE.POS_XITN) ,OTE(CL1T_15_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_14_MTR.COMM)[[XIO(I_PE_CL1T_14) ,XIC(CL1T_14_PE.TOF.DN) ] TON(CL1T_14_PE.TON,?,?) ,XIO(I_PE_CL1T_14) XIC(CL1T_14_PE.TON.DN) TOF(CL1T_14_PE.TOF,?,?) ,XIC(CL1T_14_PE.TOF.DN) OTE(CL1T_14_PE.FILT) ];
				N: XIC(CL1T_14_PE.FILT)[XIO(CL1T_14_PE.FILT_POS_XITN_MEM) OTE(CL1T_14_PE.FILT_POS_XITN) ,OTE(CL1T_14_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_14_PE.FILT)[XIO(CL1T_14_PE.FILT_NEG_XITN_MEM) OTE(CL1T_14_PE.FILT_NEG_XITN) ,OTE(CL1T_14_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_14)[XIO(CL1T_14_PE.POS_XITN_MEM) OTE(CL1T_14_PE.POS_XITN) ,OTE(CL1T_14_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_13_MTR.COMM)[[XIO(I_PE_CL1T_13) ,XIC(CL1T_13_PE.TOF.DN) ] TON(CL1T_13_PE.TON,?,?) ,XIO(I_PE_CL1T_13) XIC(CL1T_13_PE.TON.DN) TOF(CL1T_13_PE.TOF,?,?) ,XIC(CL1T_13_PE.TOF.DN) OTE(CL1T_13_PE.FILT) ];
				N: XIC(CL1T_13_PE.FILT)[XIO(CL1T_13_PE.FILT_POS_XITN_MEM) OTE(CL1T_13_PE.FILT_POS_XITN) ,OTE(CL1T_13_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_13_PE.FILT)[XIO(CL1T_13_PE.FILT_NEG_XITN_MEM) OTE(CL1T_13_PE.FILT_NEG_XITN) ,OTE(CL1T_13_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_13)[XIO(CL1T_13_PE.POS_XITN_MEM) OTE(CL1T_13_PE.POS_XITN) ,OTE(CL1T_13_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_12_MTR.COMM)[[XIO(I_PE_CL1T_12) ,XIC(CL1T_12_PE.TOF.DN) ] TON(CL1T_12_PE.TON,?,?) ,XIO(I_PE_CL1T_12) XIC(CL1T_12_PE.TON.DN) TOF(CL1T_12_PE.TOF,?,?) ,XIC(CL1T_12_PE.TOF.DN) OTE(CL1T_12_PE.FILT) ];
				N: XIC(CL1T_12_PE.FILT)[XIO(CL1T_12_PE.FILT_POS_XITN_MEM) OTE(CL1T_12_PE.FILT_POS_XITN) ,OTE(CL1T_12_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_12_PE.FILT)[XIO(CL1T_12_PE.FILT_NEG_XITN_MEM) OTE(CL1T_12_PE.FILT_NEG_XITN) ,OTE(CL1T_12_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_12)[XIO(CL1T_12_PE.POS_XITN_MEM) OTE(CL1T_12_PE.POS_XITN) ,OTE(CL1T_12_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_11_MTR.COMM)[[XIO(I_PE_CL1T_11) ,XIC(CL1T_11_PE.TOF.DN) ] TON(CL1T_11_PE.TON,?,?) ,XIO(I_PE_CL1T_11) XIC(CL1T_11_PE.TON.DN) TOF(CL1T_11_PE.TOF,?,?) ,XIC(CL1T_11_PE.TOF.DN) OTE(CL1T_11_PE.FILT) ];
				N: XIC(CL1T_11_PE.FILT)[XIO(CL1T_11_PE.FILT_POS_XITN_MEM) OTE(CL1T_11_PE.FILT_POS_XITN) ,OTE(CL1T_11_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_11_PE.FILT)[XIO(CL1T_11_PE.FILT_NEG_XITN_MEM) OTE(CL1T_11_PE.FILT_NEG_XITN) ,OTE(CL1T_11_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_11)[XIO(CL1T_11_PE.POS_XITN_MEM) OTE(CL1T_11_PE.POS_XITN) ,OTE(CL1T_11_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_10_MTR.COMM)[[XIO(I_PE_CL1T_10) ,XIC(CL1T_10_PE.TOF.DN) ] TON(CL1T_10_PE.TON,?,?) ,XIO(I_PE_CL1T_10) XIC(CL1T_10_PE.TON.DN) TOF(CL1T_10_PE.TOF,?,?) ,XIC(CL1T_10_PE.TOF.DN) OTE(CL1T_10_PE.FILT) ];
				N: XIC(CL1T_10_PE.FILT)[XIO(CL1T_10_PE.FILT_POS_XITN_MEM) OTE(CL1T_10_PE.FILT_POS_XITN) ,OTE(CL1T_10_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_10_PE.FILT)[XIO(CL1T_10_PE.FILT_NEG_XITN_MEM) OTE(CL1T_10_PE.FILT_NEG_XITN) ,OTE(CL1T_10_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_10)[XIO(CL1T_10_PE.POS_XITN_MEM) OTE(CL1T_10_PE.POS_XITN) ,OTE(CL1T_10_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_09_MTR.COMM)[[XIO(I_PE_CL1T_09) ,XIC(CL1T_09_PE.TOF.DN) ] TON(CL1T_09_PE.TON,?,?) ,XIO(I_PE_CL1T_09) XIC(CL1T_09_PE.TON.DN) TOF(CL1T_09_PE.TOF,?,?) ,XIC(CL1T_09_PE.TOF.DN) OTE(CL1T_09_PE.FILT) ];
				N: XIC(CL1T_09_PE.FILT)[XIO(CL1T_09_PE.FILT_POS_XITN_MEM) OTE(CL1T_09_PE.FILT_POS_XITN) ,OTE(CL1T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_09_PE.FILT)[XIO(CL1T_09_PE.FILT_NEG_XITN_MEM) OTE(CL1T_09_PE.FILT_NEG_XITN) ,OTE(CL1T_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_09)[XIO(CL1T_09_PE.POS_XITN_MEM) OTE(CL1T_09_PE.POS_XITN) ,OTE(CL1T_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_08_MTR.COMM)[[XIO(I_PE_CL1T_08) ,XIC(CL1T_08_PE.TOF.DN) ] TON(CL1T_08_PE.TON,?,?) ,XIO(I_PE_CL1T_08) XIC(CL1T_08_PE.TON.DN) TOF(CL1T_08_PE.TOF,?,?) ,XIC(CL1T_08_PE.TOF.DN) OTE(CL1T_08_PE.FILT) ];
				N: XIC(CL1T_08_PE.FILT)[XIO(CL1T_08_PE.FILT_POS_XITN_MEM) OTE(CL1T_08_PE.FILT_POS_XITN) ,OTE(CL1T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_08_PE.FILT)[XIO(CL1T_08_PE.FILT_NEG_XITN_MEM) OTE(CL1T_08_PE.FILT_NEG_XITN) ,OTE(CL1T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_08)[XIO(CL1T_08_PE.POS_XITN_MEM) OTE(CL1T_08_PE.POS_XITN) ,OTE(CL1T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_07_MTR.COMM)[[XIO(I_PE_CL1T_07) ,XIC(CL1T_07_PE.TOF.DN) ] TON(CL1T_07_PE.TON,?,?) ,XIO(I_PE_CL1T_07) XIC(CL1T_07_PE.TON.DN) TOF(CL1T_07_PE.TOF,?,?) ,XIC(CL1T_07_PE.TOF.DN) OTE(CL1T_07_PE.FILT) ];
				N: XIC(CL1T_07_PE.FILT)[XIO(CL1T_07_PE.FILT_POS_XITN_MEM) OTE(CL1T_07_PE.FILT_POS_XITN) ,OTE(CL1T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_07_PE.FILT)[XIO(CL1T_07_PE.FILT_NEG_XITN_MEM) OTE(CL1T_07_PE.FILT_NEG_XITN) ,OTE(CL1T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_07)[XIO(CL1T_07_PE.POS_XITN_MEM) OTE(CL1T_07_PE.POS_XITN) ,OTE(CL1T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_06_MTR.COMM)[[XIO(I_PE_CL1T_06) ,XIC(CL1T_06_PE.TOF.DN) ] TON(CL1T_06_PE.TON,?,?) ,XIO(I_PE_CL1T_06) XIC(CL1T_06_PE.TON.DN) TOF(CL1T_06_PE.TOF,?,?) ,XIC(CL1T_06_PE.TOF.DN) OTE(CL1T_06_PE.FILT) ];
				N: XIC(CL1T_06_PE.FILT)[XIO(CL1T_06_PE.FILT_POS_XITN_MEM) OTE(CL1T_06_PE.FILT_POS_XITN) ,OTE(CL1T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_06_PE.FILT)[XIO(CL1T_06_PE.FILT_NEG_XITN_MEM) OTE(CL1T_06_PE.FILT_NEG_XITN) ,OTE(CL1T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_06)[XIO(CL1T_06_PE.POS_XITN_MEM) OTE(CL1T_06_PE.POS_XITN) ,OTE(CL1T_06_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_05_MTR.COMM)[[XIO(I_PE_CL1T_05) ,XIC(CL1T_05_PE.TOF.DN) ] TON(CL1T_05_PE.TON,?,?) ,XIO(I_PE_CL1T_05) XIC(CL1T_05_PE.TON.DN) TOF(CL1T_05_PE.TOF,?,?) ,XIC(CL1T_05_PE.TOF.DN) OTE(CL1T_05_PE.FILT) ];
				N: XIC(CL1T_05_PE.FILT)[XIO(CL1T_05_PE.FILT_POS_XITN_MEM) OTE(CL1T_05_PE.FILT_POS_XITN) ,OTE(CL1T_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_05_PE.FILT)[XIO(CL1T_05_PE.FILT_NEG_XITN_MEM) OTE(CL1T_05_PE.FILT_NEG_XITN) ,OTE(CL1T_05_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_05)[XIO(CL1T_05_PE.POS_XITN_MEM) OTE(CL1T_05_PE.POS_XITN) ,OTE(CL1T_05_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_04_MTR.COMM)[[XIO(I_PE_CL1T_04) ,XIC(CL1T_04_PE.TOF.DN) ] TON(CL1T_04_PE.TON,?,?) ,XIO(I_PE_CL1T_04) XIC(CL1T_04_PE.TON.DN) TOF(CL1T_04_PE.TOF,?,?) ,XIC(CL1T_04_PE.TOF.DN) OTE(CL1T_04_PE.FILT) ];
				N: XIC(CL1T_04_PE.FILT)[XIO(CL1T_04_PE.FILT_POS_XITN_MEM) OTE(CL1T_04_PE.FILT_POS_XITN) ,OTE(CL1T_04_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_04_PE.FILT)[XIO(CL1T_04_PE.FILT_NEG_XITN_MEM) OTE(CL1T_04_PE.FILT_NEG_XITN) ,OTE(CL1T_04_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL1T_04)[XIO(CL1T_04_PE.POS_XITN_MEM) OTE(CL1T_04_PE.POS_XITN) ,OTE(CL1T_04_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_03_MTR.COMM)[[XIO(I_PE_CL1T_03) ,XIC(CL1T_03_PE.TOF.DN) ] TON(CL1T_03_PE.TON,?,?) ,XIO(I_PE_CL1T_03) XIC(CL1T_03_PE.TON.DN) TOF(CL1T_03_PE.TOF,?,?) ,XIC(CL1T_03_PE.TOF.DN) OTE(CL1T_03_PE.FILT) ];
				N: XIC(CL1T_03_PE.FILT)[XIO(CL1T_03_PE.FILT_POS_XITN_MEM) OTE(CL1T_03_PE.FILT_POS_XITN) ,OTE(CL1T_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_03_PE.FILT)[XIO(CL1T_03_PE.FILT_NEG_XITN_MEM) OTE(CL1T_03_PE.FILT_NEG_XITN) ,OTE(CL1T_03_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_02_MTR.COMM)[[XIO(I_PE_CL1T_02) ,XIC(CL1T_02_PE.TOF.DN) ] TON(CL1T_02_PE.TON,?,?) ,XIO(I_PE_CL1T_02) XIC(CL1T_02_PE.TON.DN) TOF(CL1T_02_PE.TOF,?,?) ,XIC(CL1T_02_PE.TOF.DN) OTE(CL1T_02_PE.FILT) ];
				N: XIC(CL1T_02_PE.FILT)[XIO(CL1T_02_PE.FILT_POS_XITN_MEM) OTE(CL1T_02_PE.FILT_POS_XITN) ,OTE(CL1T_02_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_02_PE.FILT)[XIO(CL1T_02_PE.FILT_NEG_XITN_MEM) OTE(CL1T_02_PE.FILT_NEG_XITN) ,OTE(CL1T_02_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL1T_01_MTR.COMM)[[XIO(I_PE_CL1T_01) ,XIC(CL1T_01_PE.TOF.DN) ] TON(CL1T_01_PE.TON,?,?) ,XIO(I_PE_CL1T_01) XIC(CL1T_01_PE.TON.DN) TOF(CL1T_01_PE.TOF,?,?) ,XIC(CL1T_01_PE.TOF.DN) OTE(CL1T_01_PE.FILT) ];
				N: XIC(CL1T_01_PE.FILT)[XIO(CL1T_01_PE.FILT_POS_XITN_MEM) OTE(CL1T_01_PE.FILT_POS_XITN) ,OTE(CL1T_01_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL1T_01_PE.FILT)[XIO(CL1T_01_PE.FILT_NEG_XITN_MEM) OTE(CL1T_01_PE.FILT_NEG_XITN) ,OTE(CL1T_01_PE.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE CL1T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_26_MTR.COMM);
				N: XIC(O_VFD_CL1T_26_FWD)XIC(CL1T_26_MTR.CONV_RUN)OTE(CL1T_26_MTR.RUNNING);
				N: XIC(CL1T_26_VFD.FAULTED)[XIO(F_CL1T_26_VFD_FAULT) OTE(CL1T_26_VFD.FAULT_ONS) ,OTE(F_CL1T_26_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_26_MOL);
				N: XIO(I_MSD_CL1T_26)XIO(CL1T_26_MTR.COMM)[XIO(F_CL1T_26_MSD_OFF) OTE(CL1T_26_MTR.MSD_ONS) ,OTE(F_CL1T_26_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_26_CTCTR_FAULT) OTE(CL1T_26_MTR.MS_FLT_ONS) ,OTE(F_CL1T_26_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_26_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_26_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_26_MTR.FIRE_ALM);
				N: XIO(CL1T_26_MTR.CONV_RUN)XIC(CL1T_26_MTR.INTL_MTR)OTE(CL1T_26_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_26_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_26_OVRIDE_REQ)[XIO(F_CL1T_26_OVRIDE) OTE(CL1T_26_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_26_OVRIDE) ];
				N: XIC(HMI_CL1T_26_OUTSERV_REQ)[XIO(F_CL1T_26_OUTSERV) OTE(CL1T_26_MTR.OOS_ONS) ,OTE(F_CL1T_26_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_26_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_10_PE_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,XIC(CL1T_26_MTR.MB_JAMMED) ,XIC(F_CL1T_24_PE_JAMMED) ,AFI() ]OTE(CL1T_26_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_25_MTR.COMM);
				N: XIC(CL1T_25_MTR.CONV_RUN)OTE(CL1T_25_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_25_VFD_FAULT);
				N: XIC(INT.ALWAYS_FALSE)XIC(F_CL1T_25_MOL)XIO(I_CS_MCP_03_SPBG)[XIO(F_CL1T_25_MOL) OTE(CL1T_25_MTR.MOL_ONS) ,OTE(F_CL1T_25_MOL) ];
				N: XIC(INT.ALWAYS_FALSE)XIO(CL1T_25_MTR.COMM)[XIO(F_CL1T_25_MSD_OFF) OTE(CL1T_25_MTR.MSD_ONS) ,OTE(F_CL1T_25_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_25_CTCTR_FAULT) OTE(CL1T_25_MTR.MS_FLT_ONS) ,OTE(F_CL1T_25_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_25_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_25_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_25_MTR.FIRE_ALM);
				N: XIO(CL1T_25_MTR.CONV_RUN)XIC(CL1T_25_MTR.INTL_MTR)OTE(CL1T_25_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_25_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_25_OVRIDE_REQ)[XIO(F_CL1T_25_OVRIDE) OTE(CL1T_25_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_25_OVRIDE) ];
				N: XIC(HMI_CL1T_25_OUTSERV_REQ)[XIO(F_CL1T_25_OUTSERV) OTE(CL1T_25_MTR.OOS_ONS) ,OTE(F_CL1T_25_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_25_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_24_PE_JAMMED) ,XIC(CL1T_25_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_25_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_24_MTR.COMM);
				N: XIC(O_VFD_CL1T_24_FWD)XIC(CL1T_24_MTR.CONV_RUN)OTE(CL1T_24_MTR.RUNNING);
				N: XIC(CL1T_24_VFD.FAULTED)[XIO(F_CL1T_24_VFD_FAULT) OTE(CL1T_24_VFD.FAULT_ONS) ,OTE(F_CL1T_24_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_24_MOL);
				N: XIO(I_MSD_CL1T_24)XIO(CL1T_24_MTR.COMM)[XIO(F_CL1T_24_MSD_OFF) OTE(CL1T_24_MTR.MSD_ONS) ,OTE(F_CL1T_24_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_24_CTCTR_FAULT) OTE(CL1T_24_MTR.MS_FLT_ONS) ,OTE(F_CL1T_24_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_24_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_24_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_24_MTR.FIRE_ALM);
				N: XIO(CL1T_24_MTR.CONV_RUN)XIC(CL1T_24_MTR.INTL_MTR)OTE(CL1T_24_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_24_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_24_OVRIDE_REQ)[XIO(F_CL1T_24_OVRIDE) OTE(CL1T_24_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_24_OVRIDE) ];
				N: XIC(HMI_CL1T_24_OUTSERV_REQ)[XIO(F_CL1T_24_OUTSERV) OTE(CL1T_24_MTR.OOS_ONS) ,OTE(F_CL1T_24_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_24_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_24_PE_JAMMED) ,XIC(F_CL1T_23_PE_JAMMED) ,XIC(CL1T_24_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_24_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_23_MTR.COMM);
				N: XIC(O_VFD_CL1T_23_FWD)XIC(CL1T_23_MTR.CONV_RUN)OTE(CL1T_23_MTR.RUNNING);
				N: XIC(CL1T_23_VFD.FAULTED)[XIO(F_CL1T_23_VFD_FAULT) OTE(CL1T_23_VFD.FAULT_ONS) ,OTE(F_CL1T_23_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_23_MOL);
				N: XIO(I_MSD_CL1T_23)XIO(CL1T_23_MTR.COMM)[XIO(F_CL1T_23_MSD_OFF) OTE(CL1T_23_MTR.MSD_ONS) ,OTE(F_CL1T_23_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_23_CTCTR_FAULT) OTE(CL1T_23_MTR.MS_FLT_ONS) ,OTE(F_CL1T_23_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_23_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_23_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_23_MTR.FIRE_ALM);
				N: XIO(CL1T_23_MTR.CONV_RUN)XIC(CL1T_23_MTR.INTL_MTR)OTE(CL1T_23_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_23_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_23_OVRIDE_REQ)[XIO(F_CL1T_23_OVRIDE) OTE(CL1T_23_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_23_OVRIDE) ];
				N: XIC(HMI_CL1T_23_OUTSERV_REQ)[XIO(F_CL1T_23_OUTSERV) OTE(CL1T_23_MTR.OOS_ONS) ,OTE(F_CL1T_23_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_23_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_23_PE_JAMMED) ,XIC(CL1T_23_MTR.MB_JAMMED) ,XIC(F_CL1T_21_PE_JAMMED) ,AFI() ]OTE(CL1T_23_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_22_MTR.COMM);
				N: XIC(CL1T_22_MTR.CONV_RUN)OTE(CL1T_22_MTR.RUNNING);
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_22_VFD_FAULT);
				N: XIC(INT.ALWAYS_FALSE)XIC(F_CL1T_22_MOL)XIO(I_CS_MCP_03_SPBG)[XIO(F_CL1T_22_MOL) OTE(CL1T_22_MTR.MOL_ONS) ,OTE(F_CL1T_22_MOL) ];
				N: XIC(INT.ALWAYS_FALSE)XIO(CL1T_22_MTR.COMM)[XIO(F_CL1T_22_MSD_OFF) OTE(CL1T_22_MTR.MSD_ONS) ,OTE(F_CL1T_22_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_22_CTCTR_FAULT) OTE(CL1T_22_MTR.MS_FLT_ONS) ,OTE(F_CL1T_22_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_22_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_22_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_22_MTR.FIRE_ALM);
				N: XIO(CL1T_22_MTR.CONV_RUN)XIC(CL1T_22_MTR.INTL_MTR)OTE(CL1T_22_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_22_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_22_OVRIDE_REQ)[XIO(F_CL1T_22_OVRIDE) OTE(CL1T_22_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_22_OVRIDE) ];
				N: XIC(HMI_CL1T_22_OUTSERV_REQ)[XIO(F_CL1T_22_OUTSERV) OTE(CL1T_22_MTR.OOS_ONS) ,OTE(F_CL1T_22_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_22_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_21_PE_JAMMED) ,XIC(CL1T_22_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_22_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_21_MTR.COMM);
				N: XIC(O_VFD_CL1T_21_FWD)XIC(CL1T_21_MTR.CONV_RUN)OTE(CL1T_21_MTR.RUNNING);
				N: XIC(CL1T_21_VFD.FAULTED)[XIO(F_CL1T_21_VFD_FAULT) OTE(CL1T_21_VFD.FAULT_ONS) ,OTE(F_CL1T_21_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_21_MOL);
				N: XIO(I_MSD_CL1T_21)XIO(CL1T_21_MTR.COMM)[XIO(F_CL1T_21_MSD_OFF) OTE(CL1T_21_MTR.MSD_ONS) ,OTE(F_CL1T_21_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_21_CTCTR_FAULT) OTE(CL1T_21_MTR.MS_FLT_ONS) ,OTE(F_CL1T_21_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_21_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_21_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_21_MTR.FIRE_ALM);
				N: XIO(CL1T_21_MTR.CONV_RUN)XIC(CL1T_21_MTR.INTL_MTR)OTE(CL1T_21_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_21_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_21_OVRIDE_REQ)[XIO(F_CL1T_21_OVRIDE) OTE(CL1T_21_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_21_OVRIDE) ];
				N: XIC(HMI_CL1T_21_OUTSERV_REQ)[XIO(F_CL1T_21_OUTSERV) OTE(CL1T_21_MTR.OOS_ONS) ,OTE(F_CL1T_21_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_21_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_21_PE_JAMMED) ,XIC(F_CL1T_20_PE_JAMMED) ,XIC(CL1T_21_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_21_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_20_MTR.COMM);
				N: XIC(O_VFD_CL1T_20_FWD)XIC(CL1T_20_MTR.CONV_RUN)OTE(CL1T_20_MTR.RUNNING);
				N: XIC(CL1T_20_VFD.FAULTED)[XIO(F_CL1T_20_VFD_FAULT) OTE(CL1T_20_VFD.FAULT_ONS) ,OTE(F_CL1T_20_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_20_MOL);
				N: XIO(I_MSD_CL1T_20)XIO(CL1T_20_MTR.COMM)[XIO(F_CL1T_20_MSD_OFF) OTE(CL1T_20_MTR.MSD_ONS) ,OTE(F_CL1T_20_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_20_CTCTR_FAULT) OTE(CL1T_20_MTR.MS_FLT_ONS) ,OTE(F_CL1T_20_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_20_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_20_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_20_MTR.FIRE_ALM);
				N: XIO(CL1T_20_MTR.CONV_RUN)XIC(CL1T_20_MTR.INTL_MTR)OTE(CL1T_20_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_20_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_20_OVRIDE_REQ)[XIO(F_CL1T_20_OVRIDE) OTE(CL1T_20_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_20_OVRIDE) ];
				N: XIC(HMI_CL1T_20_OUTSERV_REQ)[XIO(F_CL1T_20_OUTSERV) OTE(CL1T_20_MTR.OOS_ONS) ,OTE(F_CL1T_20_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_20_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_20_PE_JAMMED) ,XIC(F_CL1T_19_PE_JAMMED) ,XIC(CL1T_20_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_20_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_19_MTR.COMM);
				N: XIC(O_VFD_CL1T_19_FWD)XIC(CL1T_19_MTR.CONV_RUN)OTE(CL1T_19_MTR.RUNNING);
				N: XIC(CL1T_19_VFD.FAULTED)[XIO(F_CL1T_19_VFD_FAULT) OTE(CL1T_19_VFD.FAULT_ONS) ,OTE(F_CL1T_19_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_19_MOL);
				N: XIO(I_MSD_CL1T_19)XIO(CL1T_19_MTR.COMM)[XIO(F_CL1T_19_MSD_OFF) OTE(CL1T_19_MTR.MSD_ONS) ,OTE(F_CL1T_19_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_19_CTCTR_FAULT) OTE(CL1T_19_MTR.MS_FLT_ONS) ,OTE(F_CL1T_19_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_19_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_19_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_19_MTR.FIRE_ALM);
				N: XIO(CL1T_19_MTR.CONV_RUN)XIC(CL1T_19_MTR.INTL_MTR)OTE(CL1T_19_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_19_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_19_OVRIDE_REQ)[XIO(F_CL1T_19_OVRIDE) OTE(CL1T_19_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_19_OVRIDE) ];
				N: XIC(HMI_CL1T_19_OUTSERV_REQ)[XIO(F_CL1T_19_OUTSERV) OTE(CL1T_19_MTR.OOS_ONS) ,OTE(F_CL1T_19_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_19_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_19_PE_JAMMED) ,XIC(F_CL1T_18_PE_JAMMED) ,XIC(CL1T_19_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_19_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_18_MTR.COMM);
				N: XIC(O_VFD_CL1T_18_FWD)XIC(CL1T_18_MTR.CONV_RUN)OTE(CL1T_18_MTR.RUNNING);
				N: XIC(CL1T_18_VFD.FAULTED)[XIO(F_CL1T_18_VFD_FAULT) OTE(CL1T_18_VFD.FAULT_ONS) ,OTE(F_CL1T_18_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_18_MOL);
				N: XIO(I_MSD_CL1T_18)XIO(CL1T_18_MTR.COMM)[XIO(F_CL1T_18_MSD_OFF) OTE(CL1T_18_MTR.MSD_ONS) ,OTE(F_CL1T_18_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_18_CTCTR_FAULT) OTE(CL1T_18_MTR.MS_FLT_ONS) ,OTE(F_CL1T_18_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30304.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(CL1T_18_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30304.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(CL1T_18_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_18_MTR.FIRE_ALM);
				N: XIO(CL1T_18_MTR.CONV_RUN)XIC(CL1T_18_MTR.INTL_MTR)OTE(CL1T_18_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_18_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_18_OVRIDE_REQ)[XIO(F_CL1T_18_OVRIDE) OTE(CL1T_18_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_18_OVRIDE) ];
				N: XIC(HMI_CL1T_18_OUTSERV_REQ)[XIO(F_CL1T_18_OUTSERV) OTE(CL1T_18_MTR.OOS_ONS) ,OTE(F_CL1T_18_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_18_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_18_PE_JAMMED) ,XIC(F_CL1T_17_PE_JAMMED) ,XIC(CL1T_18_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_18_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_17_MTR.COMM);
				N: XIC(O_VFD_CL1T_17_FWD)XIC(CL1T_17_MTR.CONV_RUN)OTE(CL1T_17_MTR.RUNNING);
				N: XIC(CL1T_17_VFD.FAULTED)[XIO(F_CL1T_17_VFD_FAULT) OTE(CL1T_17_VFD.FAULT_ONS) ,OTE(F_CL1T_17_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_17_MOL);
				N: XIO(I_MSD_CL1T_17)XIO(CL1T_17_MTR.COMM)[XIO(F_CL1T_17_MSD_OFF) OTE(CL1T_17_MTR.MSD_ONS) ,OTE(F_CL1T_17_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_17_CTCTR_FAULT) OTE(CL1T_17_MTR.MS_FLT_ONS) ,OTE(F_CL1T_17_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30304.Zone_OK) ,AFI() ]OTE(CL1T_17_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30304.Zone_RES) ,AFI() ]OTE(CL1T_17_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_17_MTR.FIRE_ALM);
				N: XIO(CL1T_17_MTR.CONV_RUN)XIC(CL1T_17_MTR.INTL_MTR)OTE(CL1T_17_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_17_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_17_OVRIDE_REQ)[XIO(F_CL1T_17_OVRIDE) OTE(CL1T_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_17_OVRIDE) ];
				N: XIC(HMI_CL1T_17_OUTSERV_REQ)[XIO(F_CL1T_17_OUTSERV) OTE(CL1T_17_MTR.OOS_ONS) ,OTE(F_CL1T_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_17_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_17_PE_JAMMED) ,XIC(F_CL1T_16_PE_JAMMED) ,XIC(CL1T_17_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_17_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_16_MTR.COMM);
				N: XIC(O_VFD_CL1T_16_FWD)XIC(CL1T_16_MTR.CONV_RUN)OTE(CL1T_16_MTR.RUNNING);
				N: XIC(CL1T_16_VFD.FAULTED)[XIO(F_CL1T_16_VFD_FAULT) OTE(CL1T_16_VFD.FAULT_ONS) ,OTE(F_CL1T_16_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_16_MOL);
				N: XIO(I_MSD_CL1T_16)XIO(CL1T_16_MTR.COMM)[XIO(F_CL1T_16_MSD_OFF) OTE(CL1T_16_MTR.MSD_ONS) ,OTE(F_CL1T_16_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_16_CTCTR_FAULT) OTE(CL1T_16_MTR.MS_FLT_ONS) ,OTE(F_CL1T_16_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30304.Zone_OK) ,AFI() ]OTE(CL1T_16_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30304.Zone_RES) ,AFI() ]OTE(CL1T_16_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_16_MTR.FIRE_ALM);
				N: XIO(CL1T_16_MTR.CONV_RUN)XIC(CL1T_16_MTR.INTL_MTR)OTE(CL1T_16_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_16_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_16_OVRIDE_REQ)[XIO(F_CL1T_16_OVRIDE) OTE(CL1T_16_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_16_OVRIDE) ];
				N: XIC(HMI_CL1T_16_OUTSERV_REQ)[XIO(F_CL1T_16_OUTSERV) OTE(CL1T_16_MTR.OOS_ONS) ,OTE(F_CL1T_16_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_16_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_16_PE_JAMMED) ,XIC(F_CL1T_15_PE_JAMMED) ,XIC(CL1T_16_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_16_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_15_MTR.COMM);
				N: XIC(O_VFD_CL1T_15_FWD)XIC(CL1T_15_MTR.CONV_RUN)OTE(CL1T_15_MTR.RUNNING);
				N: XIC(CL1T_15_VFD.FAULTED)[XIO(F_CL1T_15_VFD_FAULT) OTE(CL1T_15_VFD.FAULT_ONS) ,OTE(F_CL1T_15_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_15_MOL);
				N: XIO(I_MSD_CL1T_15)XIO(CL1T_15_MTR.COMM)[XIO(F_CL1T_15_MSD_OFF) OTE(CL1T_15_MTR.MSD_ONS) ,OTE(F_CL1T_15_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_15_CTCTR_FAULT) OTE(CL1T_15_MTR.MS_FLT_ONS) ,OTE(F_CL1T_15_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30304.Zone_OK) ,AFI() ]OTE(CL1T_15_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30304.Zone_RES) ,AFI() ]OTE(CL1T_15_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_15_MTR.FIRE_ALM);
				N: XIO(CL1T_15_MTR.CONV_RUN)XIC(CL1T_15_MTR.INTL_MTR)OTE(CL1T_15_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_15_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_15_OVRIDE_REQ)[XIO(F_CL1T_15_OVRIDE) OTE(CL1T_15_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_15_OVRIDE) ];
				N: XIC(HMI_CL1T_15_OUTSERV_REQ)[XIO(F_CL1T_15_OUTSERV) OTE(CL1T_15_MTR.OOS_ONS) ,OTE(F_CL1T_15_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_15_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_15_PE_JAMMED) ,XIC(F_CL1T_14_PE_JAMMED) ,XIC(CL1T_15_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_15_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_14_MTR.COMM);
				N: XIC(O_VFD_CL1T_14_FWD)XIC(CL1T_14_MTR.CONV_RUN)OTE(CL1T_14_MTR.RUNNING);
				N: XIC(CL1T_14_VFD.FAULTED)[XIO(F_CL1T_14_VFD_FAULT) OTE(CL1T_14_VFD.FAULT_ONS) ,OTE(F_CL1T_14_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_14_MOL);
				N: XIO(I_MSD_CL1T_14)XIO(CL1T_14_MTR.COMM)[XIO(F_CL1T_14_MSD_OFF) OTE(CL1T_14_MTR.MSD_ONS) ,OTE(F_CL1T_14_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_14_CTCTR_FAULT) OTE(CL1T_14_MTR.MS_FLT_ONS) ,OTE(F_CL1T_14_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,XIO(EZ_30304.Zone_OK) ,AFI() ]OTE(CL1T_14_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,XIC(EZ_30304.Zone_RES) ,AFI() ]OTE(CL1T_14_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_14_MTR.FIRE_ALM);
				N: XIO(CL1T_14_MTR.CONV_RUN)XIC(CL1T_14_MTR.INTL_MTR)OTE(CL1T_14_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_14_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_14_OVRIDE_REQ)[XIO(F_CL1T_14_OVRIDE) OTE(CL1T_14_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_14_OVRIDE) ];
				N: XIC(HMI_CL1T_14_OUTSERV_REQ)[XIO(F_CL1T_14_OUTSERV) OTE(CL1T_14_MTR.OOS_ONS) ,OTE(F_CL1T_14_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_14_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_14_PE_JAMMED) ,XIC(F_CL1T_13_PE_JAMMED) ,XIC(CL1T_14_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_14_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_13_MTR.COMM);
				N: XIC(O_VFD_CL1T_13_FWD)XIC(CL1T_13_MTR.CONV_RUN)OTE(CL1T_13_MTR.RUNNING);
				N: XIC(CL1T_13_VFD.FAULTED)[XIO(F_CL1T_13_VFD_FAULT) OTE(CL1T_13_VFD.FAULT_ONS) ,OTE(F_CL1T_13_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_13_MOL);
				N: XIO(I_MSD_CL1T_13)XIO(CL1T_13_MTR.COMM)[XIO(F_CL1T_13_MSD_OFF) OTE(CL1T_13_MTR.MSD_ONS) ,OTE(F_CL1T_13_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_13_CTCTR_FAULT) OTE(CL1T_13_MTR.MS_FLT_ONS) ,OTE(F_CL1T_13_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_13_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_13_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_13_MTR.FIRE_ALM);
				N: XIO(CL1T_13_MTR.CONV_RUN)XIC(CL1T_13_MTR.INTL_MTR)OTE(CL1T_13_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_13_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_13_OVRIDE_REQ)[XIO(F_CL1T_13_OVRIDE) OTE(CL1T_13_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_13_OVRIDE) ];
				N: XIC(HMI_CL1T_13_OUTSERV_REQ)[XIO(F_CL1T_13_OUTSERV) OTE(CL1T_13_MTR.OOS_ONS) ,OTE(F_CL1T_13_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_13_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_13_PE_JAMMED) ,XIC(F_CL1T_12_PE_JAMMED) ,XIC(CL1T_13_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_13_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_12_MTR.COMM);
				N: XIC(O_VFD_CL1T_12_FWD)XIC(CL1T_12_MTR.CONV_RUN)OTE(CL1T_12_MTR.RUNNING);
				N: XIC(CL1T_12_VFD.FAULTED)[XIO(F_CL1T_12_VFD_FAULT) OTE(CL1T_12_VFD.FAULT_ONS) ,OTE(F_CL1T_12_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_12_MOL);
				N: XIO(I_MSD_CL1T_12)XIO(CL1T_12_MTR.COMM)[XIO(F_CL1T_12_MSD_OFF) OTE(CL1T_12_MTR.MSD_ONS) ,OTE(F_CL1T_12_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_12_CTCTR_FAULT) OTE(CL1T_12_MTR.MS_FLT_ONS) ,OTE(F_CL1T_12_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_12_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_12_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_12_MTR.FIRE_ALM);
				N: XIO(CL1T_12_MTR.CONV_RUN)XIC(CL1T_12_MTR.INTL_MTR)OTE(CL1T_12_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_12_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_12_OVRIDE_REQ)[XIO(F_CL1T_12_OVRIDE) OTE(CL1T_12_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_12_OVRIDE) ];
				N: XIC(HMI_CL1T_12_OUTSERV_REQ)[XIO(F_CL1T_12_OUTSERV) OTE(CL1T_12_MTR.OOS_ONS) ,OTE(F_CL1T_12_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_12_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_12_PE_JAMMED) ,XIC(F_CL1T_11_PE_JAMMED) ,XIC(CL1T_12_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_12_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_11_MTR.COMM);
				N: XIC(O_VFD_CL1T_11_FWD)XIC(CL1T_11_MTR.CONV_RUN)OTE(CL1T_11_MTR.RUNNING);
				N: XIC(CL1T_11_VFD.FAULTED)[XIO(F_CL1T_11_VFD_FAULT) OTE(CL1T_11_VFD.FAULT_ONS) ,OTE(F_CL1T_11_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_11_MOL);
				N: XIO(I_MSD_CL1T_11)XIO(CL1T_11_MTR.COMM)[XIO(F_CL1T_11_MSD_OFF) OTE(CL1T_11_MTR.MSD_ONS) ,OTE(F_CL1T_11_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_11_CTCTR_FAULT) OTE(CL1T_11_MTR.MS_FLT_ONS) ,OTE(F_CL1T_11_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_11_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_11_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_11_MTR.FIRE_ALM);
				N: XIO(CL1T_11_MTR.CONV_RUN)XIC(CL1T_11_MTR.INTL_MTR)OTE(CL1T_11_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_11_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_11_OVRIDE_REQ)[XIO(F_CL1T_11_OVRIDE) OTE(CL1T_11_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_11_OVRIDE) ];
				N: XIC(HMI_CL1T_11_OUTSERV_REQ)[XIO(F_CL1T_11_OUTSERV) OTE(CL1T_11_MTR.OOS_ONS) ,OTE(F_CL1T_11_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_11_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_11_PE_JAMMED) ,XIC(F_CL1T_10_PE_JAMMED) ,XIC(CL1T_11_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_11_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_10_MTR.COMM);
				N: XIC(O_VFD_CL1T_10_FWD)XIC(CL1T_10_MTR.CONV_RUN)OTE(CL1T_10_MTR.RUNNING);
				N: XIC(CL1T_10_VFD.FAULTED)[XIO(F_CL1T_10_VFD_FAULT) OTE(CL1T_10_VFD.FAULT_ONS) ,OTE(F_CL1T_10_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_10_MOL);
				N: XIO(I_MSD_CL1T_10)XIO(CL1T_10_MTR.COMM)[XIO(F_CL1T_10_MSD_OFF) OTE(CL1T_10_MTR.MSD_ONS) ,OTE(F_CL1T_10_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_10_CTCTR_FAULT) OTE(CL1T_10_MTR.MS_FLT_ONS) ,OTE(F_CL1T_10_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_10_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_10_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_10_MTR.FIRE_ALM);
				N: XIO(CL1T_10_MTR.CONV_RUN)XIC(CL1T_10_MTR.INTL_MTR)OTE(CL1T_10_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_10_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_10_OVRIDE_REQ)[XIO(F_CL1T_10_OVRIDE) OTE(CL1T_10_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_10_OVRIDE) ];
				N: XIC(HMI_CL1T_10_OUTSERV_REQ)[XIO(F_CL1T_10_OUTSERV) OTE(CL1T_10_MTR.OOS_ONS) ,OTE(F_CL1T_10_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_10_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_10_PE_JAMMED) ,XIC(F_CL1T_09_PE_JAMMED) ,XIC(CL1T_10_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_10_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_09_MTR.COMM);
				N: XIC(O_VFD_CL1T_09_FWD)XIC(CL1T_09_MTR.CONV_RUN)OTE(CL1T_09_MTR.RUNNING);
				N: XIC(CL1T_09_VFD.FAULTED)[XIO(F_CL1T_09_VFD_FAULT) OTE(CL1T_09_VFD.FAULT_ONS) ,OTE(F_CL1T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_09_MOL);
				N: XIO(I_MSD_CL1T_09)XIO(CL1T_09_MTR.COMM)[XIO(F_CL1T_09_MSD_OFF) OTE(CL1T_09_MTR.MSD_ONS) ,OTE(F_CL1T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_09_CTCTR_FAULT) OTE(CL1T_09_MTR.MS_FLT_ONS) ,OTE(F_CL1T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_09_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_09_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_09_MTR.FIRE_ALM);
				N: XIO(CL1T_09_MTR.CONV_RUN)XIC(CL1T_09_MTR.INTL_MTR)OTE(CL1T_09_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_09_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_09_OVRIDE_REQ)[XIO(F_CL1T_09_OVRIDE) OTE(CL1T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_09_OVRIDE) ];
				N: XIC(HMI_CL1T_09_OUTSERV_REQ)[XIO(F_CL1T_09_OUTSERV) OTE(CL1T_09_MTR.OOS_ONS) ,OTE(F_CL1T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_09_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_09_PE_JAMMED) ,XIC(F_CL1T_08_PE_JAMMED) ,XIC(CL1T_09_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_08_MTR.COMM);
				N: XIC(O_VFD_CL1T_08_FWD)XIC(CL1T_08_MTR.CONV_RUN)OTE(CL1T_08_MTR.RUNNING);
				N: XIC(CL1T_08_VFD.FAULTED)[XIO(F_CL1T_08_VFD_FAULT) OTE(CL1T_08_VFD.FAULT_ONS) ,OTE(F_CL1T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_08_MOL);
				N: XIO(I_MSD_CL1T_08)XIO(CL1T_08_MTR.COMM)[XIO(F_CL1T_08_MSD_OFF) OTE(CL1T_08_MTR.MSD_ONS) ,OTE(F_CL1T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_08_CTCTR_FAULT) OTE(CL1T_08_MTR.MS_FLT_ONS) ,OTE(F_CL1T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_08_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_08_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_08_MTR.FIRE_ALM);
				N: XIO(CL1T_08_MTR.CONV_RUN)XIC(CL1T_08_MTR.INTL_MTR)OTE(CL1T_08_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_08_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_08_OVRIDE_REQ)[XIO(F_CL1T_08_OVRIDE) OTE(CL1T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_08_OVRIDE) ];
				N: XIC(HMI_CL1T_08_OUTSERV_REQ)[XIO(F_CL1T_08_OUTSERV) OTE(CL1T_08_MTR.OOS_ONS) ,OTE(F_CL1T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_08_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_08_PE_JAMMED) ,XIC(F_CL1T_07_PE_JAMMED) ,XIC(CL1T_08_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_07_MTR.COMM);
				N: XIC(O_VFD_CL1T_07_FWD)XIC(CL1T_07_MTR.CONV_RUN)OTE(CL1T_07_MTR.RUNNING);
				N: XIC(CL1T_07_VFD.FAULTED)[XIO(F_CL1T_07_VFD_FAULT) OTE(CL1T_07_VFD.FAULT_ONS) ,OTE(F_CL1T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_07_MOL);
				N: XIO(I_MSD_CL1T_07)XIO(CL1T_07_MTR.COMM)[XIO(F_CL1T_07_MSD_OFF) OTE(CL1T_07_MTR.MSD_ONS) ,OTE(F_CL1T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_07_CTCTR_FAULT) OTE(CL1T_07_MTR.MS_FLT_ONS) ,OTE(F_CL1T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_07_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_07_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_07_MTR.FIRE_ALM);
				N: XIO(CL1T_07_MTR.CONV_RUN)XIC(CL1T_07_MTR.INTL_MTR)OTE(CL1T_07_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_07_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_07_OVRIDE_REQ)[XIO(F_CL1T_07_OVRIDE) OTE(CL1T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_07_OVRIDE) ];
				N: XIC(HMI_CL1T_07_OUTSERV_REQ)[XIO(F_CL1T_07_OUTSERV) OTE(CL1T_07_MTR.OOS_ONS) ,OTE(F_CL1T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_07_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_07_PE_JAMMED) ,XIC(F_CL1T_06_PE_JAMMED) ,XIC(CL1T_07_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_06_MTR.COMM);
				N: XIC(O_VFD_CL1T_06_FWD)XIC(CL1T_06_MTR.CONV_RUN)OTE(CL1T_06_MTR.RUNNING);
				N: XIC(CL1T_06_VFD.FAULTED)[XIO(F_CL1T_06_VFD_FAULT) OTE(CL1T_06_VFD.FAULT_ONS) ,OTE(F_CL1T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_06_MOL);
				N: XIO(I_MSD_CL1T_06)XIO(CL1T_06_MTR.COMM)[XIO(F_CL1T_06_MSD_OFF) OTE(CL1T_06_MTR.MSD_ONS) ,OTE(F_CL1T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_06_CTCTR_FAULT) OTE(CL1T_06_MTR.MS_FLT_ONS) ,OTE(F_CL1T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,XIO(EZ_30303.Zone_OK) ,AFI() ]OTE(CL1T_06_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,XIC(EZ_30303.Zone_RES) ,AFI() ]OTE(CL1T_06_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_06_MTR.FIRE_ALM);
				N: XIO(CL1T_06_MTR.CONV_RUN)XIC(CL1T_06_MTR.INTL_MTR)OTE(CL1T_06_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_06_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_06_OVRIDE_REQ)[XIO(F_CL1T_06_OVRIDE) OTE(CL1T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_06_OVRIDE) ];
				N: XIC(HMI_CL1T_06_OUTSERV_REQ)[XIO(F_CL1T_06_OUTSERV) OTE(CL1T_06_MTR.OOS_ONS) ,OTE(F_CL1T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_06_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_06_PE_JAMMED) ,XIC(F_CL1T_05_PE_JAMMED) ,XIC(CL1T_06_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_05_MTR.COMM);
				N: XIC(O_VFD_CL1T_05_FWD)XIC(CL1T_05_MTR.CONV_RUN)OTE(CL1T_05_MTR.RUNNING);
				N: XIC(CL1T_05_VFD.FAULTED)[XIO(F_CL1T_05_VFD_FAULT) OTE(CL1T_05_VFD.FAULT_ONS) ,OTE(F_CL1T_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_05_MOL);
				N: XIO(I_MSD_CL1T_05)XIO(CL1T_05_MTR.COMM)[XIO(F_CL1T_05_MSD_OFF) OTE(CL1T_05_MTR.MSD_ONS) ,OTE(F_CL1T_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_05_CTCTR_FAULT) OTE(CL1T_05_MTR.MS_FLT_ONS) ,OTE(F_CL1T_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,AFI() ]OTE(CL1T_05_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,AFI() ]OTE(CL1T_05_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_05_MTR.FIRE_ALM);
				N: XIO(CL1T_05_MTR.CONV_RUN)XIC(CL1T_05_MTR.INTL_MTR)OTE(CL1T_05_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_05_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_05_OVRIDE_REQ)[XIO(F_CL1T_05_OVRIDE) OTE(CL1T_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_05_OVRIDE) ];
				N: XIC(HMI_CL1T_05_OUTSERV_REQ)[XIO(F_CL1T_05_OUTSERV) OTE(CL1T_05_MTR.OOS_ONS) ,OTE(F_CL1T_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_05_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_05_PE_JAMMED) ,XIC(F_CL1T_04_PE_JAMMED) ,XIC(CL1T_05_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_04_MTR.COMM);
				N: XIC(O_VFD_CL1T_04_FWD)XIC(CL1T_04_MTR.CONV_RUN)OTE(CL1T_04_MTR.RUNNING);
				N: XIC(CL1T_04_VFD.FAULTED)[XIO(F_CL1T_04_VFD_FAULT) OTE(CL1T_04_VFD.FAULT_ONS) ,OTE(F_CL1T_04_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_04_MOL);
				N: XIO(I_MSD_CL1T_04)XIO(CL1T_04_MTR.COMM)[XIO(F_CL1T_04_MSD_OFF) OTE(CL1T_04_MTR.MSD_ONS) ,OTE(F_CL1T_04_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_04_CTCTR_FAULT) OTE(CL1T_04_MTR.MS_FLT_ONS) ,OTE(F_CL1T_04_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,AFI() ]OTE(CL1T_04_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,AFI() ]OTE(CL1T_04_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_04_MTR.FIRE_ALM);
				N: XIO(CL1T_04_MTR.CONV_RUN)XIC(CL1T_04_MTR.INTL_MTR)OTE(CL1T_04_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_04_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_04_OVRIDE_REQ)[XIO(F_CL1T_04_OVRIDE) OTE(CL1T_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_04_OVRIDE) ];
				N: XIC(HMI_CL1T_04_OUTSERV_REQ)[XIO(F_CL1T_04_OUTSERV) OTE(CL1T_04_MTR.OOS_ONS) ,OTE(F_CL1T_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_04_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_04_PE_JAMMED) ,XIC(F_CL1T_03_PE_JAMMED) ,XIC(CL1T_04_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_04_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_03_MTR.COMM);
				N: XIC(O_VFD_CL1T_03_FWD)XIC(CL1T_03_MTR.CONV_RUN)OTE(CL1T_03_MTR.RUNNING);
				N: XIC(CL1T_03_VFD.FAULTED)[XIO(F_CL1T_03_VFD_FAULT) OTE(CL1T_03_VFD.FAULT_ONS) ,OTE(F_CL1T_03_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_03_MOL);
				N: XIO(I_MSD_CL1T_03)XIO(CL1T_03_MTR.COMM)[XIO(F_CL1T_03_MSD_OFF) OTE(CL1T_03_MTR.MSD_ONS) ,OTE(F_CL1T_03_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_03_CTCTR_FAULT) OTE(CL1T_03_MTR.MS_FLT_ONS) ,OTE(F_CL1T_03_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,AFI() ]OTE(CL1T_03_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,AFI() ]OTE(CL1T_03_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_03_MTR.FIRE_ALM);
				N: XIO(CL1T_03_MTR.CONV_RUN)XIC(CL1T_03_MTR.INTL_MTR)OTE(CL1T_03_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_03_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_03_OVRIDE_REQ)[XIO(F_CL1T_03_OVRIDE) OTE(CL1T_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_03_OVRIDE) ];
				N: XIC(HMI_CL1T_03_OUTSERV_REQ)[XIO(F_CL1T_03_OUTSERV) OTE(CL1T_03_MTR.OOS_ONS) ,OTE(F_CL1T_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_03_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_03_PE_JAMMED) ,XIC(F_CL1T_02_PE_JAMMED) ,XIC(CL1T_03_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_02_MTR.COMM);
				N: XIC(O_VFD_CL1T_02_FWD)XIC(CL1T_02_MTR.CONV_RUN)OTE(CL1T_02_MTR.RUNNING);
				N: XIC(CL1T_02_VFD.FAULTED)[XIO(F_CL1T_02_VFD_FAULT) OTE(CL1T_02_VFD.FAULT_ONS) ,OTE(F_CL1T_02_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_02_MOL);
				N: XIO(I_MSD_CL1T_02)XIO(CL1T_02_MTR.COMM)[XIO(F_CL1T_02_MSD_OFF) OTE(CL1T_02_MTR.MSD_ONS) ,OTE(F_CL1T_02_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_02_CTCTR_FAULT) OTE(CL1T_02_MTR.MS_FLT_ONS) ,OTE(F_CL1T_02_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,AFI() ]OTE(CL1T_02_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,AFI() ]OTE(CL1T_02_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_02_MTR.FIRE_ALM);
				N: XIO(CL1T_02_MTR.CONV_RUN)XIC(CL1T_02_MTR.INTL_MTR)OTE(CL1T_02_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_02_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_02_OVRIDE_REQ)[XIO(F_CL1T_02_OVRIDE) OTE(CL1T_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_02_OVRIDE) ];
				N: XIC(HMI_CL1T_02_OUTSERV_REQ)[XIO(F_CL1T_02_OUTSERV) OTE(CL1T_02_MTR.OOS_ONS) ,OTE(F_CL1T_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_02_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_02_PE_JAMMED) ,XIC(F_CL1T_01_PE_JAMMED) ,XIC(CL1T_02_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(CL1T_01_MTR.COMM);
				N: XIC(O_VFD_CL1T_01_FWD)XIC(CL1T_01_MTR.CONV_RUN)OTE(CL1T_01_MTR.RUNNING);
				N: XIC(CL1T_01_VFD.FAULTED)[XIO(F_CL1T_01_VFD_FAULT) OTE(CL1T_01_VFD.FAULT_ONS) ,OTE(F_CL1T_01_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL1T_01_MOL);
				N: XIO(I_MSD_CL1T_01)XIO(CL1T_01_MTR.COMM)[XIO(F_CL1T_01_MSD_OFF) OTE(CL1T_01_MTR.MSD_ONS) ,OTE(F_CL1T_01_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL1T_01_CTCTR_FAULT) OTE(CL1T_01_MTR.MS_FLT_ONS) ,OTE(F_CL1T_01_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30301.Zone_OK) ,AFI() ]OTE(CL1T_01_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30301.Zone_RES) ,AFI() ]OTE(CL1T_01_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(CL1T_01_MTR.FIRE_ALM);
				N: XIO(CL1T_01_MTR.CONV_RUN)XIC(CL1T_01_MTR.INTL_MTR)OTE(CL1T_01_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(CL1T_01_MTR.AUTO_STOP);
				N: XIC(HMI_CL1T_01_OVRIDE_REQ)[XIO(F_CL1T_01_OVRIDE) OTE(CL1T_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL1T_01_OVRIDE) ];
				N: XIC(HMI_CL1T_01_OUTSERV_REQ)[XIO(F_CL1T_01_OUTSERV) OTE(CL1T_01_MTR.OOS_ONS) ,OTE(F_CL1T_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL1T_01_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_01_PE_JAMMED) ,XIC(CL1T_01_MTR.MB_JAMMED) ,AFI() ]OTE(CL1T_01_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_10A_MTR.COMM);
				N: XIC(O_VFD_HX1T_10A_FWD)XIC(HX1T_10A_MTR.CONV_RUN)OTE(HX1T_10A_MTR.RUNNING);
				N: XIC(HX1T_10A_VFD.FAULTED)[XIO(F_HX1T_10A_VFD_FAULT) OTE(HX1T_10A_VFD.FAULT_ONS) ,OTE(F_HX1T_10A_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_10A_MOL);
				N: XIO(I_MSD_HX1T_10A)XIO(HX1T_10A_MTR.COMM)[XIO(F_HX1T_10A_MSD_OFF) OTE(HX1T_10A_MTR.MSD_ONS) ,OTE(F_HX1T_10A_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_10A_CTCTR_FAULT) OTE(HX1T_10A_MTR.MS_FLT_ONS) ,OTE(F_HX1T_10A_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_10A_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_10A_MTR.E_STOP_RES);
				N: XIC(CL1T.STATUS.FIRE_ALM)OTE(HX1T_10A_MTR.FIRE_ALM);
				N: XIO(HX1T_10A_MTR.CONV_RUN)XIC(HX1T_10A_MTR.INTL_MTR)OTE(HX1T_10A_MTR.CASC);
				N: XIO(CL1T.MTR_GRP.RUN_LATCH)OTE(HX1T_10A_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_10A_OVRIDE_REQ)[XIO(F_HX1T_10A_OVRIDE) OTE(HX1T_10A_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_10A_OVRIDE) ];
				N: XIC(HMI_HX1T_10A_OUTSERV_REQ)[XIO(F_HX1T_10A_OUTSERV) OTE(HX1T_10A_MTR.OOS_ONS) ,OTE(F_HX1T_10A_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_10A_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_10A_PE_JAMMED) ,XIC(HX1T_10A_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_10A_MTR.JAMMED);
		END_ROUTINE

		ROUTINE CL1T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor CL1T_26 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_26_MTR.COMM)XIO(CL1T_26_MTR.E_STOP)XIO(F_CL1T_26_MSD_OFF)TON(CL1T_26_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_26_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_26_RDY) OTE(CL1T_26_VFD.FAULTED) ,XIO(CL1T_26_VFD.FAULTED) OTE(CL1T_26_VFD.READY) ];
				RC: "Motor CL1T_24 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_24_MTR.COMM)XIO(CL1T_24_MTR.E_STOP)XIO(F_CL1T_24_MSD_OFF)TON(CL1T_24_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_24_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_24_RDY) OTE(CL1T_24_VFD.FAULTED) ,XIO(CL1T_24_VFD.FAULTED) OTE(CL1T_24_VFD.READY) ];
				RC: "Motor CL1T_23 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_23_MTR.COMM)XIO(CL1T_23_MTR.E_STOP)XIO(F_CL1T_23_MSD_OFF)TON(CL1T_23_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_23_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_23_RDY) OTE(CL1T_23_VFD.FAULTED) ,XIO(CL1T_23_VFD.FAULTED) OTE(CL1T_23_VFD.READY) ];
				RC: "Motor CL1T_21 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_21_MTR.COMM)XIO(CL1T_21_MTR.E_STOP)XIO(F_CL1T_21_MSD_OFF)TON(CL1T_21_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_21_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_21_RDY) OTE(CL1T_21_VFD.FAULTED) ,XIO(CL1T_21_VFD.FAULTED) OTE(CL1T_21_VFD.READY) ];
				RC: "Motor CL1T_20 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_20_MTR.COMM)XIO(CL1T_20_MTR.E_STOP)XIO(F_CL1T_20_MSD_OFF)TON(CL1T_20_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_20_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_20_RDY) OTE(CL1T_20_VFD.FAULTED) ,XIO(CL1T_20_VFD.FAULTED) OTE(CL1T_20_VFD.READY) ];
				RC: "Motor CL1T_19 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_19_MTR.COMM)XIO(CL1T_19_MTR.E_STOP)XIO(F_CL1T_19_MSD_OFF)TON(CL1T_19_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_19_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_19_RDY) OTE(CL1T_19_VFD.FAULTED) ,XIO(CL1T_19_VFD.FAULTED) OTE(CL1T_19_VFD.READY) ];
				RC: "Motor CL1T_18 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_18_MTR.COMM)XIO(CL1T_18_MTR.E_STOP)XIO(F_CL1T_18_MSD_OFF)TON(CL1T_18_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_18_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_18_RDY) OTE(CL1T_18_VFD.FAULTED) ,XIO(CL1T_18_VFD.FAULTED) OTE(CL1T_18_VFD.READY) ];
				RC: "Motor CL1T_17 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_17_MTR.COMM)XIO(CL1T_17_MTR.E_STOP)XIO(F_CL1T_17_MSD_OFF)TON(CL1T_17_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_17_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_17_RDY) OTE(CL1T_17_VFD.FAULTED) ,XIO(CL1T_17_VFD.FAULTED) OTE(CL1T_17_VFD.READY) ];
				RC: "Motor CL1T_16 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_16_MTR.COMM)XIO(CL1T_16_MTR.E_STOP)XIO(F_CL1T_16_MSD_OFF)TON(CL1T_16_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_16_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_16_RDY) OTE(CL1T_16_VFD.FAULTED) ,XIO(CL1T_16_VFD.FAULTED) OTE(CL1T_16_VFD.READY) ];
				RC: "Motor CL1T_15 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_15_MTR.COMM)XIO(CL1T_15_MTR.E_STOP)XIO(F_CL1T_15_MSD_OFF)TON(CL1T_15_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_15_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_15_RDY) OTE(CL1T_15_VFD.FAULTED) ,XIO(CL1T_15_VFD.FAULTED) OTE(CL1T_15_VFD.READY) ];
				RC: "Motor CL1T_14 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_14_MTR.COMM)XIO(CL1T_14_MTR.E_STOP)XIO(F_CL1T_14_MSD_OFF)TON(CL1T_14_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_14_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_14_RDY) OTE(CL1T_14_VFD.FAULTED) ,XIO(CL1T_14_VFD.FAULTED) OTE(CL1T_14_VFD.READY) ];
				RC: "Motor CL1T_13 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_13_MTR.COMM)XIO(CL1T_13_MTR.E_STOP)XIO(F_CL1T_13_MSD_OFF)TON(CL1T_13_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_13_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_13_RDY) OTE(CL1T_13_VFD.FAULTED) ,XIO(CL1T_13_VFD.FAULTED) OTE(CL1T_13_VFD.READY) ];
				RC: "Motor CL1T_12 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_12_MTR.COMM)XIO(CL1T_12_MTR.E_STOP)XIO(F_CL1T_12_MSD_OFF)TON(CL1T_12_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_12_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_12_RDY) OTE(CL1T_12_VFD.FAULTED) ,XIO(CL1T_12_VFD.FAULTED) OTE(CL1T_12_VFD.READY) ];
				RC: "Motor CL1T_11 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_11_MTR.COMM)XIO(CL1T_11_MTR.E_STOP)XIO(F_CL1T_11_MSD_OFF)TON(CL1T_11_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_11_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_11_RDY) OTE(CL1T_11_VFD.FAULTED) ,XIO(CL1T_11_VFD.FAULTED) OTE(CL1T_11_VFD.READY) ];
				RC: "Motor CL1T_10 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_10_MTR.COMM)XIO(CL1T_10_MTR.E_STOP)XIO(F_CL1T_10_MSD_OFF)TON(CL1T_10_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_10_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_10_RDY) OTE(CL1T_10_VFD.FAULTED) ,XIO(CL1T_10_VFD.FAULTED) OTE(CL1T_10_VFD.READY) ];
				RC: "Motor CL1T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_09_MTR.COMM)XIO(CL1T_09_MTR.E_STOP)XIO(F_CL1T_09_MSD_OFF)TON(CL1T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_09_RDY) OTE(CL1T_09_VFD.FAULTED) ,XIO(CL1T_09_VFD.FAULTED) OTE(CL1T_09_VFD.READY) ];
				RC: "Motor CL1T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_08_MTR.COMM)XIO(CL1T_08_MTR.E_STOP)XIO(F_CL1T_08_MSD_OFF)TON(CL1T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_08_RDY) OTE(CL1T_08_VFD.FAULTED) ,XIO(CL1T_08_VFD.FAULTED) OTE(CL1T_08_VFD.READY) ];
				RC: "Motor CL1T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_07_MTR.COMM)XIO(CL1T_07_MTR.E_STOP)XIO(F_CL1T_07_MSD_OFF)TON(CL1T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_07_RDY) OTE(CL1T_07_VFD.FAULTED) ,XIO(CL1T_07_VFD.FAULTED) OTE(CL1T_07_VFD.READY) ];
				RC: "Motor CL1T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_06_MTR.COMM)XIO(CL1T_06_MTR.E_STOP)XIO(F_CL1T_06_MSD_OFF)TON(CL1T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_06_RDY) OTE(CL1T_06_VFD.FAULTED) ,XIO(CL1T_06_VFD.FAULTED) OTE(CL1T_06_VFD.READY) ];
				RC: "Motor CL1T_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_05_MTR.COMM)XIO(CL1T_05_MTR.E_STOP)XIO(F_CL1T_05_MSD_OFF)TON(CL1T_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_05_RDY) OTE(CL1T_05_VFD.FAULTED) ,XIO(CL1T_05_VFD.FAULTED) OTE(CL1T_05_VFD.READY) ];
				RC: "Motor CL1T_04 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_04_MTR.COMM)XIO(CL1T_04_MTR.E_STOP)XIO(F_CL1T_04_MSD_OFF)TON(CL1T_04_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_04_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_04_RDY) OTE(CL1T_04_VFD.FAULTED) ,XIO(CL1T_04_VFD.FAULTED) OTE(CL1T_04_VFD.READY) ];
				RC: "Motor CL1T_03 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_03_MTR.COMM)XIO(CL1T_03_MTR.E_STOP)XIO(F_CL1T_03_MSD_OFF)TON(CL1T_03_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_03_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_03_RDY) OTE(CL1T_03_VFD.FAULTED) ,XIO(CL1T_03_VFD.FAULTED) OTE(CL1T_03_VFD.READY) ];
				RC: "Motor CL1T_02 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_02_MTR.COMM)XIO(CL1T_02_MTR.E_STOP)XIO(F_CL1T_02_MSD_OFF)TON(CL1T_02_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_02_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_02_RDY) OTE(CL1T_02_VFD.FAULTED) ,XIO(CL1T_02_VFD.FAULTED) OTE(CL1T_02_VFD.READY) ];
				RC: "Motor CL1T_01 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL1T_01_MTR.COMM)XIO(CL1T_01_MTR.E_STOP)XIO(F_CL1T_01_MSD_OFF)TON(CL1T_01_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL1T_01_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL1T_01_RDY) OTE(CL1T_01_VFD.FAULTED) ,XIO(CL1T_01_VFD.FAULTED) OTE(CL1T_01_VFD.READY) ];
				RC: "Motor HX1T_10_A VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_10A_MTR.COMM)XIO(HX1T_10A_MTR.E_STOP)XIO(F_HX1T_10A_MSD_OFF)TON(HX1T_10A_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_10A_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_10A_RDY) OTE(HX1T_10A_VFD.FAULTED) ,XIO(HX1T_10A_VFD.FAULTED) OTE(HX1T_10A_VFD.READY) ];
		END_ROUTINE

		ROUTINE CL2T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL2T_01_EPB) ]OTE(O_CS1_CL2T_01_EPB);
				N: XIC(F_CL2T_01_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL2T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL2T_01_EPB) ]OTE(O_CS2_CL2T_01_EPB);
				N: XIC(F_CL2T_01_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL2T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL2T_03_PE_JAMMED) XIC(I_PE_CL2T_03) ,XIC(F_CL2T_02_PE_JAMMED) XIC(I_PE_CL2T_02) ,XIC(F_CL2T_01_PE_JAMMED) XIC(I_PE_CL2T_01) ,XIC(F_CL2T_02_CS1_E_STOP) XIO(I_CS1_CL2T_02_EPB) ,AFI() ]OTE(CS_CL2T_02_LTA1_FLASH);
				N: [[XIC(F_CL2T_03_PE_JAMMED) ,XIC(F_CL2T_02_PE_JAMMED) ,XIC(F_CL2T_01_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL2T_02_LTA1_FLASH) ,XIC(CS_CL2T_02_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_CL2T_02_RPBA);
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL2T_02_EPB) ]OTE(O_CS1_CL2T_02_EPB);
				N: XIC(F_CL2T_02_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL2T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL2T_02_EPB) ]OTE(O_CS2_CL2T_02_EPB);
				N: XIC(F_CL2T_02_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL2T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_CL2T_02_EPB) ]OTE(O_CS3_CL2T_02_EPB);
				N: XIC(F_CL2T_02_CS3_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS3_CL2T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL2T_04_PE_JAMMED) XIC(I_PE_CL2T_04) ,XIC(F_CL2T_03_PE_JAMMED) XIC(I_PE_CL2T_03) ,XIC(F_CL2T_04_CS_E_STOP) XIO(I_CS_CL2T_04_EPB) ,AFI() ]OTE(CS_CL2T_04_LTA_FLASH);
				N: [[XIC(F_CL2T_04_PE_JAMMED) ,XIC(F_CL2T_03_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL2T_04_LTA_FLASH) ,XIC(CS_CL2T_04_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL2T_04_RPBA);
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL2T_04_EPB) ]OTE(O_CS_CL2T_04_EPB);
				N: XIC(F_CL2T_04_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL2T_04_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL2T_08_PE_JAMMED) XIC(I_PE_CL2T_08) ,XIC(F_CL2T_07_PE_JAMMED) XIC(I_PE_CL2T_07) ,XIC(F_CL2T_06_PE_JAMMED) XIC(I_PE_CL2T_06) ,XIC(F_CL2T_05_PE_JAMMED) XIC(I_PE_CL2T_05) ,XIC(F_CL2T_05_CS1_E_STOP) XIO(I_CS1_CL2T_05_EPB) ,AFI() ]OTE(CS_CL2T_05_LTA1_FLASH);
				N: [[XIC(F_CL2T_08_PE_JAMMED) ,XIC(F_CL2T_07_PE_JAMMED) ,XIC(F_CL2T_06_PE_JAMMED) ,XIC(F_CL2T_05_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL2T_05_LTA1_FLASH) ,XIC(CS_CL2T_05_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_CL2T_05_RPBA);
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL2T_05_EPB) ]OTE(O_CS1_CL2T_05_EPB);
				N: XIC(F_CL2T_05_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL2T_05_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL2T_06_PE_JAMMED) XIC(I_PE_CL2T_06) ,XIC(F_CL2T_05_PE_JAMMED) XIC(I_PE_CL2T_05) ,XIC(F_CL2T_05_CS2_E_STOP) XIO(I_CS2_CL2T_05_EPB) ,AFI() ]OTE(CS_CL2T_05_LTA2_FLASH);
				N: [[XIC(F_CL2T_06_PE_JAMMED) ,XIC(F_CL2T_05_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL2T_05_LTA2_FLASH) ,XIC(CS_CL2T_05_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_CL2T_05_RPBA);
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL2T_05_EPB) ]OTE(O_CS2_CL2T_05_EPB);
				N: XIC(F_CL2T_05_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL2T_05_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL2T_09_PE_JAMMED) XIC(I_PE_CL2T_09) ,XIC(F_CL2T_08_PE_JAMMED) XIC(I_PE_CL2T_08) ,XIC(F_CL2T_09_CS_E_STOP) XIO(I_CS_CL2T_09_EPB) ,AFI() ]OTE(CS_CL2T_09_LTA_FLASH);
				N: [[XIC(F_CL2T_09_PE_JAMMED) ,XIC(F_CL2T_08_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL2T_09_LTA_FLASH) ,XIC(CS_CL2T_09_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL2T_09_RPBA);
				N: XIO(EZ_30201.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL2T_09_EPB) ]OTE(O_CS_CL2T_09_EPB);
				N: XIC(F_CL2T_09_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL2T_09_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_C.STATUS.DR_FLT_MONITOR) ,XIC(BM1_C.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL2T_02_LTA);
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL2T_02_LTR);
				N: [[XIC(BM1_C.STATUS.DR_FLT_ALARM) ,XIC(BM1_C.STATUS.MOL_ALARM) ,XIC(BM1_C.STATUS.JAM_ALARM) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) ,XIC(BM1_C.STATUS.E_STOP_ALARM) ,XIC(BM1_C.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL2T_02_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_C.STATUS.DR_FLT_MONITOR) ,XIC(BM1_C.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL2T_05_LTA);
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL2T_05_LTR);
				N: [[XIC(BM1_C.STATUS.DR_FLT_ALARM) ,XIC(BM1_C.STATUS.MOL_ALARM) ,XIC(BM1_C.STATUS.JAM_ALARM) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) ,XIC(BM1_C.STATUS.E_STOP_ALARM) ,XIC(BM1_C.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL2T_05_ALM);
		END_ROUTINE

		ROUTINE CL2T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_09_MTR.G) ,[XIC(CL2T_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_09_MTR.G) ,XIC(F_CL2T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.CASC) MOV(Status.ConvCascade,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.CASC) XIO(I_PE_CL2T_09) MOV(Status.ConvBagPresCasc,CL2T_09_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_09_MTR.G) ,XIC(F_CL2T_09_MSD_OFF) MOV(Status.ConvDisc,CL2T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_09_MTR.G) ,XIC(F_CL2T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_09_MTR.G) ,XIC(F_CL2T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_09_MTR.G) ,XIC(F_CL2T_09_OVRIDE) MOV(Status.ConvOverRide,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.E_STOP) XIO(CL2T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_09_MTR.G) ,XIC(F_CL2T_09_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_09_MTR.G) ,XIC(CL2T_09_MTR.COMM) MOV(Status.ConvCommFault,CL2T_09_MTR.G) ,MOV(CL2T_09_MTR.G,G_CL2T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_08_MTR.G) ,[XIC(CL2T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_08_MTR.G) ,XIC(F_CL2T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.CASC) MOV(Status.ConvCascade,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.CASC) XIO(I_PE_CL2T_08) MOV(Status.ConvBagPresCasc,CL2T_08_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_08_MTR.G) ,XIC(F_CL2T_08_MSD_OFF) MOV(Status.ConvDisc,CL2T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_08_MTR.G) ,XIC(F_CL2T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_08_MTR.G) ,XIC(F_CL2T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_08_MTR.G) ,XIC(F_CL2T_08_OVRIDE) MOV(Status.ConvOverRide,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.E_STOP) XIO(CL2T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_08_MTR.G) ,XIC(F_CL2T_08_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_08_MTR.G) ,XIC(CL2T_08_MTR.COMM) MOV(Status.ConvCommFault,CL2T_08_MTR.G) ,MOV(CL2T_08_MTR.G,G_CL2T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_07_MTR.G) ,[XIC(CL2T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_07_MTR.G) ,XIC(F_CL2T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.CASC) MOV(Status.ConvCascade,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.CASC) XIO(I_PE_CL2T_07) MOV(Status.ConvBagPresCasc,CL2T_07_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_07_MTR.G) ,XIC(F_CL2T_07_MSD_OFF) MOV(Status.ConvDisc,CL2T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_07_MTR.G) ,XIC(F_CL2T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_07_MTR.G) ,XIC(F_CL2T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_07_MTR.G) ,XIC(F_CL2T_07_OVRIDE) MOV(Status.ConvOverRide,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.E_STOP) XIO(CL2T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_07_MTR.G) ,XIC(F_CL2T_07_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_07_MTR.G) ,XIC(CL2T_07_MTR.COMM) MOV(Status.ConvCommFault,CL2T_07_MTR.G) ,MOV(CL2T_07_MTR.G,G_CL2T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_06_MTR.G) ,[XIC(CL2T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_06_MTR.G) ,XIC(F_CL2T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.CASC) MOV(Status.ConvCascade,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.CASC) XIO(I_PE_CL2T_06) MOV(Status.ConvBagPresCasc,CL2T_06_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_06_MTR.G) ,XIC(F_CL2T_06_MSD_OFF) MOV(Status.ConvDisc,CL2T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_06_MTR.G) ,XIC(F_CL2T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_06_MTR.G) ,XIC(F_CL2T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_06_MTR.G) ,XIC(F_CL2T_06_OVRIDE) MOV(Status.ConvOverRide,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.E_STOP) XIO(CL2T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_06_MTR.G) ,XIC(F_CL2T_06_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_06_MTR.G) ,XIC(CL2T_06_MTR.COMM) MOV(Status.ConvCommFault,CL2T_06_MTR.G) ,MOV(CL2T_06_MTR.G,G_CL2T_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_05_MTR.G) ,[XIC(CL2T_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_05_MTR.G) ,XIC(F_CL2T_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.CASC) MOV(Status.ConvCascade,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.CASC) XIO(I_PE_CL2T_05) MOV(Status.ConvBagPresCasc,CL2T_05_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_05_MTR.G) ,XIC(F_CL2T_05_MSD_OFF) MOV(Status.ConvDisc,CL2T_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_05_MTR.G) ,XIC(F_CL2T_05_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_05_MTR.G) ,XIC(F_CL2T_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_05_MTR.G) ,XIC(F_CL2T_05_OVRIDE) MOV(Status.ConvOverRide,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.E_STOP) XIO(CL2T_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_05_MTR.G) ,XIC(F_CL2T_05_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_05_MTR.G) ,XIC(CL2T_05_MTR.COMM) MOV(Status.ConvCommFault,CL2T_05_MTR.G) ,MOV(CL2T_05_MTR.G,G_CL2T_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_04_MTR.G) ,[XIC(CL2T_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_04_MTR.G) ,XIC(F_CL2T_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.CASC) MOV(Status.ConvCascade,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.CASC) XIO(I_PE_CL2T_04) MOV(Status.ConvBagPresCasc,CL2T_04_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_04_MTR.G) ,XIC(F_CL2T_04_MSD_OFF) MOV(Status.ConvDisc,CL2T_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_04_MTR.G) ,XIC(F_CL2T_04_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_04_MTR.G) ,XIC(F_CL2T_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_04_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_04_MTR.G) ,XIC(F_CL2T_04_OVRIDE) MOV(Status.ConvOverRide,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.E_STOP) XIO(CL2T_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_04_MTR.G) ,XIC(F_CL2T_04_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_04_MTR.G) ,XIC(CL2T_04_MTR.COMM) MOV(Status.ConvCommFault,CL2T_04_MTR.G) ,MOV(CL2T_04_MTR.G,G_CL2T_04_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_03_MTR.G) ,[XIC(CL2T_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_03_MTR.G) ,XIC(F_CL2T_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.CASC) MOV(Status.ConvCascade,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.CASC) XIO(I_PE_CL2T_03) MOV(Status.ConvBagPresCasc,CL2T_03_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_03_MTR.G) ,XIC(F_CL2T_03_MSD_OFF) MOV(Status.ConvDisc,CL2T_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_03_MTR.G) ,XIC(F_CL2T_03_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_03_MTR.G) ,XIC(F_CL2T_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_03_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_03_MTR.G) ,XIC(F_CL2T_03_OVRIDE) MOV(Status.ConvOverRide,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.E_STOP) XIO(CL2T_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_03_MTR.G) ,XIC(F_CL2T_03_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_03_MTR.G) ,XIC(CL2T_03_MTR.COMM) MOV(Status.ConvCommFault,CL2T_03_MTR.G) ,MOV(CL2T_03_MTR.G,G_CL2T_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_02_MTR.G) ,[XIC(CL2T_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_02_MTR.G) ,XIC(F_CL2T_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.CASC) MOV(Status.ConvCascade,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.CASC) XIO(I_PE_CL2T_02) MOV(Status.ConvBagPresCasc,CL2T_02_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_02_MTR.G) ,XIC(F_CL2T_02_MSD_OFF) MOV(Status.ConvDisc,CL2T_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_02_MTR.G) ,XIC(F_CL2T_02_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_02_MTR.G) ,XIC(F_CL2T_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_02_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_02_MTR.G) ,XIC(F_CL2T_02_OVRIDE) MOV(Status.ConvOverRide,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.E_STOP) XIO(CL2T_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_02_MTR.G) ,XIC(F_CL2T_02_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_02_MTR.G) ,XIC(CL2T_02_MTR.COMM) MOV(Status.ConvCommFault,CL2T_02_MTR.G) ,MOV(CL2T_02_MTR.G,G_CL2T_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.RUNNING) MOV(Status.ConvRunning,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL2T_01_MTR.G) ,[XIC(CL2T_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL2T_01_MTR.G) ,XIC(F_CL2T_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.CASC) MOV(Status.ConvCascade,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.CASC) XIO(I_PE_CL2T_01) MOV(Status.ConvBagPresCasc,CL2T_01_MTR.G) ,AFI() MOV(Status.ConvFull,CL2T_01_MTR.G) ,XIC(F_CL2T_01_MSD_OFF) MOV(Status.ConvDisc,CL2T_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.JAMMED) MOV(Status.ConvJammed,CL2T_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL2T_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL2T_01_MTR.G) ,XIC(F_CL2T_01_VFD_FAULT) MOV(Status.ConvVFDFlt,CL2T_01_MTR.G) ,XIC(F_CL2T_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL2T_01_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL2T_01_MTR.G) ,XIC(F_CL2T_01_OVRIDE) MOV(Status.ConvOverRide,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.E_STOP) XIO(CL2T_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL2T_01_MTR.G) ,XIC(F_CL2T_01_OUTSERV) MOV(Status.ConvOutOfServ,CL2T_01_MTR.G) ,XIC(CL2T_01_MTR.COMM) MOV(Status.ConvCommFault,CL2T_01_MTR.G) ,MOV(CL2T_01_MTR.G,G_CL2T_01_STS) ];
		END_ROUTINE

		ROUTINE CL2T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_09_MTR.CONV_RUN)RTO(CL2T_09_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL2T_09_RPBA) XIC(CL2T_09_PE.JAM_TMR.DN) ,XIO(CL2T_09_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_09)RES(CL2T_09_PE.JAM_TMR);
				N: XIC(CL2T_09_PE.JAM_TMR.DN)[XIO(F_CL2T_09_PE_JAMMED) [ADD(S_CL2T_09_PE_JAM,1,S_CL2T_09_PE_JAM) ,OTE(CL2T_09_PE.JAM_ONS) ] ,OTE(F_CL2T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_08_MTR.CONV_RUN)RTO(CL2T_08_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_CL2T_05_RPBA) ,XIC(I_CS_CL2T_09_RPBA) ] XIC(CL2T_08_PE.JAM_TMR.DN) ,XIO(CL2T_08_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_08)RES(CL2T_08_PE.JAM_TMR);
				N: XIC(CL2T_08_PE.JAM_TMR.DN)[XIO(F_CL2T_08_PE_JAMMED) [ADD(S_CL2T_08_PE_JAM,1,S_CL2T_08_PE_JAM) ,OTE(CL2T_08_PE.JAM_ONS) ] ,OTE(F_CL2T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_07_MTR.CONV_RUN)RTO(CL2T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL2T_05_RPBA) XIC(CL2T_07_PE.JAM_TMR.DN) ,XIO(CL2T_07_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_07)RES(CL2T_07_PE.JAM_TMR);
				N: XIC(CL2T_07_PE.JAM_TMR.DN)[XIO(F_CL2T_07_PE_JAMMED) [ADD(S_CL2T_07_PE_JAM,1,S_CL2T_07_PE_JAM) ,OTE(CL2T_07_PE.JAM_ONS) ] ,OTE(F_CL2T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_06_MTR.CONV_RUN)RTO(CL2T_06_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_CL2T_05_RPBA) ,XIC(I_CS2_CL2T_05_RPBA) ] XIC(CL2T_06_PE.JAM_TMR.DN) ,XIO(CL2T_06_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_06)RES(CL2T_06_PE.JAM_TMR);
				N: XIC(CL2T_06_PE.JAM_TMR.DN)[XIO(F_CL2T_06_PE_JAMMED) [ADD(S_CL2T_06_PE_JAM,1,S_CL2T_06_PE_JAM) ,OTE(CL2T_06_PE.JAM_ONS) ] ,OTE(F_CL2T_06_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_05_MTR.CONV_RUN)RTO(CL2T_05_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_CL2T_05_RPBA) ,XIC(I_CS2_CL2T_05_RPBA) ] XIC(CL2T_05_PE.JAM_TMR.DN) ,XIO(CL2T_05_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_05)RES(CL2T_05_PE.JAM_TMR);
				N: XIC(CL2T_05_PE.JAM_TMR.DN)[XIO(F_CL2T_05_PE_JAMMED) [ADD(S_CL2T_05_PE_JAM,1,S_CL2T_05_PE_JAM) ,OTE(CL2T_05_PE.JAM_ONS) ] ,OTE(F_CL2T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_04_MTR.CONV_RUN)RTO(CL2T_04_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL2T_04_RPBA) XIC(CL2T_04_PE.JAM_TMR.DN) ,XIO(CL2T_04_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_04)RES(CL2T_04_PE.JAM_TMR);
				N: XIC(CL2T_04_PE.JAM_TMR.DN)[XIO(F_CL2T_04_PE_JAMMED) [ADD(S_CL2T_04_PE_JAM,1,S_CL2T_04_PE_JAM) ,OTE(CL2T_04_PE.JAM_ONS) ] ,OTE(F_CL2T_04_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_03_MTR.CONV_RUN)RTO(CL2T_03_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_CL2T_02_RPBA) ,XIC(I_CS_CL2T_04_RPBA) ] XIC(CL2T_03_PE.JAM_TMR.DN) ,XIO(CL2T_03_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_03)RES(CL2T_03_PE.JAM_TMR);
				N: XIC(CL2T_03_PE.JAM_TMR.DN)[XIO(F_CL2T_03_PE_JAMMED) [ADD(S_CL2T_03_PE_JAM,1,S_CL2T_03_PE_JAM) ,OTE(CL2T_03_PE.JAM_ONS) ] ,OTE(F_CL2T_03_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_02_MTR.CONV_RUN)RTO(CL2T_02_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL2T_02_RPBA) XIC(CL2T_02_PE.JAM_TMR.DN) ,XIO(CL2T_02_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_02)RES(CL2T_02_PE.JAM_TMR);
				N: XIC(CL2T_02_PE.JAM_TMR.DN)[XIO(F_CL2T_02_PE_JAMMED) [ADD(S_CL2T_02_PE_JAM,1,S_CL2T_02_PE_JAM) ,OTE(CL2T_02_PE.JAM_ONS) ] ,OTE(F_CL2T_02_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL2T_01_MTR.CONV_RUN)RTO(CL2T_01_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL2T_02_RPBA) XIC(CL2T_01_PE.JAM_TMR.DN) ,XIO(CL2T_01_PE.JAM_TMR.DN) ]XIC(I_PE_CL2T_01)RES(CL2T_01_PE.JAM_TMR);
				N: XIC(CL2T_01_PE.JAM_TMR.DN)[XIO(F_CL2T_01_PE_JAMMED) [ADD(S_CL2T_01_PE_JAM,1,S_CL2T_01_PE_JAM) ,OTE(CL2T_01_PE.JAM_ONS) ] ,OTE(F_CL2T_01_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE CL2T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_02_SPBG) ,XIC(I_CS1_CL2T_01_SPBG) ,XIC(I_CS2_CL2T_01_SPBG) ,XIC(I_CS1_CL2T_02_SPBG) ,XIC(I_CS2_CL2T_02_SPBG) ,XIC(I_CS3_CL2T_02_SPBG) ,AFI() ]OTE(CL2T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(CL2T_09_MTR.CONV_RUN)XIC(CL2T_08_MTR.CONV_RUN)XIC(CL2T_07_MTR.CONV_RUN)XIC(CL2T_06_MTR.CONV_RUN)XIC(CL2T_05_MTR.CONV_RUN)XIC(CL2T_04_MTR.CONV_RUN)XIC(CL2T_03_MTR.CONV_RUN)XIC(CL2T_02_MTR.CONV_RUN)XIC(CL2T_01_MTR.CONV_RUN)OTE(CL2T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_CL2T_09) ,XIO(I_PE_CL2T_08) ,XIO(I_PE_CL2T_07) ,XIO(I_PE_CL2T_06) ,XIO(I_PE_CL2T_05) ,XIO(I_PE_CL2T_04) ,XIO(I_PE_CL2T_03) ,XIO(I_PE_CL2T_02) ,XIO(I_PE_CL2T_01) ,AFI() ]OTE(CL2T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(CL2T.MTR_GRP.START) ,XIC(CL2T.MTR_GRP.PEs) XIO(CL2T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(CL2T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(CL2T.MTR_GRP.RUN_LATCH)XIC(CL2T.MTR_GRP.PEs)OTE(CL2T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(CL2T.MTR_GRP.RUN_EXPAND)RTO(CL2T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(CL2T.MTR_GRP.START) ,XIC(CL2T.MTR_GRP.RUN_LATCH) ]XIO(CL2T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(CL2T.STATUS.FIRE_ALM)OTE(CL2T.MTR_GRP.RUN_LATCH);
				RC: "Motor CL2T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(CL2T_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_09_MTR.E_STOP)[XIC(CL2T_09_VFD.READY) XIO(CL2T_09_MTR.JAMMED) ,XIC(F_CL2T_09_OVRIDE) ]XIO(F_CL2T_09_MSD_OFF)XIO(F_CL2T_09_OUTSERV)XIO(CL2T_09_MTR.COMM)OTE(CL2T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_09_OVRIDE) ]XIC(CL2T_09_MTR.NO_FAULT)TON(CL2T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_09_MTR.IM_TMR.DN)[XIO(CL2T_09_MTR.INTL_MTR) OTE(CL2T_09_MTR.IM_ONS) ,OTE(CL2T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL2T_09_PE.FILT_NEG_XITN)RES(CL2T_09_MTR.T2H_SPACE_TMR);
				N: XIC(I_INT_O4_06_RUN)RTO(CL2T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL2T_09_PE.POS_XITN) XIC(CL2T_09_MTR.INTL_MTR) ,XIC(CL2T_09_MTR.T2H_SPACE) ]XIO(CL2T_09_MTR.T2H_SPACE_TMR.DN)OTE(CL2T_09_MTR.T2H_SPACE);
				N: XIC(CL2T_09_MTR.T2H_SPACE)OTE(CL2T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(zzzO4_06ZZ_MTR_ON_TMR_DN) XIC(CL2T_09_MTR.OFF_TMR.DN) ,XIO(zzzO4_06ZZ_MTR_IM_ONS) XIC(CL2T_09_MTR.IM_ONS) ,XIC(CL2T_09_MTR.ANTI_CASC) XIC(I_PE_CL2T_09) ]OTE(CL2T_09_MTR.START_EN);
				N: [XIO(zzzO4_06ZZ_MTR_ON_TMR_DN) XIO(I_PE_CL2T_09) ,XIO(CL2T_09_MTR.ANTI_CASC) XIC(CL2T_09_MTR.SPACE) ]OTE(CL2T_09_MTR.STOP);
				N: XIC(CL2T_09_MTR.INTL_MTR)[[XIC(CL2T_09_MTR.START_EN) ,XIC(CL2T_09_MTR.CONV_RUN) ] XIO(CL2T_09_MTR.STOP) ,XIC(F_CL2T_09_OVRIDE) ][OTE(CL2T_09_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_09_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_09_MTR.CONV_RUN)TON(CL2T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_09_MTR.CONV_RUN)TON(CL2T_09_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_09_MSD_OFF)OTE(CL2T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_08_MTR.E_STOP)[XIC(CL2T_08_VFD.READY) XIO(CL2T_08_MTR.JAMMED) ,XIC(F_CL2T_08_OVRIDE) ]XIO(F_CL2T_08_MSD_OFF)XIO(F_CL2T_08_OUTSERV)XIO(CL2T_08_MTR.COMM)OTE(CL2T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_08_OVRIDE) ]XIC(CL2T_08_MTR.NO_FAULT)TON(CL2T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_08_MTR.IM_TMR.DN)[XIO(CL2T_08_MTR.INTL_MTR) OTE(CL2T_08_MTR.IM_ONS) ,OTE(CL2T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL2T_08_PE.FILT_NEG_XITN)RES(CL2T_08_MTR.T2H_SPACE_TMR);
				N: XIC(CL2T_09_MTR.CONV_RUN)RTO(CL2T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL2T_08_PE.POS_XITN) XIC(CL2T_08_MTR.INTL_MTR) ,XIC(CL2T_08_MTR.T2H_SPACE) ]XIO(CL2T_08_MTR.T2H_SPACE_TMR.DN)OTE(CL2T_08_MTR.T2H_SPACE);
				N: XIC(CL2T_08_MTR.T2H_SPACE)OTE(CL2T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL2T_09_MTR.ON_TMR.DN) XIC(CL2T_08_MTR.OFF_TMR.DN) ,XIO(CL2T_09_MTR.IM_ONS) XIC(CL2T_08_MTR.IM_ONS) ,XIC(CL2T_08_MTR.ANTI_CASC) XIC(I_PE_CL2T_08) ]OTE(CL2T_08_MTR.START_EN);
				N: [XIO(CL2T_09_MTR.ON_TMR.DN) XIO(I_PE_CL2T_08) ,XIO(CL2T_08_MTR.ANTI_CASC) XIC(CL2T_08_MTR.SPACE) ]OTE(CL2T_08_MTR.STOP);
				N: XIC(CL2T_08_MTR.INTL_MTR)[[XIC(CL2T_08_MTR.START_EN) ,XIC(CL2T_08_MTR.CONV_RUN) ] XIO(CL2T_08_MTR.STOP) ,XIC(F_CL2T_08_OVRIDE) ][OTE(CL2T_08_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_08_MTR.CONV_RUN)TON(CL2T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_08_MTR.CONV_RUN)TON(CL2T_08_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_08_MSD_OFF)OTE(CL2T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_07_MTR.E_STOP)[XIC(CL2T_07_VFD.READY) XIO(CL2T_07_MTR.JAMMED) ,XIC(F_CL2T_07_OVRIDE) ]XIO(F_CL2T_07_MSD_OFF)XIO(F_CL2T_07_OUTSERV)XIO(CL2T_07_MTR.COMM)OTE(CL2T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_07_OVRIDE) ]XIC(CL2T_07_MTR.NO_FAULT)TON(CL2T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_07_MTR.IM_TMR.DN)[XIO(CL2T_07_MTR.INTL_MTR) OTE(CL2T_07_MTR.IM_ONS) ,OTE(CL2T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL2T_07_PE.FILT_NEG_XITN)RES(CL2T_07_MTR.T2H_SPACE_TMR);
				N: XIC(CL2T_08_MTR.CONV_RUN)RTO(CL2T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL2T_07_PE.POS_XITN) XIC(CL2T_07_MTR.INTL_MTR) ,XIC(CL2T_07_MTR.T2H_SPACE) ]XIO(CL2T_07_MTR.T2H_SPACE_TMR.DN)OTE(CL2T_07_MTR.T2H_SPACE);
				N: XIC(CL2T_07_MTR.T2H_SPACE)OTE(CL2T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL2T_08_MTR.ON_TMR.DN) XIC(CL2T_07_MTR.OFF_TMR.DN) ,XIO(CL2T_08_MTR.IM_ONS) XIC(CL2T_07_MTR.IM_ONS) ,XIC(CL2T_07_MTR.ANTI_CASC) XIC(I_PE_CL2T_07) ]OTE(CL2T_07_MTR.START_EN);
				N: [XIO(CL2T_08_MTR.ON_TMR.DN) XIO(I_PE_CL2T_07) ,XIO(CL2T_07_MTR.ANTI_CASC) XIC(CL2T_07_MTR.SPACE) ]OTE(CL2T_07_MTR.STOP);
				N: XIC(CL2T_07_MTR.INTL_MTR)[[XIC(CL2T_07_MTR.START_EN) ,XIC(CL2T_07_MTR.CONV_RUN) ] XIO(CL2T_07_MTR.STOP) ,XIC(F_CL2T_07_OVRIDE) ][OTE(CL2T_07_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_07_MTR.CONV_RUN)TON(CL2T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_07_MTR.CONV_RUN)TON(CL2T_07_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_07_MSD_OFF)OTE(CL2T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_06_MTR.E_STOP)[XIC(CL2T_06_VFD.READY) XIO(CL2T_06_MTR.JAMMED) ,XIC(F_CL2T_06_OVRIDE) ]XIO(F_CL2T_06_MSD_OFF)XIO(F_CL2T_06_OUTSERV)XIO(CL2T_06_MTR.COMM)OTE(CL2T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_06_OVRIDE) ]XIC(CL2T_06_MTR.NO_FAULT)TON(CL2T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_06_MTR.IM_TMR.DN)[XIO(CL2T_06_MTR.INTL_MTR) OTE(CL2T_06_MTR.IM_ONS) ,OTE(CL2T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL2T_06_PE.FILT_NEG_XITN)RES(CL2T_06_MTR.T2H_SPACE_TMR);
				N: XIC(CL2T_07_MTR.CONV_RUN)RTO(CL2T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL2T_06_PE.POS_XITN) XIC(CL2T_06_MTR.INTL_MTR) ,XIC(CL2T_06_MTR.T2H_SPACE) ]XIO(CL2T_06_MTR.T2H_SPACE_TMR.DN)OTE(CL2T_06_MTR.T2H_SPACE);
				N: XIC(CL2T_06_MTR.T2H_SPACE)OTE(CL2T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL2T_07_MTR.ON_TMR.DN) XIC(CL2T_06_MTR.OFF_TMR.DN) ,XIO(CL2T_07_MTR.IM_ONS) XIC(CL2T_06_MTR.IM_ONS) ,XIC(CL2T_06_MTR.ANTI_CASC) XIC(I_PE_CL2T_06) ]OTE(CL2T_06_MTR.START_EN);
				N: [XIO(CL2T_07_MTR.ON_TMR.DN) XIO(I_PE_CL2T_06) ,XIO(CL2T_06_MTR.ANTI_CASC) XIC(CL2T_06_MTR.SPACE) ]OTE(CL2T_06_MTR.STOP);
				N: XIC(CL2T_06_MTR.INTL_MTR)[[XIC(CL2T_06_MTR.START_EN) ,XIC(CL2T_06_MTR.CONV_RUN) ] XIO(CL2T_06_MTR.STOP) ,XIC(F_CL2T_06_OVRIDE) ][OTE(CL2T_06_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_06_MTR.CONV_RUN)TON(CL2T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_06_MTR.CONV_RUN)TON(CL2T_06_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_06_MSD_OFF)OTE(CL2T_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_05_MTR.E_STOP)[XIC(CL2T_05_VFD.READY) XIO(CL2T_05_MTR.JAMMED) ,XIC(F_CL2T_05_OVRIDE) ]XIO(F_CL2T_05_MSD_OFF)XIO(F_CL2T_05_OUTSERV)XIO(CL2T_05_MTR.COMM)OTE(CL2T_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_05_OVRIDE) ]XIC(CL2T_05_MTR.NO_FAULT)TON(CL2T_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_05_MTR.IM_TMR.DN)[XIO(CL2T_05_MTR.INTL_MTR) OTE(CL2T_05_MTR.IM_ONS) ,OTE(CL2T_05_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL2T_06_MTR.ON_TMR.DN) XIC(CL2T_05_MTR.OFF_TMR.DN) ,XIO(CL2T_06_MTR.IM_ONS) XIC(CL2T_05_MTR.IM_ONS) ,XIC(CL2T_05_MTR.ANTI_CASC) XIC(I_PE_CL2T_05) ]OTE(CL2T_05_MTR.START_EN);
				N: XIO(CL2T_06_MTR.ON_TMR.DN)XIO(I_PE_CL2T_05)OTE(CL2T_05_MTR.STOP);
				N: XIC(CL2T_05_MTR.INTL_MTR)[[XIC(CL2T_05_MTR.START_EN) ,XIC(CL2T_05_MTR.CONV_RUN) ] XIO(CL2T_05_MTR.STOP) ,XIC(F_CL2T_05_OVRIDE) ][OTE(CL2T_05_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_05_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_05_MTR.CONV_RUN)TON(CL2T_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_05_MTR.CONV_RUN)TON(CL2T_05_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_05_MSD_OFF)OTE(CL2T_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_04_MTR.E_STOP)[XIC(CL2T_04_VFD.READY) XIO(CL2T_04_MTR.JAMMED) ,XIC(F_CL2T_04_OVRIDE) ]XIO(F_CL2T_04_MSD_OFF)XIO(F_CL2T_04_OUTSERV)XIO(CL2T_04_MTR.COMM)OTE(CL2T_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_04_OVRIDE) ]XIC(CL2T_04_MTR.NO_FAULT)TON(CL2T_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_04_MTR.IM_TMR.DN)[XIO(CL2T_04_MTR.INTL_MTR) OTE(CL2T_04_MTR.IM_ONS) ,OTE(CL2T_04_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL2T_05_MTR.ON_TMR.DN) XIC(CL2T_04_MTR.OFF_TMR.DN) ,XIO(CL2T_05_MTR.IM_ONS) XIC(CL2T_04_MTR.IM_ONS) ,XIC(CL2T_04_MTR.ANTI_CASC) XIC(I_PE_CL2T_04) ]OTE(CL2T_04_MTR.START_EN);
				N: XIO(CL2T_05_MTR.ON_TMR.DN)XIO(I_PE_CL2T_04)OTE(CL2T_04_MTR.STOP);
				N: XIC(CL2T_04_MTR.INTL_MTR)[[XIC(CL2T_04_MTR.START_EN) ,XIC(CL2T_04_MTR.CONV_RUN) ] XIO(CL2T_04_MTR.STOP) ,XIC(F_CL2T_04_OVRIDE) ][OTE(CL2T_04_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_04_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_04_MTR.CONV_RUN)TON(CL2T_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_04_MTR.CONV_RUN)TON(CL2T_04_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_04_MSD_OFF)OTE(CL2T_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_03_MTR.E_STOP)[XIC(CL2T_03_VFD.READY) XIO(CL2T_03_MTR.JAMMED) ,XIC(F_CL2T_03_OVRIDE) ]XIO(F_CL2T_03_MSD_OFF)XIO(F_CL2T_03_OUTSERV)XIO(CL2T_03_MTR.COMM)OTE(CL2T_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_03_OVRIDE) ]XIC(CL2T_03_MTR.NO_FAULT)TON(CL2T_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_03_MTR.IM_TMR.DN)[XIO(CL2T_03_MTR.INTL_MTR) OTE(CL2T_03_MTR.IM_ONS) ,OTE(CL2T_03_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL2T_04_MTR.ON_TMR.DN) XIC(CL2T_03_MTR.OFF_TMR.DN) ,XIO(CL2T_04_MTR.IM_ONS) XIC(CL2T_03_MTR.IM_ONS) ,XIC(CL2T_03_MTR.ANTI_CASC) XIC(I_PE_CL2T_03) ]OTE(CL2T_03_MTR.START_EN);
				N: XIO(CL2T_04_MTR.ON_TMR.DN)XIO(I_PE_CL2T_03)OTE(CL2T_03_MTR.STOP);
				N: XIC(CL2T_03_MTR.INTL_MTR)[[XIC(CL2T_03_MTR.START_EN) ,XIC(CL2T_03_MTR.CONV_RUN) ] XIO(CL2T_03_MTR.STOP) ,XIC(F_CL2T_03_OVRIDE) ][OTE(CL2T_03_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_03_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_03_MTR.CONV_RUN)TON(CL2T_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_03_MTR.CONV_RUN)TON(CL2T_03_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_03_MSD_OFF)OTE(CL2T_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_02_MTR.E_STOP)[XIC(CL2T_02_VFD.READY) XIO(CL2T_02_MTR.JAMMED) ,XIC(F_CL2T_02_OVRIDE) ]XIO(F_CL2T_02_MSD_OFF)XIO(F_CL2T_02_OUTSERV)XIO(CL2T_02_MTR.COMM)OTE(CL2T_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_02_OVRIDE) ]XIC(CL2T_02_MTR.NO_FAULT)TON(CL2T_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_02_MTR.IM_TMR.DN)[XIO(CL2T_02_MTR.INTL_MTR) OTE(CL2T_02_MTR.IM_ONS) ,OTE(CL2T_02_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL2T_03_MTR.ON_TMR.DN) XIC(CL2T_02_MTR.OFF_TMR.DN) ,XIO(CL2T_03_MTR.IM_ONS) XIC(CL2T_02_MTR.IM_ONS) ,XIC(CL2T_02_MTR.ANTI_CASC) XIC(I_PE_CL2T_02) ]OTE(CL2T_02_MTR.START_EN);
				N: XIO(CL2T_03_MTR.ON_TMR.DN)XIO(I_PE_CL2T_02)OTE(CL2T_02_MTR.STOP);
				N: XIC(CL2T_02_MTR.INTL_MTR)[[XIC(CL2T_02_MTR.START_EN) ,XIC(CL2T_02_MTR.CONV_RUN) ] XIO(CL2T_02_MTR.STOP) ,XIC(F_CL2T_02_OVRIDE) ][OTE(CL2T_02_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_02_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_02_MTR.CONV_RUN)TON(CL2T_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_02_MTR.CONV_RUN)TON(CL2T_02_MTR.OFF_TMR,?,?);
				RC: "Motor CL2T_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL2T_02_MSD_OFF)OTE(CL2T_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL2T_01_MTR.E_STOP)[XIC(CL2T_01_VFD.READY) XIO(CL2T_01_MTR.JAMMED) ,XIC(F_CL2T_01_OVRIDE) ]XIO(F_CL2T_01_MSD_OFF)XIO(F_CL2T_01_OUTSERV)XIO(CL2T_01_MTR.COMM)OTE(CL2T_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL2T.MTR_GRP.RUN_LATCH) ,XIC(F_CL2T_01_OVRIDE) ]XIC(CL2T_01_MTR.NO_FAULT)TON(CL2T_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL2T_01_MTR.IM_TMR.DN)[XIO(CL2T_01_MTR.INTL_MTR) OTE(CL2T_01_MTR.IM_ONS) ,OTE(CL2T_01_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL2T_02_MTR.ON_TMR.DN) XIC(CL2T_01_MTR.OFF_TMR.DN) ,XIO(CL2T_02_MTR.IM_ONS) XIC(CL2T_01_MTR.IM_ONS) ,XIC(CL2T_01_MTR.ANTI_CASC) XIC(I_PE_CL2T_01) ]OTE(CL2T_01_MTR.START_EN);
				N: XIO(CL2T_02_MTR.ON_TMR.DN)XIO(I_PE_CL2T_01)OTE(CL2T_01_MTR.STOP);
				N: XIC(CL2T_01_MTR.INTL_MTR)[[XIC(CL2T_01_MTR.START_EN) ,XIC(CL2T_01_MTR.CONV_RUN) ] XIO(CL2T_01_MTR.STOP) ,XIC(F_CL2T_01_OVRIDE) ][OTE(CL2T_01_MTR.CONV_RUN) ,OTE(O_VFD_CL2T_01_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL2T_01_MTR.CONV_RUN)TON(CL2T_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL2T_01_MTR.CONV_RUN)TON(CL2T_01_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE CL2T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(CL2T_09_MTR.COMM)[[XIO(I_PE_CL2T_09) ,XIC(CL2T_09_PE.TOF.DN) ] TON(CL2T_09_PE.TON,?,?) ,XIO(I_PE_CL2T_09) XIC(CL2T_09_PE.TON.DN) TOF(CL2T_09_PE.TOF,?,?) ,XIC(CL2T_09_PE.TOF.DN) OTE(CL2T_09_PE.FILT) ];
				N: XIC(CL2T_09_PE.FILT)[XIO(CL2T_09_PE.FILT_POS_XITN_MEM) OTE(CL2T_09_PE.FILT_POS_XITN) ,OTE(CL2T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_09_PE.FILT)[XIO(CL2T_09_PE.FILT_NEG_XITN_MEM) OTE(CL2T_09_PE.FILT_NEG_XITN) ,OTE(CL2T_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL2T_09)[XIO(CL2T_09_PE.POS_XITN_MEM) OTE(CL2T_09_PE.POS_XITN) ,OTE(CL2T_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_08_MTR.COMM)[[XIO(I_PE_CL2T_08) ,XIC(CL2T_08_PE.TOF.DN) ] TON(CL2T_08_PE.TON,?,?) ,XIO(I_PE_CL2T_08) XIC(CL2T_08_PE.TON.DN) TOF(CL2T_08_PE.TOF,?,?) ,XIC(CL2T_08_PE.TOF.DN) OTE(CL2T_08_PE.FILT) ];
				N: XIC(CL2T_08_PE.FILT)[XIO(CL2T_08_PE.FILT_POS_XITN_MEM) OTE(CL2T_08_PE.FILT_POS_XITN) ,OTE(CL2T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_08_PE.FILT)[XIO(CL2T_08_PE.FILT_NEG_XITN_MEM) OTE(CL2T_08_PE.FILT_NEG_XITN) ,OTE(CL2T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL2T_08)[XIO(CL2T_08_PE.POS_XITN_MEM) OTE(CL2T_08_PE.POS_XITN) ,OTE(CL2T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_07_MTR.COMM)[[XIO(I_PE_CL2T_07) ,XIC(CL2T_07_PE.TOF.DN) ] TON(CL2T_07_PE.TON,?,?) ,XIO(I_PE_CL2T_07) XIC(CL2T_07_PE.TON.DN) TOF(CL2T_07_PE.TOF,?,?) ,XIC(CL2T_07_PE.TOF.DN) OTE(CL2T_07_PE.FILT) ];
				N: XIC(CL2T_07_PE.FILT)[XIO(CL2T_07_PE.FILT_POS_XITN_MEM) OTE(CL2T_07_PE.FILT_POS_XITN) ,OTE(CL2T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_07_PE.FILT)[XIO(CL2T_07_PE.FILT_NEG_XITN_MEM) OTE(CL2T_07_PE.FILT_NEG_XITN) ,OTE(CL2T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL2T_07)[XIO(CL2T_07_PE.POS_XITN_MEM) OTE(CL2T_07_PE.POS_XITN) ,OTE(CL2T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_06_MTR.COMM)[[XIO(I_PE_CL2T_06) ,XIC(CL2T_06_PE.TOF.DN) ] TON(CL2T_06_PE.TON,?,?) ,XIO(I_PE_CL2T_06) XIC(CL2T_06_PE.TON.DN) TOF(CL2T_06_PE.TOF,?,?) ,XIC(CL2T_06_PE.TOF.DN) OTE(CL2T_06_PE.FILT) ];
				N: XIC(CL2T_06_PE.FILT)[XIO(CL2T_06_PE.FILT_POS_XITN_MEM) OTE(CL2T_06_PE.FILT_POS_XITN) ,OTE(CL2T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_06_PE.FILT)[XIO(CL2T_06_PE.FILT_NEG_XITN_MEM) OTE(CL2T_06_PE.FILT_NEG_XITN) ,OTE(CL2T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL2T_06)[XIO(CL2T_06_PE.POS_XITN_MEM) OTE(CL2T_06_PE.POS_XITN) ,OTE(CL2T_06_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_05_MTR.COMM)[[XIO(I_PE_CL2T_05) ,XIC(CL2T_05_PE.TOF.DN) ] TON(CL2T_05_PE.TON,?,?) ,XIO(I_PE_CL2T_05) XIC(CL2T_05_PE.TON.DN) TOF(CL2T_05_PE.TOF,?,?) ,XIC(CL2T_05_PE.TOF.DN) OTE(CL2T_05_PE.FILT) ];
				N: XIC(CL2T_05_PE.FILT)[XIO(CL2T_05_PE.FILT_POS_XITN_MEM) OTE(CL2T_05_PE.FILT_POS_XITN) ,OTE(CL2T_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_05_PE.FILT)[XIO(CL2T_05_PE.FILT_NEG_XITN_MEM) OTE(CL2T_05_PE.FILT_NEG_XITN) ,OTE(CL2T_05_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_04_MTR.COMM)[[XIO(I_PE_CL2T_04) ,XIC(CL2T_04_PE.TOF.DN) ] TON(CL2T_04_PE.TON,?,?) ,XIO(I_PE_CL2T_04) XIC(CL2T_04_PE.TON.DN) TOF(CL2T_04_PE.TOF,?,?) ,XIC(CL2T_04_PE.TOF.DN) OTE(CL2T_04_PE.FILT) ];
				N: XIC(CL2T_04_PE.FILT)[XIO(CL2T_04_PE.FILT_POS_XITN_MEM) OTE(CL2T_04_PE.FILT_POS_XITN) ,OTE(CL2T_04_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_04_PE.FILT)[XIO(CL2T_04_PE.FILT_NEG_XITN_MEM) OTE(CL2T_04_PE.FILT_NEG_XITN) ,OTE(CL2T_04_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_03_MTR.COMM)[[XIO(I_PE_CL2T_03) ,XIC(CL2T_03_PE.TOF.DN) ] TON(CL2T_03_PE.TON,?,?) ,XIO(I_PE_CL2T_03) XIC(CL2T_03_PE.TON.DN) TOF(CL2T_03_PE.TOF,?,?) ,XIC(CL2T_03_PE.TOF.DN) OTE(CL2T_03_PE.FILT) ];
				N: XIC(CL2T_03_PE.FILT)[XIO(CL2T_03_PE.FILT_POS_XITN_MEM) OTE(CL2T_03_PE.FILT_POS_XITN) ,OTE(CL2T_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_03_PE.FILT)[XIO(CL2T_03_PE.FILT_NEG_XITN_MEM) OTE(CL2T_03_PE.FILT_NEG_XITN) ,OTE(CL2T_03_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_02_MTR.COMM)[[XIO(I_PE_CL2T_02) ,XIC(CL2T_02_PE.TOF.DN) ] TON(CL2T_02_PE.TON,?,?) ,XIO(I_PE_CL2T_02) XIC(CL2T_02_PE.TON.DN) TOF(CL2T_02_PE.TOF,?,?) ,XIC(CL2T_02_PE.TOF.DN) OTE(CL2T_02_PE.FILT) ];
				N: XIC(CL2T_02_PE.FILT)[XIO(CL2T_02_PE.FILT_POS_XITN_MEM) OTE(CL2T_02_PE.FILT_POS_XITN) ,OTE(CL2T_02_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_02_PE.FILT)[XIO(CL2T_02_PE.FILT_NEG_XITN_MEM) OTE(CL2T_02_PE.FILT_NEG_XITN) ,OTE(CL2T_02_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL2T_01_MTR.COMM)[[XIO(I_PE_CL2T_01) ,XIC(CL2T_01_PE.TOF.DN) ] TON(CL2T_01_PE.TON,?,?) ,XIO(I_PE_CL2T_01) XIC(CL2T_01_PE.TON.DN) TOF(CL2T_01_PE.TOF,?,?) ,XIC(CL2T_01_PE.TOF.DN) OTE(CL2T_01_PE.FILT) ];
				N: XIC(CL2T_01_PE.FILT)[XIO(CL2T_01_PE.FILT_POS_XITN_MEM) OTE(CL2T_01_PE.FILT_POS_XITN) ,OTE(CL2T_01_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL2T_01_PE.FILT)[XIO(CL2T_01_PE.FILT_NEG_XITN_MEM) OTE(CL2T_01_PE.FILT_NEG_XITN) ,OTE(CL2T_01_PE.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE CL2T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_09_MTR.COMM);
				N: XIC(O_VFD_CL2T_09_FWD)XIC(CL2T_09_MTR.CONV_RUN)OTE(CL2T_09_MTR.RUNNING);
				N: XIC(CL2T_09_VFD.FAULTED)[XIO(F_CL2T_09_VFD_FAULT) OTE(CL2T_09_VFD.FAULT_ONS) ,OTE(F_CL2T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_09_MOL);
				N: XIO(I_MSD_CL2T_09)XIO(CL2T_09_MTR.COMM)[XIO(F_CL2T_09_MSD_OFF) OTE(CL2T_09_MTR.MSD_ONS) ,OTE(F_CL2T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_09_CTCTR_FAULT) OTE(CL2T_09_MTR.MS_FLT_ONS) ,OTE(F_CL2T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_09_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_09_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_09_MTR.FIRE_ALM);
				N: XIO(CL2T_09_MTR.CONV_RUN)XIC(CL2T_09_MTR.INTL_MTR)OTE(CL2T_09_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_09_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_09_OVRIDE_REQ)[XIO(F_CL2T_09_OVRIDE) OTE(CL2T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_09_OVRIDE) ];
				N: XIC(HMI_CL2T_09_OUTSERV_REQ)[XIO(F_CL2T_09_OUTSERV) OTE(CL2T_09_MTR.OOS_ONS) ,OTE(F_CL2T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_09_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_09_PE_JAMMED) ,XIC(F_CL2T_08_PE_JAMMED) ,XIC(CL2T_09_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_08_MTR.COMM);
				N: XIC(O_VFD_CL2T_08_FWD)XIC(CL2T_08_MTR.CONV_RUN)OTE(CL2T_08_MTR.RUNNING);
				N: XIC(CL2T_08_VFD.FAULTED)[XIO(F_CL2T_08_VFD_FAULT) OTE(CL2T_08_VFD.FAULT_ONS) ,OTE(F_CL2T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_08_MOL);
				N: XIO(I_MSD_CL2T_08)XIO(CL2T_08_MTR.COMM)[XIO(F_CL2T_08_MSD_OFF) OTE(CL2T_08_MTR.MSD_ONS) ,OTE(F_CL2T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_08_CTCTR_FAULT) OTE(CL2T_08_MTR.MS_FLT_ONS) ,OTE(F_CL2T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_08_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_08_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_08_MTR.FIRE_ALM);
				N: XIO(CL2T_08_MTR.CONV_RUN)XIC(CL2T_08_MTR.INTL_MTR)OTE(CL2T_08_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_08_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_08_OVRIDE_REQ)[XIO(F_CL2T_08_OVRIDE) OTE(CL2T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_08_OVRIDE) ];
				N: XIC(HMI_CL2T_08_OUTSERV_REQ)[XIO(F_CL2T_08_OUTSERV) OTE(CL2T_08_MTR.OOS_ONS) ,OTE(F_CL2T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_08_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_08_PE_JAMMED) ,XIC(F_CL2T_07_PE_JAMMED) ,XIC(CL2T_08_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_07_MTR.COMM);
				N: XIC(O_VFD_CL2T_07_FWD)XIC(CL2T_07_MTR.CONV_RUN)OTE(CL2T_07_MTR.RUNNING);
				N: XIC(CL2T_07_VFD.FAULTED)[XIO(F_CL2T_07_VFD_FAULT) OTE(CL2T_07_VFD.FAULT_ONS) ,OTE(F_CL2T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_07_MOL);
				N: XIO(I_MSD_CL2T_07)XIO(CL2T_07_MTR.COMM)[XIO(F_CL2T_07_MSD_OFF) OTE(CL2T_07_MTR.MSD_ONS) ,OTE(F_CL2T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_07_CTCTR_FAULT) OTE(CL2T_07_MTR.MS_FLT_ONS) ,OTE(F_CL2T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_07_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_07_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_07_MTR.FIRE_ALM);
				N: XIO(CL2T_07_MTR.CONV_RUN)XIC(CL2T_07_MTR.INTL_MTR)OTE(CL2T_07_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_07_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_07_OVRIDE_REQ)[XIO(F_CL2T_07_OVRIDE) OTE(CL2T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_07_OVRIDE) ];
				N: XIC(HMI_CL2T_07_OUTSERV_REQ)[XIO(F_CL2T_07_OUTSERV) OTE(CL2T_07_MTR.OOS_ONS) ,OTE(F_CL2T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_07_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_07_PE_JAMMED) ,XIC(F_CL2T_06_PE_JAMMED) ,XIC(CL2T_07_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_06_MTR.COMM);
				N: XIC(O_VFD_CL2T_06_FWD)XIC(CL2T_06_MTR.CONV_RUN)OTE(CL2T_06_MTR.RUNNING);
				N: XIC(CL2T_06_VFD.FAULTED)[XIO(F_CL2T_06_VFD_FAULT) OTE(CL2T_06_VFD.FAULT_ONS) ,OTE(F_CL2T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_06_MOL);
				N: XIO(I_MSD_CL2T_06)XIO(CL2T_06_MTR.COMM)[XIO(F_CL2T_06_MSD_OFF) OTE(CL2T_06_MTR.MSD_ONS) ,OTE(F_CL2T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_06_CTCTR_FAULT) OTE(CL2T_06_MTR.MS_FLT_ONS) ,OTE(F_CL2T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_06_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_06_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_06_MTR.FIRE_ALM);
				N: XIO(CL2T_06_MTR.CONV_RUN)XIC(CL2T_06_MTR.INTL_MTR)OTE(CL2T_06_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_06_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_06_OVRIDE_REQ)[XIO(F_CL2T_06_OVRIDE) OTE(CL2T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_06_OVRIDE) ];
				N: XIC(HMI_CL2T_06_OUTSERV_REQ)[XIO(F_CL2T_06_OUTSERV) OTE(CL2T_06_MTR.OOS_ONS) ,OTE(F_CL2T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_06_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_06_PE_JAMMED) ,XIC(F_CL2T_05_PE_JAMMED) ,XIC(CL2T_06_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_05_MTR.COMM);
				N: XIC(O_VFD_CL2T_05_FWD)XIC(CL2T_05_MTR.CONV_RUN)OTE(CL2T_05_MTR.RUNNING);
				N: XIC(CL2T_05_VFD.FAULTED)[XIO(F_CL2T_05_VFD_FAULT) OTE(CL2T_05_VFD.FAULT_ONS) ,OTE(F_CL2T_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_05_MOL);
				N: XIO(I_MSD_CL2T_05)XIO(CL2T_05_MTR.COMM)[XIO(F_CL2T_05_MSD_OFF) OTE(CL2T_05_MTR.MSD_ONS) ,OTE(F_CL2T_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_05_CTCTR_FAULT) OTE(CL2T_05_MTR.MS_FLT_ONS) ,OTE(F_CL2T_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_05_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_05_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_05_MTR.FIRE_ALM);
				N: XIO(CL2T_05_MTR.CONV_RUN)XIC(CL2T_05_MTR.INTL_MTR)OTE(CL2T_05_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_05_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_05_OVRIDE_REQ)[XIO(F_CL2T_05_OVRIDE) OTE(CL2T_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_05_OVRIDE) ];
				N: XIC(HMI_CL2T_05_OUTSERV_REQ)[XIO(F_CL2T_05_OUTSERV) OTE(CL2T_05_MTR.OOS_ONS) ,OTE(F_CL2T_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_05_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_05_PE_JAMMED) ,XIC(F_CL2T_04_PE_JAMMED) ,XIC(CL2T_05_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_04_MTR.COMM);
				N: XIC(O_VFD_CL2T_04_FWD)XIC(CL2T_04_MTR.CONV_RUN)OTE(CL2T_04_MTR.RUNNING);
				N: XIC(CL2T_04_VFD.FAULTED)[XIO(F_CL2T_04_VFD_FAULT) OTE(CL2T_04_VFD.FAULT_ONS) ,OTE(F_CL2T_04_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_04_MOL);
				N: XIO(I_MSD_CL2T_04)XIO(CL2T_04_MTR.COMM)[XIO(F_CL2T_04_MSD_OFF) OTE(CL2T_04_MTR.MSD_ONS) ,OTE(F_CL2T_04_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_04_CTCTR_FAULT) OTE(CL2T_04_MTR.MS_FLT_ONS) ,OTE(F_CL2T_04_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_04_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_04_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_04_MTR.FIRE_ALM);
				N: XIO(CL2T_04_MTR.CONV_RUN)XIC(CL2T_04_MTR.INTL_MTR)OTE(CL2T_04_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_04_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_04_OVRIDE_REQ)[XIO(F_CL2T_04_OVRIDE) OTE(CL2T_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_04_OVRIDE) ];
				N: XIC(HMI_CL2T_04_OUTSERV_REQ)[XIO(F_CL2T_04_OUTSERV) OTE(CL2T_04_MTR.OOS_ONS) ,OTE(F_CL2T_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_04_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_04_PE_JAMMED) ,XIC(F_CL2T_03_PE_JAMMED) ,XIC(CL2T_04_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_04_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_03_MTR.COMM);
				N: XIC(O_VFD_CL2T_03_FWD)XIC(CL2T_03_MTR.CONV_RUN)OTE(CL2T_03_MTR.RUNNING);
				N: XIC(CL2T_03_VFD.FAULTED)[XIO(F_CL2T_03_VFD_FAULT) OTE(CL2T_03_VFD.FAULT_ONS) ,OTE(F_CL2T_03_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_03_MOL);
				N: XIO(I_MSD_CL2T_03)XIO(CL2T_03_MTR.COMM)[XIO(F_CL2T_03_MSD_OFF) OTE(CL2T_03_MTR.MSD_ONS) ,OTE(F_CL2T_03_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_03_CTCTR_FAULT) OTE(CL2T_03_MTR.MS_FLT_ONS) ,OTE(F_CL2T_03_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_03_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_03_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_03_MTR.FIRE_ALM);
				N: XIO(CL2T_03_MTR.CONV_RUN)XIC(CL2T_03_MTR.INTL_MTR)OTE(CL2T_03_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_03_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_03_OVRIDE_REQ)[XIO(F_CL2T_03_OVRIDE) OTE(CL2T_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_03_OVRIDE) ];
				N: XIC(HMI_CL2T_03_OUTSERV_REQ)[XIO(F_CL2T_03_OUTSERV) OTE(CL2T_03_MTR.OOS_ONS) ,OTE(F_CL2T_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_03_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_03_PE_JAMMED) ,XIC(F_CL2T_02_PE_JAMMED) ,XIC(CL2T_03_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_02_MTR.COMM);
				N: XIC(O_VFD_CL2T_02_FWD)XIC(CL2T_02_MTR.CONV_RUN)OTE(CL2T_02_MTR.RUNNING);
				N: XIC(CL2T_02_VFD.FAULTED)[XIO(F_CL2T_02_VFD_FAULT) OTE(CL2T_02_VFD.FAULT_ONS) ,OTE(F_CL2T_02_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_02_MOL);
				N: XIO(I_MSD_CL2T_02)XIO(CL2T_02_MTR.COMM)[XIO(F_CL2T_02_MSD_OFF) OTE(CL2T_02_MTR.MSD_ONS) ,OTE(F_CL2T_02_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_02_CTCTR_FAULT) OTE(CL2T_02_MTR.MS_FLT_ONS) ,OTE(F_CL2T_02_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_02_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_02_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_02_MTR.FIRE_ALM);
				N: XIO(CL2T_02_MTR.CONV_RUN)XIC(CL2T_02_MTR.INTL_MTR)OTE(CL2T_02_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_02_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_02_OVRIDE_REQ)[XIO(F_CL2T_02_OVRIDE) OTE(CL2T_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_02_OVRIDE) ];
				N: XIC(HMI_CL2T_02_OUTSERV_REQ)[XIO(F_CL2T_02_OUTSERV) OTE(CL2T_02_MTR.OOS_ONS) ,OTE(F_CL2T_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_02_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_02_PE_JAMMED) ,XIC(F_CL2T_01_PE_JAMMED) ,XIC(CL2T_02_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL2T_01_MTR.COMM);
				N: XIC(O_VFD_CL2T_01_FWD)XIC(CL2T_01_MTR.CONV_RUN)OTE(CL2T_01_MTR.RUNNING);
				N: XIC(CL2T_01_VFD.FAULTED)[XIO(F_CL2T_01_VFD_FAULT) OTE(CL2T_01_VFD.FAULT_ONS) ,OTE(F_CL2T_01_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL2T_01_MOL);
				N: XIO(I_MSD_CL2T_01)XIO(CL2T_01_MTR.COMM)[XIO(F_CL2T_01_MSD_OFF) OTE(CL2T_01_MTR.MSD_ONS) ,OTE(F_CL2T_01_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL2T_01_CTCTR_FAULT) OTE(CL2T_01_MTR.MS_FLT_ONS) ,OTE(F_CL2T_01_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30201.Zone_OK) ,AFI() ]OTE(CL2T_01_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30201.Zone_RES) ,AFI() ]OTE(CL2T_01_MTR.E_STOP_RES);
				N: XIC(CL2T.STATUS.FIRE_ALM)OTE(CL2T_01_MTR.FIRE_ALM);
				N: XIO(CL2T_01_MTR.CONV_RUN)XIC(CL2T_01_MTR.INTL_MTR)OTE(CL2T_01_MTR.CASC);
				N: XIO(CL2T.MTR_GRP.RUN_LATCH)OTE(CL2T_01_MTR.AUTO_STOP);
				N: XIC(HMI_CL2T_01_OVRIDE_REQ)[XIO(F_CL2T_01_OVRIDE) OTE(CL2T_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL2T_01_OVRIDE) ];
				N: XIC(HMI_CL2T_01_OUTSERV_REQ)[XIO(F_CL2T_01_OUTSERV) OTE(CL2T_01_MTR.OOS_ONS) ,OTE(F_CL2T_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL2T_01_MTR.MB_JAMMED);
				N: [XIC(F_CL2T_01_PE_JAMMED) ,XIC(CL2T_01_MTR.MB_JAMMED) ,AFI() ]OTE(CL2T_01_MTR.JAMMED);
		END_ROUTINE

		ROUTINE CL2T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor CL2T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_09_MTR.COMM)XIO(CL2T_09_MTR.E_STOP)XIO(F_CL2T_09_MSD_OFF)TON(CL2T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_09_RDY) OTE(CL2T_09_VFD.FAULTED) ,XIO(CL2T_09_VFD.FAULTED) OTE(CL2T_09_VFD.READY) ];
				RC: "Motor CL2T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_08_MTR.COMM)XIO(CL2T_08_MTR.E_STOP)XIO(F_CL2T_08_MSD_OFF)TON(CL2T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_08_RDY) OTE(CL2T_08_VFD.FAULTED) ,XIO(CL2T_08_VFD.FAULTED) OTE(CL2T_08_VFD.READY) ];
				RC: "Motor CL2T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_07_MTR.COMM)XIO(CL2T_07_MTR.E_STOP)XIO(F_CL2T_07_MSD_OFF)TON(CL2T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_07_RDY) OTE(CL2T_07_VFD.FAULTED) ,XIO(CL2T_07_VFD.FAULTED) OTE(CL2T_07_VFD.READY) ];
				RC: "Motor CL2T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_06_MTR.COMM)XIO(CL2T_06_MTR.E_STOP)XIO(F_CL2T_06_MSD_OFF)TON(CL2T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_06_RDY) OTE(CL2T_06_VFD.FAULTED) ,XIO(CL2T_06_VFD.FAULTED) OTE(CL2T_06_VFD.READY) ];
				RC: "Motor CL2T_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_05_MTR.COMM)XIO(CL2T_05_MTR.E_STOP)XIO(F_CL2T_05_MSD_OFF)TON(CL2T_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_05_RDY) OTE(CL2T_05_VFD.FAULTED) ,XIO(CL2T_05_VFD.FAULTED) OTE(CL2T_05_VFD.READY) ];
				RC: "Motor CL2T_04 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_04_MTR.COMM)XIO(CL2T_04_MTR.E_STOP)XIO(F_CL2T_04_MSD_OFF)TON(CL2T_04_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_04_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_04_RDY) OTE(CL2T_04_VFD.FAULTED) ,XIO(CL2T_04_VFD.FAULTED) OTE(CL2T_04_VFD.READY) ];
				RC: "Motor CL2T_03 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_03_MTR.COMM)XIO(CL2T_03_MTR.E_STOP)XIO(F_CL2T_03_MSD_OFF)TON(CL2T_03_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_03_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_03_RDY) OTE(CL2T_03_VFD.FAULTED) ,XIO(CL2T_03_VFD.FAULTED) OTE(CL2T_03_VFD.READY) ];
				RC: "Motor CL2T_02 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_02_MTR.COMM)XIO(CL2T_02_MTR.E_STOP)XIO(F_CL2T_02_MSD_OFF)TON(CL2T_02_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_02_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_02_RDY) OTE(CL2T_02_VFD.FAULTED) ,XIO(CL2T_02_VFD.FAULTED) OTE(CL2T_02_VFD.READY) ];
				RC: "Motor CL2T_01 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL2T_01_MTR.COMM)XIO(CL2T_01_MTR.E_STOP)XIO(F_CL2T_01_MSD_OFF)TON(CL2T_01_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL2T_01_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL2T_01_RDY) OTE(CL2T_01_VFD.FAULTED) ,XIO(CL2T_01_VFD.FAULTED) OTE(CL2T_01_VFD.READY) ];
		END_ROUTINE

		ROUTINE CL3T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL3T_01_EPB) ]OTE(O_CS1_CL3T_01_EPB);
				N: XIC(F_CL3T_01_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL3T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL3T_01_EPB) ]OTE(O_CS2_CL3T_01_EPB);
				N: XIC(F_CL3T_01_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL3T_01_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL3T_03_PE_JAMMED) XIC(I_PE_CL3T_03) ,XIC(F_CL3T_02_PE_JAMMED) XIC(I_PE_CL3T_02) ,XIC(F_CL3T_01_PE_JAMMED) XIC(I_PE_CL3T_01) ,XIC(F_CL3T_02_CS1_E_STOP) XIO(I_CS1_CL3T_02_EPB) ,AFI() ]OTE(CS_CL3T_02_LTA1_FLASH);
				N: [[XIC(F_CL3T_03_PE_JAMMED) ,XIC(F_CL3T_02_PE_JAMMED) ,XIC(F_CL3T_01_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL3T_02_LTA1_FLASH) ,XIC(CS_CL3T_02_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_CL3T_02_RPBA);
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_CL3T_02_EPB) ]OTE(O_CS1_CL3T_02_EPB);
				N: XIC(F_CL3T_02_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_CL3T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_CL3T_02_EPB) ]OTE(O_CS2_CL3T_02_EPB);
				N: XIC(F_CL3T_02_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_CL3T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS3_CL3T_02_EPB) ]OTE(O_CS3_CL3T_02_EPB);
				N: XIC(F_CL3T_02_CS3_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS3_CL3T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(F_CL3T_02_CS4_E_STOP)XIO(I_CS4_CL3T_02_EPB)OTE(CS_CL3T_02_LTA4_FLASH);
				N: [AFI() XIO(CS_CL3T_02_LTA4_FLASH) ,XIC(CS_CL3T_02_LTA4_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS4_CL3T_02_RPBA);
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS4_CL3T_02_EPB) ]OTE(O_CS4_CL3T_02_EPB);
				N: XIC(F_CL3T_02_CS4_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS4_CL3T_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL3T_03_PE_JAMMED) XIC(I_PE_CL3T_03) ,XIC(F_CL3T_04_PE_JAMMED) XIC(I_PE_CL3T_04) ,XIC(zzzF_CL3T_03_CS_E_STOP) XIO(I_CS_CL3T_03_EPB) ]OTE(zzzCS_CL3T_03_LTA_FLASH);
				N: [[XIC(F_CL3T_03_PE_JAMMED) ,XIC(F_CL3T_04_PE_JAMMED) ] XIO(zzzCS_CL3T_03_LTA_FLASH) ,XIC(zzzCS_CL3T_03_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL3T_03_RPBA);
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL3T_03_EPB) ]OTE(O_CS_CL3T_03_EPB);
				N: XIC(zzzF_CL3T_03_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL3T_03_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_CL3T_08_PE_JAMMED) XIC(I_PE_CL3T_08) ,XIC(F_CL3T_07_PE_JAMMED) XIC(I_PE_CL3T_07) ,XIC(F_CL3T_06_PE_JAMMED) XIC(I_PE_CL3T_06) ,XIC(F_CL3T_05_PE_JAMMED) XIC(I_PE_CL3T_05) ,XIC(F_CL3T_04_PE_JAMMED) XIC(I_PE_CL3T_04) ,XIC(F_CL3T_04_CS_E_STOP) XIO(I_CS_CL3T_04_EPB) ,AFI() ]OTE(CS_CL3T_04_LTA_FLASH);
				N: [[XIC(F_CL3T_08_PE_JAMMED) ,XIC(F_CL3T_07_PE_JAMMED) ,XIC(F_CL3T_06_PE_JAMMED) ,XIC(F_CL3T_05_PE_JAMMED) ,XIC(F_CL3T_04_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_CL3T_04_LTA_FLASH) ,XIC(CS_CL3T_04_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_CL3T_04_RPBA);
				N: XIO(EZ_30202.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_CL3T_04_EPB) ]OTE(O_CS_CL3T_04_EPB);
				N: XIC(F_CL3T_04_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_CL3T_04_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_C.STATUS.DR_FLT_MONITOR) ,XIC(BM1_C.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL3T_03_LTA);
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_CL3T_03_LTR);
				N: [[XIC(BM1_C.STATUS.DR_FLT_ALARM) ,XIC(BM1_C.STATUS.MOL_ALARM) ,XIC(BM1_C.STATUS.JAM_ALARM) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) ,XIC(BM1_C.STATUS.E_STOP_ALARM) ,XIC(BM1_C.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_CL3T_03_ALM);
		END_ROUTINE

		ROUTINE CL3T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_08_MTR.G) ,[XIC(CL3T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_08_MTR.G) ,XIC(F_CL3T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.CASC) MOV(Status.ConvCascade,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.CASC) XIO(I_PE_CL3T_08) MOV(Status.ConvBagPresCasc,CL3T_08_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_08_MTR.G) ,XIC(F_CL3T_08_MSD_OFF) MOV(Status.ConvDisc,CL3T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_08_MTR.G) ,XIC(F_CL3T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_08_MTR.G) ,XIC(F_CL3T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_08_MTR.G) ,XIC(F_CL3T_08_OVRIDE) MOV(Status.ConvOverRide,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.E_STOP) XIO(CL3T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_08_MTR.G) ,XIC(F_CL3T_08_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_08_MTR.G) ,XIC(CL3T_08_MTR.COMM) MOV(Status.ConvCommFault,CL3T_08_MTR.G) ,MOV(CL3T_08_MTR.G,G_CL3T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_07_MTR.G) ,[XIC(CL3T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_07_MTR.G) ,XIC(F_CL3T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.CASC) MOV(Status.ConvCascade,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.CASC) XIO(I_PE_CL3T_07) MOV(Status.ConvBagPresCasc,CL3T_07_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_07_MTR.G) ,XIC(F_CL3T_07_MSD_OFF) MOV(Status.ConvDisc,CL3T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_07_MTR.G) ,XIC(F_CL3T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_07_MTR.G) ,XIC(F_CL3T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_07_MTR.G) ,XIC(F_CL3T_07_OVRIDE) MOV(Status.ConvOverRide,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.E_STOP) XIO(CL3T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_07_MTR.G) ,XIC(F_CL3T_07_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_07_MTR.G) ,XIC(CL3T_07_MTR.COMM) MOV(Status.ConvCommFault,CL3T_07_MTR.G) ,MOV(CL3T_07_MTR.G,G_CL3T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_06_MTR.G) ,[XIC(CL3T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_06_MTR.G) ,XIC(F_CL3T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.CASC) MOV(Status.ConvCascade,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.CASC) XIO(I_PE_CL3T_06) MOV(Status.ConvBagPresCasc,CL3T_06_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_06_MTR.G) ,XIC(F_CL3T_06_MSD_OFF) MOV(Status.ConvDisc,CL3T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_06_MTR.G) ,XIC(F_CL3T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_06_MTR.G) ,XIC(F_CL3T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_06_MTR.G) ,XIC(F_CL3T_06_OVRIDE) MOV(Status.ConvOverRide,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.E_STOP) XIO(CL3T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_06_MTR.G) ,XIC(F_CL3T_06_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_06_MTR.G) ,XIC(CL3T_06_MTR.COMM) MOV(Status.ConvCommFault,CL3T_06_MTR.G) ,MOV(CL3T_06_MTR.G,G_CL3T_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_05_MTR.G) ,[XIC(CL3T_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_05_MTR.G) ,XIC(F_CL3T_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.CASC) MOV(Status.ConvCascade,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.CASC) XIO(I_PE_CL3T_05) MOV(Status.ConvBagPresCasc,CL3T_05_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_05_MTR.G) ,XIC(F_CL3T_05_MSD_OFF) MOV(Status.ConvDisc,CL3T_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_05_MTR.G) ,XIC(F_CL3T_05_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_05_MTR.G) ,XIC(F_CL3T_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_05_MTR.G) ,XIC(F_CL3T_05_OVRIDE) MOV(Status.ConvOverRide,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.E_STOP) XIO(CL3T_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_05_MTR.G) ,XIC(F_CL3T_05_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_05_MTR.G) ,XIC(CL3T_05_MTR.COMM) MOV(Status.ConvCommFault,CL3T_05_MTR.G) ,MOV(CL3T_05_MTR.G,G_CL3T_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_04_MTR.G) ,[XIC(CL3T_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_04_MTR.G) ,XIC(F_CL3T_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.CASC) MOV(Status.ConvCascade,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.CASC) XIO(I_PE_CL3T_04) MOV(Status.ConvBagPresCasc,CL3T_04_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_04_MTR.G) ,XIC(F_CL3T_04_MSD_OFF) MOV(Status.ConvDisc,CL3T_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_04_MTR.G) ,XIC(F_CL3T_04_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_04_MTR.G) ,XIC(F_CL3T_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_04_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_04_MTR.G) ,XIC(F_CL3T_04_OVRIDE) MOV(Status.ConvOverRide,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.E_STOP) XIO(CL3T_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_04_MTR.G) ,XIC(F_CL3T_04_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_04_MTR.G) ,XIC(CL3T_04_MTR.COMM) MOV(Status.ConvCommFault,CL3T_04_MTR.G) ,MOV(CL3T_04_MTR.G,G_CL3T_04_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_03_MTR.G) ,[XIC(CL3T_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_03_MTR.G) ,XIC(F_CL3T_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.CASC) MOV(Status.ConvCascade,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.CASC) XIO(I_PE_CL3T_03) MOV(Status.ConvBagPresCasc,CL3T_03_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_03_MTR.G) ,XIC(F_CL3T_03_MSD_OFF) MOV(Status.ConvDisc,CL3T_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_03_MTR.G) ,XIC(F_CL3T_03_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_03_MTR.G) ,XIC(F_CL3T_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_03_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_03_MTR.G) ,XIC(F_CL3T_03_OVRIDE) MOV(Status.ConvOverRide,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.E_STOP) XIO(CL3T_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_03_MTR.G) ,XIC(F_CL3T_03_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_03_MTR.G) ,XIC(CL3T_03_MTR.COMM) MOV(Status.ConvCommFault,CL3T_03_MTR.G) ,MOV(CL3T_03_MTR.G,G_CL3T_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_02_MTR.G) ,[XIC(CL3T_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_02_MTR.G) ,XIC(F_CL3T_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.CASC) MOV(Status.ConvCascade,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.CASC) XIO(I_PE_CL3T_02) MOV(Status.ConvBagPresCasc,CL3T_02_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_02_MTR.G) ,XIC(F_CL3T_02_MSD_OFF) MOV(Status.ConvDisc,CL3T_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_02_MTR.G) ,XIC(F_CL3T_02_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_02_MTR.G) ,XIC(F_CL3T_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_02_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_02_MTR.G) ,XIC(F_CL3T_02_OVRIDE) MOV(Status.ConvOverRide,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.E_STOP) XIO(CL3T_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_02_MTR.G) ,XIC(F_CL3T_02_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_02_MTR.G) ,XIC(CL3T_02_MTR.COMM) MOV(Status.ConvCommFault,CL3T_02_MTR.G) ,MOV(CL3T_02_MTR.G,G_CL3T_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.RUNNING) MOV(Status.ConvRunning,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,CL3T_01_MTR.G) ,[XIC(CL3T_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,CL3T_01_MTR.G) ,XIC(F_CL3T_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.CASC) MOV(Status.ConvCascade,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.CASC) XIO(I_PE_CL3T_01) MOV(Status.ConvBagPresCasc,CL3T_01_MTR.G) ,AFI() MOV(Status.ConvFull,CL3T_01_MTR.G) ,XIC(F_CL3T_01_MSD_OFF) MOV(Status.ConvDisc,CL3T_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.JAMMED) MOV(Status.ConvJammed,CL3T_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,CL3T_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,CL3T_01_MTR.G) ,XIC(F_CL3T_01_VFD_FAULT) MOV(Status.ConvVFDFlt,CL3T_01_MTR.G) ,XIC(F_CL3T_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,CL3T_01_MTR.G) ,AFI() MOV(Status.ConvOverLoad,CL3T_01_MTR.G) ,XIC(F_CL3T_01_OVRIDE) MOV(Status.ConvOverRide,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.E_STOP) XIO(CL3T_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,CL3T_01_MTR.G) ,XIC(F_CL3T_01_OUTSERV) MOV(Status.ConvOutOfServ,CL3T_01_MTR.G) ,XIC(CL3T_01_MTR.COMM) MOV(Status.ConvCommFault,CL3T_01_MTR.G) ,MOV(CL3T_01_MTR.G,G_CL3T_01_STS) ];
		END_ROUTINE

		ROUTINE CL3T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_08_MTR.CONV_RUN)RTO(CL3T_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL3T_04_RPBA) XIC(CL3T_08_PE.JAM_TMR.DN) ,XIO(CL3T_08_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_08)RES(CL3T_08_PE.JAM_TMR);
				N: XIC(CL3T_08_PE.JAM_TMR.DN)[XIO(F_CL3T_08_PE_JAMMED) [ADD(S_CL3T_08_PE_JAM,1,S_CL3T_08_PE_JAM) ,OTE(CL3T_08_PE.JAM_ONS) ] ,OTE(F_CL3T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_07_MTR.CONV_RUN)RTO(CL3T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL3T_04_RPBA) XIC(CL3T_07_PE.JAM_TMR.DN) ,XIO(CL3T_07_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_07)RES(CL3T_07_PE.JAM_TMR);
				N: XIC(CL3T_07_PE.JAM_TMR.DN)[XIO(F_CL3T_07_PE_JAMMED) [ADD(S_CL3T_07_PE_JAM,1,S_CL3T_07_PE_JAM) ,OTE(CL3T_07_PE.JAM_ONS) ] ,OTE(F_CL3T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_06_MTR.CONV_RUN)RTO(CL3T_06_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL3T_04_RPBA) XIC(CL3T_06_PE.JAM_TMR.DN) ,XIO(CL3T_06_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_06)RES(CL3T_06_PE.JAM_TMR);
				N: XIC(CL3T_06_PE.JAM_TMR.DN)[XIO(F_CL3T_06_PE_JAMMED) [ADD(S_CL3T_06_PE_JAM,1,S_CL3T_06_PE_JAM) ,OTE(CL3T_06_PE.JAM_ONS) ] ,OTE(F_CL3T_06_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_05_MTR.CONV_RUN)RTO(CL3T_05_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL3T_04_RPBA) XIC(CL3T_05_PE.JAM_TMR.DN) ,XIO(CL3T_05_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_05)RES(CL3T_05_PE.JAM_TMR);
				N: XIC(CL3T_05_PE.JAM_TMR.DN)[XIO(F_CL3T_05_PE_JAMMED) [ADD(S_CL3T_05_PE_JAM,1,S_CL3T_05_PE_JAM) ,OTE(CL3T_05_PE.JAM_ONS) ] ,OTE(F_CL3T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_04_MTR.CONV_RUN)RTO(CL3T_04_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_CL3T_04_RPBA) XIC(CL3T_04_PE.JAM_TMR.DN) ,XIO(CL3T_04_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_04)RES(CL3T_04_PE.JAM_TMR);
				N: XIC(CL3T_04_PE.JAM_TMR.DN)[XIO(F_CL3T_04_PE_JAMMED) [ADD(S_CL3T_04_PE_JAM,1,S_CL3T_04_PE_JAM) ,OTE(CL3T_04_PE.JAM_ONS) ] ,OTE(F_CL3T_04_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_03_MTR.CONV_RUN)RTO(CL3T_03_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL3T_02_RPBA) XIC(CL3T_03_PE.JAM_TMR.DN) ,XIO(CL3T_03_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_03)RES(CL3T_03_PE.JAM_TMR);
				N: XIC(CL3T_03_PE.JAM_TMR.DN)[XIO(F_CL3T_03_PE_JAMMED) [ADD(S_CL3T_03_PE_JAM,1,S_CL3T_03_PE_JAM) ,OTE(CL3T_03_PE.JAM_ONS) ] ,OTE(F_CL3T_03_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_02_MTR.CONV_RUN)RTO(CL3T_02_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL3T_02_RPBA) XIC(CL3T_02_PE.JAM_TMR.DN) ,XIO(CL3T_02_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_02)RES(CL3T_02_PE.JAM_TMR);
				N: XIC(CL3T_02_PE.JAM_TMR.DN)[XIO(F_CL3T_02_PE_JAMMED) [ADD(S_CL3T_02_PE_JAM,1,S_CL3T_02_PE_JAM) ,OTE(CL3T_02_PE.JAM_ONS) ] ,OTE(F_CL3T_02_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(CL3T_01_MTR.CONV_RUN)RTO(CL3T_01_PE.JAM_TMR,?,?);
				N: [XIC(I_CS1_CL3T_02_RPBA) XIC(CL3T_01_PE.JAM_TMR.DN) ,XIO(CL3T_01_PE.JAM_TMR.DN) ]XIC(I_PE_CL3T_01)RES(CL3T_01_PE.JAM_TMR);
				N: XIC(CL3T_01_PE.JAM_TMR.DN)[XIO(F_CL3T_01_PE_JAMMED) [ADD(S_CL3T_01_PE_JAM,1,S_CL3T_01_PE_JAM) ,OTE(CL3T_01_PE.JAM_ONS) ] ,OTE(F_CL3T_01_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE CL3T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_02_SPBG) ,XIC(I_CS1_CL3T_01_SPBG) ,XIC(I_CS2_CL3T_01_SPBG) ,XIC(I_CS1_CL3T_02_SPBG) ,XIC(I_CS2_CL3T_02_SPBG) ,XIC(I_CS3_CL3T_02_SPBG) ,AFI() ]OTE(CL3T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(CL3T_08_MTR.CONV_RUN)XIC(CL3T_07_MTR.CONV_RUN)XIC(CL3T_06_MTR.CONV_RUN)XIC(CL3T_05_MTR.CONV_RUN)XIC(CL3T_04_MTR.CONV_RUN)XIC(CL3T_03_MTR.CONV_RUN)XIC(CL3T_02_MTR.CONV_RUN)XIC(CL3T_01_MTR.CONV_RUN)OTE(CL3T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_CL3T_08) ,XIO(I_PE_CL3T_07) ,XIO(I_PE_CL3T_06) ,XIO(I_PE_CL3T_05) ,XIO(I_PE_CL3T_04) ,XIO(I_PE_CL3T_03) ,XIO(I_PE_CL3T_02) ,XIO(I_PE_CL3T_01) ,AFI() ]OTE(CL3T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(CL3T.MTR_GRP.START) ,XIC(CL3T.MTR_GRP.PEs) XIO(CL3T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(CL3T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(CL3T.MTR_GRP.RUN_LATCH)XIC(CL3T.MTR_GRP.PEs)OTE(CL3T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(CL3T.MTR_GRP.RUN_EXPAND)RTO(CL3T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(CL3T.MTR_GRP.START) ,XIC(CL3T.MTR_GRP.RUN_LATCH) ]XIO(CL3T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(CL3T.STATUS.FIRE_ALM)OTE(CL3T.MTR_GRP.RUN_LATCH);
				RC: "Motor CL3T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(CL3T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_08_MTR.E_STOP)[XIC(CL3T_08_VFD.READY) XIO(CL3T_08_MTR.JAMMED) ,XIC(F_CL3T_08_OVRIDE) ]XIO(F_CL3T_08_MSD_OFF)XIO(F_CL3T_08_OUTSERV)XIO(CL3T_08_MTR.COMM)OTE(CL3T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_08_OVRIDE) ]XIC(CL3T_08_MTR.NO_FAULT)TON(CL3T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_08_MTR.IM_TMR.DN)[XIO(CL3T_08_MTR.INTL_MTR) OTE(CL3T_08_MTR.IM_ONS) ,OTE(CL3T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL3T_08_PE.FILT_NEG_XITN)RES(CL3T_08_MTR.T2H_SPACE_TMR);
				N: XIC(I_INT_T5_10_RUN)RTO(CL3T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL3T_08_PE.POS_XITN) XIC(CL3T_08_MTR.INTL_MTR) ,XIC(CL3T_08_MTR.T2H_SPACE) ]XIO(CL3T_08_MTR.T2H_SPACE_TMR.DN)OTE(CL3T_08_MTR.T2H_SPACE);
				N: XIC(CL3T_08_MTR.T2H_SPACE)OTE(CL3T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(zzzT5_10ZZ_MTR_ON_TMR_DN) XIC(CL3T_08_MTR.OFF_TMR.DN) ,XIO(zzzT5_10ZZ_MTR_IM_ONS) XIC(CL3T_08_MTR.IM_ONS) ,XIC(CL3T_08_MTR.ANTI_CASC) XIC(I_PE_CL3T_08) ]OTE(CL3T_08_MTR.START_EN);
				N: [XIO(zzzT5_10ZZ_MTR_ON_TMR_DN) XIO(I_PE_CL3T_08) ,XIO(CL3T_08_MTR.ANTI_CASC) XIC(CL3T_08_MTR.SPACE) ]OTE(CL3T_08_MTR.STOP);
				N: XIC(CL3T_08_MTR.INTL_MTR)[[XIC(CL3T_08_MTR.START_EN) ,XIC(CL3T_08_MTR.CONV_RUN) ] XIO(CL3T_08_MTR.STOP) ,XIC(F_CL3T_08_OVRIDE) ][OTE(CL3T_08_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_08_MTR.CONV_RUN)TON(CL3T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_08_MTR.CONV_RUN)TON(CL3T_08_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_08_MSD_OFF)OTE(CL3T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_07_MTR.E_STOP)[XIC(CL3T_07_VFD.READY) XIO(CL3T_07_MTR.JAMMED) ,XIC(F_CL3T_07_OVRIDE) ]XIO(F_CL3T_07_MSD_OFF)XIO(F_CL3T_07_OUTSERV)XIO(CL3T_07_MTR.COMM)OTE(CL3T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_07_OVRIDE) ]XIC(CL3T_07_MTR.NO_FAULT)TON(CL3T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_07_MTR.IM_TMR.DN)[XIO(CL3T_07_MTR.INTL_MTR) OTE(CL3T_07_MTR.IM_ONS) ,OTE(CL3T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL3T_07_PE.FILT_NEG_XITN)RES(CL3T_07_MTR.T2H_SPACE_TMR);
				N: XIC(CL3T_08_MTR.CONV_RUN)RTO(CL3T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL3T_07_PE.POS_XITN) XIC(CL3T_07_MTR.INTL_MTR) ,XIC(CL3T_07_MTR.T2H_SPACE) ]XIO(CL3T_07_MTR.T2H_SPACE_TMR.DN)OTE(CL3T_07_MTR.T2H_SPACE);
				N: XIC(CL3T_07_MTR.T2H_SPACE)OTE(CL3T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL3T_08_MTR.ON_TMR.DN) XIC(CL3T_07_MTR.OFF_TMR.DN) ,XIO(CL3T_08_MTR.IM_ONS) XIC(CL3T_07_MTR.IM_ONS) ,XIC(CL3T_07_MTR.ANTI_CASC) XIC(I_PE_CL3T_07) ]OTE(CL3T_07_MTR.START_EN);
				N: [XIO(CL3T_08_MTR.ON_TMR.DN) XIO(I_PE_CL3T_07) ,XIO(CL3T_07_MTR.ANTI_CASC) XIC(CL3T_07_MTR.SPACE) ]OTE(CL3T_07_MTR.STOP);
				N: XIC(CL3T_07_MTR.INTL_MTR)[[XIC(CL3T_07_MTR.START_EN) ,XIC(CL3T_07_MTR.CONV_RUN) ] XIO(CL3T_07_MTR.STOP) ,XIC(F_CL3T_07_OVRIDE) ][OTE(CL3T_07_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_07_MTR.CONV_RUN)TON(CL3T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_07_MTR.CONV_RUN)TON(CL3T_07_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_07_MSD_OFF)OTE(CL3T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_06_MTR.E_STOP)[XIC(CL3T_06_VFD.READY) XIO(CL3T_06_MTR.JAMMED) ,XIC(F_CL3T_06_OVRIDE) ]XIO(F_CL3T_06_MSD_OFF)XIO(F_CL3T_06_OUTSERV)XIO(CL3T_06_MTR.COMM)OTE(CL3T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_06_OVRIDE) ]XIC(CL3T_06_MTR.NO_FAULT)TON(CL3T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_06_MTR.IM_TMR.DN)[XIO(CL3T_06_MTR.INTL_MTR) OTE(CL3T_06_MTR.IM_ONS) ,OTE(CL3T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL3T_06_PE.FILT_NEG_XITN)RES(CL3T_06_MTR.T2H_SPACE_TMR);
				N: XIC(CL3T_07_MTR.CONV_RUN)RTO(CL3T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL3T_06_PE.POS_XITN) XIC(CL3T_06_MTR.INTL_MTR) ,XIC(CL3T_06_MTR.T2H_SPACE) ]XIO(CL3T_06_MTR.T2H_SPACE_TMR.DN)OTE(CL3T_06_MTR.T2H_SPACE);
				N: XIC(CL3T_06_MTR.T2H_SPACE)OTE(CL3T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL3T_07_MTR.ON_TMR.DN) XIC(CL3T_06_MTR.OFF_TMR.DN) ,XIO(CL3T_07_MTR.IM_ONS) XIC(CL3T_06_MTR.IM_ONS) ,XIC(CL3T_06_MTR.ANTI_CASC) XIC(I_PE_CL3T_06) ]OTE(CL3T_06_MTR.START_EN);
				N: [XIO(CL3T_07_MTR.ON_TMR.DN) XIO(I_PE_CL3T_06) ,XIO(CL3T_06_MTR.ANTI_CASC) XIC(CL3T_06_MTR.SPACE) ]OTE(CL3T_06_MTR.STOP);
				N: XIC(CL3T_06_MTR.INTL_MTR)[[XIC(CL3T_06_MTR.START_EN) ,XIC(CL3T_06_MTR.CONV_RUN) ] XIO(CL3T_06_MTR.STOP) ,XIC(F_CL3T_06_OVRIDE) ][OTE(CL3T_06_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_06_MTR.CONV_RUN)TON(CL3T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_06_MTR.CONV_RUN)TON(CL3T_06_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_06_MSD_OFF)OTE(CL3T_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_05_MTR.E_STOP)[XIC(CL3T_05_VFD.READY) XIO(CL3T_05_MTR.JAMMED) ,XIC(F_CL3T_05_OVRIDE) ]XIO(F_CL3T_05_MSD_OFF)XIO(F_CL3T_05_OUTSERV)XIO(CL3T_05_MTR.COMM)OTE(CL3T_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_05_OVRIDE) ]XIC(CL3T_05_MTR.NO_FAULT)TON(CL3T_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_05_MTR.IM_TMR.DN)[XIO(CL3T_05_MTR.INTL_MTR) OTE(CL3T_05_MTR.IM_ONS) ,OTE(CL3T_05_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(CL3T_05_PE.FILT_NEG_XITN)RES(CL3T_05_MTR.T2H_SPACE_TMR);
				N: XIC(CL3T_06_MTR.CONV_RUN)RTO(CL3T_05_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(CL3T_05_PE.POS_XITN) XIC(CL3T_05_MTR.INTL_MTR) ,XIC(CL3T_05_MTR.T2H_SPACE) ]XIO(CL3T_05_MTR.T2H_SPACE_TMR.DN)OTE(CL3T_05_MTR.T2H_SPACE);
				N: XIC(CL3T_05_MTR.T2H_SPACE)OTE(CL3T_05_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL3T_06_MTR.ON_TMR.DN) XIC(CL3T_05_MTR.OFF_TMR.DN) ,XIO(CL3T_06_MTR.IM_ONS) XIC(CL3T_05_MTR.IM_ONS) ,XIC(CL3T_05_MTR.ANTI_CASC) XIC(I_PE_CL3T_05) ]OTE(CL3T_05_MTR.START_EN);
				N: [XIO(CL3T_06_MTR.ON_TMR.DN) XIO(I_PE_CL3T_05) ,XIO(CL3T_05_MTR.ANTI_CASC) XIC(CL3T_05_MTR.SPACE) ]OTE(CL3T_05_MTR.STOP);
				N: XIC(CL3T_05_MTR.INTL_MTR)[[XIC(CL3T_05_MTR.START_EN) ,XIC(CL3T_05_MTR.CONV_RUN) ] XIO(CL3T_05_MTR.STOP) ,XIC(F_CL3T_05_OVRIDE) ][OTE(CL3T_05_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_05_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_05_MTR.CONV_RUN)TON(CL3T_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_05_MTR.CONV_RUN)TON(CL3T_05_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_05_MSD_OFF)OTE(CL3T_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_04_MTR.E_STOP)[XIC(CL3T_04_VFD.READY) XIO(CL3T_04_MTR.JAMMED) ,XIC(F_CL3T_04_OVRIDE) ]XIO(F_CL3T_04_MSD_OFF)XIO(F_CL3T_04_OUTSERV)XIO(CL3T_04_MTR.COMM)OTE(CL3T_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_04_OVRIDE) ]XIC(CL3T_04_MTR.NO_FAULT)TON(CL3T_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_04_MTR.IM_TMR.DN)[XIO(CL3T_04_MTR.INTL_MTR) OTE(CL3T_04_MTR.IM_ONS) ,OTE(CL3T_04_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL3T_05_MTR.ON_TMR.DN) XIC(CL3T_04_MTR.OFF_TMR.DN) ,XIO(CL3T_05_MTR.IM_ONS) XIC(CL3T_04_MTR.IM_ONS) ,XIC(CL3T_04_MTR.ANTI_CASC) XIC(I_PE_CL3T_04) ]OTE(CL3T_04_MTR.START_EN);
				N: XIO(CL3T_05_MTR.ON_TMR.DN)XIO(I_PE_CL3T_04)OTE(CL3T_04_MTR.STOP);
				N: XIC(CL3T_04_MTR.INTL_MTR)[[XIC(CL3T_04_MTR.START_EN) ,XIC(CL3T_04_MTR.CONV_RUN) ] XIO(CL3T_04_MTR.STOP) ,XIC(F_CL3T_04_OVRIDE) ][OTE(CL3T_04_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_04_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_04_MTR.CONV_RUN)TON(CL3T_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_04_MTR.CONV_RUN)TON(CL3T_04_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_04_MSD_OFF)OTE(CL3T_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_03_MTR.E_STOP)[XIC(CL3T_03_VFD.READY) XIO(CL3T_03_MTR.JAMMED) ,XIC(F_CL3T_03_OVRIDE) ]XIO(F_CL3T_03_MSD_OFF)XIO(F_CL3T_03_OUTSERV)XIO(CL3T_03_MTR.COMM)OTE(CL3T_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_03_OVRIDE) ]XIC(CL3T_03_MTR.NO_FAULT)TON(CL3T_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_03_MTR.IM_TMR.DN)[XIO(CL3T_03_MTR.INTL_MTR) OTE(CL3T_03_MTR.IM_ONS) ,OTE(CL3T_03_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL3T_04_MTR.ON_TMR.DN) XIC(CL3T_03_MTR.OFF_TMR.DN) ,XIO(CL3T_04_MTR.IM_ONS) XIC(CL3T_03_MTR.IM_ONS) ,XIC(CL3T_03_MTR.ANTI_CASC) XIC(I_PE_CL3T_03) ]OTE(CL3T_03_MTR.START_EN);
				N: XIO(CL3T_04_MTR.ON_TMR.DN)XIO(I_PE_CL3T_03)OTE(CL3T_03_MTR.STOP);
				N: XIC(CL3T_03_MTR.INTL_MTR)[[XIC(CL3T_03_MTR.START_EN) ,XIC(CL3T_03_MTR.CONV_RUN) ] XIO(CL3T_03_MTR.STOP) ,XIC(F_CL3T_03_OVRIDE) ][OTE(CL3T_03_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_03_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_03_MTR.CONV_RUN)TON(CL3T_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_03_MTR.CONV_RUN)TON(CL3T_03_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_03_MSD_OFF)OTE(CL3T_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_02_MTR.E_STOP)[XIC(CL3T_02_VFD.READY) XIO(CL3T_02_MTR.JAMMED) ,XIC(F_CL3T_02_OVRIDE) ]XIO(F_CL3T_02_MSD_OFF)XIO(F_CL3T_02_OUTSERV)XIO(CL3T_02_MTR.COMM)OTE(CL3T_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_02_OVRIDE) ]XIC(CL3T_02_MTR.NO_FAULT)TON(CL3T_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_02_MTR.IM_TMR.DN)[XIO(CL3T_02_MTR.INTL_MTR) OTE(CL3T_02_MTR.IM_ONS) ,OTE(CL3T_02_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL3T_03_MTR.ON_TMR.DN) XIC(CL3T_02_MTR.OFF_TMR.DN) ,XIO(CL3T_03_MTR.IM_ONS) XIC(CL3T_02_MTR.IM_ONS) ,XIC(CL3T_02_MTR.ANTI_CASC) XIC(I_PE_CL3T_02) ]OTE(CL3T_02_MTR.START_EN);
				N: XIO(CL3T_03_MTR.ON_TMR.DN)XIO(I_PE_CL3T_02)OTE(CL3T_02_MTR.STOP);
				N: XIC(CL3T_02_MTR.INTL_MTR)[[XIC(CL3T_02_MTR.START_EN) ,XIC(CL3T_02_MTR.CONV_RUN) ] XIO(CL3T_02_MTR.STOP) ,XIC(F_CL3T_02_OVRIDE) ][OTE(CL3T_02_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_02_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_02_MTR.CONV_RUN)TON(CL3T_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_02_MTR.CONV_RUN)TON(CL3T_02_MTR.OFF_TMR,?,?);
				RC: "Motor CL3T_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL3T_02_MSD_OFF)OTE(CL3T_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(CL3T_01_MTR.E_STOP)[XIC(CL3T_01_VFD.READY) XIO(CL3T_01_MTR.JAMMED) ,XIC(F_CL3T_01_OVRIDE) ]XIO(F_CL3T_01_MSD_OFF)XIO(F_CL3T_01_OUTSERV)XIO(CL3T_01_MTR.COMM)OTE(CL3T_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(CL3T.MTR_GRP.RUN_LATCH) ,XIC(F_CL3T_01_OVRIDE) ]XIC(CL3T_01_MTR.NO_FAULT)TON(CL3T_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(CL3T_01_MTR.IM_TMR.DN)[XIO(CL3T_01_MTR.INTL_MTR) OTE(CL3T_01_MTR.IM_ONS) ,OTE(CL3T_01_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(CL3T_02_MTR.ON_TMR.DN) XIC(CL3T_01_MTR.OFF_TMR.DN) ,XIO(CL3T_02_MTR.IM_ONS) XIC(CL3T_01_MTR.IM_ONS) ,XIC(CL3T_01_MTR.ANTI_CASC) XIC(I_PE_CL3T_01) ]OTE(CL3T_01_MTR.START_EN);
				N: XIO(CL3T_02_MTR.ON_TMR.DN)XIO(I_PE_CL3T_01)OTE(CL3T_01_MTR.STOP);
				N: XIC(CL3T_01_MTR.INTL_MTR)[[XIC(CL3T_01_MTR.START_EN) ,XIC(CL3T_01_MTR.CONV_RUN) ] XIO(CL3T_01_MTR.STOP) ,XIC(F_CL3T_01_OVRIDE) ][OTE(CL3T_01_MTR.CONV_RUN) ,OTE(O_VFD_CL3T_01_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(CL3T_01_MTR.CONV_RUN)TON(CL3T_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(CL3T_01_MTR.CONV_RUN)TON(CL3T_01_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE CL3T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(CL3T_08_MTR.COMM)[[XIO(I_PE_CL3T_08) ,XIC(CL3T_08_PE.TOF.DN) ] TON(CL3T_08_PE.TON,?,?) ,XIO(I_PE_CL3T_08) XIC(CL3T_08_PE.TON.DN) TOF(CL3T_08_PE.TOF,?,?) ,XIC(CL3T_08_PE.TOF.DN) OTE(CL3T_08_PE.FILT) ];
				N: XIC(CL3T_08_PE.FILT)[XIO(CL3T_08_PE.FILT_POS_XITN_MEM) OTE(CL3T_08_PE.FILT_POS_XITN) ,OTE(CL3T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_08_PE.FILT)[XIO(CL3T_08_PE.FILT_NEG_XITN_MEM) OTE(CL3T_08_PE.FILT_NEG_XITN) ,OTE(CL3T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL3T_08)[XIO(CL3T_08_PE.POS_XITN_MEM) OTE(CL3T_08_PE.POS_XITN) ,OTE(CL3T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_07_MTR.COMM)[[XIO(I_PE_CL3T_07) ,XIC(CL3T_07_PE.TOF.DN) ] TON(CL3T_07_PE.TON,?,?) ,XIO(I_PE_CL3T_07) XIC(CL3T_07_PE.TON.DN) TOF(CL3T_07_PE.TOF,?,?) ,XIC(CL3T_07_PE.TOF.DN) OTE(CL3T_07_PE.FILT) ];
				N: XIC(CL3T_07_PE.FILT)[XIO(CL3T_07_PE.FILT_POS_XITN_MEM) OTE(CL3T_07_PE.FILT_POS_XITN) ,OTE(CL3T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_07_PE.FILT)[XIO(CL3T_07_PE.FILT_NEG_XITN_MEM) OTE(CL3T_07_PE.FILT_NEG_XITN) ,OTE(CL3T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL3T_07)[XIO(CL3T_07_PE.POS_XITN_MEM) OTE(CL3T_07_PE.POS_XITN) ,OTE(CL3T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_06_MTR.COMM)[[XIO(I_PE_CL3T_06) ,XIC(CL3T_06_PE.TOF.DN) ] TON(CL3T_06_PE.TON,?,?) ,XIO(I_PE_CL3T_06) XIC(CL3T_06_PE.TON.DN) TOF(CL3T_06_PE.TOF,?,?) ,XIC(CL3T_06_PE.TOF.DN) OTE(CL3T_06_PE.FILT) ];
				N: XIC(CL3T_06_PE.FILT)[XIO(CL3T_06_PE.FILT_POS_XITN_MEM) OTE(CL3T_06_PE.FILT_POS_XITN) ,OTE(CL3T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_06_PE.FILT)[XIO(CL3T_06_PE.FILT_NEG_XITN_MEM) OTE(CL3T_06_PE.FILT_NEG_XITN) ,OTE(CL3T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL3T_06)[XIO(CL3T_06_PE.POS_XITN_MEM) OTE(CL3T_06_PE.POS_XITN) ,OTE(CL3T_06_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_05_MTR.COMM)[[XIO(I_PE_CL3T_05) ,XIC(CL3T_05_PE.TOF.DN) ] TON(CL3T_05_PE.TON,?,?) ,XIO(I_PE_CL3T_05) XIC(CL3T_05_PE.TON.DN) TOF(CL3T_05_PE.TOF,?,?) ,XIC(CL3T_05_PE.TOF.DN) OTE(CL3T_05_PE.FILT) ];
				N: XIC(CL3T_05_PE.FILT)[XIO(CL3T_05_PE.FILT_POS_XITN_MEM) OTE(CL3T_05_PE.FILT_POS_XITN) ,OTE(CL3T_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_05_PE.FILT)[XIO(CL3T_05_PE.FILT_NEG_XITN_MEM) OTE(CL3T_05_PE.FILT_NEG_XITN) ,OTE(CL3T_05_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_CL3T_05)[XIO(CL3T_05_PE.POS_XITN_MEM) OTE(CL3T_05_PE.POS_XITN) ,OTE(CL3T_05_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_04_MTR.COMM)[[XIO(I_PE_CL3T_04) ,XIC(CL3T_04_PE.TOF.DN) ] TON(CL3T_04_PE.TON,?,?) ,XIO(I_PE_CL3T_04) XIC(CL3T_04_PE.TON.DN) TOF(CL3T_04_PE.TOF,?,?) ,XIC(CL3T_04_PE.TOF.DN) OTE(CL3T_04_PE.FILT) ];
				N: XIC(CL3T_04_PE.FILT)[XIO(CL3T_04_PE.FILT_POS_XITN_MEM) OTE(CL3T_04_PE.FILT_POS_XITN) ,OTE(CL3T_04_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_04_PE.FILT)[XIO(CL3T_04_PE.FILT_NEG_XITN_MEM) OTE(CL3T_04_PE.FILT_NEG_XITN) ,OTE(CL3T_04_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_03_MTR.COMM)[[XIO(I_PE_CL3T_03) ,XIC(CL3T_03_PE.TOF.DN) ] TON(CL3T_03_PE.TON,?,?) ,XIO(I_PE_CL3T_03) XIC(CL3T_03_PE.TON.DN) TOF(CL3T_03_PE.TOF,?,?) ,XIC(CL3T_03_PE.TOF.DN) OTE(CL3T_03_PE.FILT) ];
				N: XIC(CL3T_03_PE.FILT)[XIO(CL3T_03_PE.FILT_POS_XITN_MEM) OTE(CL3T_03_PE.FILT_POS_XITN) ,OTE(CL3T_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_03_PE.FILT)[XIO(CL3T_03_PE.FILT_NEG_XITN_MEM) OTE(CL3T_03_PE.FILT_NEG_XITN) ,OTE(CL3T_03_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_02_MTR.COMM)[[XIO(I_PE_CL3T_02) ,XIC(CL3T_02_PE.TOF.DN) ] TON(CL3T_02_PE.TON,?,?) ,XIO(I_PE_CL3T_02) XIC(CL3T_02_PE.TON.DN) TOF(CL3T_02_PE.TOF,?,?) ,XIC(CL3T_02_PE.TOF.DN) OTE(CL3T_02_PE.FILT) ];
				N: XIC(CL3T_02_PE.FILT)[XIO(CL3T_02_PE.FILT_POS_XITN_MEM) OTE(CL3T_02_PE.FILT_POS_XITN) ,OTE(CL3T_02_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_02_PE.FILT)[XIO(CL3T_02_PE.FILT_NEG_XITN_MEM) OTE(CL3T_02_PE.FILT_NEG_XITN) ,OTE(CL3T_02_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(CL3T_01_MTR.COMM)[[XIO(I_PE_CL3T_01) ,XIC(CL3T_01_PE.TOF.DN) ] TON(CL3T_01_PE.TON,?,?) ,XIO(I_PE_CL3T_01) XIC(CL3T_01_PE.TON.DN) TOF(CL3T_01_PE.TOF,?,?) ,XIC(CL3T_01_PE.TOF.DN) OTE(CL3T_01_PE.FILT) ];
				N: XIC(CL3T_01_PE.FILT)[XIO(CL3T_01_PE.FILT_POS_XITN_MEM) OTE(CL3T_01_PE.FILT_POS_XITN) ,OTE(CL3T_01_PE.FILT_POS_XITN_MEM) ];
				N: XIO(CL3T_01_PE.FILT)[XIO(CL3T_01_PE.FILT_NEG_XITN_MEM) OTE(CL3T_01_PE.FILT_NEG_XITN) ,OTE(CL3T_01_PE.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE CL3T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_08_MTR.COMM);
				N: XIC(O_VFD_CL3T_08_FWD)XIC(CL3T_08_MTR.CONV_RUN)OTE(CL3T_08_MTR.RUNNING);
				N: XIC(CL3T_08_VFD.FAULTED)[XIO(F_CL3T_08_VFD_FAULT) OTE(CL3T_08_VFD.FAULT_ONS) ,OTE(F_CL3T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_08_MOL);
				N: XIO(I_MSD_CL3T_08)XIO(CL3T_08_MTR.COMM)[XIO(F_CL3T_08_MSD_OFF) OTE(CL3T_08_MTR.MSD_ONS) ,OTE(F_CL3T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_08_CTCTR_FAULT) OTE(CL3T_08_MTR.MS_FLT_ONS) ,OTE(F_CL3T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_08_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_08_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_08_MTR.FIRE_ALM);
				N: XIO(CL3T_08_MTR.CONV_RUN)XIC(CL3T_08_MTR.INTL_MTR)OTE(CL3T_08_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_08_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_08_OVRIDE_REQ)[XIO(F_CL3T_08_OVRIDE) OTE(CL3T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_08_OVRIDE) ];
				N: XIC(HMI_CL3T_08_OUTSERV_REQ)[XIO(F_CL3T_08_OUTSERV) OTE(CL3T_08_MTR.OOS_ONS) ,OTE(F_CL3T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_08_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_08_PE_JAMMED) ,XIC(F_CL3T_07_PE_JAMMED) ,XIC(CL3T_08_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_07_MTR.COMM);
				N: XIC(O_VFD_CL3T_07_FWD)XIC(CL3T_07_MTR.CONV_RUN)OTE(CL3T_07_MTR.RUNNING);
				N: XIC(CL3T_07_VFD.FAULTED)[XIO(F_CL3T_07_VFD_FAULT) OTE(CL3T_07_VFD.FAULT_ONS) ,OTE(F_CL3T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_07_MOL);
				N: XIO(I_MSD_CL3T_07)XIO(CL3T_07_MTR.COMM)[XIO(F_CL3T_07_MSD_OFF) OTE(CL3T_07_MTR.MSD_ONS) ,OTE(F_CL3T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_07_CTCTR_FAULT) OTE(CL3T_07_MTR.MS_FLT_ONS) ,OTE(F_CL3T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_07_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_07_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_07_MTR.FIRE_ALM);
				N: XIO(CL3T_07_MTR.CONV_RUN)XIC(CL3T_07_MTR.INTL_MTR)OTE(CL3T_07_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_07_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_07_OVRIDE_REQ)[XIO(F_CL3T_07_OVRIDE) OTE(CL3T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_07_OVRIDE) ];
				N: XIC(HMI_CL3T_07_OUTSERV_REQ)[XIO(F_CL3T_07_OUTSERV) OTE(CL3T_07_MTR.OOS_ONS) ,OTE(F_CL3T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_07_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_07_PE_JAMMED) ,XIC(F_CL3T_06_PE_JAMMED) ,XIC(CL3T_07_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_06_MTR.COMM);
				N: XIC(O_VFD_CL3T_06_FWD)XIC(CL3T_06_MTR.CONV_RUN)OTE(CL3T_06_MTR.RUNNING);
				N: XIC(CL3T_06_VFD.FAULTED)[XIO(F_CL3T_06_VFD_FAULT) OTE(CL3T_06_VFD.FAULT_ONS) ,OTE(F_CL3T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_06_MOL);
				N: XIO(I_MSD_CL3T_06)XIO(CL3T_06_MTR.COMM)[XIO(F_CL3T_06_MSD_OFF) OTE(CL3T_06_MTR.MSD_ONS) ,OTE(F_CL3T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_06_CTCTR_FAULT) OTE(CL3T_06_MTR.MS_FLT_ONS) ,OTE(F_CL3T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_06_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_06_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_06_MTR.FIRE_ALM);
				N: XIO(CL3T_06_MTR.CONV_RUN)XIC(CL3T_06_MTR.INTL_MTR)OTE(CL3T_06_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_06_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_06_OVRIDE_REQ)[XIO(F_CL3T_06_OVRIDE) OTE(CL3T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_06_OVRIDE) ];
				N: XIC(HMI_CL3T_06_OUTSERV_REQ)[XIO(F_CL3T_06_OUTSERV) OTE(CL3T_06_MTR.OOS_ONS) ,OTE(F_CL3T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_06_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_06_PE_JAMMED) ,XIC(F_CL3T_05_PE_JAMMED) ,XIC(CL3T_06_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_05_MTR.COMM);
				N: XIC(O_VFD_CL3T_05_FWD)XIC(CL3T_05_MTR.CONV_RUN)OTE(CL3T_05_MTR.RUNNING);
				N: XIC(CL3T_05_VFD.FAULTED)[XIO(F_CL3T_05_VFD_FAULT) OTE(CL3T_05_VFD.FAULT_ONS) ,OTE(F_CL3T_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_05_MOL);
				N: XIO(I_MSD_CL3T_05)XIO(CL3T_05_MTR.COMM)[XIO(F_CL3T_05_MSD_OFF) OTE(CL3T_05_MTR.MSD_ONS) ,OTE(F_CL3T_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_05_CTCTR_FAULT) OTE(CL3T_05_MTR.MS_FLT_ONS) ,OTE(F_CL3T_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_05_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_05_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_05_MTR.FIRE_ALM);
				N: XIO(CL3T_05_MTR.CONV_RUN)XIC(CL3T_05_MTR.INTL_MTR)OTE(CL3T_05_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_05_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_05_OVRIDE_REQ)[XIO(F_CL3T_05_OVRIDE) OTE(CL3T_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_05_OVRIDE) ];
				N: XIC(HMI_CL3T_05_OUTSERV_REQ)[XIO(F_CL3T_05_OUTSERV) OTE(CL3T_05_MTR.OOS_ONS) ,OTE(F_CL3T_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_05_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_05_PE_JAMMED) ,XIC(F_CL3T_04_PE_JAMMED) ,XIC(CL3T_05_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_04_MTR.COMM);
				N: XIC(O_VFD_CL3T_04_FWD)XIC(CL3T_04_MTR.CONV_RUN)OTE(CL3T_04_MTR.RUNNING);
				N: XIC(CL3T_04_VFD.FAULTED)[XIO(F_CL3T_04_VFD_FAULT) OTE(CL3T_04_VFD.FAULT_ONS) ,OTE(F_CL3T_04_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_04_MOL);
				N: XIO(I_MSD_CL3T_04)XIO(CL3T_04_MTR.COMM)[XIO(F_CL3T_04_MSD_OFF) OTE(CL3T_04_MTR.MSD_ONS) ,OTE(F_CL3T_04_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_04_CTCTR_FAULT) OTE(CL3T_04_MTR.MS_FLT_ONS) ,OTE(F_CL3T_04_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_04_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_04_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_04_MTR.FIRE_ALM);
				N: XIO(CL3T_04_MTR.CONV_RUN)XIC(CL3T_04_MTR.INTL_MTR)OTE(CL3T_04_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_04_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_04_OVRIDE_REQ)[XIO(F_CL3T_04_OVRIDE) OTE(CL3T_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_04_OVRIDE) ];
				N: XIC(HMI_CL3T_04_OUTSERV_REQ)[XIO(F_CL3T_04_OUTSERV) OTE(CL3T_04_MTR.OOS_ONS) ,OTE(F_CL3T_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_04_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_04_PE_JAMMED) ,XIC(F_CL3T_03_PE_JAMMED) ,XIC(CL3T_04_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_04_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_03_MTR.COMM);
				N: XIC(O_VFD_CL3T_03_FWD)XIC(CL3T_03_MTR.CONV_RUN)OTE(CL3T_03_MTR.RUNNING);
				N: XIC(CL3T_03_VFD.FAULTED)[XIO(F_CL3T_03_VFD_FAULT) OTE(CL3T_03_VFD.FAULT_ONS) ,OTE(F_CL3T_03_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_03_MOL);
				N: XIO(I_MSD_CL3T_03)XIO(CL3T_03_MTR.COMM)[XIO(F_CL3T_03_MSD_OFF) OTE(CL3T_03_MTR.MSD_ONS) ,OTE(F_CL3T_03_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_03_CTCTR_FAULT) OTE(CL3T_03_MTR.MS_FLT_ONS) ,OTE(F_CL3T_03_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_03_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_03_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_03_MTR.FIRE_ALM);
				N: XIO(CL3T_03_MTR.CONV_RUN)XIC(CL3T_03_MTR.INTL_MTR)OTE(CL3T_03_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_03_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_03_OVRIDE_REQ)[XIO(F_CL3T_03_OVRIDE) OTE(CL3T_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_03_OVRIDE) ];
				N: XIC(HMI_CL3T_03_OUTSERV_REQ)[XIO(F_CL3T_03_OUTSERV) OTE(CL3T_03_MTR.OOS_ONS) ,OTE(F_CL3T_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_03_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_03_PE_JAMMED) ,XIC(F_CL3T_02_PE_JAMMED) ,XIC(CL3T_03_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_02_MTR.COMM);
				N: XIC(O_VFD_CL3T_02_FWD)XIC(CL3T_02_MTR.CONV_RUN)OTE(CL3T_02_MTR.RUNNING);
				N: XIC(CL3T_02_VFD.FAULTED)[XIO(F_CL3T_02_VFD_FAULT) OTE(CL3T_02_VFD.FAULT_ONS) ,OTE(F_CL3T_02_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_02_MOL);
				N: XIO(I_MSD_CL3T_02)XIO(CL3T_02_MTR.COMM)[XIO(F_CL3T_02_MSD_OFF) OTE(CL3T_02_MTR.MSD_ONS) ,OTE(F_CL3T_02_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_02_CTCTR_FAULT) OTE(CL3T_02_MTR.MS_FLT_ONS) ,OTE(F_CL3T_02_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_02_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_02_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_02_MTR.FIRE_ALM);
				N: XIO(CL3T_02_MTR.CONV_RUN)XIC(CL3T_02_MTR.INTL_MTR)OTE(CL3T_02_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_02_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_02_OVRIDE_REQ)[XIO(F_CL3T_02_OVRIDE) OTE(CL3T_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_02_OVRIDE) ];
				N: XIC(HMI_CL3T_02_OUTSERV_REQ)[XIO(F_CL3T_02_OUTSERV) OTE(CL3T_02_MTR.OOS_ONS) ,OTE(F_CL3T_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_02_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_02_PE_JAMMED) ,XIC(F_CL3T_01_PE_JAMMED) ,XIC(CL3T_02_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(CL3T_01_MTR.COMM);
				N: XIC(O_VFD_CL3T_01_FWD)XIC(CL3T_01_MTR.CONV_RUN)OTE(CL3T_01_MTR.RUNNING);
				N: XIC(CL3T_01_VFD.FAULTED)[XIO(F_CL3T_01_VFD_FAULT) OTE(CL3T_01_VFD.FAULT_ONS) ,OTE(F_CL3T_01_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_CL3T_01_MOL);
				N: XIO(I_MSD_CL3T_01)XIO(CL3T_01_MTR.COMM)[XIO(F_CL3T_01_MSD_OFF) OTE(CL3T_01_MTR.MSD_ONS) ,OTE(F_CL3T_01_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_CL3T_01_CTCTR_FAULT) OTE(CL3T_01_MTR.MS_FLT_ONS) ,OTE(F_CL3T_01_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30202.Zone_OK) ,AFI() ]OTE(CL3T_01_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30202.Zone_RES) ,AFI() ]OTE(CL3T_01_MTR.E_STOP_RES);
				N: XIC(CL3T.STATUS.FIRE_ALM)OTE(CL3T_01_MTR.FIRE_ALM);
				N: XIO(CL3T_01_MTR.CONV_RUN)XIC(CL3T_01_MTR.INTL_MTR)OTE(CL3T_01_MTR.CASC);
				N: XIO(CL3T.MTR_GRP.RUN_LATCH)OTE(CL3T_01_MTR.AUTO_STOP);
				N: XIC(HMI_CL3T_01_OVRIDE_REQ)[XIO(F_CL3T_01_OVRIDE) OTE(CL3T_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_CL3T_01_OVRIDE) ];
				N: XIC(HMI_CL3T_01_OUTSERV_REQ)[XIO(F_CL3T_01_OUTSERV) OTE(CL3T_01_MTR.OOS_ONS) ,OTE(F_CL3T_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(CL3T_01_MTR.MB_JAMMED);
				N: [XIC(F_CL3T_01_PE_JAMMED) ,XIC(CL3T_01_MTR.MB_JAMMED) ,AFI() ]OTE(CL3T_01_MTR.JAMMED);
		END_ROUTINE

		ROUTINE CL3T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor CL3T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_08_MTR.COMM)XIO(CL3T_08_MTR.E_STOP)XIO(F_CL3T_08_MSD_OFF)TON(CL3T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_08_RDY) OTE(CL3T_08_VFD.FAULTED) ,XIO(CL3T_08_VFD.FAULTED) OTE(CL3T_08_VFD.READY) ];
				RC: "Motor CL3T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_07_MTR.COMM)XIO(CL3T_07_MTR.E_STOP)XIO(F_CL3T_07_MSD_OFF)TON(CL3T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_07_RDY) OTE(CL3T_07_VFD.FAULTED) ,XIO(CL3T_07_VFD.FAULTED) OTE(CL3T_07_VFD.READY) ];
				RC: "Motor CL3T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_06_MTR.COMM)XIO(CL3T_06_MTR.E_STOP)XIO(F_CL3T_06_MSD_OFF)TON(CL3T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_06_RDY) OTE(CL3T_06_VFD.FAULTED) ,XIO(CL3T_06_VFD.FAULTED) OTE(CL3T_06_VFD.READY) ];
				RC: "Motor CL3T_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_05_MTR.COMM)XIO(CL3T_05_MTR.E_STOP)XIO(F_CL3T_05_MSD_OFF)TON(CL3T_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_05_RDY) OTE(CL3T_05_VFD.FAULTED) ,XIO(CL3T_05_VFD.FAULTED) OTE(CL3T_05_VFD.READY) ];
				RC: "Motor CL3T_04 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_04_MTR.COMM)XIO(CL3T_04_MTR.E_STOP)XIO(F_CL3T_04_MSD_OFF)TON(CL3T_04_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_04_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_04_RDY) OTE(CL3T_04_VFD.FAULTED) ,XIO(CL3T_04_VFD.FAULTED) OTE(CL3T_04_VFD.READY) ];
				RC: "Motor CL3T_03 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_03_MTR.COMM)XIO(CL3T_03_MTR.E_STOP)XIO(F_CL3T_03_MSD_OFF)TON(CL3T_03_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_03_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_03_RDY) OTE(CL3T_03_VFD.FAULTED) ,XIO(CL3T_03_VFD.FAULTED) OTE(CL3T_03_VFD.READY) ];
				RC: "Motor CL3T_02 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_02_MTR.COMM)XIO(CL3T_02_MTR.E_STOP)XIO(F_CL3T_02_MSD_OFF)TON(CL3T_02_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_02_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_02_RDY) OTE(CL3T_02_VFD.FAULTED) ,XIO(CL3T_02_VFD.FAULTED) OTE(CL3T_02_VFD.READY) ];
				RC: "Motor CL3T_01 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(CL3T_01_MTR.COMM)XIO(CL3T_01_MTR.E_STOP)XIO(F_CL3T_01_MSD_OFF)TON(CL3T_01_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(CL3T_01_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_CL3T_01_RDY) OTE(CL3T_01_VFD.FAULTED) ,XIO(CL3T_01_VFD.FAULTED) OTE(CL3T_01_VFD.READY) ];
		END_ROUTINE

		ROUTINE COM_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine monitors the IO communication modules.$N"
				    "HMI status$' and alarms related to the communication modules are programmed in this routine.$N"
				    "If the status of a module is anything other than 4, then it is faulted.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "***********************************$N"
				    "Card CC01_RK01_S02$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,CC01_RK1_S02,EntryStatus,CC01_RK1_S02_STATUS.EntryStatus[0]) ,BTD(CC01_RK1_S02_STATUS.EntryStatus[0],12,CC01_RK1_S02_STATUS.EntryStatus[1],0,4) ,NEQ(CC01_RK1_S02_STATUS.EntryStatus[1],4) [GSV(Module,CC01_RK1_S02,FaultCode,CC01_RK1_S02_STATUS.FaultData) ,OTE(CC01_RK1_S02_STATUS.Fault) ] ];
				N: MOV(10000,CC01_RK1_S02_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(CC01_RK1_S02_STATUS.Fault)TOF(CC01_RK1_S02_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(CC01_RK1_S02_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_CC01_RK01_S02_COMM);
				RC: "***********************************$N"
				    "Card MCP_BM1_RK01_S16$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_BM1_RK1_S16,EntryStatus,MCP_BM1_RK1_S16_STATUS.EntryStatus[0]) ,BTD(MCP_BM1_RK1_S16_STATUS.EntryStatus[0],12,MCP_BM1_RK1_S16_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_BM1_RK1_S16_STATUS.EntryStatus[1],4) [GSV(Module,MCP_BM1_RK1_S16,FaultCode,MCP_BM1_RK1_S16_STATUS.FaultData) ,OTE(MCP_BM1_RK1_S16_STATUS.Fault) ] ];
				N: MOV(10000,MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_BM1_RK1_S16_STATUS.Fault)TOF(MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_BM1_RK1_S16_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_BM1_RK01_S16_COMM);
				RC: "***********************************$N"
				    "Card MCP_BM1_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_BM1_RK2_S0,EntryStatus,MCP_BM1_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_BM1_RK2_S0_STATUS.EntryStatus[0],12,MCP_BM1_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_BM1_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_BM1_RK2_S0,FaultCode,MCP_BM1_RK2_S0_STATUS.FaultData) ,OTE(MCP_BM1_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_BM1_RK2_S0_STATUS.Fault)TOF(MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_BM1_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_BM1_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_01_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_01_RK1_S0,EntryStatus,MCP_01_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_01_RK1_S0_STATUS.EntryStatus[0],12,MCP_01_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_01_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_01_RK1_S0,FaultCode,MCP_01_RK1_S0_STATUS.FaultData) ,OTE(MCP_01_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_01_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_01_RK1_S0_STATUS.Fault)TOF(MCP_01_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_01_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_01_RK01_S00_COMM);
				N: MOV(10000,MCP_01_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_01_RK2_S0_STATUS.Fault)TOF(MCP_01_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_01_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_01_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_02_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_02_RK1_S0,EntryStatus,MCP_02_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_02_RK1_S0_STATUS.EntryStatus[0],12,MCP_02_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_02_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_02_RK1_S0,FaultCode,MCP_02_RK1_S0_STATUS.FaultData) ,OTE(MCP_02_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_02_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_02_RK1_S0_STATUS.Fault)TOF(MCP_02_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_02_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_02_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_02_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_02_RK2_S0,EntryStatus,MCP_02_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_02_RK2_S0_STATUS.EntryStatus[0],12,MCP_02_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_02_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_02_RK2_S0,FaultCode,MCP_02_RK2_S0_STATUS.FaultData) ,OTE(MCP_02_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_02_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_02_RK2_S0_STATUS.Fault)TOF(MCP_02_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_02_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_02_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_03_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_03_RK1_S0,EntryStatus,MCP_03_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_03_RK1_S0_STATUS.EntryStatus[0],12,MCP_03_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_03_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_03_RK1_S0,FaultCode,MCP_03_RK1_S0_STATUS.FaultData) ,OTE(MCP_03_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_03_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_03_RK1_S0_STATUS.Fault)TOF(MCP_03_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_03_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_03_RK01_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_03_RK02_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_03_RK2_S0,EntryStatus,MCP_03_RK2_S0_STATUS.EntryStatus[0]) ,BTD(MCP_03_RK2_S0_STATUS.EntryStatus[0],12,MCP_03_RK2_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_03_RK2_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_03_RK2_S0,FaultCode,MCP_03_RK2_S0_STATUS.FaultData) ,OTE(MCP_03_RK2_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_03_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_03_RK2_S0_STATUS.Fault)TOF(MCP_03_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_03_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_03_RK02_S00_COMM);
				RC: "***********************************$N"
				    "Card MCP_16_RK01_S00$N"
				    "***********************************$N"
				    "$N"
				    "This rung performs a GSV for the communication module, which indicates the modules status.";
				N: [GSV(Module,MCP_16_RK1_S0,EntryStatus,MCP_16_RK1_S0_STATUS.EntryStatus[0]) ,BTD(MCP_16_RK1_S0_STATUS.EntryStatus[0],12,MCP_16_RK1_S0_STATUS.EntryStatus[1],0,4) ,NEQ(MCP_16_RK1_S0_STATUS.EntryStatus[1],4) [GSV(Module,MCP_16_RK1_S0,FaultCode,MCP_16_RK1_S0_STATUS.FaultData) ,OTE(MCP_16_RK1_S0_STATUS.Fault) ] ];
				N: MOV(10000,MCP_16_RK1_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_16_RK1_S0_STATUS.Fault)TOF(MCP_16_RK1_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_16_RK1_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_16_RK01_S00_COMM);
				N: MOV(10000,MCP_16_RK2_S0_STATUS.FltFilter_Tmr.PRE);
				RC: "Filter timer is immediate on, filtered off.";
				N: XIC(MCP_16_RK2_S0_STATUS.Fault)TOF(MCP_16_RK2_S0_STATUS.FltFilter_Tmr,?,?);
				RC: "Set the HMI fault bit based on filtered fault signal.";
				N: XIC(MCP_16_RK2_S0_STATUS.FltFilter_Tmr.DN)OTE(F_MCP_16_RK02_S00_COMM);
		END_ROUTINE

		ROUTINE E_STOPS 
				RC: "****************************************************************$N"
				    "All E-stop faults are programmed in this routine.$N"
				    "$N"
				    "$N"
				    "This routine also groups individual e-stop faults into single bits for use elsewhere in the program.$N"
				    "****************************************************************";
				N: NOP();
				RC: "MCP_BM1 E STOP";
				N: [XIC(I_CS_MCP_BM1_EPB) ,XIC(F_MCP_BM1_CS_E_STOP) XIO(I_CS_BM1_MCP_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_MCP_BM1_CS_E_STOP) OTE(MCP_BM1_EPB_ONS) ,OTE(F_MCP_BM1_CS_E_STOP) ];
				N: XIC(F_MCP_BM1_CS_E_STOP)XIO(I_CS_MCP_BM1_EPB)OTE(F_MCP_BM1_CS_E_STOP_RESET);
				RC: "BM1_01 E STOP";
				N: [XIC(I_CS_BM1_01_EPB) ,XIC(F_BM1_01_CS_E_STOP) XIO(I_CS_BM1_01_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_01_CS_E_STOP) OTE(BM1_01_EPB_ONS) ,OTE(F_BM1_01_CS_E_STOP) ];
				N: XIC(F_BM1_01_CS_E_STOP)XIO(I_CS_BM1_01_EPB)OTE(F_BM1_01_CS_E_STOP_RESET);
				RC: "BM1_02 E STOP";
				N: [XIC(I_CS_BM1_02_EPB) ,XIC(F_BM1_02_CS_E_STOP) XIO(I_CS_BM1_02_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_02_CS_E_STOP) OTE(BM1_02_EPB_ONS) ,OTE(F_BM1_02_CS_E_STOP) ];
				N: XIC(F_BM1_02_CS_E_STOP)XIO(I_CS_BM1_02_EPB)OTE(F_BM1_02_CS_E_STOP_RESET);
				RC: "BM1_03 E STOP";
				N: [XIC(I_CS_BM1_03_EPB) ,XIC(F_BM1_03_CS_E_STOP) XIO(I_CS_BM1_03_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_03_CS_E_STOP) OTE(BM1_03_EPB_ONS) ,OTE(F_BM1_03_CS_E_STOP) ];
				N: XIC(F_BM1_03_CS_E_STOP)XIO(I_CS_BM1_03_EPB)OTE(F_BM1_03_CS_E_STOP_RESET);
				RC: "BM1_06 E STOP";
				N: [XIC(I_CS_BM1_06_EPB) ,XIC(F_BM1_06_CS_E_STOP) XIO(I_CS_BM1_06_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_06_CS_E_STOP) OTE(BM1_06_EPB_ONS) ,OTE(F_BM1_06_CS_E_STOP) ];
				N: XIC(F_BM1_06_CS_E_STOP)XIO(I_CS_BM1_06_EPB)OTE(F_BM1_06_CS_E_STOP_RESET);
				RC: "BM1_07 E STOP";
				N: [XIC(I_CS_BM1_07_EPB) ,XIC(F_BM1_07_CS_E_STOP) XIO(I_CS_BM1_07_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_07_CS_E_STOP) OTE(BM1_07_EPB_ONS) ,OTE(F_BM1_07_CS_E_STOP) ];
				N: XIC(F_BM1_07_CS_E_STOP)XIO(I_CS_BM1_07_EPB)OTE(F_BM1_07_CS_E_STOP_RESET);
				RC: "BM1_13 E STOP";
				N: [XIC(I_CS_BM1_13_EPB) ,XIC(F_BM1_13_CS_E_STOP) XIO(I_CS_BM1_13_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_13_CS_E_STOP) OTE(BM1_13_EPB_ONS) ,OTE(F_BM1_13_CS_E_STOP) ];
				N: XIC(F_BM1_13_CS_E_STOP)XIO(I_CS_BM1_13_EPB)OTE(F_BM1_13_CS_E_STOP_RESET);
				RC: "BM1_14_A E STOP";
				N: [XIC(I_CS1_BM1_14_EPB) ,XIC(F_BM1_14_CS1_E_STOP) XIO(I_CS1_BM1_14_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_14_CS1_E_STOP) OTE(BM1_14_EPB1_ONS) ,OTE(F_BM1_14_CS1_E_STOP) ];
				N: XIC(F_BM1_14_CS1_E_STOP)XIO(I_CS1_BM1_14_EPB)OTE(F_BM1_14_CS1_E_STOP_RESET);
				RC: "BM1_14_B E STOP";
				N: [XIC(I_CS2_BM1_14_EPB) ,XIC(F_BM1_14_CS2_E_STOP) XIO(I_CS2_BM1_14_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_14_CS2_E_STOP) OTE(BM1_14_EPB2_ONS) ,OTE(F_BM1_14_CS2_E_STOP) ];
				N: XIC(F_BM1_14_CS2_E_STOP)XIO(I_CS2_BM1_14_EPB)OTE(F_BM1_14_CS2_E_STOP_RESET);
				RC: "BM1_15 E STOP";
				N: [XIC(I_CS_BM1_15_EPB) ,XIC(F_BM1_15_CS_E_STOP) XIO(I_CS_BM1_15_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_15_CS_E_STOP) OTE(BM1_15_EPB_ONS) ,OTE(F_BM1_15_CS_E_STOP) ];
				N: XIC(F_BM1_15_CS_E_STOP)XIO(I_CS_BM1_15_EPB)OTE(F_BM1_15_CS_E_STOP_RESET);
				RC: "BM1_16_A E STOP";
				N: [XIC(I_CS1_BM1_16_EPB) ,XIC(F_BM1_16_CS1_E_STOP) XIO(I_CS1_BM1_16_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_16_CS1_E_STOP) OTE(BM1_16_EPB1_ONS) ,OTE(F_BM1_16_CS1_E_STOP) ];
				N: XIC(F_BM1_16_CS1_E_STOP)XIO(I_CS1_BM1_16_EPB)OTE(F_BM1_16_CS1_E_STOP_RESET);
				RC: "BM1_16_B E STOP";
				N: [XIC(I_CS2_BM1_16_EPB) ,XIC(F_BM1_16_CS2_E_STOP) XIO(I_CS2_BM1_16_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_16_CS2_E_STOP) OTE(BM1_16_EPB2_ONS) ,OTE(F_BM1_16_CS2_E_STOP) ];
				N: XIC(F_BM1_16_CS2_E_STOP)XIO(I_CS2_BM1_16_EPB)OTE(F_BM1_16_CS2_E_STOP_RESET);
				RC: "BM1_17_A E STOP";
				N: [XIC(I_CS2_BM1_17_EPB) ,XIC(F_BM1_17_CS1_E_STOP) XIO(I_CS1_BM1_17_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_17_CS1_E_STOP) OTE(BM1_17_EPB1_ONS) ,OTE(F_BM1_17_CS1_E_STOP) ];
				N: XIC(F_BM1_17_CS1_E_STOP)XIO(I_CS2_BM1_17_EPB)OTE(F_BM1_17_CS1_E_STOP_RESET);
				RC: "BM1_17_B E STOP";
				N: [XIC(I_CS1_BM1_17_EPB) ,XIC(F_BM1_17_CS2_E_STOP) XIO(I_CS1_BM1_17_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_17_CS2_E_STOP) OTE(BM1_17_EPB2_ONS) ,OTE(F_BM1_17_CS2_E_STOP) ];
				N: XIC(F_BM1_17_CS2_E_STOP)XIO(I_CS1_BM1_17_EPB)OTE(F_BM1_17_CS2_E_STOP_RESET);
				RC: "BM1_18 E STOP";
				N: [XIC(I_CS_BM1_18_EPB) ,XIC(F_BM1_18_CS_E_STOP) XIO(I_CS_BM1_18_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_18_CS_E_STOP) OTE(BM1_18_EPB_ONS) ,OTE(F_BM1_18_CS_E_STOP) ];
				N: XIC(F_BM1_18_CS_E_STOP)XIO(I_CS_BM1_18_EPB)OTE(F_BM1_18_CS_E_STOP_RESET);
				RC: "BM1_19 E STOP";
				N: [XIC(I_CS_BM1_19_EPB) ,XIC(F_BM1_19_CS_E_STOP) XIO(I_CS_BM1_19_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_19_CS_E_STOP) OTE(BM1_19_EPB_ONS) ,OTE(F_BM1_19_CS_E_STOP) ];
				N: XIC(F_BM1_19_CS_E_STOP)XIO(I_CS_BM1_19_EPB)OTE(F_BM1_19_CS_E_STOP_RESET);
				RC: "BM1_20 E STOP";
				N: [XIC(I_CS_BM1_20_EPB) ,XIC(F_BM1_20_CS_E_STOP) XIO(I_CS_BM1_20_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_20_CS_E_STOP) OTE(BM1_20_EPB_ONS) ,OTE(F_BM1_20_CS_E_STOP) ];
				N: XIC(F_BM1_20_CS_E_STOP)XIO(I_CS_BM1_20_EPB)OTE(F_BM1_20_CS_E_STOP_RESET);
				RC: "BM1_23_A E STOP";
				N: [XIC(I_CS_BM1_23_EPB) ,XIC(F_BM1_23_CS1_E_STOP) XIO(I_CS_BM1_23_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_23_CS1_E_STOP) OTE(BM1_23_EPB_ONS) ,OTE(F_BM1_23_CS1_E_STOP) ];
				N: XIC(F_BM1_23_CS1_E_STOP)XIO(I_CS_BM1_23_EPB)OTE(F_BM1_23_CS1_E_STOP_RESET);
				RC: "BM1_23_B E STOP";
				N: [XIC(I_CS1_BM1_23_EPB) ,XIC(F_BM1_23_CS2_E_STOP) XIO(I_CS1_BM1_23_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_23_CS2_E_STOP) OTE(BM1_23_EPB1_ONS) ,OTE(F_BM1_23_CS2_E_STOP) ];
				N: XIC(F_BM1_23_CS2_E_STOP)XIO(I_CS1_BM1_23_EPB)OTE(F_BM1_23_CS2_E_STOP_RESET);
				RC: "BM1_25 E STOP";
				N: [XIC(I_CS_BM1_25_EPB) ,XIC(F_BM1_25_CS_E_STOP) XIO(I_CS_BM1_25_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_25_CS_E_STOP) OTE(BM1_25_EPB_ONS) ,OTE(F_BM1_25_CS_E_STOP) ];
				N: XIC(F_BM1_25_CS_E_STOP)XIO(I_CS_BM1_25_EPB)OTE(F_BM1_25_CS_E_STOP_RESET);
				RC: "BM1_27_A E STOP";
				N: [XIC(I_CS1_BM1_27_EPB) ,XIC(F_BM1_27_CS1_E_STOP) XIO(I_CS1_BM1_27_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_27_CS1_E_STOP) OTE(BM1_27_EPB1_ONS) ,OTE(F_BM1_27_CS1_E_STOP) ];
				N: XIC(F_BM1_27_CS1_E_STOP)XIO(I_CS1_BM1_27_EPB)OTE(F_BM1_27_CS1_E_STOP_RESET);
				RC: "BM1_27_B E STOP";
				N: [XIC(I_CS2_BM1_27_EPB) ,XIC(F_BM1_27_CS2_E_STOP) XIO(I_CS2_BM1_27_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_27_CS2_E_STOP) OTE(BM1_27_EPB2_ONS) ,OTE(F_BM1_27_CS2_E_STOP) ];
				N: XIC(F_BM1_27_CS2_E_STOP)XIO(I_CS2_BM1_27_EPB)OTE(F_BM1_27_CS2_E_STOP_RESET);
				RC: "BM1_27_C E STOP";
				N: [XIC(I_CS3_BM1_27_EPB) ,XIC(F_BM1_27_CS3_E_STOP) XIO(I_CS1_BM1_27_RPBA) XIO(I_CS2_BM1_27_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_27_CS3_E_STOP) OTE(BM1_27_EPB3_ONS) ,OTE(F_BM1_27_CS3_E_STOP) ];
				N: XIC(F_BM1_27_CS3_E_STOP)XIO(I_CS3_BM1_27_EPB)OTE(F_BM1_27_CS3_E_STOP_RESET);
				RC: "BM1_27_D E STOP";
				N: [XIC(I_CS4_BM1_27_EPB) ,XIC(F_BM1_27_CS3_E_STOP1) XIO(I_CS1_BM1_27_RPBA) XIO(I_CS2_BM1_27_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_27_CS3_E_STOP1) OTE(BM1_27_EPB4_ONS) ,OTE(F_BM1_27_CS3_E_STOP1) ];
				N: XIC(F_BM1_27_CS3_E_STOP1)XIO(I_CS4_BM1_27_EPB)OTE(F_BM1_27_CS3_E_STOP_RESET1);
				RC: "BM1_27_E E STOP";
				N: [XIC(I_CS5_BM1_27_EPB) ,XIC(F_BM1_27_CS5_E_STOP) XIO(I_CS5_BM1_27_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_27_CS5_E_STOP) OTE(BM1_27_EPB5_ONS) ,OTE(F_BM1_27_CS5_E_STOP) ];
				N: XIC(F_BM1_27_CS5_E_STOP)XIO(I_CS5_BM1_27_EPB)OTE(F_BM1_27_CS5_E_STOP_RESET);
				RC: "BM1_28_A E STOP";
				N: [XIC(I_CS1_BM1_28_EPB) ,XIC(F_BM1_28_CS1_E_STOP) XIO(I_CS4_BM1_28_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_28_CS1_E_STOP) OTE(BM1_28_EPB1_ONS) ,OTE(F_BM1_28_CS1_E_STOP) ];
				N: XIC(F_BM1_28_CS1_E_STOP)XIO(I_CS1_BM1_28_EPB)OTE(F_BM1_28_CS1_E_STOP_RESET);
				RC: "BM1_28_B E STOP";
				N: [XIC(I_CS2_BM1_28_EPB) ,XIC(F_BM1_28_CS2_E_STOP) XIO(I_CS1_BM1_28_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_28_CS2_E_STOP) OTE(BM1_28_EPB2_ONS) ,OTE(F_BM1_28_CS2_E_STOP) ];
				N: XIC(F_BM1_28_CS2_E_STOP)XIO(I_CS2_BM1_28_EPB)OTE(F_BM1_28_CS2_E_STOP_RESET);
				RC: "BM1_28_C E STOP";
				N: [XIC(I_CS3_BM1_28_EPB) ,XIC(F_BM1_28_CS3_E_STOP) XIO(I_CS4_BM1_28_SPBG) XIO(I_CS1_BM1_28_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_28_CS3_E_STOP) OTE(BM1_28_EPB3_ONS) ,OTE(F_BM1_28_CS3_E_STOP) ];
				N: XIC(F_BM1_28_CS3_E_STOP)XIO(I_CS3_BM1_28_EPB)OTE(F_BM1_28_CS3_E_STOP_RESET);
				RC: "BM1_28_D E STOP";
				N: [XIC(I_CS4_BM1_28_EPB) ,XIC(F_BM1_28_CS4_E_STOP) XIO(I_CS4_BM1_28_SPBG) XIO(I_CS1_BM1_28_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_28_CS4_E_STOP) OTE(BM1_28_EPB4_ONS) ,OTE(F_BM1_28_CS4_E_STOP) ];
				N: XIC(F_BM1_28_CS4_E_STOP)XIO(I_CS4_BM1_28_EPB)OTE(F_BM1_28_CS4_E_STOP_RESET);
				RC: "BM1_29_A E STOP";
				N: [XIC(I_CS1_BM1_29_EPB) ,XIC(F_BM1_29_CS1_E_STOP) XIO(I_CS1_BM1_29_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_29_CS1_E_STOP) OTE(BM1_29_EPB1_ONS) ,OTE(F_BM1_29_CS1_E_STOP) ];
				N: XIC(F_BM1_29_CS1_E_STOP)XIO(I_CS1_BM1_29_EPB)OTE(F_BM1_29_CS1_E_STOP_RESET);
				RC: "BM1_29_B E STOP";
				N: [XIC(I_CS2_BM1_29_EPB) ,XIC(F_BM1_29_CS2_E_STOP) XIO(I_CS2_BM1_29_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_29_CS2_E_STOP) OTE(BM1_29_EPB2_ONS) ,OTE(F_BM1_29_CS2_E_STOP) ];
				N: XIC(F_BM1_29_CS2_E_STOP)XIO(I_CS2_BM1_29_EPB)OTE(F_BM1_29_CS2_E_STOP_RESET);
				RC: "BM1_29_C E STOP";
				N: [XIC(I_CS3_BM1_29_EPB) ,XIC(F_BM1_29_CS3_E_STOP) XIO(I_CS1_BM1_29_RPBA) XIO(I_CS4_BM1_28_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_29_CS3_E_STOP) OTE(BM1_29_EPB3_ONS) ,OTE(F_BM1_29_CS3_E_STOP) ];
				N: XIC(F_BM1_29_CS3_E_STOP)XIO(I_CS3_BM1_29_EPB)OTE(F_BM1_29_CS3_E_STOP_RESET);
				RC: "BM1_29_D E STOP";
				N: [XIC(I_CS4_BM1_29_EPB) ,XIC(F_BM1_29_CS4_E_STOP) XIO(I_CS1_BM1_29_RPBA) XIO(I_CS4_BM1_28_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_29_CS4_E_STOP) OTE(BM1_29_EPB4_ONS) ,OTE(F_BM1_29_CS4_E_STOP) ];
				N: XIC(F_BM1_29_CS4_E_STOP)XIO(I_CS4_BM1_29_EPB)OTE(F_BM1_29_CS4_E_STOP_RESET);
				RC: "BM1_30_A E STOP";
				N: [XIC(I_CS1_BM1_30_EPB) ,XIC(F_BM1_30_CS1_E_STOP) XIO(I_CS1_BM1_30_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_30_CS1_E_STOP) OTE(BM1_30_EPB1_ONS) ,OTE(F_BM1_30_CS1_E_STOP) ];
				N: XIC(F_BM1_30_CS1_E_STOP)XIO(I_CS1_BM1_30_EPB)OTE(F_BM1_30_CS1_E_STOP_RESET);
				RC: "BM1_30_B E STOP";
				N: [XIC(I_CS2_BM1_30_EPB) ,XIC(F_BM1_30_CS2_E_STOP) XIO(I_CS2_BM1_30_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_30_CS2_E_STOP) OTE(BM1_30_EPB2_ONS) ,OTE(F_BM1_30_CS2_E_STOP) ];
				N: XIC(F_BM1_30_CS2_E_STOP)XIO(I_CS2_BM1_30_EPB)OTE(F_BM1_30_CS2_E_STOP_RESET);
				RC: "BM1_30_C E STOP";
				N: [XIC(I_CS3_BM1_30_EPB) ,XIC(F_BM1_30_CS3_E_STOP) XIO(I_CS2_BM1_30_RPBA) XIO(I_CS1_BM1_30_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_30_CS3_E_STOP) OTE(BM1_30_EPB3_ONS) ,OTE(F_BM1_30_CS3_E_STOP) ];
				N: XIC(F_BM1_30_CS3_E_STOP)XIO(I_CS3_BM1_30_EPB)OTE(F_BM1_30_CS3_E_STOP_RESET);
				RC: "BM1_30_D E STOP";
				N: [XIC(I_CS4_BM1_30_EPB) ,XIC(F_BM1_30_CS2_E_STOP) XIO(I_CS2_BM1_30_RPBA) XIO(I_CS1_BM1_30_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_30_CS2_E_STOP) OTE(BM1_30_EPB4_ONS) ,OTE(F_BM1_30_CS2_E_STOP) ];
				N: XIC(F_BM1_30_CS2_E_STOP)XIO(I_CS4_BM1_30_EPB)OTE(F_BM1_30_CS2_E_STOP_RESET);
				RC: "BM1_34 E STOP";
				N: [XIC(I_CS_BM1_34_EPB) ,XIC(F_BM1_34_CS_E_STOP) XIO(I_CS_BM1_34_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_34_CS_E_STOP) OTE(BM1_34_EPB_ONS) ,OTE(F_BM1_34_CS_E_STOP) ];
				N: XIC(F_BM1_34_CS_E_STOP)XIO(I_CS_BM1_34_EPB)OTE(F_BM1_34_CS_E_STOP_RESET);
				RC: "BM1_38 E STOP";
				N: [XIC(I_CS_BM1_38_EPB) ,XIC(F_BM1_38_CS_E_STOP) XIO(I_CS_BM1_38_RPBA) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_BM1_RK01_S16_COMM)[XIO(F_BM1_38_CS_E_STOP) OTE(BM1_38_EPB_ONS) ,OTE(F_BM1_38_CS_E_STOP) ];
				N: XIC(F_BM1_38_CS_E_STOP)XIO(I_CS_BM1_38_EPB)OTE(F_BM1_38_CS_E_STOP_RESET);
				RC: "MCP_01 E STOP";
				N: [XIC(I_CS_MCP_01_EPB) ,XIC(F_MCP_01_CS_E_STOP) XIO(I_CS_MCP_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_MCP_01_CS_E_STOP) OTE(MCP_01_EPB_ONS) ,OTE(F_MCP_01_CS_E_STOP) ];
				N: XIC(F_MCP_01_CS_E_STOP)XIO(I_CS_MCP_01_EPB)OTE(F_MCP_01_CS_E_STOP_RESET);
				RC: "MCP_02 E STOP";
				N: [XIC(I_CS_MCP_02_EPB) ,XIC(F_MCP_02_CS_E_STOP) XIO(I_CS_MCP_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_MCP_02_CS_E_STOP) OTE(MCP_02_EPB_ONS) ,OTE(F_MCP_02_CS_E_STOP) ];
				N: XIC(F_MCP_02_CS_E_STOP)XIO(I_CS_MCP_02_EPB)OTE(F_MCP_02_CS_E_STOP_RESET);
				RC: "MCP_03 E STOP";
				N: [XIC(I_CS_MCP_03_EPB) ,XIC(F_MCP_03_CS_E_STOP) XIO(I_CS_MCP_03_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_MCP_03_CS_E_STOP) OTE(MCP_03_EPB_ONS) ,OTE(F_MCP_03_CS_E_STOP) ];
				N: XIC(F_MCP_03_CS_E_STOP)XIO(I_CS_MCP_03_EPB)OTE(F_MCP_03_CS_E_STOP_RESET);
				RC: "MCP_16 E STOP";
				N: [XIC(I_CS_MCP_16_EPB) ,XIC(F_MCP_16_CS_E_STOP) XIO(I_CS_MCP_16_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_MCP_16_CS_E_STOP) OTE(MCP_16_EPB_ONS) ,OTE(F_MCP_16_CS_E_STOP) ];
				N: XIC(F_MCP_16_CS_E_STOP)XIO(I_CS_MCP_16_EPB)OTE(F_MCP_16_CS_E_STOP_RESET);
				RC: "O2T_04 E STOP";
				N: [XIC(I_CS_O2T_04_EPB) ,XIC(F_O2T_04_CS_E_STOP) XIO(I_CS_O2T_04_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_04_CS_E_STOP) OTE(O2T_04_EPB_ONS) ,OTE(F_O2T_04_CS_E_STOP) ];
				N: XIC(F_O2T_04_CS_E_STOP)XIO(I_CS_O2T_04_EPB)OTE(F_O2T_04_CS_E_STOP_RESET);
				RC: "O2T_06 E STOP";
				N: [XIC(I_CS_O2T_06_EPB) ,XIC(F_O2T_06_CS_E_STOP) XIO(I_CS_O2T_06_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_06_CS_E_STOP) OTE(O2T_06_EPB_ONS) ,OTE(F_O2T_06_CS_E_STOP) ];
				N: XIC(F_O2T_06_CS_E_STOP)XIO(I_CS_O2T_06_EPB)OTE(F_O2T_06_CS_E_STOP_RESET);
				RC: "O2T_10 E STOP";
				N: [XIC(I_CS_O2T_10_EPB) ,XIC(F_O2T_10_CS_E_STOP) XIO(I_CS_O2T_10_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_10_CS_E_STOP) OTE(O2T_10_EPB_ONS) ,OTE(F_O2T_10_CS_E_STOP) ];
				N: XIC(F_O2T_10_CS_E_STOP)XIO(I_CS_O2T_10_EPB)OTE(F_O2T_10_CS_E_STOP_RESET);
				RC: "O2T_12 E STOP";
				N: [XIC(I_CS_O2T_12_EPB) ,XIC(F_O2T_12_CS_E_STOP) XIO(I_CS_O2T_12_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_12_CS_E_STOP) OTE(O2T_12_EPB_ONS) ,OTE(F_O2T_12_CS_E_STOP) ];
				N: XIC(F_O2T_12_CS_E_STOP)XIO(I_CS_O2T_12_EPB)OTE(F_O2T_12_CS_E_STOP_RESET);
				RC: "O2T_14 E STOP";
				N: [XIC(I_CS_O2T_14_EPB) ,XIC(F_O2T_14_CS_E_STOP) XIO(I_CS_O2T_14_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_14_CS_E_STOP) OTE(O2T_14_EPB_ONS) ,OTE(F_O2T_14_CS_E_STOP) ];
				N: XIC(F_O2T_14_CS_E_STOP)XIO(I_CS_O2T_14_EPB)OTE(F_O2T_14_CS_E_STOP_RESET);
				RC: "O2T_18 E STOP";
				N: [XIC(I_CS_O2T_18_EPB) ,XIC(F_O2T_18_CS_E_STOP) XIO(I_CS_O2T_18_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_O2T_18_CS_E_STOP) OTE(O2T_18_EPB_ONS) ,OTE(F_O2T_18_CS_E_STOP) ];
				N: XIC(F_O2T_18_CS_E_STOP)XIO(I_CS_O2T_18_EPB)OTE(F_O2T_18_CS_E_STOP_RESET);
				RC: "C2T_13 E STOP";
				N: [XIC(I_CS_C2T_13_EPB) ,XIC(F_C2T_13_CS_E_STOP) XIO(I_CS_C2T_13_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_C2T_13_CS_E_STOP) OTE(C2T_13_EPB_ONS) ,OTE(F_C2T_13_CS_E_STOP) ];
				N: XIC(F_C2T_13_CS_E_STOP)XIO(I_CS_C2T_13_EPB)OTE(F_C2T_13_CS_E_STOP_RESET);
				RC: "C2T_17 E STOP";
				N: [XIC(I_CS_C2T_17_EPB) ,XIC(F_C2T_17_CS_E_STOP) XIO(I_CS_C2T_17_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_01_RK01_S00_COMM)[XIO(F_C2T_17_CS_E_STOP) OTE(C2T_17_EPB_ONS) ,OTE(F_C2T_17_CS_E_STOP) ];
				N: XIC(F_C2T_17_CS_E_STOP)XIO(I_CS_C2T_17_EPB)OTE(F_C2T_17_CS_E_STOP_RESET);
				RC: "CL2T_01_A E STOP";
				N: [XIC(I_CS1_CL2T_01_EPB) ,XIC(F_CL2T_01_CS1_E_STOP) XIO(I_CS1_CL2T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_01_CS1_E_STOP) OTE(CL2T_01_EPB1_ONS) ,OTE(F_CL2T_01_CS1_E_STOP) ];
				N: XIC(F_CL2T_01_CS1_E_STOP)XIO(I_CS1_CL2T_01_EPB)OTE(F_CL2T_01_CS1_E_STOP_RESET);
				RC: "CL2T_01_B E STOP";
				N: [XIC(I_CS2_CL2T_01_EPB) ,XIC(F_CL2T_01_CS2_E_STOP) XIO(I_CS2_CL2T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_01_CS2_E_STOP) OTE(CL2T_01_EPB2_ONS) ,OTE(F_CL2T_01_CS2_E_STOP) ];
				N: XIC(F_CL2T_01_CS2_E_STOP)XIO(I_CS2_CL2T_01_EPB)OTE(F_CL2T_01_CS2_E_STOP_RESET);
				RC: "CL2T_02_A E STOP";
				N: [XIC(I_CS1_CL2T_02_EPB) ,XIC(F_CL2T_02_CS1_E_STOP) XIO(I_CS1_CL2T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_02_CS1_E_STOP) OTE(CL2T_02_EPB1_ONS) ,OTE(F_CL2T_02_CS1_E_STOP) ];
				N: XIC(F_CL2T_02_CS1_E_STOP)XIO(I_CS1_CL2T_02_EPB)OTE(F_CL2T_02_CS1_E_STOP_RESET);
				RC: "CL2T_02_B E STOP";
				N: [XIC(I_CS2_CL2T_02_EPB) ,XIC(F_CL2T_02_CS2_E_STOP) XIO(I_CS2_CL2T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_02_CS2_E_STOP) OTE(CL2T_02_EPB2_ONS) ,OTE(F_CL2T_02_CS2_E_STOP) ];
				N: XIC(F_CL2T_02_CS2_E_STOP)XIO(I_CS2_CL2T_02_EPB)OTE(F_CL2T_02_CS2_E_STOP_RESET);
				RC: "CL2T_02_C E STOP";
				N: [XIC(I_CS3_CL2T_02_EPB) ,XIC(F_CL2T_02_CS3_E_STOP) XIO(I_CS3_CL2T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_02_CS3_E_STOP) OTE(CL2T_02_EPB3_ONS) ,OTE(F_CL2T_02_CS3_E_STOP) ];
				N: XIC(F_CL2T_02_CS3_E_STOP)XIO(I_CS3_CL2T_02_EPB)OTE(F_CL2T_02_CS3_E_STOP_RESET);
				RC: "CL2T_04 E STOP";
				N: [XIC(I_CS_CL2T_04_EPB) ,XIC(F_CL2T_04_CS_E_STOP) XIO(I_CS_CL2T_04_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_04_CS_E_STOP) OTE(CL2T_04_EPB_ONS) ,OTE(F_CL2T_04_CS_E_STOP) ];
				N: XIC(F_CL2T_04_CS_E_STOP)XIO(I_CS_CL2T_04_EPB)OTE(F_CL2T_04_CS_E_STOP_RESET);
				RC: "CL2T_05_A E STOP";
				N: [XIC(I_CS1_CL2T_05_EPB) ,XIC(F_CL2T_05_CS1_E_STOP) XIO(I_CS1_CL2T_05_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_05_CS1_E_STOP) OTE(CL2T_05_EPB1_ONS) ,OTE(F_CL2T_05_CS1_E_STOP) ];
				N: XIC(F_CL2T_05_CS1_E_STOP)XIO(I_CS1_CL2T_05_EPB)OTE(F_CL2T_05_CS1_E_STOP_RESET);
				RC: "CL2T_05_B E STOP";
				N: [XIC(I_CS2_CL2T_05_EPB) ,XIC(F_CL2T_05_CS2_E_STOP) XIO(I_CS2_CL2T_05_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_05_CS2_E_STOP) OTE(CL2T_05_EPB2_ONS) ,OTE(F_CL2T_05_CS2_E_STOP) ];
				N: XIC(F_CL2T_05_CS2_E_STOP)XIO(I_CS2_CL2T_05_EPB)OTE(F_CL2T_05_CS2_E_STOP_RESET);
				RC: "CL2T_09 E STOP";
				N: [XIC(I_CS_CL2T_09_EPB) ,XIC(F_CL2T_09_CS_E_STOP) XIO(I_CS_CL2T_09_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL2T_09_CS_E_STOP) OTE(CL2T_09_EPB_ONS) ,OTE(F_CL2T_09_CS_E_STOP) ];
				N: XIC(F_CL2T_09_CS_E_STOP)XIO(I_CS_CL2T_09_EPB)OTE(F_CL2T_09_CS_E_STOP_RESET);
				RC: "CL3T_01_A E STOP";
				N: [XIC(I_CS1_CL3T_01_EPB) ,XIC(F_CL3T_01_CS1_E_STOP) XIO(I_CS1_CL3T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_01_CS1_E_STOP) OTE(CL3T_01_EPB1_ONS) ,OTE(F_CL3T_01_CS1_E_STOP) ];
				N: XIC(F_CL3T_01_CS1_E_STOP)XIO(I_CS1_CL3T_01_EPB)OTE(F_CL3T_01_CS1_E_STOP_RESET);
				RC: "CL3T_01_B E STOP";
				N: [XIC(I_CS2_CL3T_01_EPB) ,XIC(F_CL3T_01_CS2_E_STOP) XIO(I_CS2_CL3T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_01_CS2_E_STOP) OTE(CL3T_01_EPB2_ONS) ,OTE(F_CL3T_01_CS2_E_STOP) ];
				N: XIC(F_CL3T_01_CS2_E_STOP)XIO(I_CS2_CL3T_01_EPB)OTE(F_CL3T_01_CS2_E_STOP_RESET);
				RC: "CL3T_02_A E STOP";
				N: [XIC(I_CS1_CL3T_02_EPB) ,XIC(F_CL3T_02_CS1_E_STOP) XIO(I_CS1_CL3T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_02_CS1_E_STOP) OTE(CL3T_02_EPB1_ONS) ,OTE(F_CL3T_02_CS1_E_STOP) ];
				N: XIC(F_CL3T_02_CS1_E_STOP)XIO(I_CS1_CL3T_02_EPB)OTE(F_CL3T_02_CS1_E_STOP_RESET);
				RC: "CL3T_02_B E STOP";
				N: [XIC(I_CS2_CL3T_02_EPB) ,XIC(F_CL3T_02_CS2_E_STOP) XIO(I_CS2_CL3T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_02_CS2_E_STOP) OTE(CL3T_02_EPB2_ONS) ,OTE(F_CL3T_02_CS2_E_STOP) ];
				N: XIC(F_CL3T_02_CS2_E_STOP)XIO(I_CS2_CL3T_02_EPB)OTE(F_CL3T_02_CS2_E_STOP_RESET);
				RC: "CL3T_02_C E STOP";
				N: [XIC(I_CS3_CL3T_02_EPB) ,XIC(F_CL3T_02_CS3_E_STOP) XIO(I_CS3_CL3T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_02_CS3_E_STOP) OTE(CL3T_02_EPB3_ONS) ,OTE(F_CL3T_02_CS3_E_STOP) ];
				N: XIC(F_CL3T_02_CS3_E_STOP)XIO(I_CS3_CL3T_02_EPB)OTE(F_CL3T_02_CS3_E_STOP_RESET);
				RC: "CL3T_02_D E STOP";
				N: [XIC(I_CS4_CL3T_02_EPB) ,XIC(F_CL3T_02_CS4_E_STOP) XIO(I_CS4_CL3T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_02_CS4_E_STOP) OTE(CL3T_02_EPB4_ONS) ,OTE(F_CL3T_02_CS4_E_STOP) ];
				N: XIC(F_CL3T_02_CS4_E_STOP)XIO(I_CS4_CL3T_02_EPB)OTE(F_CL3T_02_CS4_E_STOP_RESET);
				RC: "CL3T_04 E STOP";
				N: [XIC(I_CS_CL3T_04_EPB) ,XIC(F_CL3T_04_CS_E_STOP) XIO(I_CS_CL3T_04_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_CL3T_04_CS_E_STOP) OTE(CL3T_04_EPB_ONS) ,OTE(F_CL3T_04_CS_E_STOP) ];
				N: XIC(F_CL3T_04_CS_E_STOP)XIO(I_CS_CL3T_04_EPB)OTE(F_CL3T_04_CS_E_STOP_RESET);
				RC: "O4T_06 E STOP";
				N: [XIC(I_CS_O4T_06_EPB) ,XIC(F_O4T_06_CS_E_STOP) XIO(I_CS_O4T_06_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_O4T_06_CS_E_STOP) OTE(O4T_06_EPB_ONS) ,OTE(F_O4T_06_CS_E_STOP) ];
				N: XIC(F_O4T_06_CS_E_STOP)XIO(I_CS_O4T_06_EPB)OTE(F_O4T_06_CS_E_STOP_RESET);
				RC: "O4T_10 E STOP";
				N: [XIC(I_CS_O4T_10_EPB) ,XIC(F_O4T_10_CS_E_STOP) XIO(I_CS_O4T_10_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_O4T_10_CS_E_STOP) OTE(O4T_10_EPB_ONS) ,OTE(F_O4T_10_CS_E_STOP) ];
				N: XIC(F_O4T_10_CS_E_STOP)XIO(I_CS_O4T_10_EPB)OTE(F_O4T_10_CS_E_STOP_RESET);
				RC: "XO1_01 E STOP";
				N: [XIC(I_CS_XO1_01_EPB) ,XIC(F_XO1_01_CS_E_STOP) XIO(I_CS_XO1_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_XO1_01_CS_E_STOP) OTE(XO1_01_EPB_ONS) ,OTE(F_XO1_01_CS_E_STOP) ];
				N: XIC(F_XO1_01_CS_E_STOP)XIO(I_CS_XO1_01_EPB)OTE(F_XO1_01_CS_E_STOP_RESET);
				RC: "T5T_09 E STOP";
				N: [XIC(I_CS_T5T_09_EPB) ,XIC(F_T5T_09_CS_E_STOP) XIO(I_CS_T5T_09_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_02_RK01_S00_COMM)[XIO(F_T5T_09_CS_E_STOP) OTE(T5T_09_EPB_ONS) ,OTE(F_T5T_09_CS_E_STOP) ];
				N: XIC(F_T5T_09_CS_E_STOP)XIO(I_CS_T5T_09_EPB)OTE(F_T5T_09_CS_E_STOP_RESET);
				RC: "XO2_02 E STOP";
				N: [XIC(I_CS_XO2_02_EPB) ,XIC(F_XO2_02_CS_E_STOP) XIO(I_CS_XO2_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_XO2_02_CS_E_STOP) OTE(X02_05_EPB_ONS) ,OTE(F_XO2_02_CS_E_STOP) ];
				N: XIC(F_XO2_02_CS_E_STOP)XIO(I_CS_XO2_02_EPB)OTE(F_XO2_02_CS_E_STOP_RESET);
				RC: "XO2_05 E STOP";
				N: [XIC(I_CS_XO2_05_EPB) ,XIC(F_XO2_05_CS_E_STOP) XIO(I_CS_XO2_05_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_XO2_05_CS_E_STOP) OTE(XO2_05_EPB_ONS) ,OTE(F_XO2_05_CS_E_STOP) ];
				N: XIC(F_XO2_05_CS_E_STOP)XIO(I_CS_XO2_05_EPB)OTE(F_XO2_05_CS_E_STOP_RESET);
				RC: "CL1T_01_A E STOP";
				N: [XIC(I_CS1_CL1T_01_EPB) ,XIC(F_CL1T_01_CS1_E_STOP) XIO(I_CS1_CL1T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_01_CS1_E_STOP) OTE(CL1T_01_EPB1_ONS) ,OTE(F_CL1T_01_CS1_E_STOP) ];
				N: XIC(F_CL1T_01_CS1_E_STOP)XIO(I_CS1_CL1T_01_EPB)OTE(F_CL1T_01_CS1_E_STOP_RESET);
				RC: "CL1T_01_B E STOP";
				N: [XIC(I_CS2_CL1T_01_EPB) ,XIC(F_CL1T_01_CS2_E_STOP) XIO(I_CS2_CL1T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_01_CS2_E_STOP) OTE(CL1T_01_EPB2_ONS) ,OTE(F_CL1T_01_CS2_E_STOP) ];
				N: XIC(F_CL1T_01_CS2_E_STOP)XIO(I_CS2_CL1T_01_EPB)OTE(F_CL1T_01_CS2_E_STOP_RESET);
				RC: "CL1T_01_C E STOP";
				N: [XIC(I_CS3_CL1T_01_EPB) ,XIC(F_CL1T_01_CS3_E_STOP) XIO(I_CS3_CL1T_01_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_01_CS3_E_STOP) OTE(CL1T_01_EPB3_ONS) ,OTE(F_CL1T_01_CS3_E_STOP) ];
				N: XIC(F_CL1T_01_CS3_E_STOP)XIO(I_CS3_CL1T_01_EPB)OTE(F_CL1T_01_CS3_E_STOP_RESET);
				RC: "CL1T_02_A E STOP";
				N: [XIC(I_CS1_CL1T_02_EPB) ,XIC(F_CL1T_02_CS1_E_STOP) XIO(I_CS1_CL1T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_02_CS1_E_STOP) OTE(CL1T_02_EPB1_ONS) ,OTE(F_CL1T_02_CS1_E_STOP) ];
				N: XIC(F_CL1T_02_CS1_E_STOP)XIO(I_CS1_CL1T_02_EPB)OTE(F_CL1T_02_CS1_E_STOP_RESET);
				RC: "CL1T_02_B E STOP";
				N: [XIC(I_CS2_CL1T_02_EPB) ,XIC(F_CL1T_02_CS2_E_STOP) XIO(I_CS2_CL1T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_02_CS2_E_STOP) OTE(CL1T_02_EPB2_ONS) ,OTE(F_CL1T_02_CS2_E_STOP) ];
				N: XIC(F_CL1T_02_CS2_E_STOP)XIO(I_CS2_CL1T_02_EPB)OTE(F_CL1T_02_CS2_E_STOP_RESET);
				RC: "CL1T_02_C E STOP";
				N: [XIC(I_CS3_CL1T_02_EPB) ,XIC(F_CL1T_02_CS3_E_STOP) XIO(I_CS3_CL1T_02_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_02_CS3_E_STOP) OTE(CL1T_02_EPB3_ONS) ,OTE(F_CL1T_02_CS3_E_STOP) ];
				N: XIC(F_CL1T_02_CS3_E_STOP)XIO(I_CS3_CL1T_02_EPB)OTE(F_CL1T_02_CS3_E_STOP_RESET);
				RC: "CL1T_05 E STOP";
				N: [XIC(I_CS_CL1T_05_EPB) ,XIC(F_CL1T_05_CS_E_STOP) XIO(I_CS_CL1T_05_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_05_CS_E_STOP) OTE(CL1T_05_EPB_ONS) ,OTE(F_CL1T_05_CS_E_STOP) ];
				N: XIC(F_CL1T_05_CS_E_STOP)XIO(I_CS_CL1T_05_EPB)OTE(F_CL1T_05_CS_E_STOP_RESET);
				RC: "CL1T_09 E STOP";
				N: [XIC(I_CS_CL1T_09_EPB) ,XIC(F_CL1T_09_CS_E_STOP) XIO(I_CS_CL1T_09_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_09_CS_E_STOP) OTE(CL1T_09_EPB_ONS) ,OTE(F_CL1T_09_CS_E_STOP) ];
				N: XIC(F_CL1T_09_CS_E_STOP)XIO(I_CS_CL1T_09_EPB)OTE(F_CL1T_09_CS_E_STOP_RESET);
				RC: "CL1T_11 E STOP";
				N: [XIC(I_CS_CL1T_11_EPB) ,XIC(F_CL1T_11_CS_E_STOP) XIO(I_CS_CL1T_11_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_11_CS_E_STOP) OTE(CL1T_11_EPB_ONS) ,OTE(F_CL1T_11_CS_E_STOP) ];
				N: XIC(F_CL1T_11_CS_E_STOP)XIO(I_CS_CL1T_11_EPB)OTE(F_CL1T_11_CS_E_STOP_RESET);
				RC: "CL1T_12 E STOP";
				N: [XIC(I_CS_CL1T_12_EPB) ,XIC(F_CL1T_12_CS_E_STOP) XIO(I_CS_CL1T_12_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_12_CS_E_STOP) OTE(CL1T_12_EPB_ONS) ,OTE(F_CL1T_12_CS_E_STOP) ];
				N: XIC(F_CL1T_12_CS_E_STOP)XIO(I_CS_CL1T_12_EPB)OTE(F_CL1T_12_CS_E_STOP_RESET);
				RC: "CL1T_16 E STOP";
				N: [XIC(I_CS_CL1T_16_EPB) ,XIC(F_CL1T_16_CS_E_STOP) XIO(I_CS_CL1T_16_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_16_CS_E_STOP) OTE(CL1T_16_EPB_ONS) ,OTE(F_CL1T_16_CS_E_STOP) ];
				N: XIC(F_CL1T_16_CS_E_STOP)XIO(I_CS_CL1T_16_EPB)OTE(F_CL1T_16_CS_E_STOP_RESET);
				RC: "CL1T_20 E STOP";
				N: [XIC(I_CS_CL1T_20_EPB) ,XIC(F_CL1T_20_CS_E_STOP) XIO(I_CS_CL1T_20_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_20_CS_E_STOP) OTE(CL1T_20_EPB_ONS) ,OTE(F_CL1T_20_CS_E_STOP) ];
				N: XIC(F_CL1T_20_CS_E_STOP)XIO(I_CS_CL1T_20_EPB)OTE(F_CL1T_20_CS_E_STOP_RESET);
				RC: "CL1T_24 E STOP";
				N: [XIC(I_CS_CL1T_24_EPB) ,XIC(F_CL1T_24_CS_E_STOP) XIO(I_CS_CL1T_24_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_CL1T_24_CS_E_STOP) OTE(CL1T_24_EPB_ONS) ,OTE(F_CL1T_24_CS_E_STOP) ];
				N: XIC(F_CL1T_24_CS_E_STOP)XIO(I_CS_CL1T_24_EPB)OTE(F_CL1T_24_CS_E_STOP_RESET);
				RC: "HX1T_10 E STOP";
				N: [XIC(I_CS_HX1T_10_EPB) ,XIC(F_HX1T_10_CS_E_STOP) XIO(I_CS_HX1T_10_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_03_RK01_S00_COMM)[XIO(F_HX1T_10_CS_E_STOP) OTE(HX1T_10_EPB_ONS) ,OTE(F_HX1T_10_CS_E_STOP) ];
				N: XIC(F_HX1T_10_CS_E_STOP)XIO(I_CS_HX1T_10_EPB)OTE(F_HX1T_10_CS_E_STOP_RESET);
				RC: "O3T_17 E STOP";
				N: [XIC(I_CS_O3T_17_EPB) ,XIC(F_O3T_17_CS_E_STOP) XIO(I_CS_O3T_17_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O3T_17_CS_E_STOP) OTE(O3T_17_EPB_ONS) ,OTE(F_O3T_17_CS_E_STOP) ];
				N: XIC(F_O3T_17_CS_E_STOP)XIO(I_CS_O3T_17_EPB)OTE(F_O3T_17_CS_E_STOP_RESET);
				RC: "O3T_19_A E STOP";
				N: [XIC(I_CS1_O3T_19_EPB) ,XIC(F_O3T_19_CS1_E_STOP) XIO(I_CS1_O3T_19_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O3T_19_CS1_E_STOP) OTE(O3T_19_EPB1_ONS) ,OTE(F_O3T_19_CS1_E_STOP) ];
				N: XIC(F_O3T_19_CS1_E_STOP)XIO(I_CS1_O3T_19_EPB)OTE(F_O3T_19_CS1_E_STOP_RESET);
				RC: "O3T_19_B E STOP";
				N: [XIC(I_CS2_O3T_19_EPB) ,XIC(F_O3T_19_CS2_E_STOP) XIO(I_CS2_O3T_19_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O3T_19_CS2_E_STOP) OTE(O3T_19_EPB2_ONS) ,OTE(F_O3T_19_CS2_E_STOP) ];
				N: XIC(F_O3T_19_CS2_E_STOP)XIO(I_CS2_O3T_19_EPB)OTE(F_O3T_19_CS2_E_STOP_RESET);
				RC: "O4T_16 E STOP";
				N: [XIC(I_CS_O4T_16_EPB) ,XIC(F_O4T_16_CS_E_STOP) XIO(I_CS_O4T_16_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O4T_16_CS_E_STOP) OTE(O4T_16_EPB_ONS) ,OTE(F_O4T_16_CS_E_STOP) ];
				N: XIC(F_O4T_16_CS_E_STOP)XIO(I_CS_O4T_16_EPB)OTE(F_O4T_16_CS_E_STOP_RESET);
				RC: "O4T_21_A E STOP";
				N: [XIC(I_CS1_O4T_21_EPB) ,XIC(F_O4T_19_CS1_E_STOP) XIO(I_CS1_O4T_21_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O4T_19_CS1_E_STOP) OTE(O4T_21_EPB1_ONS) ,OTE(F_O4T_19_CS1_E_STOP) ];
				N: XIC(F_O4T_19_CS1_E_STOP)XIO(I_CS1_O4T_21_EPB)OTE(F_O4T_19_CS1_E_STOP_RESET);
				RC: "O4T_21_B E STOP";
				N: [XIC(I_CS2_O4T_21_EPB) ,XIC(F_O4T_19_CS2_E_STOP) XIO(I_CS2_O4T_21_SPBG) ]XIO(F_MCP_CC01_RK01_S02_COMM)XIO(F_MCP_16_RK01_S00_COMM)[XIO(F_O4T_19_CS2_E_STOP) OTE(O4T_21_EPB2_ONS) ,OTE(F_O4T_19_CS2_E_STOP) ];
				N: XIC(F_O4T_19_CS2_E_STOP)XIO(I_CS2_O4T_21_EPB)OTE(F_O4T_19_CS2_E_STOP_RESET);
				RC: "****************************************************************$N"
				    "E-Stop zone grouping$N"
				    "****************************************************************";
				N: NOP();
				RC: "E-Stop Zone BM1_ECR_1.";
				N: XIO(F_MCP_BM1_CS_E_STOP)OTE(EZ_BM1_ECR_1.Zone_OK);
				N: XIO(I_CS_MCP_BM1_EPB)XIO(EZ_BM1_ECR_1.Zone_OK)OTE(EZ_BM1_ECR_1.Zone_RES);
				RC: "E-Stop Zone 30100.";
				N: XIO(F_MCP_01_CS_E_STOP)OTE(EZ_30100.Zone_OK);
				N: XIO(I_CS_MCP_01_EPB)XIO(EZ_30100.Zone_OK)OTE(EZ_30100.Zone_RES);
				RC: "E-Stop Zone 30200.";
				N: XIO(F_MCP_02_CS_E_STOP)OTE(EZ_30200.Zone_OK);
				N: XIO(I_CS_MCP_02_EPB)XIO(EZ_30200.Zone_OK)OTE(EZ_30200.Zone_RES);
				RC: "E-Stop Zone 30300.";
				N: XIO(F_MCP_03_CS_E_STOP)OTE(EZ_30300.Zone_OK);
				N: XIO(I_CS_MCP_03_EPB)XIO(EZ_30300.Zone_OK)OTE(EZ_30300.Zone_RES);
				RC: "E-Stop Zone 31600.";
				N: XIO(F_MCP_16_CS_E_STOP)OTE(EZ_31600.Zone_OK);
				N: XIO(I_CS_MCP_16_EPB)XIO(EZ_31600.Zone_OK)OTE(EZ_31600.Zone_RES);
				RC: "E-Stop Zone ZONE_1.";
				N: XIO(F_BM1_01_CS_E_STOP)XIO(F_BM1_02_CS_E_STOP)XIO(F_BM1_03_CS_E_STOP)XIO(F_BM1_06_CS_E_STOP)XIO(F_BM1_07_CS_E_STOP)XIO(F_BM1_13_CS_E_STOP)OTE(EZ_ZONE_1.Zone_OK);
				N: XIO(I_CS_BM1_01_EPB)XIO(I_CS_BM1_02_EPB)XIO(I_CS_BM1_03_EPB)XIO(I_CS_BM1_06_EPB)XIO(I_CS_BM1_07_EPB)XIO(I_CS_BM1_13_EPB)XIO(EZ_ZONE_1.Zone_OK)OTE(EZ_ZONE_1.Zone_RES);
				RC: "E-Stop Zone ZONE_2.";
				N: XIO(F_BM1_13_CS_E_STOP)XIO(F_BM1_14_CS1_E_STOP)XIO(F_BM1_14_CS2_E_STOP)XIO(F_BM1_15_CS_E_STOP)XIO(F_BM1_16_CS1_E_STOP)XIO(F_BM1_16_CS2_E_STOP)XIO(F_BM1_17_CS1_E_STOP)XIO(F_BM1_17_CS2_E_STOP)XIO(F_BM1_18_CS_E_STOP)XIO(F_BM1_19_CS_E_STOP)XIO(F_BM1_20_CS_E_STOP)XIO(F_BM1_23_CS1_E_STOP)XIO(F_BM1_23_CS2_E_STOP)XIO(F_BM1_25_CS_E_STOP)XIO(F_BM1_27_CS1_E_STOP)XIO(F_BM1_27_CS2_E_STOP)XIO(F_BM1_27_CS3_E_STOP)XIO(F_BM1_27_CS3_E_STOP1)XIO(F_BM1_27_CS5_E_STOP)XIO(F_BM1_28_CS1_E_STOP)XIO(F_BM1_28_CS2_E_STOP)XIO(F_BM1_28_CS3_E_STOP)XIO(F_BM1_28_CS4_E_STOP)XIO(F_BM1_29_CS1_E_STOP)XIO(F_BM1_29_CS2_E_STOP)XIO(F_BM1_29_CS3_E_STOP)XIO(F_BM1_29_CS4_E_STOP)XIO(F_BM1_30_CS1_E_STOP)XIO(F_BM1_30_CS2_E_STOP)XIO(F_BM1_30_CS3_E_STOP)XIO(F_BM1_30_CS2_E_STOP)XIO(F_BM1_34_CS_E_STOP)XIO(F_BM1_38_CS_E_STOP)XIO(F_O2T_18_CS_E_STOP)OTE(EZ_ZONE_2.Zone_OK);
				N: XIO(I_CS_BM1_13_EPB)XIO(I_CS1_BM1_14_EPB)XIO(I_CS2_BM1_14_EPB)XIO(I_CS_BM1_15_EPB)XIO(I_CS1_BM1_16_EPB)XIO(I_CS2_BM1_16_EPB)XIO(I_CS2_BM1_17_EPB)XIO(I_CS1_BM1_17_EPB)XIO(I_CS_BM1_18_EPB)XIO(I_CS_BM1_19_EPB)XIO(I_CS_BM1_20_EPB)XIO(I_CS_BM1_23_EPB)XIO(I_CS1_BM1_23_EPB)XIO(I_CS_BM1_25_EPB)XIO(I_CS1_BM1_27_EPB)XIO(I_CS2_BM1_27_EPB)XIO(I_CS3_BM1_27_EPB)XIO(I_CS4_BM1_27_EPB)XIO(I_CS5_BM1_27_EPB)XIO(I_CS1_BM1_28_EPB)XIO(I_CS2_BM1_28_EPB)XIO(I_CS3_BM1_28_EPB)XIO(I_CS4_BM1_28_EPB)XIO(I_CS5_BM1_28_EPB)XIO(I_CS1_BM1_29_EPB)XIO(I_CS2_BM1_29_EPB)XIO(I_CS3_BM1_29_EPB)XIO(I_CS4_BM1_29_EPB)XIO(I_CS1_BM1_30_EPB)XIO(I_CS2_BM1_30_EPB)XIO(I_CS3_BM1_30_EPB)XIO(I_CS4_BM1_30_EPB)XIO(I_CS_BM1_34_EPB)XIO(I_CS_BM1_38_EPB)XIO(I_CS_O2T_18_EPB)XIO(EZ_ZONE_2.Zone_OK)OTE(EZ_ZONE_2.Zone_RES);
				RC: "E-Stop Zone 30101.";
				N: XIO(F_O2T_04_CS_E_STOP)XIO(F_O2T_06_CS_E_STOP)XIO(F_O2T_10_CS_E_STOP)XIO(F_C2T_17_CS_E_STOP)OTE(EZ_30101.Zone_OK);
				N: XIO(I_CS_O2T_04_EPB)XIO(I_CS_O2T_06_EPB)XIO(I_CS_O2T_10_EPB)XIO(I_CS_C2T_17_EPB)XIO(EZ_30101.Zone_OK)OTE(EZ_30101.Zone_RES);
				RC: "E-Stop Zone 30102.";
				N: XIO(F_C2T_13_CS_E_STOP)OTE(EZ_30102.Zone_OK);
				N: XIO(I_CS_C2T_13_EPB)XIO(EZ_30102.Zone_OK)OTE(EZ_30102.Zone_RES);
				RC: "E-Stop Zone 30103.";
				N: XIO(F_O2T_12_CS_E_STOP)XIO(F_O2T_14_CS_E_STOP)OTE(EZ_30103.Zone_OK);
				N: XIO(I_CS_O2T_12_EPB)XIO(I_CS_O2T_14_EPB)XIO(EZ_30103.Zone_OK)OTE(EZ_30103.Zone_RES);
				RC: "E-Stop Zone 30201.";
				N: XIO(F_CL2T_01_CS1_E_STOP)XIO(F_CL2T_01_CS2_E_STOP)XIO(F_CL2T_02_CS1_E_STOP)XIO(F_CL2T_02_CS2_E_STOP)XIO(F_CL2T_02_CS3_E_STOP)XIO(F_CL2T_04_CS_E_STOP)XIO(F_CL2T_05_CS1_E_STOP)XIO(F_CL2T_05_CS2_E_STOP)XIO(F_CL2T_09_CS_E_STOP)OTE(EZ_30201.Zone_OK);
				N: XIO(I_CS1_CL2T_01_EPB)XIO(I_CS2_CL2T_01_EPB)XIO(I_CS1_CL2T_02_EPB)XIO(I_CS2_CL2T_02_EPB)XIO(I_CS3_CL2T_02_EPB)XIO(I_CS_CL2T_04_EPB)XIO(I_CS1_CL2T_05_EPB)XIO(I_CS2_CL2T_05_EPB)XIO(I_CS_CL2T_09_EPB)XIO(EZ_30201.Zone_OK)OTE(EZ_30201.Zone_RES);
				RC: "E-Stop Zone 30202.";
				N: XIO(F_CL3T_01_CS1_E_STOP)XIO(F_CL3T_01_CS2_E_STOP)XIO(F_CL3T_02_CS1_E_STOP)XIO(F_CL3T_02_CS2_E_STOP)XIO(F_CL3T_02_CS3_E_STOP)XIO(F_CL3T_02_CS4_E_STOP)XIO(zzzF_CL3T_03_CS_E_STOP)XIO(F_CL3T_04_CS_E_STOP)OTE(EZ_30202.Zone_OK);
				N: XIO(I_CS1_CL3T_01_EPB)XIO(I_CS2_CL3T_01_EPB)XIO(I_CS1_CL3T_02_EPB)XIO(I_CS2_CL3T_02_EPB)XIO(I_CS3_CL3T_02_EPB)XIO(I_CS4_CL3T_02_EPB)XIO(I_CS_CL3T_03_EPB)XIO(I_CS_CL3T_04_EPB)XIO(EZ_30202.Zone_OK)OTE(EZ_30202.Zone_RES);
				RC: "E-Stop Zone 30203.";
				N: XIO(F_O4T_06_CS_E_STOP)XIO(F_O4T_10_CS_E_STOP)XIO(F_XO1_01_CS_E_STOP)XIO(F_T5T_09_CS_E_STOP)OTE(EZ_30203.Zone_OK);
				N: XIO(I_CS_O4T_06_EPB)XIO(I_CS_O4T_10_EPB)XIO(I_CS_XO1_01_EPB)XIO(I_CS_T5T_09_EPB)XIO(EZ_30203.Zone_OK)OTE(EZ_30203.Zone_RES);
				RC: "E-Stop Zone A32A3.";
				N: OTE(EZ_A32A3.Zone_OK);
				N: XIO(EZ_A32A3.Zone_OK)OTE(EZ_A32A3.Zone_RES);
				RC: "E-Stop Zone A32B3.";
				N: XIO(F_XO2_05_CS_E_STOP)OTE(EZ_A32B3.Zone_OK);
				N: XIO(I_CS_XO2_05_EPB)XIO(EZ_A32B3.Zone_OK)OTE(EZ_A32B3.Zone_RES);
				RC: "E-Stop Zone 30307.";
				N: XIO(F_XO2_02_CS_E_STOP)OTE(EZ_30307.Zone_OK);
				N: XIO(I_CS_XO2_02_EPB)XIO(EZ_30307.Zone_OK)OTE(EZ_30307.Zone_RES);
				RC: "E-Stop Zone 30301.";
				N: XIO(F_CL1T_01_CS1_E_STOP)XIO(F_CL1T_01_CS2_E_STOP)XIO(F_CL1T_01_CS3_E_STOP)XIO(F_CL1T_02_CS1_E_STOP)XIO(F_CL1T_02_CS2_E_STOP)XIO(F_CL1T_02_CS3_E_STOP)XIO(F_CL1T_05_CS_E_STOP)OTE(EZ_30301.Zone_OK);
				N: XIO(I_CS1_CL1T_01_EPB)XIO(I_CS2_CL1T_01_EPB)XIO(I_CS3_CL1T_01_EPB)XIO(I_CS1_CL1T_02_EPB)XIO(I_CS2_CL1T_02_EPB)XIO(I_CS3_CL1T_02_EPB)XIO(I_CS_CL1T_05_EPB)XIO(EZ_30301.Zone_OK)OTE(EZ_30301.Zone_RES);
				RC: "E-Stop Zone A3283.";
				N: OTE(EZ_A3283.Zone_OK);
				N: XIO(EZ_A3283.Zone_OK)OTE(EZ_A3283.Zone_RES);
				RC: "E-Stop Zone 30303.";
				N: XIO(F_CL1T_09_CS_E_STOP)XIO(F_CL1T_11_CS_E_STOP)XIO(F_CL1T_12_CS_E_STOP)OTE(EZ_30303.Zone_OK);
				N: XIO(I_CS_CL1T_09_EPB)XIO(I_CS_CL1T_11_EPB)XIO(I_CS_CL1T_12_EPB)XIO(EZ_30303.Zone_OK)OTE(EZ_30303.Zone_RES);
				RC: "E-Stop Zone 30304.";
				N: XIO(F_CL1T_16_CS_E_STOP)OTE(EZ_30304.Zone_OK);
				N: XIO(I_CS_CL1T_16_EPB)XIO(EZ_30304.Zone_OK)OTE(EZ_30304.Zone_RES);
				RC: "E-Stop Zone 30305.";
				N: XIO(F_CL1T_20_CS_E_STOP)XIO(F_CL1T_24_CS_E_STOP)XIO(F_HX1T_10_CS_E_STOP)OTE(EZ_30305.Zone_OK);
				N: XIO(I_CS_CL1T_20_EPB)XIO(I_CS_CL1T_24_EPB)XIO(I_CS_HX1T_10_EPB)XIO(EZ_30305.Zone_OK)OTE(EZ_30305.Zone_RES);
				RC: "E-Stop Zone 30306.";
				N: OTE(EZ_30306.Zone_OK);
				N: XIO(EZ_30306.Zone_OK)OTE(EZ_30306.Zone_RES);
				RC: "E-Stop Zone W15_1CR.";
				N: XIO(F_O4T_16_CS_E_STOP)XIO(F_O4T_19_CS1_E_STOP)XIO(F_O4T_19_CS2_E_STOP)OTE(EZ_W15_1CR.Zone_OK);
				N: XIO(I_CS_O4T_16_EPB)XIO(I_CS1_O4T_21_EPB)XIO(I_CS2_O4T_21_EPB)XIO(EZ_W15_1CR.Zone_OK)OTE(EZ_W15_1CR.Zone_RES);
				RC: "E-Stop Zone W12_1CR.";
				N: XIO(F_O3T_17_CS_E_STOP)XIO(F_O3T_19_CS1_E_STOP)XIO(F_O3T_19_CS2_E_STOP)XIO(F_CL12T_36_CS_E_STOP)OTE(EZ_W12_1CR.Zone_OK);
				N: XIO(I_CS_O3T_17_EPB)XIO(I_CS1_O3T_19_EPB)XIO(I_CS2_O3T_19_EPB)XIO(I_CS_CL12T_36_EPB)XIO(EZ_W12_1CR.Zone_OK)OTE(EZ_W12_1CR.Zone_RES);
		END_ROUTINE

		ROUTINE FIRST_SCAN 
				RC: "****************************************************************************************************$N"
				    "This routine is configured to run once on the first scan of the PLC code.$N"
				    "This logic resets major fault codes.  This is here so that if there is a major fault that halts the controller, if someone does a power cycle to reset the fault the HMI will update correctly.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: [MOV(0,F_PLC[0]) ,CLR(S_PLC_101_PRG_FAULT_TYPE) ,CLR(S_PLC_101_PRG_FAULT_CODE) ,CLR(S_PLC_101_CNTRL_FAULT_TYPE) ,CLR(S_PLC_101_CNTRL_FAULT_CODE) ];
				RC: "Initialize Flasher control timers";
				N: [MOV(1000,INT.FlasherOff_TON.PRE) MOV(1000,INT.FlasherOn_TON.PRE) ,MOV(500,INT.Flasher2Off_TON.PRE) MOV(500,INT.Flasher2On_TON.PRE) ];
		END_ROUTINE

		ROUTINE HX1T_10_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE2_CL1T_26)OTL(HX1T_10_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(CL1T_26_BT.BT_PULSE)[OTU(HX1T_10_MRG.MainLineBScntrl.EN) ,BSR(HX1T_10_MRG.MainLineBS[0],HX1T_10_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(HX1T_10_MRG.Lead_Gap_Acc.6) ADD(1,HX1T_10_MRG.Lead_Gap_Acc,HX1T_10_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(HX1T_10_MRG.BagPastPE,HX1T_10_MRGx.Lead_Gap,HX1T_10_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(HX1T_10_MRG.MainLineBScntrl.UL)CLR(HX1T_10_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(HX1T_10_MRG.Lead_Gap_Acc,HX1T_10_MRG.Lead_Gap)OTE(HX1T_10_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(HX1T_10_MRG.MrgSeal)XIC(HX1T_10_PE.FILT_NEG_XITN)RES(HX1T_10_MRG.SyncRunTmr);
				N: [XIC(HX1T_10_MTR.CONV_RUN) ,XIC(HX1T_10_MTR.IM_TMR.TT) ]RTO(HX1T_10_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_HX1T_10) ,XIC(HX1T_10_PE.FILT) ,XIC(HX1T_10_MRG.PeSeal) XIO(HX1T_10_MTR.ANTI_CASC) XIO(HX1T_10_MTR.CONV_RUN) XIC(HX1T_10_MTR.INTL_MTR) ][XIO(HX1T_10_MRG.PeSeal) OTE(HX1T_10_MRG.PeSeal_PosXitn) ,OTE(HX1T_10_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(HX1T_10_MRG.PeSeal_PosXitn)[MOV(HX1T_10_MRG.Length,HX1T_10_MRG.BagLength_Gap) CLR(HX1T_10_MRG.Length) ,MOV(54,HX1T_10_MRGx.MinLength) ,EQU(HX1T_10_MRG.BagLength_Gap,0) DIV(HX1T_10_MRGx.MinLength,HX1T_10_BTx.RES,HX1T_10_MRG.BagLength_Gap) ,ADD(HX1T_10_MRG.BagLength_Gap,HX1T_10_MRGx.Trail_Gap,HX1T_10_MRG.BagLength_Gap) ,GRT(HX1T_10_MRG.BagLength_Gap,HX1T_10_MRGx.MaxLength) MOV(HX1T_10_MRGx.MaxLength,HX1T_10_MRG.BagLength_Gap) ,FLL(0,HX1T_10_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[HX1T_10_MRG.BagLength_Gap],HX1T_10_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[HX1T_10_MRG.BagLength_Gap],HX1T_10_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[HX1T_10_MRG.BagLength_Gap],HX1T_10_MRG.MrgLineBS[2]) ,CLR(HX1T_10_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(HX1T_10_MRG.PeSeal)XIO(HX1T_10_MRG.MrgSeal)XIC(HX1T_10_BT.BT_PULSE)[OTU(HX1T_10_MRG.MrgLineBScntrl.EN) ,BSR(HX1T_10_MRG.MrgLineBS[0],HX1T_10_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,HX1T_10_MRG.BagPastPE,HX1T_10_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(HX1T_10_MRG.MainLineBS[0],HX1T_10_MRG.MrgLineBS[0],HX1T_10_MRG.Intrfr[0])AND(HX1T_10_MRG.MainLineBS[1],HX1T_10_MRG.MrgLineBS[1],HX1T_10_MRG.Intrfr[1])AND(HX1T_10_MRG.MainLineBS[2],HX1T_10_MRG.MrgLineBS[2],HX1T_10_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(HX1T_10_MRG.Intrfr[0],0)EQU(HX1T_10_MRG.Intrfr[1],0)EQU(HX1T_10_MRG.Intrfr[2],0)[XIC(HX1T_10_MRG.Lead_Gap_DN) ,XIC(HX1T_10_MRG.Hold_Align) ][XIO(HX1T_10_MRG.MrgOK) OTE(HX1T_10_MRG.MrgOK_PosXitn) ,OTE(HX1T_10_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(HX1T_10_MTR.INTL_MTR) [XIO(HX1T_10_MRG.Hold_MB) XIO(HX1T_10_MRG.Hold_MA) XIO(HX1T_10_MRG.Hold_Align) XIC(HX1T_10_MRG.MrgOK) ,XIC(HX1T_10_MRG.Hold_MA) XIO(HX1T_10_MRG.MrgOK) ,XIC(HX1T_10_MRG.MrgOK_PosXitn) ] ,XIC(HX1T_10_MRG.MrgSeal) ]XIO(HX1T_10_MTR.SPACE)XIC(HX1T_10_MRG.PeSeal)[OTE(HX1T_10_MRG.MrgSeal) ,OTU(HX1T_10_MRG.Hold_MA) ,OTU(HX1T_10_MRG.Hold_MB) ,OTU(HX1T_10_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(HX1T_10_MRG.PeSeal)XIC(CL1T_26_MTR.CONV_RUN)RTO(HX1T_10_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(HX1T_10_MRG.MLPriorityTmr.DN)OTE(HX1T_10_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(HX1T_10_MRG.PriorityStop)XIC(HX1T_10_MTR.CONV_RUN)RTO(HX1T_10_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(HX1T_10_MRG.MrgSeal)XIO(HX1T_10_MRG.PriorityStop)RES(HX1T_10_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(HX1T_10_MRG.MrgLBagflow.DN)[XIO(HX1T_10_MRG.PeSeal) RES(HX1T_10_MRG.MLPriorityTmr) ,RES(HX1T_10_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(HX1T_10_MRG.MrgLPriorityTmr.DN)[RES(HX1T_10_MRG.MrgLPriorityTmr) ,RES(HX1T_10_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(HX1T_09_PE.FILT)TON(HX1T_10_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(HX1T_09_MTR.CONV_RUN) [XIO(I_PE_HX1T_09) ,XIC(HX1T_09_PE.FILT) ] ,XIC(HX1T_08_MTR.CONV_RUN) [XIO(I_PE_HX1T_08) ,XIC(HX1T_08_PE.FILT) ] ,XIC(HX1T_10_MRG.PeSeal) ,XIC(HX1T_10_MTR.IM_ONS) ,XIC(F_HX1T_10_OVRIDE) ]RES(HX1T_10_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(HX1T_10_MTR.CONV_RUN)RTO(HX1T_10_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(HX1T_10_PE.FILT) XIC(HX1T_10_MRG.MrgOK_PosXitn) ,XIC(HX1T_10_PE.FILT_POS_XITN) XIC(HX1T_10_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(126,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE HX1T_10_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(CL1T_26_PE1.FILT_NEG_XITN)MOV(0,HX1T_10_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(CL1T_26_PE1.POS_XITN)[MOV(HX1T_10_MRG.HeadHeadAcc,HX1T_10_MRG.HeadHeadCnt) ,MOV(HX1T_10_MRG.TailHeadAcc,HX1T_10_MRG.TailHeadCnt) ,MOV(0,HX1T_10_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(CL1T_26_BT.BT_PULSE)[ADD(1,HX1T_10_MRG.HeadHeadAcc,HX1T_10_MRG.HeadHeadAcc) ,ADD(1,HX1T_10_MRG.TailHeadAcc,HX1T_10_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(CL1T_26_PE1.POS_XITN)CPT(HX1T_10_MRG.LastBagMrgWndo,HX1T_10_MRG.HeadHeadCnt*CL1T_26_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(CL1T_26_PE1.POS_XITN)CPT(HX1T_10_MRG.LastBagGapDist,HX1T_10_MRG.TailHeadCnt*CL1T_26_BTx.RES);
		END_ROUTINE

		ROUTINE HX1T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_HX1T_10A_PE_JAMMED) XIC(I_PE_HX1T_10A) ,XIC(F_HX1T_10_PE_JAMMED) XIC(I_PE_HX1T_10) ,XIC(F_HX1T_09_PE_JAMMED) XIC(I_PE_HX1T_09) ,XIC(F_HX1T_08_PE_JAMMED) XIC(I_PE_HX1T_08) ,XIC(F_HX1T_07_PE_JAMMED) XIC(I_PE_HX1T_07) ,XIC(F_HX1T_06_PE_JAMMED) XIC(I_PE_HX1T_06) ,XIC(F_CL1T_26_PE1_JAMMED) XIC(I_PE1_CL1T_26) ,XIC(F_HX1T_10_CS_E_STOP) XIO(I_CS_HX1T_10_EPB) ,AFI() ]OTE(CS_HX1T_10_LTA_FLASH);
				N: [[XIC(F_HX1T_10A_PE_JAMMED) ,XIC(F_HX1T_10_PE_JAMMED) ,XIC(F_HX1T_09_PE_JAMMED) ,XIC(F_HX1T_08_PE_JAMMED) ,XIC(F_HX1T_07_PE_JAMMED) ,XIC(F_HX1T_06_PE_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,AFI() ,AFI() ] XIO(CS_HX1T_10_LTA_FLASH) ,XIC(CS_HX1T_10_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_HX1T_10_RPBA);
				N: XIO(EZ_30305.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_HX1T_10_EPB) ]OTE(O_CS_HX1T_10_EPB);
				N: XIC(F_HX1T_10_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_HX1T_10_SPBG);
		END_ROUTINE

		ROUTINE HX1T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_10_MTR.G) ,[XIC(HX1T_10_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_10_MTR.G) ,XIC(F_HX1T_10_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.CASC) MOV(Status.ConvCascade,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.CASC) XIO(I_PE_HX1T_10) MOV(Status.ConvBagPresCasc,HX1T_10_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_10_MTR.G) ,XIC(F_HX1T_10_MSD_OFF) MOV(Status.ConvDisc,HX1T_10_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_10_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_10_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_10_MTR.G) ,XIC(F_HX1T_10_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_10_MTR.G) ,XIC(F_HX1T_10_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_10_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_10_MTR.G) ,XIC(F_HX1T_10_OVRIDE) MOV(Status.ConvOverRide,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.E_STOP) XIO(HX1T_10_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_10_MTR.G) ,XIC(F_HX1T_10_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_10_MTR.G) ,XIC(HX1T_10_MTR.COMM) MOV(Status.ConvCommFault,HX1T_10_MTR.G) ,MOV(HX1T_10_MTR.G,G_HX1T_10_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_09_MTR.G) ,[XIC(HX1T_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_09_MTR.G) ,XIC(F_HX1T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.CASC) MOV(Status.ConvCascade,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.CASC) XIO(I_PE_HX1T_09) MOV(Status.ConvBagPresCasc,HX1T_09_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_09_MTR.G) ,XIC(F_HX1T_09_MSD_OFF) MOV(Status.ConvDisc,HX1T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_09_MTR.G) ,XIC(F_HX1T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_09_MTR.G) ,XIC(F_HX1T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_09_MTR.G) ,XIC(F_HX1T_09_OVRIDE) MOV(Status.ConvOverRide,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.E_STOP) XIO(HX1T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_09_MTR.G) ,XIC(F_HX1T_09_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_09_MTR.G) ,XIC(HX1T_09_MTR.COMM) MOV(Status.ConvCommFault,HX1T_09_MTR.G) ,MOV(HX1T_09_MTR.G,G_HX1T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_08_MTR.G) ,[XIC(HX1T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_08_MTR.G) ,XIC(F_HX1T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.CASC) MOV(Status.ConvCascade,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.CASC) XIO(I_PE_HX1T_08) MOV(Status.ConvBagPresCasc,HX1T_08_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_08_MTR.G) ,XIC(F_HX1T_08_MSD_OFF) MOV(Status.ConvDisc,HX1T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_08_MTR.G) ,XIC(F_HX1T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_08_MTR.G) ,XIC(F_HX1T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_08_MTR.G) ,XIC(F_HX1T_08_OVRIDE) MOV(Status.ConvOverRide,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.E_STOP) XIO(HX1T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_08_MTR.G) ,XIC(F_HX1T_08_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_08_MTR.G) ,XIC(HX1T_08_MTR.COMM) MOV(Status.ConvCommFault,HX1T_08_MTR.G) ,MOV(HX1T_08_MTR.G,G_HX1T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_07_MTR.G) ,[XIC(HX1T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_07_MTR.G) ,XIC(F_HX1T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.CASC) MOV(Status.ConvCascade,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.CASC) XIO(I_PE_HX1T_07) MOV(Status.ConvBagPresCasc,HX1T_07_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_07_MTR.G) ,XIC(F_HX1T_07_MSD_OFF) MOV(Status.ConvDisc,HX1T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_07_MTR.G) ,XIC(F_HX1T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_07_MTR.G) ,XIC(F_HX1T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_07_MTR.G) ,XIC(F_HX1T_07_OVRIDE) MOV(Status.ConvOverRide,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.E_STOP) XIO(HX1T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_07_MTR.G) ,XIC(F_HX1T_07_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_07_MTR.G) ,XIC(HX1T_07_MTR.COMM) MOV(Status.ConvCommFault,HX1T_07_MTR.G) ,MOV(HX1T_07_MTR.G,G_HX1T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.RUNNING) MOV(Status.ConvRunning,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,HX1T_06_MTR.G) ,[XIC(HX1T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,HX1T_06_MTR.G) ,XIC(F_HX1T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.CASC) MOV(Status.ConvCascade,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.CASC) XIO(I_PE_HX1T_06) MOV(Status.ConvBagPresCasc,HX1T_06_MTR.G) ,AFI() MOV(Status.ConvFull,HX1T_06_MTR.G) ,XIC(F_HX1T_06_MSD_OFF) MOV(Status.ConvDisc,HX1T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.JAMMED) MOV(Status.ConvJammed,HX1T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,HX1T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,HX1T_06_MTR.G) ,XIC(F_HX1T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,HX1T_06_MTR.G) ,XIC(F_HX1T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,HX1T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,HX1T_06_MTR.G) ,XIC(F_HX1T_06_OVRIDE) MOV(Status.ConvOverRide,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.E_STOP) XIO(HX1T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,HX1T_06_MTR.G) ,XIC(F_HX1T_06_OUTSERV) MOV(Status.ConvOutOfServ,HX1T_06_MTR.G) ,XIC(HX1T_06_MTR.COMM) MOV(Status.ConvCommFault,HX1T_06_MTR.G) ,MOV(HX1T_06_MTR.G,G_HX1T_06_STS) ];
		END_ROUTINE

		ROUTINE HX1T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_10A_MTR.CONV_RUN)RTO(HX1T_10A_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_10A_PE.JAM_TMR.DN) ,XIO(HX1T_10A_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_10A)RES(HX1T_10A_PE.JAM_TMR);
				N: XIC(HX1T_10A_PE.JAM_TMR.DN)[XIO(F_HX1T_10A_PE_JAMMED) [ADD(S_HX1T_10A_PE_JAM,1,S_HX1T_10A_PE_JAM) ,OTE(HX1T_10A_PE.JAM_ONS) ] ,OTE(F_HX1T_10A_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_10_MTR.CONV_RUN)RTO(HX1T_10_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_10_PE.JAM_TMR.DN) ,XIO(HX1T_10_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_10)RES(HX1T_10_PE.JAM_TMR);
				N: XIC(HX1T_10_PE.JAM_TMR.DN)[XIO(F_HX1T_10_PE_JAMMED) [ADD(S_HX1T_10_PE_JAM,1,S_HX1T_10_PE_JAM) ,OTE(HX1T_10_PE.JAM_ONS) ] ,OTE(F_HX1T_10_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_09_MTR.CONV_RUN)RTO(HX1T_09_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_09_PE.JAM_TMR.DN) ,XIO(HX1T_09_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_09)RES(HX1T_09_PE.JAM_TMR);
				N: XIC(HX1T_09_PE.JAM_TMR.DN)[XIO(F_HX1T_09_PE_JAMMED) [ADD(S_HX1T_09_PE_JAM,1,S_HX1T_09_PE_JAM) ,OTE(HX1T_09_PE.JAM_ONS) ] ,OTE(F_HX1T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_08_MTR.CONV_RUN)RTO(HX1T_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_08_PE.JAM_TMR.DN) ,XIO(HX1T_08_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_08)RES(HX1T_08_PE.JAM_TMR);
				N: XIC(HX1T_08_PE.JAM_TMR.DN)[XIO(F_HX1T_08_PE_JAMMED) [ADD(S_HX1T_08_PE_JAM,1,S_HX1T_08_PE_JAM) ,OTE(HX1T_08_PE.JAM_ONS) ] ,OTE(F_HX1T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_07_MTR.CONV_RUN)RTO(HX1T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_07_PE.JAM_TMR.DN) ,XIO(HX1T_07_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_07)RES(HX1T_07_PE.JAM_TMR);
				N: XIC(HX1T_07_PE.JAM_TMR.DN)[XIO(F_HX1T_07_PE_JAMMED) [ADD(S_HX1T_07_PE_JAM,1,S_HX1T_07_PE_JAM) ,OTE(HX1T_07_PE.JAM_ONS) ] ,OTE(F_HX1T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(HX1T_06_MTR.CONV_RUN)RTO(HX1T_06_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_HX1T_10_RPBA) XIC(HX1T_06_PE.JAM_TMR.DN) ,XIO(HX1T_06_PE.JAM_TMR.DN) ]XIC(I_PE_HX1T_06)RES(HX1T_06_PE.JAM_TMR);
				N: XIC(HX1T_06_PE.JAM_TMR.DN)[XIO(F_HX1T_06_PE_JAMMED) [ADD(S_HX1T_06_PE_JAM,1,S_HX1T_06_PE_JAM) ,OTE(HX1T_06_PE.JAM_ONS) ] ,OTE(F_HX1T_06_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE HX1T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_03_SPBG) ,XIC(I_INT_HX1T_06_START) ,AFI() ]OTE(HX1T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(HX1T_10_MTR.CONV_RUN)XIC(HX1T_09_MTR.CONV_RUN)XIC(HX1T_08_MTR.CONV_RUN)XIC(HX1T_07_MTR.CONV_RUN)XIC(HX1T_06_MTR.CONV_RUN)OTE(HX1T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_HX1T_10A) ,XIO(I_PE_HX1T_10) ,XIO(I_PE_HX1T_09) ,XIO(I_PE_HX1T_08) ,XIO(I_PE_HX1T_07) ,XIO(I_PE_HX1T_06) ,AFI() ]OTE(HX1T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(HX1T.MTR_GRP.START) ,XIC(HX1T.MTR_GRP.PEs) XIO(HX1T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(HX1T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(HX1T.MTR_GRP.RUN_LATCH)XIC(HX1T.MTR_GRP.PEs)OTE(HX1T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(HX1T.MTR_GRP.RUN_EXPAND)RTO(HX1T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(HX1T.MTR_GRP.START) ,XIC(HX1T.MTR_GRP.RUN_LATCH) ]XIO(HX1T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(HX1T.STATUS.FIRE_ALM)OTE(HX1T.MTR_GRP.RUN_LATCH);
				RC: "Motor HX1T_10$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_CL1T_26_MSD_OFF)OTE(HX1T_10_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_HX1T_10_JRB) TON(HX1T_10_MTR.JRB_FILT_TON,?,?) ,XIC(HX1T_10_MTR.JRB_FILT_TON.DN) OTE(HX1T_10_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(HX1T_10_MTR.E_STOP)[XIC(HX1T_10_VFD.READY) XIO(HX1T_10_MTR.JAMMED) ,XIC(F_HX1T_10_OVRIDE) ,XIC(F_HX1T_10_JOG_REVERSE) ]XIO(F_HX1T_10_MSD_OFF)XIO(F_HX1T_10_OUTSERV)XIO(HX1T_10_MTR.COMM)OTE(HX1T_10_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(HX1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_10_OVRIDE) ]XIC(HX1T_10_MTR.NO_FAULT)TON(HX1T_10_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_10_MTR.IM_TMR.DN)[XIO(HX1T_10_MTR.INTL_MTR) OTE(HX1T_10_MTR.IM_ONS) ,OTE(HX1T_10_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(HX1T_10_PE.FILT_NEG_XITN)RES(HX1T_10_MTR.T2H_SPACE_TMR);
				N: XIC(CL1T_26_MTR.CONV_RUN)RTO(HX1T_10_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(HX1T_10_PE.POS_XITN) XIC(HX1T_10_MTR.INTL_MTR) ,XIC(HX1T_10_MTR.T2H_SPACE) ]XIO(HX1T_10_MTR.T2H_SPACE_TMR.DN)OTE(HX1T_10_MTR.T2H_SPACE);
				N: XIC(HX1T_10_MTR.T2H_SPACE)OTE(HX1T_10_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(CL1T_26_MTR.ON_TMR.DN) XIC(HX1T_10_MTR.OFF_TMR.DN) ,XIO(CL1T_26_MTR.IM_ONS) XIC(HX1T_10_MTR.IM_ONS) ,XIC(HX1T_10_MTR.ANTI_CASC) XIC(I_PE_HX1T_10) ]OTE(HX1T_10_MTR.START_EN);
				N: [XIO(CL1T_26_MTR.ON_TMR.DN) XIO(I_PE_HX1T_10) ,XIO(HX1T_10_MTR.ANTI_CASC) XIC(HX1T_10_MTR.SPACE) ]OTE(HX1T_10_MTR.STOP);
				N: XIC(HX1T_10_MTR.INTL_MTR)XIO(F_HX1T_10_JOG_REVERSE)[[XIC(HX1T_10_MTR.START_EN) ,XIC(HX1T_10_MTR.CONV_RUN) ] XIO(HX1T_10_MTR.STOP) ,XIC(F_HX1T_10_OVRIDE) ][OTE(HX1T_10_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_10_FWD) ];
				N: XIC(F_HX1T_10_JOG_REVERSE)XIC(HX1T_10_MTR.JRB_FILT)XIO(HX1T_10_MTR.E_STOP)XIC(HX1T_10_VFD.READY)XIO(F_HX1T_10_MSD_OFF)XIO(HX1T_10_MTR.COMM)XIO(F_HX1T_10_OVRIDE)OTE(O_VFD_HX1T_10_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_10_MTR.CONV_RUN)TON(HX1T_10_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_10_MTR.CONV_RUN)TON(HX1T_10_MTR.OFF_TMR,?,?);
				RC: "Motor HX1T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_HX1T_10_MSD_OFF)OTE(HX1T_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(HX1T_09_MTR.E_STOP)[XIC(HX1T_09_VFD.READY) XIO(HX1T_09_MTR.JAMMED) ,XIC(F_HX1T_09_OVRIDE) ]XIO(F_HX1T_09_MSD_OFF)XIO(F_HX1T_09_OUTSERV)XIO(HX1T_09_MTR.COMM)OTE(HX1T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(HX1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_09_OVRIDE) ]XIC(HX1T_09_MTR.NO_FAULT)TON(HX1T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_09_MTR.IM_TMR.DN)[XIO(HX1T_09_MTR.INTL_MTR) OTE(HX1T_09_MTR.IM_ONS) ,OTE(HX1T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(HX1T_09_PE.FILT_NEG_XITN)RES(HX1T_09_MTR.T2H_SPACE_TMR);
				N: XIC(HX1T_10_MTR.CONV_RUN)RTO(HX1T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(HX1T_09_PE.POS_XITN) XIC(HX1T_09_MTR.INTL_MTR) ,XIC(HX1T_09_MTR.T2H_SPACE) ]XIO(HX1T_09_MTR.T2H_SPACE_TMR.DN)OTE(HX1T_09_MTR.T2H_SPACE);
				N: XIC(HX1T_09_MTR.T2H_SPACE)OTE(HX1T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(HX1T_10_MTR.ON_TMR.DN) XIC(HX1T_09_MTR.OFF_TMR.DN) ,XIO(HX1T_10_MTR.IM_ONS) XIC(HX1T_09_MTR.IM_ONS) ,XIC(HX1T_09_MTR.ANTI_CASC) XIC(I_PE_HX1T_09) ]OTE(HX1T_09_MTR.START_EN);
				N: [XIO(HX1T_10_MTR.ON_TMR.DN) XIO(I_PE_HX1T_09) ,XIO(HX1T_09_MTR.ANTI_CASC) XIC(HX1T_09_MTR.SPACE) ]OTE(HX1T_09_MTR.STOP);
				N: XIC(HX1T_09_MTR.INTL_MTR)[[XIC(HX1T_09_MTR.START_EN) ,XIC(HX1T_09_MTR.CONV_RUN) ] XIO(HX1T_09_MTR.STOP) ,XIC(F_HX1T_09_OVRIDE) ][OTE(HX1T_09_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_09_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_09_MTR.CONV_RUN)TON(HX1T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_09_MTR.CONV_RUN)TON(HX1T_09_MTR.OFF_TMR,?,?);
				RC: "Motor HX1T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_HX1T_09_MSD_OFF)OTE(HX1T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(HX1T_08_MTR.E_STOP)[XIC(HX1T_08_VFD.READY) XIO(HX1T_08_MTR.JAMMED) ,XIC(F_HX1T_08_OVRIDE) ]XIO(F_HX1T_08_MSD_OFF)XIO(F_HX1T_08_OUTSERV)XIO(HX1T_08_MTR.COMM)OTE(HX1T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(HX1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_08_OVRIDE) ]XIC(HX1T_08_MTR.NO_FAULT)TON(HX1T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_08_MTR.IM_TMR.DN)[XIO(HX1T_08_MTR.INTL_MTR) OTE(HX1T_08_MTR.IM_ONS) ,OTE(HX1T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(HX1T_08_PE.FILT_NEG_XITN)RES(HX1T_08_MTR.T2H_SPACE_TMR);
				N: XIC(HX1T_09_MTR.CONV_RUN)RTO(HX1T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(HX1T_08_PE.POS_XITN) XIC(HX1T_08_MTR.INTL_MTR) ,XIC(HX1T_08_MTR.T2H_SPACE) ]XIO(HX1T_08_MTR.T2H_SPACE_TMR.DN)OTE(HX1T_08_MTR.T2H_SPACE);
				N: XIC(HX1T_08_MTR.T2H_SPACE)OTE(HX1T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(HX1T_09_MTR.ON_TMR.DN) XIC(HX1T_08_MTR.OFF_TMR.DN) ,XIO(HX1T_09_MTR.IM_ONS) XIC(HX1T_08_MTR.IM_ONS) ,XIC(HX1T_08_MTR.ANTI_CASC) XIC(I_PE_HX1T_08) ]OTE(HX1T_08_MTR.START_EN);
				N: [XIO(HX1T_09_MTR.ON_TMR.DN) XIO(I_PE_HX1T_08) ,XIO(HX1T_08_MTR.ANTI_CASC) XIC(HX1T_08_MTR.SPACE) ]OTE(HX1T_08_MTR.STOP);
				N: XIC(HX1T_08_MTR.INTL_MTR)[[XIC(HX1T_08_MTR.START_EN) ,XIC(HX1T_08_MTR.CONV_RUN) ] XIO(HX1T_08_MTR.STOP) ,XIC(F_HX1T_08_OVRIDE) ][OTE(HX1T_08_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_08_MTR.CONV_RUN)TON(HX1T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_08_MTR.CONV_RUN)TON(HX1T_08_MTR.OFF_TMR,?,?);
				RC: "Motor HX1T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_HX1T_08_MSD_OFF)OTE(HX1T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(HX1T_07_MTR.E_STOP)[XIC(HX1T_07_VFD.READY) XIO(HX1T_07_MTR.JAMMED) ,XIC(F_HX1T_07_OVRIDE) ]XIO(F_HX1T_07_MSD_OFF)XIO(F_HX1T_07_OUTSERV)XIO(HX1T_07_MTR.COMM)OTE(HX1T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(HX1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_07_OVRIDE) ]XIC(HX1T_07_MTR.NO_FAULT)TON(HX1T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_07_MTR.IM_TMR.DN)[XIO(HX1T_07_MTR.INTL_MTR) OTE(HX1T_07_MTR.IM_ONS) ,OTE(HX1T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(HX1T_07_PE.FILT_NEG_XITN)RES(HX1T_07_MTR.T2H_SPACE_TMR);
				N: XIC(HX1T_08_MTR.CONV_RUN)RTO(HX1T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(HX1T_07_PE.POS_XITN) XIC(HX1T_07_MTR.INTL_MTR) ,XIC(HX1T_07_MTR.T2H_SPACE) ]XIO(HX1T_07_MTR.T2H_SPACE_TMR.DN)OTE(HX1T_07_MTR.T2H_SPACE);
				N: XIC(HX1T_07_MTR.T2H_SPACE)OTE(HX1T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(HX1T_08_MTR.ON_TMR.DN) XIC(HX1T_07_MTR.OFF_TMR.DN) ,XIO(HX1T_08_MTR.IM_ONS) XIC(HX1T_07_MTR.IM_ONS) ,XIC(HX1T_07_MTR.ANTI_CASC) XIC(I_PE_HX1T_07) ]OTE(HX1T_07_MTR.START_EN);
				N: [XIO(HX1T_08_MTR.ON_TMR.DN) XIO(I_PE_HX1T_07) ,XIO(HX1T_07_MTR.ANTI_CASC) XIC(HX1T_07_MTR.SPACE) ]OTE(HX1T_07_MTR.STOP);
				N: XIC(HX1T_07_MTR.INTL_MTR)[[XIC(HX1T_07_MTR.START_EN) ,XIC(HX1T_07_MTR.CONV_RUN) ] XIO(HX1T_07_MTR.STOP) ,XIC(F_HX1T_07_OVRIDE) ][OTE(HX1T_07_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_07_MTR.CONV_RUN)TON(HX1T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_07_MTR.CONV_RUN)TON(HX1T_07_MTR.OFF_TMR,?,?);
				RC: "Motor HX1T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_HX1T_07_MSD_OFF)OTE(HX1T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(HX1T_06_MTR.E_STOP)[XIC(HX1T_06_VFD.READY) XIO(HX1T_06_MTR.JAMMED) ,XIC(F_HX1T_06_OVRIDE) ]XIO(F_HX1T_06_MSD_OFF)XIO(F_HX1T_06_OUTSERV)XIO(HX1T_06_MTR.COMM)OTE(HX1T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(HX1T.MTR_GRP.RUN_LATCH) ,XIC(F_HX1T_06_OVRIDE) ]XIC(HX1T_06_MTR.NO_FAULT)TON(HX1T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(HX1T_06_MTR.IM_TMR.DN)[XIO(HX1T_06_MTR.INTL_MTR) OTE(HX1T_06_MTR.IM_ONS) ,OTE(HX1T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(HX1T_06_PE.FILT_NEG_XITN)RES(HX1T_06_MTR.T2H_SPACE_TMR);
				N: XIC(HX1T_07_MTR.CONV_RUN)RTO(HX1T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(HX1T_06_PE.POS_XITN) XIC(HX1T_06_MTR.INTL_MTR) ,XIC(HX1T_06_MTR.T2H_SPACE) ]XIO(HX1T_06_MTR.T2H_SPACE_TMR.DN)OTE(HX1T_06_MTR.T2H_SPACE);
				N: XIC(HX1T_06_MTR.T2H_SPACE)OTE(HX1T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(HX1T_07_MTR.ON_TMR.DN) XIC(HX1T_06_MTR.OFF_TMR.DN) ,XIO(HX1T_07_MTR.IM_ONS) XIC(HX1T_06_MTR.IM_ONS) ,XIC(HX1T_06_MTR.ANTI_CASC) XIC(I_PE_HX1T_06) ]OTE(HX1T_06_MTR.START_EN);
				N: [XIO(HX1T_07_MTR.ON_TMR.DN) XIO(I_PE_HX1T_06) ,XIO(HX1T_06_MTR.ANTI_CASC) XIC(HX1T_06_MTR.SPACE) ]OTE(HX1T_06_MTR.STOP);
				N: XIC(HX1T_06_MTR.INTL_MTR)[[XIC(HX1T_06_MTR.START_EN) ,XIC(HX1T_06_MTR.CONV_RUN) ] XIO(HX1T_06_MTR.STOP) ,XIC(F_HX1T_06_OVRIDE) ][OTE(HX1T_06_MTR.CONV_RUN) ,OTE(O_VFD_HX1T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(HX1T_06_MTR.CONV_RUN)TON(HX1T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(HX1T_06_MTR.CONV_RUN)TON(HX1T_06_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE HX1T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(HX1T_10A_MTR.COMM)[[XIO(I_PE_HX1T_10A) ,XIC(HX1T_10A_PE.TOF.DN) ] TON(HX1T_10A_PE.TON,?,?) ,XIO(I_PE_HX1T_10A) XIC(HX1T_10A_PE.TON.DN) TOF(HX1T_10A_PE.TOF,?,?) ,XIC(HX1T_10A_PE.TOF.DN) OTE(HX1T_10A_PE.FILT) ];
				N: XIC(HX1T_10A_PE.FILT)[XIO(HX1T_10A_PE.FILT_POS_XITN_MEM) OTE(HX1T_10A_PE.FILT_POS_XITN) ,OTE(HX1T_10A_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_10A_PE.FILT)[XIO(HX1T_10A_PE.FILT_NEG_XITN_MEM) OTE(HX1T_10A_PE.FILT_NEG_XITN) ,OTE(HX1T_10A_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(HX1T_10_MTR.COMM)[[XIO(I_PE_HX1T_10) ,XIC(HX1T_10_PE.TOF.DN) ] TON(HX1T_10_PE.TON,?,?) ,XIO(I_PE_HX1T_10) XIC(HX1T_10_PE.TON.DN) TOF(HX1T_10_PE.TOF,?,?) ,XIC(HX1T_10_PE.TOF.DN) OTE(HX1T_10_PE.FILT) ];
				N: XIC(HX1T_10_PE.FILT)[XIO(HX1T_10_PE.FILT_POS_XITN_MEM) OTE(HX1T_10_PE.FILT_POS_XITN) ,OTE(HX1T_10_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_10_PE.FILT)[XIO(HX1T_10_PE.FILT_NEG_XITN_MEM) OTE(HX1T_10_PE.FILT_NEG_XITN) ,OTE(HX1T_10_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_HX1T_10)[XIO(HX1T_10_PE.POS_XITN_MEM) OTE(HX1T_10_PE.POS_XITN) ,OTE(HX1T_10_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(HX1T_09_MTR.COMM)[[XIO(I_PE_HX1T_09) ,XIC(HX1T_09_PE.TOF.DN) ] TON(HX1T_09_PE.TON,?,?) ,XIO(I_PE_HX1T_09) XIC(HX1T_09_PE.TON.DN) TOF(HX1T_09_PE.TOF,?,?) ,XIC(HX1T_09_PE.TOF.DN) OTE(HX1T_09_PE.FILT) ];
				N: XIC(HX1T_09_PE.FILT)[XIO(HX1T_09_PE.FILT_POS_XITN_MEM) OTE(HX1T_09_PE.FILT_POS_XITN) ,OTE(HX1T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_09_PE.FILT)[XIO(HX1T_09_PE.FILT_NEG_XITN_MEM) OTE(HX1T_09_PE.FILT_NEG_XITN) ,OTE(HX1T_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_HX1T_09)[XIO(HX1T_09_PE.POS_XITN_MEM) OTE(HX1T_09_PE.POS_XITN) ,OTE(HX1T_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(HX1T_08_MTR.COMM)[[XIO(I_PE_HX1T_08) ,XIC(HX1T_08_PE.TOF.DN) ] TON(HX1T_08_PE.TON,?,?) ,XIO(I_PE_HX1T_08) XIC(HX1T_08_PE.TON.DN) TOF(HX1T_08_PE.TOF,?,?) ,XIC(HX1T_08_PE.TOF.DN) OTE(HX1T_08_PE.FILT) ];
				N: XIC(HX1T_08_PE.FILT)[XIO(HX1T_08_PE.FILT_POS_XITN_MEM) OTE(HX1T_08_PE.FILT_POS_XITN) ,OTE(HX1T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_08_PE.FILT)[XIO(HX1T_08_PE.FILT_NEG_XITN_MEM) OTE(HX1T_08_PE.FILT_NEG_XITN) ,OTE(HX1T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_HX1T_08)[XIO(HX1T_08_PE.POS_XITN_MEM) OTE(HX1T_08_PE.POS_XITN) ,OTE(HX1T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(HX1T_07_MTR.COMM)[[XIO(I_PE_HX1T_07) ,XIC(HX1T_07_PE.TOF.DN) ] TON(HX1T_07_PE.TON,?,?) ,XIO(I_PE_HX1T_07) XIC(HX1T_07_PE.TON.DN) TOF(HX1T_07_PE.TOF,?,?) ,XIC(HX1T_07_PE.TOF.DN) OTE(HX1T_07_PE.FILT) ];
				N: XIC(HX1T_07_PE.FILT)[XIO(HX1T_07_PE.FILT_POS_XITN_MEM) OTE(HX1T_07_PE.FILT_POS_XITN) ,OTE(HX1T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_07_PE.FILT)[XIO(HX1T_07_PE.FILT_NEG_XITN_MEM) OTE(HX1T_07_PE.FILT_NEG_XITN) ,OTE(HX1T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_HX1T_07)[XIO(HX1T_07_PE.POS_XITN_MEM) OTE(HX1T_07_PE.POS_XITN) ,OTE(HX1T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(HX1T_06_MTR.COMM)[[XIO(I_PE_HX1T_06) ,XIC(HX1T_06_PE.TOF.DN) ] TON(HX1T_06_PE.TON,?,?) ,XIO(I_PE_HX1T_06) XIC(HX1T_06_PE.TON.DN) TOF(HX1T_06_PE.TOF,?,?) ,XIC(HX1T_06_PE.TOF.DN) OTE(HX1T_06_PE.FILT) ];
				N: XIC(HX1T_06_PE.FILT)[XIO(HX1T_06_PE.FILT_POS_XITN_MEM) OTE(HX1T_06_PE.FILT_POS_XITN) ,OTE(HX1T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(HX1T_06_PE.FILT)[XIO(HX1T_06_PE.FILT_NEG_XITN_MEM) OTE(HX1T_06_PE.FILT_NEG_XITN) ,OTE(HX1T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_HX1T_06)[XIO(HX1T_06_PE.POS_XITN_MEM) OTE(HX1T_06_PE.POS_XITN) ,OTE(HX1T_06_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE HX1T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_10_MTR.COMM);
				N: [XIC(O_VFD_HX1T_10_FWD) ,XIC(O_VFD_HX1T_10_REV) ]XIC(HX1T_10_MTR.CONV_RUN)OTE(HX1T_10_MTR.RUNNING);
				N: XIO(I_CS_HX1T_10_AUTO)OTE(F_HX1T_10_JOG_REVERSE);
				N: XIC(HX1T_10_VFD.FAULTED)[XIO(F_HX1T_10_VFD_FAULT) OTE(HX1T_10_VFD.FAULT_ONS) ,OTE(F_HX1T_10_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_10_MOL);
				N: XIO(I_MSD_HX1T_10)XIO(HX1T_10_MTR.COMM)[XIO(F_HX1T_10_MSD_OFF) OTE(HX1T_10_MTR.MSD_ONS) ,OTE(F_HX1T_10_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_10_CTCTR_FAULT) OTE(HX1T_10_MTR.MS_FLT_ONS) ,OTE(F_HX1T_10_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_10_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_10_MTR.E_STOP_RES);
				N: XIC(HX1T.STATUS.FIRE_ALM)OTE(HX1T_10_MTR.FIRE_ALM);
				N: XIO(HX1T_10_MTR.CONV_RUN)XIC(HX1T_10_MTR.INTL_MTR)OTE(HX1T_10_MTR.CASC);
				N: XIO(HX1T.MTR_GRP.RUN_LATCH)OTE(HX1T_10_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_10_OVRIDE_REQ)[XIO(F_HX1T_10_OVRIDE) OTE(HX1T_10_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_10_OVRIDE) ];
				N: XIC(HMI_HX1T_10_OUTSERV_REQ)[XIO(F_HX1T_10_OUTSERV) OTE(HX1T_10_MTR.OOS_ONS) ,OTE(F_HX1T_10_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_10_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_10_PE_JAMMED) ,XIC(F_HX1T_09_PE_JAMMED) ,XIC(HX1T_10_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_10_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_09_MTR.COMM);
				N: XIC(O_VFD_HX1T_09_FWD)XIC(HX1T_09_MTR.CONV_RUN)OTE(HX1T_09_MTR.RUNNING);
				N: XIC(HX1T_09_VFD.FAULTED)[XIO(F_HX1T_09_VFD_FAULT) OTE(HX1T_09_VFD.FAULT_ONS) ,OTE(F_HX1T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_09_MOL);
				N: XIO(I_MSD_HX1T_09)XIO(HX1T_09_MTR.COMM)[XIO(F_HX1T_09_MSD_OFF) OTE(HX1T_09_MTR.MSD_ONS) ,OTE(F_HX1T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_09_CTCTR_FAULT) OTE(HX1T_09_MTR.MS_FLT_ONS) ,OTE(F_HX1T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_09_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_09_MTR.E_STOP_RES);
				N: XIC(HX1T.STATUS.FIRE_ALM)OTE(HX1T_09_MTR.FIRE_ALM);
				N: XIO(HX1T_09_MTR.CONV_RUN)XIC(HX1T_09_MTR.INTL_MTR)OTE(HX1T_09_MTR.CASC);
				N: XIO(HX1T.MTR_GRP.RUN_LATCH)OTE(HX1T_09_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_09_OVRIDE_REQ)[XIO(F_HX1T_09_OVRIDE) OTE(HX1T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_09_OVRIDE) ];
				N: XIC(HMI_HX1T_09_OUTSERV_REQ)[XIO(F_HX1T_09_OUTSERV) OTE(HX1T_09_MTR.OOS_ONS) ,OTE(F_HX1T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_09_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_09_PE_JAMMED) ,XIC(F_HX1T_08_PE_JAMMED) ,XIC(HX1T_09_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_08_MTR.COMM);
				N: XIC(O_VFD_HX1T_08_FWD)XIC(HX1T_08_MTR.CONV_RUN)OTE(HX1T_08_MTR.RUNNING);
				N: XIC(HX1T_08_VFD.FAULTED)[XIO(F_HX1T_08_VFD_FAULT) OTE(HX1T_08_VFD.FAULT_ONS) ,OTE(F_HX1T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_08_MOL);
				N: XIO(I_MSD_HX1T_08)XIO(HX1T_08_MTR.COMM)[XIO(F_HX1T_08_MSD_OFF) OTE(HX1T_08_MTR.MSD_ONS) ,OTE(F_HX1T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_08_CTCTR_FAULT) OTE(HX1T_08_MTR.MS_FLT_ONS) ,OTE(F_HX1T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_08_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_08_MTR.E_STOP_RES);
				N: XIC(HX1T.STATUS.FIRE_ALM)OTE(HX1T_08_MTR.FIRE_ALM);
				N: XIO(HX1T_08_MTR.CONV_RUN)XIC(HX1T_08_MTR.INTL_MTR)OTE(HX1T_08_MTR.CASC);
				N: XIO(HX1T.MTR_GRP.RUN_LATCH)OTE(HX1T_08_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_08_OVRIDE_REQ)[XIO(F_HX1T_08_OVRIDE) OTE(HX1T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_08_OVRIDE) ];
				N: XIC(HMI_HX1T_08_OUTSERV_REQ)[XIO(F_HX1T_08_OUTSERV) OTE(HX1T_08_MTR.OOS_ONS) ,OTE(F_HX1T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_08_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_08_PE_JAMMED) ,XIC(F_HX1T_07_PE_JAMMED) ,XIC(HX1T_08_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_07_MTR.COMM);
				N: XIC(O_VFD_HX1T_07_FWD)XIC(HX1T_07_MTR.CONV_RUN)OTE(HX1T_07_MTR.RUNNING);
				N: XIC(HX1T_07_VFD.FAULTED)[XIO(F_HX1T_07_VFD_FAULT) OTE(HX1T_07_VFD.FAULT_ONS) ,OTE(F_HX1T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_07_MOL);
				N: XIO(I_MSD_HX1T_07)XIO(HX1T_07_MTR.COMM)[XIO(F_HX1T_07_MSD_OFF) OTE(HX1T_07_MTR.MSD_ONS) ,OTE(F_HX1T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_07_CTCTR_FAULT) OTE(HX1T_07_MTR.MS_FLT_ONS) ,OTE(F_HX1T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_07_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_07_MTR.E_STOP_RES);
				N: XIC(HX1T.STATUS.FIRE_ALM)OTE(HX1T_07_MTR.FIRE_ALM);
				N: XIO(HX1T_07_MTR.CONV_RUN)XIC(HX1T_07_MTR.INTL_MTR)OTE(HX1T_07_MTR.CASC);
				N: XIO(HX1T.MTR_GRP.RUN_LATCH)OTE(HX1T_07_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_07_OVRIDE_REQ)[XIO(F_HX1T_07_OVRIDE) OTE(HX1T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_07_OVRIDE) ];
				N: XIC(HMI_HX1T_07_OUTSERV_REQ)[XIO(F_HX1T_07_OUTSERV) OTE(HX1T_07_MTR.OOS_ONS) ,OTE(F_HX1T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_07_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_07_PE_JAMMED) ,XIC(F_HX1T_06_PE_JAMMED) ,XIC(HX1T_07_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(HX1T_06_MTR.COMM);
				N: XIC(O_VFD_HX1T_06_FWD)XIC(HX1T_06_MTR.CONV_RUN)OTE(HX1T_06_MTR.RUNNING);
				N: XIC(HX1T_06_VFD.FAULTED)[XIO(F_HX1T_06_VFD_FAULT) OTE(HX1T_06_VFD.FAULT_ONS) ,OTE(F_HX1T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_HX1T_06_MOL);
				N: XIO(I_MSD_HX1T_06)XIO(HX1T_06_MTR.COMM)[XIO(F_HX1T_06_MSD_OFF) OTE(HX1T_06_MTR.MSD_ONS) ,OTE(F_HX1T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_HX1T_06_CTCTR_FAULT) OTE(HX1T_06_MTR.MS_FLT_ONS) ,OTE(F_HX1T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30305.Zone_OK) ,AFI() ]OTE(HX1T_06_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30305.Zone_RES) ,AFI() ]OTE(HX1T_06_MTR.E_STOP_RES);
				N: XIC(HX1T.STATUS.FIRE_ALM)OTE(HX1T_06_MTR.FIRE_ALM);
				N: XIO(HX1T_06_MTR.CONV_RUN)XIC(HX1T_06_MTR.INTL_MTR)OTE(HX1T_06_MTR.CASC);
				N: XIO(HX1T.MTR_GRP.RUN_LATCH)OTE(HX1T_06_MTR.AUTO_STOP);
				N: XIC(HMI_HX1T_06_OVRIDE_REQ)[XIO(F_HX1T_06_OVRIDE) OTE(HX1T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_HX1T_06_OVRIDE) ];
				N: XIC(HMI_HX1T_06_OUTSERV_REQ)[XIO(F_HX1T_06_OUTSERV) OTE(HX1T_06_MTR.OOS_ONS) ,OTE(F_HX1T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(HX1T_06_MTR.MB_JAMMED);
				N: [XIC(F_HX1T_06_PE_JAMMED) ,XIC(HX1T_06_MTR.MB_JAMMED) ,AFI() ]OTE(HX1T_06_MTR.JAMMED);
		END_ROUTINE

		ROUTINE HX1T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor HX1T_10 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_10_MTR.COMM)XIO(HX1T_10_MTR.E_STOP)XIO(F_HX1T_10_MSD_OFF)TON(HX1T_10_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_10_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_10_RDY) OTE(HX1T_10_VFD.FAULTED) ,XIO(HX1T_10_VFD.FAULTED) OTE(HX1T_10_VFD.READY) ];
				RC: "Motor HX1T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_09_MTR.COMM)XIO(HX1T_09_MTR.E_STOP)XIO(F_HX1T_09_MSD_OFF)TON(HX1T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_09_RDY) OTE(HX1T_09_VFD.FAULTED) ,XIO(HX1T_09_VFD.FAULTED) OTE(HX1T_09_VFD.READY) ];
				RC: "Motor HX1T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_08_MTR.COMM)XIO(HX1T_08_MTR.E_STOP)XIO(F_HX1T_08_MSD_OFF)TON(HX1T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_08_RDY) OTE(HX1T_08_VFD.FAULTED) ,XIO(HX1T_08_VFD.FAULTED) OTE(HX1T_08_VFD.READY) ];
				RC: "Motor HX1T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_07_MTR.COMM)XIO(HX1T_07_MTR.E_STOP)XIO(F_HX1T_07_MSD_OFF)TON(HX1T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_07_RDY) OTE(HX1T_07_VFD.FAULTED) ,XIO(HX1T_07_VFD.FAULTED) OTE(HX1T_07_VFD.READY) ];
				RC: "Motor HX1T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(HX1T_06_MTR.COMM)XIO(HX1T_06_MTR.E_STOP)XIO(F_HX1T_06_MSD_OFF)TON(HX1T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(HX1T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_HX1T_06_RDY) OTE(HX1T_06_VFD.FAULTED) ,XIO(HX1T_06_VFD.FAULTED) OTE(HX1T_06_VFD.READY) ];
		END_ROUTINE

		ROUTINE I_RESET_STATS 
				RC: "****************************************************************$N"
				    "This routine resets all HMI and Upper Level statistics.$N"
				    "$N"
				    "$N"
				    "****************************************************************";
				N: NOP();
				RC: "Device Related and Misc Stats";
				N: NOP();
				N: [SIZE(S_BM1_06_PE1_JAM,0,INT.RESET_STATS_LEN) ,FLL(0,S_BM1_06_PE1_JAM,INT.RESET_STATS_LEN) ];
				N: [SIZE(S_BM1_06_PE2_OH,0,INT.RESET_STATS_LEN) ,FLL(0,S_BM1_06_PE2_OH,INT.RESET_STATS_LEN) ];
				N: [SIZE(S_OL[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_OL[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_PLC_101_MAX_SCAN,0,INT.RESET_STATS_LEN) ,FLL(0,S_PLC_101_MAX_SCAN,INT.RESET_STATS_LEN) ];
				N: [SIZE(S_VS[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_VS[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_CTX[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_CTX[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_ETD[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_ETD[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_L3[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_L3[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_XO2_01_HSD_FLTS,0,INT.RESET_STATS_LEN) ,FLL(0,S_XO2_01_HSD_FLTS,INT.RESET_STATS_LEN) ];
				N: [SIZE(S_HCD[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_HCD[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_P[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_P[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_BDS[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_BDS[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_ATR[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_ATR[0],INT.RESET_STATS_LEN) ];
				N: [SIZE(S_MISC[0],0,INT.RESET_STATS_LEN) ,FLL(0,S_MISC[0],INT.RESET_STATS_LEN) ];
				RC: "Clear Out Tracking Window Captures";
				N: NOP();
		END_ROUTINE

		ROUTINE I_SET_BT_CONST 
				RC: "****************************************************************$N"
				    "This routine sets values for the associated encoders.$N"
				    "$N"
				    "Note:  It is important that the I_SET_MTR_CONST routine is called before this routine.$N"
				    "$N"
				    "$N"
				    "****************************************************************$N"
				    "$N"
				    "***THIS ROUTINE IS NOT EXECUTED EVERY SCAN***";
				N: NOP();
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_12_BTx.RES)MOV(1000,BM1_12_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_12_BTx.RAMP_UP_SET)MOV(1,BM1_12_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_12_BTx,BM1_12_MTRx,BM1_12_BTx)MOV(BM1_12_BTx.FAULT_TIME,BM1_12_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_13_BTx.RES)MOV(1000,BM1_13_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_13_BTx.RAMP_UP_SET)MOV(1,BM1_13_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_13_BTx,BM1_13_MTRx,BM1_13_BTx)MOV(BM1_13_BTx.FAULT_TIME,BM1_13_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_14_BTx.RES)MOV(1000,BM1_14_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_14_BTx.RAMP_UP_SET)MOV(1,BM1_14_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_14_BTx,BM1_14_MTRx,BM1_14_BTx)MOV(BM1_14_BTx.FAULT_TIME,BM1_14_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_38_BTx.RES)MOV(1000,BM1_38_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_38_BTx.RAMP_UP_SET)MOV(1,BM1_38_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_38_BTx,BM1_38_MTRx,BM1_38_BTx)MOV(BM1_38_BTx.FAULT_TIME,BM1_38_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O2T_18_BTx.RES)MOV(1000,O2T_18_BT.RAMP_UP_TMR.PRE)MOV(1,O2T_18_BTx.RAMP_UP_SET)MOV(1,O2T_18_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O2T_18_BTx,O2T_18_MTRx,O2T_18_BTx)MOV(O2T_18_BTx.FAULT_TIME,O2T_18_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O2T_17_BTx.RES)MOV(1000,O2T_17_BT.RAMP_UP_TMR.PRE)MOV(1,O2T_17_BTx.RAMP_UP_SET)MOV(1,O2T_17_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O2T_17_BTx,O2T_17_MTRx,O2T_17_BTx)MOV(O2T_17_BTx.FAULT_TIME,O2T_17_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,C2T_17_BTx.RES)MOV(1000,C2T_17_BT.RAMP_UP_TMR.PRE)MOV(1,C2T_17_BTx.RAMP_UP_SET)MOV(1,C2T_17_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,C2T_17_BTx,C2T_17_MTRx,C2T_17_BTx)MOV(C2T_17_BTx.FAULT_TIME,C2T_17_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,C2T_16_BTx.RES)MOV(1000,C2T_16_BT.RAMP_UP_TMR.PRE)MOV(1,C2T_16_BTx.RAMP_UP_SET)MOV(1,C2T_16_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,C2T_16_BTx,C2T_16_MTRx,C2T_16_BTx)MOV(C2T_16_BTx.FAULT_TIME,C2T_16_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O2T_10_BTx.RES)MOV(1000,O2T_10_BT.RAMP_UP_TMR.PRE)MOV(1,O2T_10_BTx.RAMP_UP_SET)MOV(1,O2T_10_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O2T_10_BTx,O2T_10_MTRx,O2T_10_BTx)MOV(O2T_10_BTx.FAULT_TIME,O2T_10_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,CL1T_26_BTx.RES)MOV(1000,CL1T_26_BT.RAMP_UP_TMR.PRE)MOV(1,CL1T_26_BTx.RAMP_UP_SET)MOV(1,CL1T_26_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,CL1T_26_BTx,CL1T_26_MTRx,CL1T_26_BTx)MOV(CL1T_26_BTx.FAULT_TIME,CL1T_26_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,HX1T_10_BTx.RES)MOV(1000,HX1T_10_BT.RAMP_UP_TMR.PRE)MOV(1,HX1T_10_BTx.RAMP_UP_SET)MOV(1,HX1T_10_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,HX1T_10_BTx,HX1T_10_MTRx,HX1T_10_BTx)MOV(HX1T_10_BTx.FAULT_TIME,HX1T_10_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,HX1T_09_BTx.RES)MOV(1000,HX1T_09_BT.RAMP_UP_TMR.PRE)MOV(1,HX1T_09_BTx.RAMP_UP_SET)MOV(1,HX1T_09_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,HX1T_09_BTx,HX1T_09_MTRx,HX1T_09_BTx)MOV(HX1T_09_BTx.FAULT_TIME,HX1T_09_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,T5T_08_BTx.RES)MOV(1000,T5T_08_BT.RAMP_UP_TMR.PRE)MOV(1,T5T_08_BTx.RAMP_UP_SET)MOV(1,T5T_08_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,T5T_08_BTx,T5T_08_MTRx,T5T_08_BTx)MOV(T5T_08_BTx.FAULT_TIME,T5T_08_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,T5T_09_BTx.RES)MOV(1000,T5T_09_BT.RAMP_UP_TMR.PRE)MOV(1,T5T_09_BTx.RAMP_UP_SET)MOV(1,T5T_09_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,T5T_09_BTx,T5T_09_MTRx,T5T_09_BTx)MOV(T5T_09_BTx.FAULT_TIME,T5T_09_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,XO2_05_BTx.RES)MOV(1000,XO2_05_BT.RAMP_UP_TMR.PRE)MOV(1,XO2_05_BTx.RAMP_UP_SET)MOV(1,XO2_05_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,XO2_05_BTx,XO2_05_MTRx,XO2_05_BTx)MOV(XO2_05_BTx.FAULT_TIME,XO2_05_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,XO2_04_BTx.RES)MOV(1000,XO2_04_BT.RAMP_UP_TMR.PRE)MOV(1,XO2_04_BTx.RAMP_UP_SET)MOV(1,XO2_04_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,XO2_04_BTx,XO2_04_MTRx,XO2_04_BTx)MOV(XO2_04_BTx.FAULT_TIME,XO2_04_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O4T_10_BTx.RES)MOV(1000,O4T_10_BT.RAMP_UP_TMR.PRE)MOV(1,O4T_10_BTx.RAMP_UP_SET)MOV(1,O4T_10_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O4T_10_BTx,O4T_10_MTRx,O4T_10_BTx)MOV(O4T_10_BTx.FAULT_TIME,O4T_10_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O4T_09_BTx.RES)MOV(1000,O4T_09_BT.RAMP_UP_TMR.PRE)MOV(1,O4T_09_BTx.RAMP_UP_SET)MOV(1,O4T_09_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O4T_09_BTx,O4T_09_MTRx,O4T_09_BTx)MOV(O4T_09_BTx.FAULT_TIME,O4T_09_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_23_BTx.RES)MOV(1000,BM1_23_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_23_BTx.RAMP_UP_SET)MOV(1,BM1_23_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_23_BTx,BM1_23_MTRx,BM1_23_BTx)MOV(BM1_23_BTx.FAULT_TIME,BM1_23_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,BM1_22_BTx.RES)MOV(1000,BM1_22_BT.RAMP_UP_TMR.PRE)MOV(1,BM1_22_BTx.RAMP_UP_SET)MOV(1,BM1_22_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,BM1_22_BTx,BM1_22_MTRx,BM1_22_BTx)MOV(BM1_22_BTx.FAULT_TIME,BM1_22_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O4T_20_BTx.RES)MOV(1000,O4T_20_BT.RAMP_UP_TMR.PRE)MOV(1,O4T_20_BTx.RAMP_UP_SET)MOV(1,O4T_20_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O4T_20_BTx,O4T_20_MTRx,O4T_20_BTx)MOV(O4T_20_BTx.FAULT_TIME,O4T_20_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,CL12T_36_BTx.RES)MOV(1000,CL12T_36_BT.RAMP_UP_TMR.PRE)MOV(1,CL12T_36_BTx.RAMP_UP_SET)MOV(1,CL12T_36_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,CL12T_36_BTx,CL12T_36_MTRx,CL12T_36_BTx)MOV(CL12T_36_BTx.FAULT_TIME,CL12T_36_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,CL12T_35_BTx.RES)MOV(1000,CL12T_35_BTP.RAMP_UP_TMR.PRE)MOV(1,CL12T_35_BTx.RAMP_UP_SET)MOV(1,CL12T_35_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,CL12T_35_BTx,CL12T_35_MTRx,CL12T_35_BTx)MOV(CL12T_35_BTx.FAULT_TIME,CL12T_35_BTP.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,C4_09_BTx.RES)MOV(1000,C4_09_BT.RAMP_UP_TMR.PRE)MOV(1,C4_09_BTx.RAMP_UP_SET)MOV(1,C4_09_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,C4_09_BTx,C4_09ZZ_MTRx,C4_09_BTx)MOV(C4_09_BTx.FAULT_TIME,C4_09_BT.FAULT_TIMER.PRE);
				RC: "Set BT values and call BT calc routine.";
				N: MOV(2.5,O4_04_BTx.RES)MOV(1000,O4_04_BT.RAMP_UP_TMR.PRE)MOV(1,O4_04_BTx.RAMP_UP_SET)MOV(1,O4_04_BTx.RAMP_DN_SET)JSR(R_CALC_BT_CONST,2,O4_04_BTx,O4_04ZZ_MTRx,O4_04_BTx)MOV(O4_04_BTx.FAULT_TIME,O4_04_BT.FAULT_TIMER.PRE);
		END_ROUTINE

		ROUTINE I_SET_CONSTANTS 
				RC: "****************************************************************$N"
				    "This routine sets the values of constants used throughout the PLC.$N"
				    "$N"
				    "$N"
				    "****************************************************************";
				N: NOP();
				RC: "PLC device ID";
				N: MOV(101,INT.PLC_Number_Const);
				RC: "Set the FIFO Array Constants";
				N: SIZE(MSG_QUEUE[0],0,MSG_TO_UL_QUEUE.QUEUE_SIZE)SUB(MSG_TO_UL_QUEUE.QUEUE_SIZE,1,MSG_TO_UL_QUEUE.QUEUE_SIZE_MIN1);
				N: SIZE(MSG_TO_UL[0],0,MSG_TO_UL_QUEUE.PAGE_SIZE);
				RC: "HMI Color Values";
				N: [MOV(1,Status.Brown_Grey) MOV(2,Status.Brown) MOV(3,Status.Red) MOV(4,Status.Red_Grey) MOV(5,Status.Green_DKGreen) ,MOV(6,Status.Blue) MOV(7,Status.Yellow) MOV(8,Status.Blue_Yellow) MOV(9,Status.White) MOV(10,Status.White_Grey) ,MOV(11,Status.Magenta) MOV(12,Status.Cyan) MOV(13,Status.Grey) MOV(14,Status.Black) MOV(15,Status.Green) ];
				RC: "Set HMI Conveyor Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.ConvCommFault) OR(3145728,Status.Brown,Status.ConvOutOfServ) OR(1048576,Status.Red,Status.ConvEStop) OR(1966080,Status.Red_Grey,Status.ConvFireAlarm) ,OR(3407872,Status.Green_DKGreen,Status.ConvOverRide) OR(3342336,Status.Blue,Status.ConvOverLoad) OR(720896,Status.Blue,Status.ConvCTCFlt) OR(4587520,Status.Blue,Status.ConvVFDFlt) OR(2621440,Status.Yellow,Status.ConvJammed) ,OR(1835008,Status.Blue_Yellow,Status.ConvFailSafeFlt) OR(2818048,Status.Brown,Status.ConvDisc) OR(2031616,Status.White_Grey,Status.ConvFull) OR(3276800,Status.White,Status.ConvOverSize) OR(458752,Status.Magenta,Status.ConvBagPresCasc) ,OR(393216,Status.Magenta,Status.ConvCascade) OR(1245184,Status.Cyan,Status.ConvEncoderFlt) OR(2293760,Status.Grey,Status.ConvIdle) OR(4456448,Status.Black,Status.ConvTimeOut) OR(3932160,Status.Green,Status.ConvRunning) ,OR(5177344,Status.Yellow,Status.ConvMBJam) OR(5242880,Status.Grey,Status.ConvEstopRes) ];
				RC: "Set HMI Diverter Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.DivCommFault) OR(3145728,Status.Brown,Status.DivOutOfServ) OR(1048576,Status.Red,Status.DivEStop) OR(1966080,Status.Red_Grey,Status.DivFireAlarm) ,OR(2490368,Status.Blue,Status.DivFault) OR(3342336,Status.Blue,Status.DivOverLoad) OR(720896,Status.Blue,Status.DivCTCFlt) OR(2621440,Status.Yellow,Status.DivJammed) ,OR(1703936,Status.Yellow,Status.DivFailRet) OR(1638400,Status.Yellow,Status.DivFailExt) OR(4521984,Status.Yellow,Status.DivPositionFault) OR(2818048,Status.Brown,Status.DivDisc) ,OR(3407872,Status.Green_DKGreen,Status.DivOverRide) OR(2949120,Status.Brown,Status.DivNotAuto) OR(2293760,Status.Grey,Status.DivIdle) OR(2031616,Status.White_Grey,Status.DivFull) ,OR(4456448,Status.Black,Status.DivTimeOut) OR(3932160,Status.Green,Status.DivRunning) OR(5373952,Status.Brown,Status.DivProxOverride) ];
				RC: "Set HMI Diverter Position Values";
				N: MOV(1,Status.DivPOShome)MOV(2,Status.DivPOSdivert)MOV(3,Status.DivPosNotHomeOrExt)MOV(4,Status.DivPosHomeAndExt);
				RC: "Set HMI Pusher Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.PusherCommFault) OR(3145728,Status.Brown,Status.PusherOutOfServ) OR(1048576,Status.Red,Status.PusherEStop) OR(1966080,Status.Red_Grey,Status.PusherFireAlarm) ,OR(3342336,Status.Blue,Status.PusherOverLoad) OR(720896,Status.Blue,Status.PusherCTCFlt) OR(2621440,Status.Yellow,Status.PusherJammed) OR(2818048,Status.Brown,Status.PusherDisc) ,OR(3407872,Status.Green_DKGreen,Status.PusherOverRide) OR(2949120,Status.Brown,Status.PusherNotAuto) OR(2293760,Status.Grey,Status.PusherIdle) OR(2031616,Status.White_Grey,Status.PusherFull) ,OR(4456448,Status.Black,Status.PusherTimeOut) OR(3932160,Status.Green,Status.PusherRunning) ];
				RC: "Set HMI BSD Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.BSDCommFault) OR(4849664,Status.White,Status.BSDBagPresent) OR(4915200,Status.White_Grey,Status.BSDBagWaitALM) ,OR(655360,Status.Yellow,Status.BSDSACComm) OR(983040,Status.Brown,Status.BSDDisabled) OR(1179648,Status.Green,Status.BSDEnabled) OR(5046272,Status.Cyan,Status.BSDPrintEnabled) ];
				RC: "Set HMI ATR Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.ATRComFault) OR(4259840,Status.Yellow,Status.ATRNoReads) OR(4325376,Status.Yellow,Status.ATRNoResp) OR(524288,Status.Yellow,Status.ATRChnlDataFail) ,OR(4128768,Status.Yellow,Status.ATRScnNotActive) OR(4063232,Status.Yellow,Status.ATRScnError) OR(3538944,Status.Yellow,Status.ATRPeFault) ,OR(1245184,Status.Cyan,Status.ATREncFault) OR(5111808,Status.Green,Status.ATRReady) OR(5111808,Status.Black,Status.ATRTimeOutReady) OR(131072,Status.Yellow,Status.ATRULFault) ];
				RC: "Set HMI BDS Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.BDSComFault) OR(2883584,Status.Yellow,Status.BDSNoResp) OR(1245184,Status.Yellow,Status.BDSEncFault) ,OR(5111808,Status.Green,Status.BDSReady) OR(524288,Status.Yellow,Status.BDSChnDataFail) OR(4128768,Status.Yellow,Status.BDSScnNotActive) ,OR(4063232,Status.Yellow,Status.BDSScnError) OR(3538944,Status.Yellow,Status.BDSPeFault) OR(5111808,Status.Black,Status.BDSTimeOutReady) ];
				RC: "Set HMI MCP Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.MCPCommFault) OR(2097152,Status.Blue,Status.MCPFuseFlt) OR(2752512,Status.Blue,Status.MCPMTRFlt) ,OR(4587520,Status.Blue,Status.MCPFieldMTRFlt) OR(1966080,Status.Red_Grey,Status.MCPFireAlarm) OR(1048576,Status.Red,Status.MCPEStop) OR(2621440,Status.Yellow,Status.MCPJamFlt) ,OR(3211264,Status.Red,Status.MCPOverTemp) OR(4456448,Status.Black,Status.MCPTimeOut) OR(65536,Status.Green,Status.MCPActive) OR(720896,Status.Blue,Status.MCPCTCTRFlt) ];
				RC: "Set HMI ISD Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.ISDCommFault) OR(3145728,Status.Brown,Status.ISDOutOfServ) OR(1048576,Status.Red,Status.ISDEstop) OR(1900544,Status.Yellow,Status.ISDFault) ,OR(262144,Status.Green_DKGreen,Status.ISDBypass) OR(2555904,Status.White_Grey,Status.ISDIQTest) OR(3997696,Status.Green,Status.ISDNormal) ,OR(4390912,Status.Black,Status.ISDStdby) OR(327680,Status.Grey,Status.ISDCalibration) OR(5308416,Status.Grey,Status.ISDWarmUp) OR(3801088,Status.Grey,Status.ISDRestart) ,OR(2359296,Status.Grey,Status.ISDInitial) OR(3866624,Status.Grey,Status.ISDResynch) OR(2228224,Status.Black,Status.ISDHibernate) OR(4653056,Status.Black,Status.ISDxRayMin) ,OR(2424832,Status.White_Grey,Status.ISDInsert) OR(196608,Status.Green,Status.ISDProcess) OR(851968,Status.Magenta,Status.ISDDieBack) ];
				RC: "Set HMI ISD Mode Values";
				N: [MOV(1,Status.ISDModeCommFault) MOV(2,Status.ISDModeEstop) MOV(3,Status.ISDModeFault) MOV(4,Status.ISDModeBypass) ,MOV(5,Status.ISDModeIQTest) MOV(6,Status.ISDModeNormal) MOV(7,Status.ISDModeStdBy) MOV(8,Status.ISDModeRestart) ,MOV(9,Status.ISDModeResynch) MOV(10,Status.ISDModeInitial) MOV(11,Status.ISDModeWarmUp) MOV(12,Status.ISDModeCalibration) ,MOV(13,Status.ISDModeHibernate) MOV(14,Status.ISDModexRayMin) ];
				RC: "Set HMI Door Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.DoorCommFault) OR(2949120,Status.Brown,Status.DoorNotAuto) OR(3145728,Status.Brown,Status.DoorOutOfServ) OR(1048576,Status.Red,Status.DoorEstop) ,OR(1966080,Status.Red_Grey,Status.DoorFireAlarm) OR(2818048,Status.Brown,Status.DoorDisc) OR(3342336,Status.Blue,Status.DoorMOL) OR(720896,Status.Blue,Status.DoorCTCTRFlt) ,OR(1572864,Status.Yellow,Status.DoorFailOpen) OR(1507328,Status.Yellow,Status.DoorFailClose) OR(4521984,Status.Yellow,Status.DoorUnkPos) OR(3014656,Status.Yellow,Status.DoorOBSFlt) ,OR(2293760,Status.Grey,Status.DoorIdle) OR(4784128,Status.Black,Status.DoorClosed) OR(4718592,Status.Green,Status.DoorOpen) OR(3407877,Status.Green_DKGreen,Status.DoorOvRide) ];
				RC: "Set HMI Door Position Values";
				N: MOV(1,Status.DoorBetweenPos)MOV(2,Status.DoorPOSOpen)MOV(3,Status.DoorPOSClosed);
				RC: "Set HMI MEC Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.MECCommFLT) OR(3145728,Status.Brown,Status.MECOutOfServ) OR(3080192,Status.Black,Status.MECOff) OR(2031616,Status.White,Status.MECFull) ,OR(131072,Status.Yellow,Status.MECBackup) OR(5111808,Status.Green,Status.MECReady) OR(2293760,Status.Grey,Status.MECIdle) ];
				RC: "Set HMI Vertisorter Status Values";
				N: [OR(655360,Status.Brown_Grey,Status.VSCommFault) OR(1048576,Status.Red,Status.VSEStop) OR(2162688,Status.Red,Status.VSGSFault) OR(1966080,Status.Red_Grey,Status.VSFireAlarm) ,OR(3342336,Status.Blue,Status.VSOverLoad) OR(720896,Status.Blue,Status.VSCTCFlt) OR(1769472,Status.Yellow,Status.VSFailSwitch) OR(4521984,Status.Yellow,Status.VSPositionFault) ,OR(589824,Status.Yellow,Status.VSCollisionFault) OR(2818048,Status.Brown,Status.VSDisc) OR(3407872,Status.Green_DKGreen,Status.VSOverRide) OR(2949120,Status.Brown,Status.VSNotAuto) ,OR(2293760,Status.Grey,Status.VSIdle) OR(4456448,Status.Black,Status.VSTimeOut) OR(3932160,Status.Green,Status.VSRunning) ];
				RC: "Set HMI Vertisorter Position Values";
				N: MOV(1,Status.VSPOSup)MOV(2,Status.VSPOSdown)MOV(3,Status.VSPOSNotUpOrDn)MOV(4,Status.VSPOSUpAndDn);
				RC: "$N"
				    "$N"
				    "$N"
				    "========================= UPPER LEVEL MESSAGING =========================$N"
				    "$N"
				    "$N"
				    "$N"
				    "Message type IDs.";
				N: [MOV(1,MsgConst.MsgID_HeartBeat) ,MOV(10,MsgConst.MsgID_Scanner) ,MOV(11,MsgConst.MsgID_ScannerNoSort) ,MOV(12,MsgConst.MsgID_ScannerCBIS) ,MOV(20,MsgConst.MsgID_Divert) ,MOV(21,MsgConst.MsgID_VSU) ,MOV(30,MsgConst.MsgID_PreEDS) ,MOV(31,MsgConst.MsgID_EDSResult) ,MOV(32,MsgConst.MsgID_PostEDS) ,MOV(40,MsgConst.MsgID_CBRAArrival) ,MOV(50,MsgConst.MsgID_TrackingUpdate) ,MOV(60,MsgConst.MsgID_BDS) ];
				RC: "Event Codes.";
				N: [MOV(2001,MsgConst.Event_Diverted) ,MOV(2002,MsgConst.Event_DivStraight) ,MOV(2003,MsgConst.Event_DivError) ,MOV(2101,MsgConst.Event_VSUp) ,MOV(2102,MsgConst.Event_VSDown) ,MOV(1000,MsgConst.Event_ATRScanned) ,MOV(1001,MsgConst.Event_ATRBadData) ,MOV(1002,MsgConst.Event_ATRTooClose) ,MOV(1003,MsgConst.Event_ATRTimeout) ,MOV(3101,MsgConst.Event_EDSUnk) ,MOV(3102,MsgConst.Event_EDSClr) ,MOV(3103,MsgConst.Event_EDSSus) ,MOV(3104,MsgConst.Event_EDSTmOut) ,MOV(3105,MsgConst.Event_EDSCommErr) ,MOV(3106,MsgConst.Event_EDSPend) ,MOV(3200,MsgConst.Event_EDSExitOK) ,MOV(3201,MsgConst.Event_EDSNoExitData) ,MOV(6003,MsgConst.Event_BDSIG) ,MOV(6002,MsgConst.Event_BDSOG) ,MOV(4000,MsgConst.Event_ETDArrived) ,MOV(5001,MsgConst.Event_TUUnknown) ,MOV(5002,MsgConst.Event_TUNewBag) ,MOV(5003,MsgConst.Event_TUArrived) ,MOV(5004,MsgConst.Event_TUDeparted) ,MOV(5005,MsgConst.Event_TUClearDisallow) ,MOV(5006,MsgConst.Event_TUTrackingErr) ,MOV(5007,MsgConst.Event_TURecirc) ,MOV(5008,MsgConst.Event_TUUnscannable) ,MOV(5009,MsgConst.Event_TUCBRARemoved) ];
				RC: "Reason Codes.";
				N: [MOV(20000,MsgConst.Rson_DivAuto) ,MOV(20001,MsgConst.Rson_DivHMIOutServ) ,MOV(20002,MsgConst.Rson_DivDisconnectOff) ,MOV(20003,MsgConst.Rson_DivHMIDivertAll) ,MOV(20004,MsgConst.Rson_DivTooClose) ,MOV(20005,MsgConst.Rson_DivUnVerifiedPush) ,MOV(20006,MsgConst.Rson_DivFaulted) ,MOV(20007,MsgConst.Rson_DivNotAuto) ,MOV(20008,MsgConst.Rson_DivDestNotAvail) ,MOV(20009,MsgConst.Rson_DivLnOutServ) ,MOV(20010,MsgConst.Rson_DivEstop) ,MOV(20011,MsgConst.Rson_DivLnJam) ,MOV(20012,MsgConst.Rson_DivFailedToRet) ,MOV(20013,MsgConst.Rson_DivFailedtoExt) ,MOV(20014,MsgConst.Rson_DivPosFault) ,MOV(20015,MsgConst.Rson_DivHMIDivertHalf) ,MOV(20016,MsgConst.Rson_DivLnFull) ,MOV(20017,MsgConst.Rson_DivNotRunning) ,MOV(20000,MsgConst.Rson_VSAuto) ,MOV(21001,MsgConst.Rson_VSHMIOverride) ,MOV(21002,MsgConst.Rson_VSHMIOutServ) ,MOV(21003,MsgConst.Rson_VSDisconnectOff) ,MOV(21004,MsgConst.Rson_VSFaulted) ,MOV(21005,MsgConst.Rson_VSNotAuto) ,MOV(21006,MsgConst.Rson_VSDestNotAvail) ,MOV(40001,MsgConst.Rson_ETDLostBag) ,MOV(40002,MsgConst.Rson_ETDSuspect) ,MOV(40003,MsgConst.Rson_ETDOOG) ,MOV(40004,MsgConst.Rson_ETDTO) ,MOV(40005,MsgConst.Rson_ETDClear) ,MOV(40006,MsgConst.Rson_ETDUnk) ,MOV(40007,MsgConst.Rson_ETDFlush) ,MOV(40008,MsgConst.Rson_ETDBHSPurge) ,MOV(40009,MsgConst.Rson_ETDCommErr) ,MOV(40010,MsgConst.Rson_ETDStoppedInScan) ,MOV(31001,MsgConst.Rson_EDSL1) ,MOV(31002,MsgConst.Rson_EDSL2) ,MOV(31003,MsgConst.Rson_EDSPseudo) ,MOV(31004,MsgConst.Rson_EDSLate) ,MOV(60001,MsgConst.Rson_BDSOG) ,MOV(60002,MsgConst.Rson_BDSTimeout) ,MOV(60003,MsgConst.Rson_BDSBadData) ,MOV(60004,MsgConst.Rson_BDSTooClose) ,MOV(60005,MsgConst.Rson_BDSNoDim) ,MOV(50001,MsgConst.Rson_TUMissBag) ,MOV(50002,MsgConst.Rson_TULenPurge) ,MOV(50003,MsgConst.Rson_TUUnkPurge) ,MOV(50004,MsgConst.Rson_TUMissBagPurge) ,MOV(50005,MsgConst.Rson_TUJamDelete) ,MOV(50006,MsgConst.Rson_TUEncErr) ,MOV(50007,MsgConst.Rson_TUTrkErr) ,MOV(50007,MsgConst.Rson_TUHEDataErr) ,MOV(50008,MsgConst.Rson_TUWindowErr) ,MOV(50009,MsgConst.Rson_TURemoved) ,MOV(50010,MsgConst.Rson_TUStoppedInScan) ,MOV(50011,MsgConst.Rson_RCBySAC) ,MOV(50012,MsgConst.Rson_RCMissDiv) ,MOV(50013,MsgConst.Rson_RCLost) ,MOV(50014,MsgConst.Rson_TUUpstreamPurge) ];
				RC: "Sort Method Codes.";
				N: [MOV(10001,MsgConst.Sort_Pier) ,MOV(10002,MsgConst.Sort_InvalidPier) ,MOV(10003,MsgConst.Sort_Carrier) ,MOV(10004,MsgConst.Sort_InvalidCarrier) ,MOV(10005,MsgConst.Sort_InvalidAirport) ,MOV(10006,MsgConst.Sort_CnflctBcds) ,MOV(10007,MsgConst.Sort_NoRead) ,MOV(10008,MsgConst.Sort_TooManyBcds) ];
				RC: "General Codes.";
				N: MOV(-1,MsgConst.NA);
		END_ROUTINE

		ROUTINE I_SET_DIV_CONST 
				RC: "Set HSD Constants$N"
				    "Diverter XO2";
				N: [MOV(5002,XO2_HSDx.ID) MOV(5202,XO2_HSDx.DivDestID) ,DIV(36,BM1_23_BTx.RES,XO2_HSD.TooCloseCNT.PRE) DIV(15,BM1_23_BTx.RES,XO2_HSDx.ACT_Const) MOV(0,XO2_HSDx.EXT_Delay) JSR(R_CALC_DIV_CONST,3,XO2_HSDx.ACT_Const,XO2_HSD.TooCloseCNT.PRE,XO2_HSDx.EXT_Delay,XO2_HSDx.Area_Clear_Mask) MOV(6,XO2_HSDx.XFER_Const) ,MOV(8000,XO2_HSD.DELAY_START_TMR.PRE) MOV(1000,XO2_HSD.EN_DLY.PRE) MOV(2000,XO2_HSD.OFF_TMR.PRE) MOV(2000,XO2_HSD.FAULT_TMR.PRE) ,MOV(5,XO2_HSD.ACT_CNTRL.LEN) MOV(5,XO2_HSD.XFER_CNTRL.LEN) ,MOV(400,XO2_HSD.FailedToExtend_TMR.PRE) MOV(400,XO2_HSD.FailedToRetract_TMR.PRE) MOV(400,XO2_HSD.PositionFault_TMR.PRE) ,MOV(300,XO2_HSD.RAMP_UP_TMR.PRE) MUL(XO2_HSD.RAMP_UP_TMR.PRE,0.3,XO2_HSDx.LowSpdTime) MUL(XO2_HSD.RAMP_UP_TMR.PRE,0.7,XO2_HSDx.MedSpdTime) ,MOV(0,XO2_HSDx.LowSpdDelay) MOV(0,XO2_HSDx.MedSpdDelay) ,MOV(10000,XO2_HSD.PDL_RUN_TMR.PRE) SUB(BM1_B.MTR_GRP.AUTO_STOP_TIMER.PRE,5000,XO2_HSD.Auto_Retract_TMR.PRE) MOV(100,XO2_HSD.EXT_TRIG_TMR.PRE) MOV(100,XO2_HSD.RET_TRIG_TMR.PRE) ,MOV(65,XO2_HSDx.HMI_STATE[0].DATA[0]) MOV(117,XO2_HSDx.HMI_STATE[0].DATA[1]) MOV(116,XO2_HSDx.HMI_STATE[0].DATA[2]) MOV(111,XO2_HSDx.HMI_STATE[0].DATA[3]) MOV(4,XO2_HSDx.HMI_STATE[0].LEN) ,MOV(68,XO2_HSDx.HMI_STATE[1].DATA[0]) MOV(105,XO2_HSDx.HMI_STATE[1].DATA[1]) MOV(118,XO2_HSDx.HMI_STATE[1].DATA[2]) MOV(32,XO2_HSDx.HMI_STATE[1].DATA[3]) MOV(65,XO2_HSDx.HMI_STATE[1].DATA[4]) MOV(108,XO2_HSDx.HMI_STATE[1].DATA[5]) MOV(108,XO2_HSDx.HMI_STATE[1].DATA[6]) MOV(7,XO2_HSDx.HMI_STATE[1].LEN) ,MOV(68,XO2_HSDx.HMI_STATE[2].DATA[0]) MOV(105,XO2_HSDx.HMI_STATE[2].DATA[1]) MOV(118,XO2_HSDx.HMI_STATE[2].DATA[2]) MOV(32,XO2_HSDx.HMI_STATE[2].DATA[3]) MOV(72,XO2_HSDx.HMI_STATE[2].DATA[4]) MOV(97,XO2_HSDx.HMI_STATE[2].DATA[5]) MOV(108,XO2_HSDx.HMI_STATE[2].DATA[6]) MOV(102,XO2_HSDx.HMI_STATE[2].DATA[7]) MOV(8,XO2_HSDx.HMI_STATE[2].LEN) ,MOV(68,XO2_HSDx.HMI_STATE[3].DATA[0]) MOV(105,XO2_HSDx.HMI_STATE[3].DATA[1]) MOV(118,XO2_HSDx.HMI_STATE[3].DATA[2]) MOV(32,XO2_HSDx.HMI_STATE[3].DATA[3]) MOV(78,XO2_HSDx.HMI_STATE[3].DATA[4]) MOV(111,XO2_HSDx.HMI_STATE[3].DATA[5]) MOV(110,XO2_HSDx.HMI_STATE[3].DATA[6]) MOV(101,XO2_HSDx.HMI_STATE[3].DATA[7]) MOV(8,XO2_HSDx.HMI_STATE[3].LEN) ];
				RC: "Set HSD Constants$N"
				    "Diverter XO1";
				N: [MOV(5001,XO1_HSDx.ID) MOV(5201,XO1_HSDx.DivDestID) ,DIV(36,O4T_10_BTx.RES,XO1_HSD.TooCloseCNT.PRE) DIV(15,O4T_10_BTx.RES,XO1_HSDx.ACT_Const) MOV(0,XO1_HSDx.EXT_Delay) JSR(R_CALC_DIV_CONST,3,XO1_HSDx.ACT_Const,XO1_HSD.TooCloseCNT.PRE,XO1_HSDx.EXT_Delay,XO1_HSDx.Area_Clear_Mask) MOV(6,XO1_HSDx.XFER_Const) ,MOV(8000,XO1_HSD.DELAY_START_TMR.PRE) MOV(1000,XO1_HSD.EN_DLY.PRE) MOV(2000,XO1_HSD.OFF_TMR.PRE) MOV(2000,XO1_HSD.FAULT_TMR.PRE) ,MOV(5,XO1_HSD.ACT_CNTRL.LEN) MOV(5,XO1_HSD.XFER_CNTRL.LEN) ,MOV(400,XO1_HSD.FailedToExtend_TMR.PRE) MOV(400,XO1_HSD.FailedToRetract_TMR.PRE) MOV(400,XO1_HSD.PositionFault_TMR.PRE) ,MOV(300,XO1_HSD.RAMP_UP_TMR.PRE) MUL(XO1_HSD.RAMP_UP_TMR.PRE,0.3,XO1_HSDx.LowSpdTime) MUL(XO1_HSD.RAMP_UP_TMR.PRE,0.7,XO1_HSDx.MedSpdTime) ,MOV(0,XO1_HSDx.LowSpdDelay) MOV(0,XO1_HSDx.MedSpdDelay) ,MOV(10000,XO1_HSD.PDL_RUN_TMR.PRE) SUB(O4T.MTR_GRP.AUTO_STOP_TIMER.PRE,5000,XO1_HSD.Auto_Retract_TMR.PRE) MOV(100,XO1_HSD.EXT_TRIG_TMR.PRE) MOV(100,XO1_HSD.RET_TRIG_TMR.PRE) ,MOV(65,XO1_HSDx.HMI_STATE[0].DATA[0]) MOV(117,XO1_HSDx.HMI_STATE[0].DATA[1]) MOV(116,XO1_HSDx.HMI_STATE[0].DATA[2]) MOV(111,XO1_HSDx.HMI_STATE[0].DATA[3]) MOV(4,XO1_HSDx.HMI_STATE[0].LEN) ,MOV(68,XO1_HSDx.HMI_STATE[1].DATA[0]) MOV(105,XO1_HSDx.HMI_STATE[1].DATA[1]) MOV(118,XO1_HSDx.HMI_STATE[1].DATA[2]) MOV(32,XO1_HSDx.HMI_STATE[1].DATA[3]) MOV(65,XO1_HSDx.HMI_STATE[1].DATA[4]) MOV(108,XO1_HSDx.HMI_STATE[1].DATA[5]) MOV(108,XO1_HSDx.HMI_STATE[1].DATA[6]) MOV(7,XO1_HSDx.HMI_STATE[1].LEN) ,MOV(68,XO1_HSDx.HMI_STATE[2].DATA[0]) MOV(105,XO1_HSDx.HMI_STATE[2].DATA[1]) MOV(118,XO1_HSDx.HMI_STATE[2].DATA[2]) MOV(32,XO1_HSDx.HMI_STATE[2].DATA[3]) MOV(72,XO1_HSDx.HMI_STATE[2].DATA[4]) MOV(97,XO1_HSDx.HMI_STATE[2].DATA[5]) MOV(108,XO1_HSDx.HMI_STATE[2].DATA[6]) MOV(102,XO1_HSDx.HMI_STATE[2].DATA[7]) MOV(8,XO1_HSDx.HMI_STATE[2].LEN) ,MOV(68,XO1_HSDx.HMI_STATE[3].DATA[0]) MOV(105,XO1_HSDx.HMI_STATE[3].DATA[1]) MOV(118,XO1_HSDx.HMI_STATE[3].DATA[2]) MOV(32,XO1_HSDx.HMI_STATE[3].DATA[3]) MOV(78,XO1_HSDx.HMI_STATE[3].DATA[4]) MOV(111,XO1_HSDx.HMI_STATE[3].DATA[5]) MOV(110,XO1_HSDx.HMI_STATE[3].DATA[6]) MOV(101,XO1_HSDx.HMI_STATE[3].DATA[7]) MOV(8,XO1_HSDx.HMI_STATE[3].LEN) ];
		END_ROUTINE

		ROUTINE I_SET_MRG_CONST 
				RC: "****************************************************************$N"
				    "This routine sets values for the associated merges.$N"
				    "****************************************************************$N"
				    "$N"
				    "***THIS ROUTINE IS NOT EXECUTED EVERY SCAN***";
				N: NOP();
				N: [CLR(MrgSetupCount) ,CLR(MaxLengthSetupCount) ];
				RC: "Find the size of the merge length mask. This is the maximum allowable length of a bag plus its gap, measured in encoder pulses.";
				N: SIZE(BM1_13_MRGx,0,Merge_UDTs)SIZE(MrgLenMask1[0],0,Merge_mask_size)MOV(Merge_mask_size,MrgSetupShiftControl.LEN);
				N: SUB(Merge_mask_size,1,Merge_mask_size_adjusted);
				RC: "Set up the merge length masks.";
				N: [RES(MrgSetupShiftControl) ,FLL(0,MrgSetupTempRegs[0],3) ,FLL(0,MrgLenMask1[0],Merge_mask_size) ,FLL(0,MrgLenMask2[0],Merge_mask_size) ,FLL(0,MrgLenMask3[0],Merge_mask_size) ];
				N: LBL(MrgSetupJump)[ADD(1,MrgSetupCount,MrgSetupCount) ,OTU(MrgSetupShiftControl.EN) ,BSL(MrgSetupTempRegs[0],MrgSetupShiftControl,INT.ALWAYS_TRUE,?) ,MOV(MrgSetupTempRegs[0],MrgLenMask1[MrgSetupCount]) ,MOV(MrgSetupTempRegs[1],MrgLenMask2[MrgSetupCount]) ,MOV(MrgSetupTempRegs[2],MrgLenMask3[MrgSetupCount]) ];
				N: LES(MrgSetupCount,Merge_mask_size_adjusted)JMP(MrgSetupJump);
				RC: "Set the maximum length for each merge.";
				N: LBL(MaxLengthSetupJump)MOV(Merge_mask_size_adjusted,MRGx[MaxLengthSetupCount].MaxLength)ADD(1,MaxLengthSetupCount,MaxLengthSetupCount);
				N: LES(MaxLengthSetupCount,Merge_UDTs)JMP(MaxLengthSetupJump);
				RC: "*************$N"
				    "Next 3 rungs are required to set the merge run timer preset value for each merge in this plc.$N"
				    "Rung 1 of 3$N"
				    "Get the size of the MRG array, so we know how many run timer values to set.$N"
				    "Fill the array index pointer with 0";
				N: SIZE(BM1_13_MRG,0,MRG_array_size)MOV(0,MRG_array_index);
				RC: "Rung 2 of 3$N"
				    "Jump to label for the loop$N"
				    "";
				N: LBL(SET_MRG_RUN_TMR_PRE)NOP();
				RC: "Rung 3 of 3$N"
				    "Move 10000 into the MergeRunTmr.Pre$N"
				    "Index the array pointer.$N"
				    "If the array pointer is less than the length of the MRG array, loop back around.$N"
				    "***********************************";
				N: [[MOV(10000,MRG[MRG_array_index].MergeRunTmr.PRE) ,ADD(1,MRG_array_index,MRG_array_index) ] ,LES(MRG_array_index,MRG_array_size) JMP(SET_MRG_RUN_TMR_PRE) ];
		END_ROUTINE

		ROUTINE I_SET_MTR_CONST 
				RC: "****************************************************************$N"
				    "This routine sets values for the associated motors and motor groups.$N"
				    "$N"
				    "$N"
				    "****************************************************************$N"
				    "$N"
				    "***THIS ROUTINE IS NOT EXECUTED EVERY SCAN***";
				N: NOP();
				RC: "=============== MOTOR ASSOCIATED VALUES ===============";
				N: NOP();
				RC: "Set motor values and call motor calc routine.";
				N: MOV(85,BM1_30_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_30_MTR,BM1_30_MTRx,BM1_30_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(86,BM1_29_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_29_MTR,BM1_29_MTRx,BM1_29_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(85,BM1_28_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_28_MTR,BM1_28_MTRx,BM1_28_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(88,BM1_27_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_27_MTR,BM1_27_MTRx,BM1_27_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(86,BM1_26_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_26_MTR,BM1_26_MTRx,BM1_26_MTR) ,MOV(0,BM1_26_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(89,BM1_25_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_25_MTR,BM1_25_MTRx,BM1_25_MTR) ,MOV(0,BM1_25_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_24_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_24_MTR,BM1_24_MTRx,BM1_24_MTR) ,MOV(0,BM1_24_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(89,BM1_23_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_23_MTR,BM1_23_MTRx,BM1_23_MTR) ,MOV(0,BM1_23_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(87,BM1_22_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_22_MTR,BM1_22_MTRx,BM1_22_MTR) ,MOV(0,BM1_22_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(89,BM1_21_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_21_MTR,BM1_21_MTRx,BM1_21_MTR) ,MOV(0,BM1_21_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(88,BM1_20_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_20_MTR,BM1_20_MTRx,BM1_20_MTR) ,MOV(0,BM1_20_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(95,BM1_19_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_19_MTR,BM1_19_MTRx,BM1_19_MTR) ,MOV(0,BM1_19_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(95,BM1_18_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_18_MTR,BM1_18_MTRx,BM1_18_MTR) ,MOV(0,BM1_18_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(80,BM1_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_17_MTR,BM1_17_MTRx,BM1_17_MTR) ,MOV(0,BM1_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(94,BM1_16_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_16_MTR,BM1_16_MTRx,BM1_16_MTR) ,MOV(0,BM1_16_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_15_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_15_MTR,BM1_15_MTRx,BM1_15_MTR) ,MOV(0,BM1_15_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(93,BM1_14_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_14_MTR,BM1_14_MTRx,BM1_14_MTR) ,MOV(0,BM1_14_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(86,BM1_38_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_38_MTR,BM1_38_MTRx,BM1_38_MTR) ,MOV(0,BM1_38_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(87,BM1_37_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_37_MTR,BM1_37_MTRx,BM1_37_MTR) ,MOV(0,BM1_37_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(94,BM1_36_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_36_MTR,BM1_36_MTRx,BM1_36_MTR) ,MOV(0,BM1_36_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_35_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_35_MTR,BM1_35_MTRx,BM1_35_MTR) ,MOV(0,BM1_35_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(84,BM1_34_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_34_MTR,BM1_34_MTRx,BM1_34_MTR) ,MOV(0,BM1_34_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(118,BM1_13_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_13_MTR,BM1_13_MTRx,BM1_13_MTR) ,MOV(0,BM1_13_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(93,BM1_12_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_12_MTR,BM1_12_MTRx,BM1_12_MTR) ,MOV(0,BM1_12_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_11_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_11_MTR,BM1_11_MTRx,BM1_11_MTR) ,MOV(0,BM1_11_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(82,BM1_10_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_10_MTR,BM1_10_MTRx,BM1_10_MTR) ,MOV(0,BM1_10_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(95,BM1_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_09_MTR,BM1_09_MTRx,BM1_09_MTR) ,MOV(0,BM1_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(86,BM1_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_08_MTR,BM1_08_MTRx,BM1_08_MTR) ,MOV(0,BM1_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,BM1_07_MTR,BM1_07_MTRx,BM1_07_MTR) ,MOV(0,BM1_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(88,BM1_06_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_06_MTR,BM1_06_MTRx,BM1_06_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(90,BM1_05_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_05_MTR,BM1_05_MTRx,BM1_05_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,BM1_04_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_04_MTR,BM1_04_MTRx,BM1_04_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,BM1_03_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_03_MTR,BM1_03_MTRx,BM1_03_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,BM1_02_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_02_MTR,BM1_02_MTRx,BM1_02_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,BM1_01_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,BM1_01_MTR,BM1_01_MTRx,BM1_01_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_18_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_18_MTR,O2T_18_MTRx,O2T_18_MTR) ,MOV(0,O2T_18_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_17_MTR,O2T_17_MTRx,O2T_17_MTR) ,MOV(0,O2T_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_16_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_16_MTR,O2T_16_MTRx,O2T_16_MTR) ,MOV(0,O2T_16_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_15_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_15_MTR,O2T_15_MTRx,O2T_15_MTR) ,MOV(0,O2T_15_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_14_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_14_MTR,O2T_14_MTRx,O2T_14_MTR) ,MOV(0,O2T_14_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_13_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_13_MTR,O2T_13_MTRx,O2T_13_MTR) ,MOV(0,O2T_13_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_12_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_12_MTR,O2T_12_MTRx,O2T_12_MTR) ,MOV(0,O2T_12_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_11_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_11_MTR,O2T_11_MTRx,O2T_11_MTR) ,MOV(0,O2T_11_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_10_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_10_MTR,O2T_10_MTRx,O2T_10_MTR) ,MOV(0,O2T_10_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_09_MTR,O2T_09_MTRx,O2T_09_MTR) ,MOV(0,O2T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_08_MTR,O2T_08_MTRx,O2T_08_MTR) ,MOV(0,O2T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_07_MTR,O2T_07_MTRx,O2T_07_MTR) ,MOV(0,O2T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_06_MTR,O2T_06_MTRx,O2T_06_MTR) ,MOV(0,O2T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_05_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_05_MTR,O2T_05_MTRx,O2T_05_MTR) ,MOV(0,O2T_05_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O2T_04_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O2T_04_MTR,O2T_04_MTRx,O2T_04_MTR) ,MOV(0,O2T_04_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_17_MTR,C2T_17_MTRx,C2T_17_MTR) ,MOV(0,C2T_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_16_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_16_MTR,C2T_16_MTRx,C2T_16_MTR) ,MOV(0,C2T_16_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_15_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_15_MTR,C2T_15_MTRx,C2T_15_MTR) ,MOV(0,C2T_15_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_14_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_14_MTR,C2T_14_MTRx,C2T_14_MTR) ,MOV(0,C2T_14_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_13_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_13_MTR,C2T_13_MTRx,C2T_13_MTR) ,MOV(0,C2T_13_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,C2T_12_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,C2T_12_MTR,C2T_12_MTRx,C2T_12_MTR) ,MOV(0,C2T_12_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL2T_09_MTR,CL2T_09_MTRx,CL2T_09_MTR) ,MOV(0,CL2T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL2T_08_MTR,CL2T_08_MTRx,CL2T_08_MTR) ,MOV(0,CL2T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL2T_07_MTR,CL2T_07_MTRx,CL2T_07_MTR) ,MOV(0,CL2T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL2T_06_MTR,CL2T_06_MTRx,CL2T_06_MTR) ,MOV(0,CL2T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_05_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL2T_05_MTR,CL2T_05_MTRx,CL2T_05_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_04_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL2T_04_MTR,CL2T_04_MTRx,CL2T_04_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_03_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL2T_03_MTR,CL2T_03_MTRx,CL2T_03_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_02_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL2T_02_MTR,CL2T_02_MTRx,CL2T_02_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL2T_01_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL2T_01_MTR,CL2T_01_MTRx,CL2T_01_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL3T_08_MTR,CL3T_08_MTRx,CL3T_08_MTR) ,MOV(0,CL3T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL3T_07_MTR,CL3T_07_MTRx,CL3T_07_MTR) ,MOV(0,CL3T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL3T_06_MTR,CL3T_06_MTRx,CL3T_06_MTR) ,MOV(0,CL3T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_05_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL3T_05_MTR,CL3T_05_MTRx,CL3T_05_MTR) ,MOV(0,CL3T_05_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_04_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL3T_04_MTR,CL3T_04_MTRx,CL3T_04_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_03_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL3T_03_MTR,CL3T_03_MTRx,CL3T_03_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_02_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL3T_02_MTR,CL3T_02_MTRx,CL3T_02_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL3T_01_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL3T_01_MTR,CL3T_01_MTRx,CL3T_01_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_13_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,O4T_13_MTR,O4T_13_MTRx,O4T_13_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_12_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_12_MTR,O4T_12_MTRx,O4T_12_MTR) ,MOV(0,O4T_12_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_11_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_11_MTR,O4T_11_MTRx,O4T_11_MTR) ,MOV(0,O4T_11_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_10_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_10_MTR,O4T_10_MTRx,O4T_10_MTR) ,MOV(0,O4T_10_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_09_MTR,O4T_09_MTRx,O4T_09_MTR) ,MOV(0,O4T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_08_MTR,O4T_08_MTRx,O4T_08_MTR) ,MOV(0,O4T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_07_MTR,O4T_07_MTRx,O4T_07_MTR) ,MOV(0,O4T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_06_MTR,O4T_06_MTRx,O4T_06_MTR) ,MOV(0,O4T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_05_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_05_MTR,O4T_05_MTRx,O4T_05_MTR) ,MOV(0,O4T_05_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO1_03_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO1_03_MTR,XO1_03_MTRx,XO1_03_MTR) ,MOV(0,XO1_03_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO1_02_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO1_02_MTR,XO1_02_MTRx,XO1_02_MTR) ,MOV(0,XO1_02_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO1_01_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,XO1_01_MTR,XO1_01_MTRx,XO1_01_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,T5T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,T5T_09_MTR,T5T_09_MTRx,T5T_09_MTR) ,MOV(0,T5T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,T5T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,T5T_08_MTR,T5T_08_MTRx,T5T_08_MTR) ,MOV(0,T5T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO2_05_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO2_05_MTR,XO2_05_MTRx,XO2_05_MTR) ,MOV(0,XO2_05_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO2_04_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO2_04_MTR,XO2_04_MTRx,XO2_04_MTR) ,MOV(0,XO2_04_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO2_03_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO2_03_MTR,XO2_03_MTRx,XO2_03_MTR) ,MOV(0,XO2_03_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO2_02_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO2_02_MTR,XO2_02_MTRx,XO2_02_MTR) ,MOV(0,XO2_02_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,XO2_01_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,XO2_01_MTR,XO2_01_MTRx,XO2_01_MTR) ,MOV(0,XO2_01_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_26_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_26_MTR,CL1T_26_MTRx,CL1T_26_MTR) ,MOV(0,CL1T_26_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_25_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL1T_25_MTR,CL1T_25_MTRx,CL1T_25_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_24_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_24_MTR,CL1T_24_MTRx,CL1T_24_MTR) ,MOV(0,CL1T_24_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_23_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_23_MTR,CL1T_23_MTRx,CL1T_23_MTR) ,MOV(0,CL1T_23_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_22_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL1T_22_MTR,CL1T_22_MTRx,CL1T_22_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_21_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_21_MTR,CL1T_21_MTRx,CL1T_21_MTR) ,MOV(0,CL1T_21_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_20_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_20_MTR,CL1T_20_MTRx,CL1T_20_MTR) ,MOV(0,CL1T_20_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_19_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_19_MTR,CL1T_19_MTRx,CL1T_19_MTR) ,MOV(0,CL1T_19_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_18_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_18_MTR,CL1T_18_MTRx,CL1T_18_MTR) ,MOV(0,CL1T_18_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_17_MTR,CL1T_17_MTRx,CL1T_17_MTR) ,MOV(0,CL1T_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_16_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_16_MTR,CL1T_16_MTRx,CL1T_16_MTR) ,MOV(0,CL1T_16_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_15_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_15_MTR,CL1T_15_MTRx,CL1T_15_MTR) ,MOV(0,CL1T_15_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_14_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_14_MTR,CL1T_14_MTRx,CL1T_14_MTR) ,MOV(0,CL1T_14_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_13_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_13_MTR,CL1T_13_MTRx,CL1T_13_MTR) ,MOV(0,CL1T_13_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_12_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_12_MTR,CL1T_12_MTRx,CL1T_12_MTR) ,MOV(0,CL1T_12_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_11_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_11_MTR,CL1T_11_MTRx,CL1T_11_MTR) ,MOV(0,CL1T_11_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_10_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_10_MTR,CL1T_10_MTRx,CL1T_10_MTR) ,MOV(0,CL1T_10_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_09_MTR,CL1T_09_MTRx,CL1T_09_MTR) ,MOV(0,CL1T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_08_MTR,CL1T_08_MTRx,CL1T_08_MTR) ,MOV(0,CL1T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_07_MTR,CL1T_07_MTRx,CL1T_07_MTR) ,MOV(0,CL1T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_06_MTR,CL1T_06_MTRx,CL1T_06_MTR) ,MOV(0,CL1T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_05_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_05_MTR,CL1T_05_MTRx,CL1T_05_MTR) ,MOV(0,CL1T_05_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_04_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL1T_04_MTR,CL1T_04_MTRx,CL1T_04_MTR) ,MOV(0,CL1T_04_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_03_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL1T_03_MTR,CL1T_03_MTRx,CL1T_03_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_02_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL1T_02_MTR,CL1T_02_MTRx,CL1T_02_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL1T_01_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,CL1T_01_MTR,CL1T_01_MTRx,CL1T_01_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_10A_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,HX1T_10A_MTR,HX1T_10A_MTRx,HX1T_10A_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_10_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,HX1T_10_MTR,HX1T_10_MTRx,HX1T_10_MTR) ,MOV(0,HX1T_10_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_09_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,HX1T_09_MTR,HX1T_09_MTRx,HX1T_09_MTR) ,MOV(0,HX1T_09_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_08_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,HX1T_08_MTR,HX1T_08_MTRx,HX1T_08_MTR) ,MOV(0,HX1T_08_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_07_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,HX1T_07_MTR,HX1T_07_MTRx,HX1T_07_MTR) ,MOV(0,HX1T_07_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,HX1T_06_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,HX1T_06_MTR,HX1T_06_MTRx,HX1T_06_MTR) ,MOV(0,HX1T_06_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_22_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,O4T_22_MTR,O4T_22_MTRx,O4T_22_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_21_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,O4T_21_MTR,O4T_21_MTRx,O4T_21_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_20_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_20_MTR,O4T_20_MTRx,O4T_20_MTR) ,MOV(0,O4T_20_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_19_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_19_MTR,O4T_19_MTRx,O4T_19_MTR) ,MOV(0,O4T_19_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_18_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_18_MTR,O4T_18_MTRx,O4T_18_MTR) ,MOV(0,O4T_18_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O4T_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O4T_17_MTR,O4T_17_MTRx,O4T_17_MTR) ,MOV(0,O4T_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O3T_21_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O3T_21_MTR,O3T_21_MTRx,O3T_21_MTR) ,MOV(0,O3T_21_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O3T_20_MTRx.CONV_SPEED)JSR(R_CALC_MTR_CONST,2,O3T_20_MTR,O3T_20_MTRx,O3T_20_MTR);
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O3T_19_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O3T_19_MTR,O3T_19_MTRx,O3T_19_MTR) ,MOV(0,O3T_19_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O3T_18_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O3T_18_MTR,O3T_18_MTRx,O3T_18_MTR) ,MOV(0,O3T_18_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,O3T_17_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,O3T_17_MTR,O3T_17_MTRx,O3T_17_MTR) ,MOV(0,O3T_17_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL12T_36_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL12T_36_MTR,CL12T_36_MTRx,CL12T_36_MTR) ,MOV(0,CL12T_36_MTR.OFF_TMR.PRE) ];
				RC: "Set motor values and call motor calc routine.";
				N: MOV(200,CL12T_35_MTRx.CONV_SPEED)[JSR(R_CALC_MTR_CONST,2,CL12T_35_MTR,CL12T_35_MTRx,CL12T_35_MTR) ,MOV(0,CL12T_35_MTR.OFF_TMR.PRE) ];
				RC: "=============== MOTOR GROUP ASSOCIATED VALUES =========";
				N: NOP();
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,BM1_A.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,BM1_B.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,BM1_C.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,MCP_03.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,C2T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,CL2T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,CL3T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,O4T_2.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,T5T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,XO2.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,CL1T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,HX1T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,O3T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,O4T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,CL12T.MTR_GRP.AUTO_STOP_TIMER.PRE);
				RC: "Set autostop timer preset value for motor group.";
				N: MOV(300000,XO1.MTR_GRP.AUTO_STOP_TIMER.PRE);
		END_ROUTINE

		ROUTINE I_SET_PE_CONST 
				RC: "****************************************************************$N"
				    "This routine sets values for the associated photoeyes.$N"
				    "$N"
				    "$N"
				    "****************************************************************$N"
				    "$N"
				    "***THIS ROUTINE IS NOT EXECUTED EVERY SCAN***";
				N: NOP();
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_06_PE2,BM1_06_MTRx,BM1_06_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_06_PE1,BM1_06_MTRx,BM1_06_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_07_PE,BM1_07_MTRx,BM1_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_08_PE,BM1_08_MTRx,BM1_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_09_PE,BM1_09_MTRx,BM1_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_10_PE,BM1_10_MTRx,BM1_10_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_11_PE,BM1_11_MTRx,BM1_11_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_12_PE,BM1_12_MTRx,BM1_12_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_13_PE,BM1_13_MTRx,BM1_13_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_14_PE2,BM1_14_MTRx,BM1_14_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_14_PE1,BM1_14_MTRx,BM1_14_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_15_PE,BM1_15_MTRx,BM1_15_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_16_PE,BM1_16_MTRx,BM1_16_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_17_PE,BM1_17_MTRx,BM1_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_18_PE,BM1_18_MTRx,BM1_18_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_19_PE2,BM1_19_MTRx,BM1_19_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_19_PE1,BM1_19_MTRx,BM1_19_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_20_PE,BM1_20_MTRx,BM1_20_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_21_PE,BM1_21_MTRx,BM1_21_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_22_PE,BM1_22_MTRx,BM1_22_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_23_PE2,BM1_23_MTRx,BM1_23_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_23_PE1,BM1_23_MTRx,BM1_23_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_23_PE,BM1_23_MTRx,BM1_23_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_24_PE,BM1_24_MTRx,BM1_24_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_25_PE,BM1_25_MTRx,BM1_25_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_26_PE,BM1_26_MTRx,BM1_26_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_27_PE2,BM1_27_MTRx,BM1_27_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_27_PE1,BM1_27_MTRx,BM1_27_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_28_PE2,BM1_28_MTRx,BM1_28_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_28_PE1,BM1_28_MTRx,BM1_28_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_29_PE2,BM1_29_MTRx,BM1_29_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_29_PE1,BM1_29_MTRx,BM1_29_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_30_PE3,BM1_30_MTRx,BM1_30_PE3);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_30_PE2,BM1_30_MTRx,BM1_30_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_30_PE1,BM1_30_MTRx,BM1_30_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_34_PE,BM1_34_MTRx,BM1_34_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_35_PE,BM1_35_MTRx,BM1_35_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_36_PE,BM1_36_MTRx,BM1_36_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_37_PE,BM1_37_MTRx,BM1_37_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,BM1_38_PE,BM1_38_MTRx,BM1_38_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_18_PE,O2T_18_MTRx,O2T_18_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_17_PE,O2T_17_MTRx,O2T_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_16_PE,O2T_16_MTRx,O2T_16_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_15_PE,O2T_15_MTRx,O2T_15_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_14_PE,O2T_14_MTRx,O2T_14_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_13_PE,O2T_13_MTRx,O2T_13_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_12_PE,O2T_12_MTRx,O2T_12_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_11_PE,O2T_11_MTRx,O2T_11_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_10_PE,O2T_10_MTRx,O2T_10_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_09_PE,O2T_09_MTRx,O2T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_08_PE,O2T_08_MTRx,O2T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_07_PE,O2T_07_MTRx,O2T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_06_PE,O2T_06_MTRx,O2T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_05_PE,O2T_05_MTRx,O2T_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O2T_04_PE,O2T_04_MTRx,O2T_04_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_17_PE,C2T_17_MTRx,C2T_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_16_PE,C2T_16_MTRx,C2T_16_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_15_PE,C2T_15_MTRx,C2T_15_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_14_PE,C2T_14_MTRx,C2T_14_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_13_PE,C2T_13_MTRx,C2T_13_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,C2T_12_PE,C2T_12_MTRx,C2T_12_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_09_PE,CL2T_09_MTRx,CL2T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_08_PE,CL2T_08_MTRx,CL2T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_07_PE,CL2T_07_MTRx,CL2T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_06_PE,CL2T_06_MTRx,CL2T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_05_PE,CL2T_05_MTRx,CL2T_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_04_PE,CL2T_04_MTRx,CL2T_04_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_03_PE,CL2T_03_MTRx,CL2T_03_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_02_PE,CL2T_02_MTRx,CL2T_02_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL2T_01_PE,CL2T_01_MTRx,CL2T_01_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_08_PE,CL3T_08_MTRx,CL3T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_07_PE,CL3T_07_MTRx,CL3T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_06_PE,CL3T_06_MTRx,CL3T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_05_PE,CL3T_05_MTRx,CL3T_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_04_PE,CL3T_04_MTRx,CL3T_04_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_03_PE,CL3T_03_MTRx,CL3T_03_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_02_PE,CL3T_02_MTRx,CL3T_02_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL3T_01_PE,CL3T_01_MTRx,CL3T_01_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_13_PE,O4T_13_MTRx,O4T_13_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_12_PE,O4T_12_MTRx,O4T_12_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_11_PE,O4T_11_MTRx,O4T_11_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_10_PE1,O4T_10_MTRx,O4T_10_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_10_PE2,O4T_10_MTRx,O4T_10_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_09_PE,O4T_09_MTRx,O4T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_08_PE,O4T_08_MTRx,O4T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_07_PE,O4T_07_MTRx,O4T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_06_PE,O4T_06_MTRx,O4T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_05_PE,O4T_05_MTRx,O4T_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO1_03_PE,XO1_03_MTRx,XO1_03_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO1_02_PE,XO1_02_MTRx,XO1_02_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO1_01_PE,XO1_01_MTRx,XO1_01_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO1_01_PE2,XO1_01_MTRx,XO1_01_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,T5T_09_PE,T5T_09_MTRx,T5T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,T5T_08_PE,T5T_08_MTRx,T5T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO2_05_PE,XO2_05_MTRx,XO2_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO2_04_PE,XO2_04_MTRx,XO2_04_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO2_03_PE,XO2_03_MTRx,XO2_03_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO2_02_PE,XO2_02_MTRx,XO2_02_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,XO2_01_PE,XO2_01_MTRx,XO2_01_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_26_PE1,CL1T_26_MTRx,CL1T_26_PE1);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_26_PE2,CL1T_26_MTRx,CL1T_26_PE2);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_24_PE,CL1T_24_MTRx,CL1T_24_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_23_PE,CL1T_23_MTRx,CL1T_23_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_21_PE,CL1T_21_MTRx,CL1T_21_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_20_PE,CL1T_20_MTRx,CL1T_20_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_19_PE,CL1T_19_MTRx,CL1T_19_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_18_PE,CL1T_18_MTRx,CL1T_18_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_17_PE,CL1T_17_MTRx,CL1T_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_16_PE,CL1T_16_MTRx,CL1T_16_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_15_PE,CL1T_15_MTRx,CL1T_15_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_14_PE,CL1T_14_MTRx,CL1T_14_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_13_PE,CL1T_13_MTRx,CL1T_13_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_12_PE,CL1T_12_MTRx,CL1T_12_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_11_PE,CL1T_11_MTRx,CL1T_11_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_10_PE,CL1T_10_MTRx,CL1T_10_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_09_PE,CL1T_09_MTRx,CL1T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_08_PE,CL1T_08_MTRx,CL1T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_07_PE,CL1T_07_MTRx,CL1T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_06_PE,CL1T_06_MTRx,CL1T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_05_PE,CL1T_05_MTRx,CL1T_05_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_04_PE,CL1T_04_MTRx,CL1T_04_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_03_PE,CL1T_03_MTRx,CL1T_03_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_02_PE,CL1T_02_MTRx,CL1T_02_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL1T_01_PE,CL1T_01_MTRx,CL1T_01_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_10A_PE,HX1T_10A_MTRx,HX1T_10A_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_10_PE,HX1T_10_MTRx,HX1T_10_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_09_PE,HX1T_09_MTRx,HX1T_09_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_08_PE,HX1T_08_MTRx,HX1T_08_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_07_PE,HX1T_07_MTRx,HX1T_07_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,HX1T_06_PE,HX1T_06_MTRx,HX1T_06_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_22_PE,O4T_22_MTRx,O4T_22_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_21_PE,O4T_21_MTRx,O4T_21_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_20_PE,O4T_20_MTRx,O4T_20_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_19_PE,O4T_19_MTRx,O4T_19_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_18_PE,O4T_18_MTRx,O4T_18_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_17_PE,O4T_17_MTRx,O4T_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O4T_16_PE,O3T_21_MTRx,O4T_16_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O3T_20_PE,O3T_20_MTRx,O3T_20_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O3T_19_PE,O3T_19_MTRx,O3T_19_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O3T_18_PE,O3T_18_MTRx,O3T_18_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,O3T_17_PE,O3T_17_MTRx,O3T_17_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL12T_36_PE,CL12T_36_MTRx,CL12T_36_PE);
				RC: "Call PE calc routine.";
				N: JSR(R_CALC_PE_CONST,2,CL12T_35_PE,CL12T_35_MTRx,CL12T_35_PE);
		END_ROUTINE

		ROUTINE I_SET_SPACER_CONST 
				RC: "****************************************************************$N"
				    "This routine sets values for the associated spacers.$N"
				    "$N"
				    "Note:  It is important that the I_SET_MTR_CONST and the I_SET_BT_CONST routine is called before this routine.$N"
				    "$N"
				    "$N"
				    "****************************************************************$N"
				    "$N"
				    "***THIS ROUTINE IS NOT EXECUTED EVERY SCAN***";
				N: NOP();
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_38_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_14_MTRx,BM1_38_MTRx,BM1_38_MTR,BM1_38_MTRx,BM1_38_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_37_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_38_MTRx,BM1_37_MTRx,BM1_37_MTR,BM1_37_MTRx,BM1_37_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_36_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_37_MTRx,BM1_36_MTRx,BM1_36_MTR,BM1_36_MTRx,BM1_36_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_35_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_36_MTRx,BM1_35_MTRx,BM1_35_MTR,BM1_35_MTRx,BM1_35_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_34_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_35_MTRx,BM1_34_MTRx,BM1_34_MTR,BM1_34_MTRx,BM1_34_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_25_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_26_MTRx,BM1_25_MTRx,BM1_25_MTR,BM1_25_MTRx,BM1_25_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_24_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_25_MTRx,BM1_24_MTRx,BM1_24_MTR,BM1_24_MTRx,BM1_24_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_23_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_24_MTRx,BM1_23_MTRx,BM1_23_MTR,BM1_23_MTRx,BM1_23_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,BM1_22_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_23_MTRx,BM1_22_MTRx,BM1_22_MTR,BM1_22_MTRx,BM1_22_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,BM1_21_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_22_MTRx,BM1_21_MTRx,BM1_21_MTR,BM1_21_MTRx,BM1_21_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,BM1_20_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_21_MTRx,BM1_20_MTRx,BM1_20_MTR,BM1_20_MTRx,BM1_20_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_19_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_20_MTRx,BM1_19_MTRx,BM1_19_MTR,BM1_19_MTRx,BM1_19_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_18_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_19_MTRx,BM1_18_MTRx,BM1_18_MTR,BM1_18_MTRx,BM1_18_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_18_MTRx,BM1_17_MTRx,BM1_17_MTR,BM1_17_MTRx,BM1_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_16_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_17_MTRx,BM1_16_MTRx,BM1_16_MTR,BM1_16_MTRx,BM1_16_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_15_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_16_MTRx,BM1_15_MTRx,BM1_15_MTR,BM1_15_MTRx,BM1_15_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_14_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_15_MTRx,BM1_14_MTRx,BM1_14_MTR,BM1_14_MTRx,BM1_14_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_13_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_14_MTRx,BM1_13_MTRx,BM1_13_MTR,BM1_13_MTRx,BM1_13_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_12_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_13_MTRx,BM1_12_MTRx,BM1_12_MTR,BM1_12_MTRx,BM1_12_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_11_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_12_MTRx,BM1_11_MTRx,BM1_11_MTR,BM1_11_MTRx,BM1_11_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_10_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_11_MTRx,BM1_10_MTRx,BM1_10_MTR,BM1_10_MTRx,BM1_10_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_10_MTRx,BM1_09_MTRx,BM1_09_MTR,BM1_09_MTRx,BM1_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_09_MTRx,BM1_08_MTRx,BM1_08_MTR,BM1_08_MTRx,BM1_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,BM1_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_08_MTRx,BM1_07_MTRx,BM1_07_MTR,BM1_07_MTRx,BM1_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_18_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_14_MTRx,O2T_18_MTRx,O2T_18_MTR,O2T_18_MTRx,O2T_18_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_18_MTRx,O2T_17_MTRx,O2T_17_MTR,O2T_17_MTRx,O2T_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_16_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_17_MTRx,O2T_16_MTRx,O2T_16_MTR,O2T_16_MTRx,O2T_16_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_15_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_16_MTRx,O2T_15_MTRx,O2T_15_MTR,O2T_15_MTRx,O2T_15_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_14_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_15_MTRx,O2T_14_MTRx,O2T_14_MTR,O2T_14_MTRx,O2T_14_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_13_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_14_MTRx,O2T_13_MTRx,O2T_13_MTR,O2T_13_MTRx,O2T_13_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_12_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_13_MTRx,O2T_12_MTRx,O2T_12_MTR,O2T_12_MTRx,O2T_12_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_11_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_12_MTRx,O2T_11_MTRx,O2T_11_MTR,O2T_11_MTRx,O2T_11_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_10_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_11_MTRx,O2T_10_MTRx,O2T_10_MTR,O2T_10_MTRx,O2T_10_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_10_MTRx,O2T_09_MTRx,O2T_09_MTR,O2T_09_MTRx,O2T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_09_MTRx,O2T_08_MTRx,O2T_08_MTR,O2T_08_MTRx,O2T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_08_MTRx,O2T_07_MTRx,O2T_07_MTR,O2T_07_MTRx,O2T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_07_MTRx,O2T_06_MTRx,O2T_06_MTR,O2T_06_MTRx,O2T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_05_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_06_MTRx,O2T_05_MTRx,O2T_05_MTR,O2T_05_MTRx,O2T_05_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O2T_04_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_05_MTRx,O2T_04_MTRx,O2T_04_MTR,O2T_04_MTRx,O2T_04_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O2T_10_MTRx,C2T_17_MTRx,C2T_17_MTR,C2T_17_MTRx,C2T_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_16_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C2T_17_MTRx,C2T_16_MTRx,C2T_16_MTR,C2T_16_MTRx,C2T_16_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_15_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C2T_16_MTRx,C2T_15_MTRx,C2T_15_MTR,C2T_15_MTRx,C2T_15_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_14_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C2T_15_MTRx,C2T_14_MTRx,C2T_14_MTR,C2T_14_MTRx,C2T_14_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_13_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C2T_14_MTRx,C2T_13_MTRx,C2T_13_MTR,C2T_13_MTRx,C2T_13_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,C2T_12_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C2T_13_MTRx,C2T_12_MTRx,C2T_12_MTR,C2T_12_MTRx,C2T_12_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL2T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4_06ZZ_MTRx,CL2T_09_MTRx,CL2T_09_MTR,CL2T_09_MTRx,CL2T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL2T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL2T_09_MTRx,CL2T_08_MTRx,CL2T_08_MTR,CL2T_08_MTRx,CL2T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL2T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL2T_08_MTRx,CL2T_07_MTRx,CL2T_07_MTR,CL2T_07_MTRx,CL2T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL2T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL2T_07_MTRx,CL2T_06_MTRx,CL2T_06_MTR,CL2T_06_MTRx,CL2T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL3T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,T5_10ZZ_MTRx,CL3T_08_MTRx,CL3T_08_MTR,CL3T_08_MTRx,CL3T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL3T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL3T_08_MTRx,CL3T_07_MTRx,CL3T_07_MTR,CL3T_07_MTRx,CL3T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL3T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL3T_07_MTRx,CL3T_06_MTRx,CL3T_06_MTR,CL3T_06_MTRx,CL3T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL3T_05_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL3T_06_MTRx,CL3T_05_MTRx,CL3T_05_MTR,CL3T_05_MTRx,CL3T_05_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_13_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_30_MTRx,O4T_13_MTRx,O4T_13_MTR,O4T_13_MTRx,O4T_13_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_12_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_13_MTRx,O4T_12_MTRx,O4T_12_MTR,O4T_12_MTRx,O4T_12_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_11_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_12_MTRx,O4T_11_MTRx,O4T_11_MTR,O4T_11_MTRx,O4T_11_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_10_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_11_MTRx,O4T_10_MTRx,O4T_10_MTR,O4T_10_MTRx,O4T_10_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,O4T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_10_MTRx,O4T_09_MTRx,O4T_09_MTR,O4T_09_MTRx,O4T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,O4T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_09_MTRx,O4T_08_MTRx,O4T_08_MTR,O4T_08_MTRx,O4T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(36,O4T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_08_MTRx,O4T_07_MTRx,O4T_07_MTR,O4T_07_MTRx,O4T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_07_MTRx,O4T_06_MTRx,O4T_06_MTR,O4T_06_MTRx,O4T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_05_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_06_MTRx,O4T_05_MTRx,O4T_05_MTR,O4T_05_MTRx,O4T_05_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO1_03_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,BM1_34_MTRx,XO1_03_MTRx,XO1_03_MTR,XO1_03_MTRx,XO1_03_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO1_02_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,XO1_03_MTRx,XO1_02_MTRx,XO1_02_MTR,XO1_02_MTRx,XO1_02_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,T5T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4_04ZZ_MTRx,T5T_09_MTRx,T5T_09_MTR,T5T_09_MTRx,T5T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,T5T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,T5T_09_MTRx,T5T_08_MTRx,T5T_08_MTR,T5T_08_MTRx,T5T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO2_05_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,C4_09ZZ_MTRx,XO2_05_MTRx,XO2_05_MTR,XO2_05_MTRx,XO2_05_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO2_04_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,XO2_05_MTRx,XO2_04_MTRx,XO2_04_MTR,XO2_04_MTRx,XO2_04_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO2_03_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,XO2_04_MTRx,XO2_03_MTRx,XO2_03_MTR,XO2_03_MTRx,XO2_03_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO2_02_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,XO2_03_MTRx,XO2_02_MTRx,XO2_02_MTR,XO2_02_MTRx,XO2_02_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,XO2_01_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,XO2_02_MTRx,XO2_01_MTRx,XO2_01_MTR,XO2_01_MTRx,XO2_01_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_10A_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HXA_ZZ_MTRx,HX1T_10A_MTRx,HX1T_10A_MTR,HX1T_10A_MTRx,HX1T_10A_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_26_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HX1T_10A_MTRx,CL1T_26_MTRx,CL1T_26_MTR,CL1T_26_MTRx,CL1T_26_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_24_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_25_MTRx,CL1T_24_MTRx,CL1T_24_MTR,CL1T_24_MTRx,CL1T_24_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_23_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_24_MTRx,CL1T_23_MTRx,CL1T_23_MTR,CL1T_23_MTRx,CL1T_23_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_21_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_22_MTRx,CL1T_21_MTRx,CL1T_21_MTR,CL1T_21_MTRx,CL1T_21_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_20_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_21_MTRx,CL1T_20_MTRx,CL1T_20_MTR,CL1T_20_MTRx,CL1T_20_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_19_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_20_MTRx,CL1T_19_MTRx,CL1T_19_MTR,CL1T_19_MTRx,CL1T_19_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_18_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_19_MTRx,CL1T_18_MTRx,CL1T_18_MTR,CL1T_18_MTRx,CL1T_18_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_18_MTRx,CL1T_17_MTRx,CL1T_17_MTR,CL1T_17_MTRx,CL1T_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_16_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_17_MTRx,CL1T_16_MTRx,CL1T_16_MTR,CL1T_16_MTRx,CL1T_16_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_15_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_16_MTRx,CL1T_15_MTRx,CL1T_15_MTR,CL1T_15_MTRx,CL1T_15_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_14_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_15_MTRx,CL1T_14_MTRx,CL1T_14_MTR,CL1T_14_MTRx,CL1T_14_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_13_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_14_MTRx,CL1T_13_MTRx,CL1T_13_MTR,CL1T_13_MTRx,CL1T_13_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_12_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_13_MTRx,CL1T_12_MTRx,CL1T_12_MTR,CL1T_12_MTRx,CL1T_12_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_11_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_12_MTRx,CL1T_11_MTRx,CL1T_11_MTR,CL1T_11_MTRx,CL1T_11_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_10_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_11_MTRx,CL1T_10_MTRx,CL1T_10_MTR,CL1T_10_MTRx,CL1T_10_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_10_MTRx,CL1T_09_MTRx,CL1T_09_MTR,CL1T_09_MTRx,CL1T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_09_MTRx,CL1T_08_MTRx,CL1T_08_MTR,CL1T_08_MTRx,CL1T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_08_MTRx,CL1T_07_MTRx,CL1T_07_MTR,CL1T_07_MTRx,CL1T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_07_MTRx,CL1T_06_MTRx,CL1T_06_MTR,CL1T_06_MTRx,CL1T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_05_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_06_MTRx,CL1T_05_MTRx,CL1T_05_MTR,CL1T_05_MTRx,CL1T_05_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL1T_04_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_05_MTRx,CL1T_04_MTRx,CL1T_04_MTR,CL1T_04_MTRx,CL1T_04_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_10_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL1T_26_MTRx,HX1T_10_MTRx,HX1T_10_MTR,HX1T_10_MTRx,HX1T_10_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_09_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HX1T_10_MTRx,HX1T_09_MTRx,HX1T_09_MTR,HX1T_09_MTRx,HX1T_09_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_08_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HX1T_09_MTRx,HX1T_08_MTRx,HX1T_08_MTR,HX1T_08_MTRx,HX1T_08_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_07_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HX1T_08_MTRx,HX1T_07_MTRx,HX1T_07_MTR,HX1T_07_MTRx,HX1T_07_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,HX1T_06_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,HX1T_07_MTRx,HX1T_06_MTRx,HX1T_06_MTR,HX1T_06_MTRx,HX1T_06_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_21_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_22_MTRx,O4T_21_MTRx,O4T_21_MTR,O4T_21_MTRx,O4T_21_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_20_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_21_MTRx,O4T_20_MTRx,O4T_20_MTR,O4T_20_MTRx,O4T_20_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_19_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_20_MTRx,O4T_19_MTRx,O4T_19_MTR,O4T_19_MTRx,O4T_19_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_18_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_19_MTRx,O4T_18_MTRx,O4T_18_MTR,O4T_18_MTRx,O4T_18_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O4T_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_18_MTRx,O4T_17_MTRx,O4T_17_MTR,O4T_17_MTRx,O4T_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O3T_21_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_17_MTRx,O3T_21_MTRx,O3T_21_MTR,O3T_21_MTRx,O3T_21_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O3T_19_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O3T_20_MTRx,O3T_19_MTRx,O3T_19_MTR,O3T_19_MTRx,O3T_19_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O3T_18_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O3T_19_MTRx,O3T_18_MTRx,O3T_18_MTR,O3T_18_MTRx,O3T_18_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,O3T_17_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O3T_18_MTRx,O3T_17_MTRx,O3T_17_MTR,O3T_17_MTRx,O3T_17_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL12T_36_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,O4T_20_MTRx,CL12T_36_MTRx,CL12T_36_MTR,CL12T_36_MTRx,CL12T_36_MTR);
				RC: "Set Spacer distance and call Spacer calc routine.";
				N: MOV(24,CL12T_35_MTRx.T2H_SPACE_DIST)JSR(R_CALC_SPACER_CONST,4,2.0,CL12T_36_MTRx,CL12T_35_MTRx,CL12T_35_MTR,CL12T_35_MTRx,CL12T_35_MTR);
		END_ROUTINE

		ROUTINE LENGTH_CALC 
				RC: "BM1_12 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(BM1_12_PE.FILT)OTE(BM1_12_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(BM1_12_LEN.MEASURE)[XIO(BM1_12_LEN.SB1) OTE(BM1_12_LEN.NEG_XITN_MEASURE) ,OTE(BM1_12_LEN.SB1) ];
				N: XIO(I_PE_BM1_13)[XIO(BM1_13_PE.POS_XITN_MEM) OTE(BM1_13_PE.POS_XITN) ,OTE(BM1_13_PE.POS_XITN_MEM) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(BM1_12_LEN.NEG_XITN_MEASURE) ,XIC(BM1_13_PE.POS_XITN) XIC(BM1_12_LEN.MEASURE) XIO(BM1_12_MTR.SPACE) ]MOV(BM1_12_LEN.BAG_LENGTH,BM1_13_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(BM1_12_PE.FILT)XIC(BM1_12_BT.BT_PULSE)ADD(1,BM1_12_LEN.BAG_LENGTH,BM1_12_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(BM1_12_LEN.NEG_XITN_MEASURE)MOV(0,BM1_12_LEN.BAG_LENGTH);
				RC: "O2T_17 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(O2T_17_PE.FILT)OTE(O2T_17_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(O2T_17_LEN.MEASURE)[XIO(O2T_17_LEN.SB1) OTE(O2T_17_LEN.NEG_XITN_MEASURE) ,OTE(O2T_17_LEN.SB1) ];
				N: XIO(I_PE_O2T_18)[XIO(O2T_18_PE.POS_XITN_MEM) OTE(O2T_18_PE.POS_XITN) ,OTE(O2T_18_PE.POS_XITN_MEM) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(O2T_17_LEN.NEG_XITN_MEASURE) ,XIC(O2T_18_PE.POS_XITN) XIC(O2T_17_LEN.MEASURE) XIO(O2T_17_MTR.SPACE) ]MOV(O2T_17_LEN.BAG_LENGTH,O2T_18_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(O2T_17_PE.FILT)XIC(O2T_17_BT.BT_PULSE)ADD(1,O2T_17_LEN.BAG_LENGTH,O2T_17_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(O2T_17_LEN.NEG_XITN_MEASURE)MOV(0,O2T_17_LEN.BAG_LENGTH);
				RC: "C2T_16 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(C2T_16_PE.FILT)OTE(C2T_16_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(C2T_16_LEN.MEASURE)[XIO(C2T_16_LEN.SB1) OTE(C2T_16_LEN.NEG_XITN_MEASURE) ,OTE(C2T_16_LEN.SB1) ];
				N: XIO(I_PE_C2T_17)[XIO(C2T_17_PE.POS_XITN_MEM) OTE(C2T_17_PE.POS_XITN) ,OTE(C2T_17_PE.POS_XITN_MEM) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(C2T_16_LEN.NEG_XITN_MEASURE) ,XIC(C2T_17_PE.POS_XITN) XIC(C2T_16_LEN.MEASURE) XIO(C2T_16_MTR.SPACE) ]MOV(C2T_16_LEN.BAG_LENGTH,C2T_17_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(C2T_16_PE.FILT)XIC(C2T_16_BT.BT_PULSE)ADD(1,C2T_16_LEN.BAG_LENGTH,C2T_16_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(C2T_16_LEN.NEG_XITN_MEASURE)MOV(0,C2T_16_LEN.BAG_LENGTH);
				RC: "T5T_08 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(T5T_08_PE.FILT)OTE(T5T_08_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(T5T_08_LEN.MEASURE)[XIO(T5T_08_LEN.SB1) OTE(T5T_08_LEN.NEG_XITN_MEASURE) ,OTE(T5T_08_LEN.SB1) ];
				N: XIO(I_PE_T5T_09)[XIO(T5T_09_PE.POS_XITN_MEM) OTE(T5T_09_PE.POS_XITN) ,OTE(T5T_09_PE.POS_XITN_MEM) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(T5T_08_LEN.NEG_XITN_MEASURE) ,XIC(T5T_09_PE.POS_XITN) XIC(T5T_08_LEN.MEASURE) XIO(T5T_08_MTR.SPACE) ]MOV(T5T_08_LEN.BAG_LENGTH,T5T_09_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(T5T_08_PE.FILT)XIC(T5T_08_BT.BT_PULSE)ADD(1,T5T_08_LEN.BAG_LENGTH,T5T_08_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(T5T_08_LEN.NEG_XITN_MEASURE)MOV(0,T5T_08_LEN.BAG_LENGTH);
				RC: "XO2_04 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(XO2_04_PE.FILT)OTE(XO2_04_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(XO2_04_LEN.MEASURE)[XIO(XO2_04_LEN.SB1) OTE(XO2_04_LEN.NEG_XITN_MEASURE) ,OTE(XO2_04_LEN.SB1) ];
				N: XIO(I_PE_XO2_05)[XIO(XO2_05_PE.POS_XITN_MEM) OTE(XO2_05_PE.POS_XITN) ,OTE(XO2_05_PE.POS_XITN_MEM) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(XO2_04_LEN.NEG_XITN_MEASURE) ,XIC(XO2_05_PE.POS_XITN) XIC(XO2_04_LEN.MEASURE) XIO(XO2_04_MTR.SPACE) ]MOV(XO2_04_LEN.BAG_LENGTH,XO2_05_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(XO2_04_PE.FILT)XIC(XO2_04_BT.BT_PULSE)ADD(1,XO2_04_LEN.BAG_LENGTH,XO2_04_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(XO2_04_LEN.NEG_XITN_MEASURE)MOV(0,XO2_04_LEN.BAG_LENGTH);
				RC: "HX1T_09 Length Set Routine$N"
				    "**************************************************************************************************************************************************************************$N"
				    "This subroutine is used to measure the bag length.  It works in conjunction with the  tracking.  When data is deposited into a tracking zone by the length measuring photocell, this routine starts measuring the length of the bag.  When the photocell clears the length measurement is put into the .LENGTH  field of the Bag_Data array at index position - Bag_ID.$N"
				    "$N"
				    "When the photoeye is blocked, start measuring the length.";
				N: XIC(HX1T_09_PE.FILT)OTE(HX1T_09_LEN.MEASURE);
				RC: "When the PE clears, stop measuring length.  Do one shot.";
				N: XIO(HX1T_09_LEN.MEASURE)[XIO(HX1T_09_LEN.SB1) OTE(HX1T_09_LEN.NEG_XITN_MEASURE) ,OTE(HX1T_09_LEN.SB1) ];
				RC: "On one shot of PE clearing, put length measurement into the Bag_Data table.";
				N: [XIC(HX1T_09_LEN.NEG_XITN_MEASURE) ,XIC(HX1T_10_PE.POS_XITN) XIC(HX1T_09_LEN.MEASURE) XIO(HX1T_09_MTR.SPACE) ]MOV(HX1T_09_LEN.BAG_LENGTH,HX1T_10_MRG.Length);
				RC: "Count BT pulses for measurement while PE is blocked.";
				N: XIC(HX1T_09_PE.FILT)XIC(HX1T_09_BT.BT_PULSE)ADD(1,HX1T_09_LEN.BAG_LENGTH,HX1T_09_LEN.BAG_LENGTH);
				RC: "Clear length measurement when PE clears.";
				N: XIC(HX1T_09_LEN.NEG_XITN_MEASURE)MOV(0,HX1T_09_LEN.BAG_LENGTH);
		END_ROUTINE

		ROUTINE MainRoutine 
				RC: "****************************************************************************************************$N"
				    "This routine is the main entry point of the program.$N"
				    "This routine contains some $Qsystem$Q level logic for controlling things like how the logic is scanned, statistics, and globally used signals.$N"
				    "All calls to other routines stem from this routine.$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Set Always True Instruction";
				N: OTE(INT.ALWAYS_TRUE);
				RC: "Set Always False Instruction";
				N: AFI()OTE(INT.ALWAYS_FALSE);
				N: [XIC(S:FS) ,XIC(INT.FIRST_SCAN_MAN) ][JSR(FIRST_SCAN,0) ,OTU(INT.FIRST_SCAN_MAN) ];
				N: JSR(LENGTH_CALC,0);
				RC: "Constants Initialization";
				N: [XIC(S:FS) ,XIC(INT.SET_CONSTANTS) ][JSR(I_SET_CONSTANTS,0) ,OTU(INT.SET_CONSTANTS) ];
				N: [XIC(S:FS) ,XIC(INT.SET_DIV_CONST) ][JSR(I_SET_DIV_CONST,0) ,OTU(INT.SET_DIV_CONST) ];
				N: [XIC(S:FS) ,XIC(INT.SET_MTR_CONST) ][JSR(I_SET_MTR_CONST,0) ,OTU(INT.SET_MTR_CONST) ];
				N: [XIC(S:FS) ,XIC(INT.SET_BT_CONST) ][JSR(I_SET_BT_CONST,0) ,OTU(INT.SET_BT_CONST) ];
				N: [XIC(S:FS) ,XIC(INT.SET_MRG_CONST) ][JSR(I_SET_MRG_CONST,0) ,OTU(INT.SET_MRG_CONST) ];
				N: [XIC(S:FS) ,XIC(INT.SET_PE_CONST) ][JSR(I_SET_PE_CONST,0) ,OTU(INT.SET_PE_CONST) ];
				N: [XIC(S:FS) ,XIC(INT.SET_SPACER_CONST) ][JSR(I_SET_SPACER_CONST,0) ,OTU(INT.SET_SPACER_CONST) ];
				RC: "Stats Reset Control";
				N: XIC(RESET_STATS_REQ.0)[OTE(INT.RESET_STATS_PULSE) ,OTU(RESET_STATS_REQ.0) ];
				N: [XIC(INT.RESET_STATS_PULSE) ,XIC(S:FS) ]JSR(I_RESET_STATS,0);
				RC: "Common flasher bit used for audible alarms and lights.";
				N: [XIO(INT.FlasherOn_TON.DN) TON(INT.FlasherOff_TON,?,?) ,XIC(INT.FlasherOff_TON.DN) TON(INT.FlasherOn_TON,?,?) ];
				N: XIC(INT.FlasherOff_TON.TT)OTE(INT.FLASHER_BIT);
				RC: "Common fast flasher bit used for audible alarms and lights.";
				N: [XIO(INT.Flasher2On_TON.DN) TON(INT.Flasher2Off_TON,?,?) ,XIC(INT.Flasher2Off_TON.DN) TON(INT.Flasher2On_TON,?,?) ];
				N: XIC(INT.Flasher2Off_TON.TT)OTE(INT.FAST_FLASHER_BIT);
				RC: "Get coordinated system time from controller $N"
				    " $N"
				    "The tag CST is used throughout the program were a time pulse is needed$N"
				    "";
				N: GSV(CST,?,CurrentValue,CST[0]);
				N: XIC(CST[0].31)[XIO(INT.CST_Neg_ONS_Mem) OTE(INT.CST_Neg_ONS) ,OTE(INT.CST_Neg_ONS_Mem) ];
				RC: "Create a two second pulse";
				N: [XIC(CST[0].21) ONS(INT.TWO_S_PULSE_SB1) ,XIO(CST[0].21) ONS(INT.TWO_S_PULSE_SB2) ]OTE(INT.TWO_S_PULSE);
				RC: "PLC status routine.";
				N: JSR(PLC_STATUS,0);
				RC: "Communication status routine.";
				N: XIO(zzz_Emulate)JSR(COM_STATUS,0);
				RC: "Automod testing version of the Communication status routine$N"
				    "the call to this routine should be deleted before installing on site along with any other references to the zzz_Emulate bit";
				N: XIO(zzz_Emulate)JSR(AM_COM_STATUS,0);
				N: XIC(zzz_Emulate)JSR(PICS_IN,0);
				RC: "EStop routine";
				N: JSR(E_STOPS,0);
				RC: "Reconcile Subroutine calls into one location";
				N: JSR(SUBR_CALLS,0);
				N: JSR(BT_SUBR_CALLS,0);
				N: XIC(zzz_Emulate)JSR(PICS_OUT,0);
				RC: "COMMUNICATIONS";
				N: JSR(R_MSG_TO_UL_Send,0);
		END_ROUTINE

		ROUTINE MCP_01_DEVICES 
				RC: "****************************************************************************************************$N"
				    "This routine controls devices associated with the MCP.$N"
				    "This routine also sets HMI statuses for the MCP.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station Operators$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(BM1_B.STATUS.READY) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_CS_MCP_01_LTG);
				N: [XIC(BM1_B.STATUS.MOL_MONITOR) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_CS_MCP_01_LTB);
				N: [XIC(BM1_B.STATUS.JAM_MONITOR) ,XIC(BM1_B.STATUS.MB_JAM_MONITOR) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_CS_MCP_01_LTA);
				N: [XIC(I_CS_MCP_01_EPB) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_CS_MCP_01_EPB);
				RC: "Beacons or Stacklights$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_B.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_B.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_B.STATUS.MOL_MONITOR) ,XIC(BM1_B.STATUS.JAM_MONITOR) ,XIC(BM1_B.STATUS.MB_JAM_MONITOR) ,XIC(BM1_B.STATUS.CTCTR_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_WA_MCP_01_LTA);
				N: [XIC(BM1_B.STATUS.E_STOP_MONITOR) XIC(INT.FLASHER_BIT) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_WA_MCP_01_LTR);
				N: [[XIC(BM1_B.STATUS.MSD_OFF_ALARM) ,XIC(BM1_B.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_B.STATUS.MOL_ALARM) ,XIC(BM1_B.STATUS.JAM_ALARM) ,XIC(BM1_B.STATUS.MB_JAM_ALARM) ,XIC(BM1_B.STATUS.CTCTR_FLT_MONITOR) ,XIC(BM1_B.STATUS.E_STOP_ALARM) ,XIC(BM1_B.STATUS.DR_FLT_ALARM) ,XIC(BM1_B.STATUS.VSU_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_01_TPB) ]OTE(O_WA_MCP_01_ALM);
				RC: "MCP Inputs$N"
				    "";
				N: XIC(I_TS_MCP_01_ALM)OTE(F_MCP_01_FIRE_ALM_FAULT);
				N: XIC(I_TS_MCP_01_ALM)OTE(F_MCP_01_HIGH_TEMP);
				RC: "MCP Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.MCPActive,BM1_B.STATUS.G) ,XIO(MCP_03.MTR_GRP.RUN_LATCH) XIO(C2T.MTR_GRP.RUN_LATCH) MOV(Status.MCPTimeOut,BM1_B.STATUS.G) ,XIC(F_MCP_01_CS_E_STOP) MOV(Status.MCPEStop,BM1_B.STATUS.G) ,XIC(F_MCP_01_FIRE_ALM_FAULT) MOV(Status.MCPFireAlarm,BM1_B.STATUS.G) ,XIC(BM1_B.STATUS.CTCTR_FLT_MONITOR) MOV(Status.MCPCTCTRFlt,BM1_B.STATUS.G) ,XIC(BM1_B.STATUS.MOL_MONITOR) MOV(Status.MCPMTRFlt,BM1_B.STATUS.G) ,XIC(F_MCP_01_HIGH_TEMP) MOV(Status.MCPOverTemp,BM1_B.STATUS.G) ,AFI() MOV(Status.MCPFuseFlt,BM1_B.STATUS.G) ,[XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ] MOV(Status.MCPCommFault,BM1_B.STATUS.G) ,MOV(BM1_B.STATUS.G,G_MCP_01_STS) ];
		END_ROUTINE

		ROUTINE MCP_01_MONITOR_ALARMS 
				RC: "****************************************************************************************************$N"
				    "This subroutine monitors the status/faults for the associated motor group such as: Emergency Stops,  Motor Overloads, Jams and Motor Startup.$N"
				    "$N"
				    "The output of this routine is used for controlling the beacons/audible alarms.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Ready";
				N: XIO(BM1_B.STATUS.E_STOP_MONITOR)XIO(BM1_B.STATUS.MSD_OFF_MONITOR)XIO(BM1_B.STATUS.MOL_MONITOR)XIO(BM1_B.STATUS.JAM_MONITOR)XIO(BM1_B.STATUS.MB_JAM_MONITOR)XIO(BM1_B.STATUS.VFD_FLT_MONITOR)XIO(BM1_B.STATUS.CTCTR_FLT_MONITOR)XIO(BM1_B.STATUS.DR_FLT_MONITOR)XIO(BM1_B.STATUS.VSU_FLT_MONITOR)XIO(BM1_B.STATUS.DIV_FLT_MONITOR)XIO(BM1_B.STATUS.VMU_FLT_MONITOR)OTE(BM1_B.STATUS.READY);
				RC: "E-stop Monitor";
				N: [XIC(F_MCP_01_CS_E_STOP) ,XIC(F_O2T_04_CS_E_STOP) ,XIC(F_O2T_06_CS_E_STOP) ,XIC(F_O2T_10_CS_E_STOP) ,XIC(F_O2T_12_CS_E_STOP) ,XIC(F_O2T_14_CS_E_STOP) ,XIC(F_O2T_18_CS_E_STOP) ,XIC(F_C2T_13_CS_E_STOP) ,XIC(F_C2T_17_CS_E_STOP) ,AFI() ,AFI() ]OTE(BM1_B.STATUS.E_STOP_MONITOR);
				RC: "E-stop Alarm Trigger";
				N: [XIC(MCP_01_EPB_ONS) ,XIC(O2T_04_EPB_ONS) ,XIC(O2T_06_EPB_ONS) ,XIC(O2T_10_EPB_ONS) ,XIC(O2T_12_EPB_ONS) ,XIC(O2T_14_EPB_ONS) ,XIC(O2T_18_EPB_ONS) ,XIC(C2T_13_EPB_ONS) ,XIC(C2T_17_EPB_ONS) ,AFI() ,AFI() ][OTE(BM1_B.STATUS.E_STOP_ALM_TRIG) ,RES(BM1_B.STATUS.E_STOP_ALM_TMR) ];
				RC: "E-stop Alarm";
				N: [XIC(BM1_B.STATUS.E_STOP_ALM_TRIG) ,XIC(BM1_B.STATUS.E_STOP_ALARM) XIC(BM1_B.STATUS.E_STOP_MONITOR) XIO(BM1_B.STATUS.E_STOP_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.E_STOP_ALARM) ,TON(BM1_B.STATUS.E_STOP_ALM_TMR,?,?) ];
				RC: "Motor Safety Disconnect Off Monitor";
				N: [XIC(F_O2T_18_MSD_OFF) ,XIC(F_O2T_17_MSD_OFF) ,XIC(F_O2T_16_MSD_OFF) ,XIC(F_O2T_15_MSD_OFF) ,XIC(F_O2T_14_MSD_OFF) ,XIC(F_O2T_13_MSD_OFF) ,XIC(F_O2T_12_MSD_OFF) ,XIC(F_O2T_11_MSD_OFF) ,XIC(F_O2T_10_MSD_OFF) ,XIC(F_O2T_09_MSD_OFF) ,XIC(F_O2T_08_MSD_OFF) ,XIC(F_O2T_07_MSD_OFF) ,XIC(F_O2T_06_MSD_OFF) ,XIC(F_O2T_05_MSD_OFF) ,XIC(F_O2T_04_MSD_OFF) ,XIC(F_C2T_17_MSD_OFF) ,XIC(F_C2T_16_MSD_OFF) ,XIC(F_C2T_15_MSD_OFF) ,XIC(F_C2T_14_MSD_OFF) ,XIC(F_C2T_13_MSD_OFF) ,XIC(F_C2T_12_MSD_OFF) ,AFI() ]OTE(BM1_B.STATUS.MSD_OFF_MONITOR);
				RC: "Motor Safety Disconnect Off Alarm Trigger";
				N: [XIC(O2T_18_MTR.MSD_ONS) ,XIC(O2T_17_MTR.MSD_ONS) ,XIC(O2T_16_MTR.MSD_ONS) ,XIC(O2T_15_MTR.MSD_ONS) ,XIC(O2T_14_MTR.MSD_ONS) ,XIC(O2T_13_MTR.MSD_ONS) ,XIC(O2T_12_MTR.MSD_ONS) ,XIC(O2T_11_MTR.MSD_ONS) ,XIC(O2T_10_MTR.MSD_ONS) ,XIC(O2T_09_MTR.MSD_ONS) ,XIC(O2T_08_MTR.MSD_ONS) ,XIC(O2T_07_MTR.MSD_ONS) ,XIC(O2T_06_MTR.MSD_ONS) ,XIC(O2T_05_MTR.MSD_ONS) ,XIC(O2T_04_MTR.MSD_ONS) ,XIC(C2T_17_MTR.MSD_ONS) ,XIC(C2T_16_MTR.MSD_ONS) ,XIC(C2T_15_MTR.MSD_ONS) ,XIC(C2T_14_MTR.MSD_ONS) ,XIC(C2T_13_MTR.MSD_ONS) ,XIC(C2T_12_MTR.MSD_ONS) ,AFI() ][OTE(BM1_B.STATUS.MSD_OFF_ALM_TRIG) ,RES(BM1_B.STATUS.MSD_OFF_ALM_TMR) ];
				RC: "Motor Safety Disconnect Off Alarm";
				N: [XIC(BM1_B.STATUS.MSD_OFF_ALM_TRIG) ,XIC(BM1_B.STATUS.MSD_OFF_ALARM) XIC(BM1_B.STATUS.MSD_OFF_MONITOR) XIO(BM1_B.STATUS.MSD_OFF_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.MSD_OFF_ALARM) ,TON(BM1_B.STATUS.MSD_OFF_ALM_TMR,?,?) ];
				RC: "Motor Overload Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.MOL_MONITOR);
				RC: "Motor Overload Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.MOL_ALM_TRIG) ,RES(BM1_B.STATUS.MOL_ALM_TMR) ];
				RC: "Motor Overload Alarm";
				N: [XIC(BM1_B.STATUS.MOL_ALM_TRIG) ,XIC(BM1_B.STATUS.MOL_ALARM) XIC(BM1_B.STATUS.MOL_MONITOR) XIO(BM1_B.STATUS.MOL_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.MOL_ALARM) ,TON(BM1_B.STATUS.MOL_ALM_TMR,?,?) ];
				RC: "VFD Fault Monitor";
				N: [XIC(F_O2T_18_VFD_FAULT) ,XIC(F_O2T_17_VFD_FAULT) ,XIC(F_O2T_16_VFD_FAULT) ,XIC(F_O2T_15_VFD_FAULT) ,XIC(F_O2T_14_VFD_FAULT) ,XIC(F_O2T_13_VFD_FAULT) ,XIC(F_O2T_12_VFD_FAULT) ,XIC(F_O2T_11_VFD_FAULT) ,XIC(F_O2T_10_VFD_FAULT) ,XIC(F_O2T_09_VFD_FAULT) ,XIC(F_O2T_08_VFD_FAULT) ,XIC(F_O2T_07_VFD_FAULT) ,XIC(F_O2T_06_VFD_FAULT) ,XIC(F_O2T_05_VFD_FAULT) ,XIC(F_O2T_04_VFD_FAULT) ,XIC(F_C2T_17_VFD_FAULT) ,XIC(F_C2T_16_VFD_FAULT) ,XIC(F_C2T_15_VFD_FAULT) ,XIC(F_C2T_14_VFD_FAULT) ,XIC(F_C2T_13_VFD_FAULT) ,XIC(F_C2T_12_VFD_FAULT) ,AFI() ,AFI() ]OTE(BM1_B.STATUS.VFD_FLT_MONITOR);
				RC: "VFD Fault Alarm Trigger";
				N: [XIC(O2T_18_VFD.FAULT_ONS) ,XIC(O2T_17_VFD.FAULT_ONS) ,XIC(O2T_16_VFD.FAULT_ONS) ,XIC(O2T_15_VFD.FAULT_ONS) ,XIC(O2T_14_VFD.FAULT_ONS) ,XIC(O2T_13_VFD.FAULT_ONS) ,XIC(O2T_12_VFD.FAULT_ONS) ,XIC(O2T_11_VFD.FAULT_ONS) ,XIC(O2T_10_VFD.FAULT_ONS) ,XIC(O2T_09_VFD.FAULT_ONS) ,XIC(O2T_08_VFD.FAULT_ONS) ,XIC(O2T_07_VFD.FAULT_ONS) ,XIC(O2T_06_VFD.FAULT_ONS) ,XIC(O2T_05_VFD.FAULT_ONS) ,XIC(O2T_04_VFD.FAULT_ONS) ,XIC(C2T_17_VFD.FAULT_ONS) ,XIC(C2T_16_VFD.FAULT_ONS) ,XIC(C2T_15_VFD.FAULT_ONS) ,XIC(C2T_14_VFD.FAULT_ONS) ,XIC(C2T_13_VFD.FAULT_ONS) ,XIC(C2T_12_VFD.FAULT_ONS) ,AFI() ,AFI() ][OTE(BM1_B.STATUS.VFD_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.VFD_FLT_ALM_TMR) ];
				RC: "VFD Fault Alarm";
				N: [XIC(BM1_B.STATUS.VFD_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.VFD_FLT_ALARM) XIC(BM1_B.STATUS.VFD_FLT_MONITOR) XIO(BM1_B.STATUS.VFD_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.VFD_FLT_ALARM) ,TON(BM1_B.STATUS.VFD_FLT_ALM_TMR,?,?) ];
				RC: "Contactor Fault Monitor";
				N: [XIC(F_O2T_18_CTCTR_FAULT) ,XIC(F_O2T_17_CTCTR_FAULT) ,XIC(F_O2T_16_CTCTR_FAULT) ,XIC(F_O2T_15_CTCTR_FAULT) ,XIC(F_O2T_14_CTCTR_FAULT) ,XIC(F_O2T_13_CTCTR_FAULT) ,XIC(F_O2T_12_CTCTR_FAULT) ,XIC(F_O2T_11_CTCTR_FAULT) ,XIC(F_O2T_10_CTCTR_FAULT) ,XIC(F_O2T_09_CTCTR_FAULT) ,XIC(F_O2T_08_CTCTR_FAULT) ,XIC(F_O2T_07_CTCTR_FAULT) ,XIC(F_O2T_06_CTCTR_FAULT) ,XIC(F_O2T_05_CTCTR_FAULT) ,XIC(F_O2T_04_CTCTR_FAULT) ,XIC(F_C2T_17_CTCTR_FAULT) ,XIC(F_C2T_16_CTCTR_FAULT) ,XIC(F_C2T_15_CTCTR_FAULT) ,XIC(F_C2T_14_CTCTR_FAULT) ,XIC(F_C2T_13_CTCTR_FAULT) ,XIC(F_C2T_12_CTCTR_FAULT) ,AFI() ,AFI() ]OTE(BM1_B.STATUS.CTCTR_FLT_MONITOR);
				RC: "Contactor Fault Alarm Trigger";
				N: [XIC(O2T_18_MTR.MS_FLT_ONS) ,XIC(O2T_17_MTR.MS_FLT_ONS) ,XIC(O2T_16_MTR.MS_FLT_ONS) ,XIC(O2T_15_MTR.MS_FLT_ONS) ,XIC(O2T_14_MTR.MS_FLT_ONS) ,XIC(O2T_13_MTR.MS_FLT_ONS) ,XIC(O2T_12_MTR.MS_FLT_ONS) ,XIC(O2T_11_MTR.MS_FLT_ONS) ,XIC(O2T_10_MTR.MS_FLT_ONS) ,XIC(O2T_09_MTR.MS_FLT_ONS) ,XIC(O2T_08_MTR.MS_FLT_ONS) ,XIC(O2T_07_MTR.MS_FLT_ONS) ,XIC(O2T_06_MTR.MS_FLT_ONS) ,XIC(O2T_05_MTR.MS_FLT_ONS) ,XIC(O2T_04_MTR.MS_FLT_ONS) ,XIC(C2T_17_MTR.MS_FLT_ONS) ,XIC(C2T_16_MTR.MS_FLT_ONS) ,XIC(C2T_15_MTR.MS_FLT_ONS) ,XIC(C2T_14_MTR.MS_FLT_ONS) ,XIC(C2T_13_MTR.MS_FLT_ONS) ,XIC(C2T_12_MTR.MS_FLT_ONS) ,AFI() ,AFI() ][OTE(BM1_B.STATUS.CTCTR_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.CTCTR_FLT_ALM_TMR) ];
				RC: "Contactor Fault Alarm";
				N: [XIC(BM1_B.STATUS.CTCTR_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.CTCTR_FLT_ALARM) XIC(BM1_B.STATUS.CTCTR_FLT_MONITOR) XIO(BM1_B.STATUS.CTCTR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.CTCTR_FLT_ALARM) ,TON(BM1_B.STATUS.CTCTR_FLT_ALM_TMR,?,?) ];
				RC: "Jam Monitor";
				N: [XIC(F_O2T_18_PE_JAMMED) ,XIC(F_O2T_17_PE_JAMMED) ,XIC(F_O2T_16_PE_JAMMED) ,XIC(F_O2T_15_PE_JAMMED) ,XIC(F_O2T_14_PE_JAMMED) ,XIC(F_O2T_13_PE_JAMMED) ,XIC(F_O2T_12_PE_JAMMED) ,XIC(F_O2T_11_PE_JAMMED) ,XIC(F_O2T_10_PE_JAMMED) ,XIC(F_O2T_09_PE_JAMMED) ,XIC(F_O2T_08_PE_JAMMED) ,XIC(F_O2T_07_PE_JAMMED) ,XIC(F_O2T_06_PE_JAMMED) ,XIC(F_O2T_05_PE_JAMMED) ,XIC(F_O2T_04_PE_JAMMED) ,XIC(F_C2T_17_PE_JAMMED) ,XIC(F_C2T_16_PE_JAMMED) ,XIC(F_C2T_15_PE_JAMMED) ,XIC(F_C2T_14_PE_JAMMED) ,XIC(F_C2T_13_PE_JAMMED) ,XIC(F_C2T_12_PE_JAMMED) ,AFI() ,AFI() ]OTE(BM1_B.STATUS.JAM_MONITOR);
				RC: "Jam Alarm Trigger";
				N: [XIC(O2T_18_PE.JAM_ONS) ,XIC(O2T_17_PE.JAM_ONS) ,XIC(O2T_16_PE.JAM_ONS) ,XIC(O2T_15_PE.JAM_ONS) ,XIC(O2T_14_PE.JAM_ONS) ,XIC(O2T_13_PE.JAM_ONS) ,XIC(O2T_12_PE.JAM_ONS) ,XIC(O2T_11_PE.JAM_ONS) ,XIC(O2T_10_PE.JAM_ONS) ,XIC(O2T_09_PE.JAM_ONS) ,XIC(O2T_08_PE.JAM_ONS) ,XIC(O2T_07_PE.JAM_ONS) ,XIC(O2T_06_PE.JAM_ONS) ,XIC(O2T_05_PE.JAM_ONS) ,XIC(O2T_04_PE.JAM_ONS) ,XIC(C2T_17_PE.JAM_ONS) ,XIC(C2T_16_PE.JAM_ONS) ,XIC(C2T_15_PE.JAM_ONS) ,XIC(C2T_14_PE.JAM_ONS) ,XIC(C2T_13_PE.JAM_ONS) ,XIC(C2T_12_PE.JAM_ONS) ,AFI() ,AFI() ][OTE(BM1_B.STATUS.JAM_ALM_TRIG) ,RES(BM1_B.STATUS.JAM_ALM_TMR) ];
				RC: "Jam Alarm";
				N: [XIC(BM1_B.STATUS.JAM_ALM_TRIG) ,XIC(BM1_B.STATUS.JAM_ALARM) XIC(BM1_B.STATUS.JAM_MONITOR) XIO(BM1_B.STATUS.JAM_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.JAM_ALARM) ,TON(BM1_B.STATUS.JAM_ALM_TMR,?,?) ];
				RC: "Missing Bag Jam Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.MB_JAM_MONITOR);
				RC: "Missing Bag Jam Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.MB_JAM_ALM_TRIG) ,RES(BM1_B.STATUS.MB_JAM_ALM_TMR) ];
				RC: "Missing Bag Jam Alarm";
				N: [XIC(BM1_B.STATUS.MB_JAM_ALM_TRIG) ,XIC(BM1_B.STATUS.MB_JAM_ALARM) XIC(BM1_B.STATUS.MB_JAM_MONITOR) XIO(BM1_B.STATUS.MB_JAM_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.MB_JAM_ALARM) ,TON(BM1_B.STATUS.MB_JAM_ALM_TMR,?,?) ];
				RC: "Door Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.DR_FLT_MONITOR);
				RC: "Door Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.DR_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.DR_FLT_ALM_TMR) ];
				RC: "Door Fault Alarm";
				N: [XIC(BM1_B.STATUS.DR_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.DR_FLT_ALARM) XIC(BM1_B.STATUS.DR_FLT_MONITOR) XIO(BM1_B.STATUS.DR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.DR_FLT_ALARM) ,TON(BM1_B.STATUS.DR_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Sorter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.VSU_FLT_MONITOR);
				RC: "Vertical Sorter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.VSU_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.VSU_FLT_ALM_TMR) ];
				RC: "Vertical Sorter Fault Alarm";
				N: [XIC(BM1_B.STATUS.VSU_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.VSU_FLT_ALARM) XIC(BM1_B.STATUS.VSU_FLT_MONITOR) XIO(BM1_B.STATUS.VSU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.VSU_FLT_ALARM) ,TON(BM1_B.STATUS.VSU_FLT_ALM_TMR,?,?) ];
				RC: "Diverter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.DIV_FLT_MONITOR);
				RC: "Diverter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.DIV_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.DIV_FLT_ALM_TMR) ];
				RC: "Diverter Fault Alarm";
				N: [XIC(BM1_B.STATUS.DIV_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.DIV_FLT_ALARM) XIC(BM1_B.STATUS.DIV_FLT_MONITOR) XIO(BM1_B.STATUS.DIV_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.DIV_FLT_ALARM) ,TON(BM1_B.STATUS.DIV_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Merge Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_B.STATUS.VMU_FLT_MONITOR);
				RC: "Vertical Merge Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_B.STATUS.VMU_FLT_ALM_TRIG) ,RES(BM1_B.STATUS.VMU_FLT_ALM_TMR) ];
				RC: "Vertical Merge Fault Alarm";
				N: [XIC(BM1_B.STATUS.VMU_FLT_ALM_TRIG) ,XIC(BM1_B.STATUS.VMU_FLT_ALARM) XIC(BM1_B.STATUS.VMU_FLT_MONITOR) XIO(BM1_B.STATUS.VMU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_01_APB) ][OTE(BM1_B.STATUS.VMU_FLT_ALARM) ,TON(BM1_B.STATUS.VMU_FLT_ALM_TMR,?,?) ];
				RC: "STARTUP WARNING";
				N: [XIC(O2T_18_MTR.IM_TMR.TT) ,XIC(O2T_17_MTR.IM_TMR.TT) ,XIC(O2T_16_MTR.IM_TMR.TT) ,XIC(O2T_15_MTR.IM_TMR.TT) ,XIC(O2T_14_MTR.IM_TMR.TT) ,XIC(O2T_13_MTR.IM_TMR.TT) ,XIC(O2T_12_MTR.IM_TMR.TT) ,XIC(O2T_11_MTR.IM_TMR.TT) ,XIC(O2T_10_MTR.IM_TMR.TT) ,XIC(O2T_09_MTR.IM_TMR.TT) ,XIC(O2T_08_MTR.IM_TMR.TT) ,XIC(O2T_07_MTR.IM_TMR.TT) ,XIC(O2T_06_MTR.IM_TMR.TT) ,XIC(O2T_05_MTR.IM_TMR.TT) ,XIC(O2T_04_MTR.IM_TMR.TT) ,XIC(C2T_17_MTR.IM_TMR.TT) ,XIC(C2T_16_MTR.IM_TMR.TT) ,XIC(C2T_15_MTR.IM_TMR.TT) ,XIC(C2T_14_MTR.IM_TMR.TT) ,XIC(C2T_13_MTR.IM_TMR.TT) ,XIC(C2T_12_MTR.IM_TMR.TT) ,AFI() ,AFI() ]OTE(BM1_B.STATUS.STARTUP_WARN);
				RC: "Fire Alarm";
				N: XIC(F_MCP_01_FIRE_ALM_FAULT)[OTE(BM1_B.STATUS.FIRE_ALM) ,OTE(MCP_03.STATUS.FIRE_ALM) ,OTE(C2T.STATUS.FIRE_ALM) ,NOP() ];
		END_ROUTINE

		ROUTINE MCP_02_DEVICES 
				RC: "****************************************************************************************************$N"
				    "This routine controls devices associated with the MCP.$N"
				    "This routine also sets HMI statuses for the MCP.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station Operators$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(BM1_C.STATUS.READY) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_CS_MCP_02_LTG);
				N: [XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_CS_MCP_02_LTB);
				N: [XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_CS_MCP_02_LTA);
				N: [XIC(I_CS_MCP_02_EPB) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_CS_MCP_02_EPB);
				RC: "Beacons or Stacklights$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_C.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(BM1_C.STATUS.CTCTR_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_WA_MCP_02_LTA);
				N: [XIC(BM1_C.STATUS.E_STOP_MONITOR) XIC(INT.FLASHER_BIT) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_WA_MCP_02_LTR);
				N: [[XIC(BM1_C.STATUS.MSD_OFF_ALARM) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_C.STATUS.MOL_ALARM) ,XIC(BM1_C.STATUS.JAM_ALARM) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) ,XIC(BM1_C.STATUS.CTCTR_FLT_MONITOR) ,XIC(BM1_C.STATUS.E_STOP_ALARM) ,XIC(BM1_C.STATUS.DR_FLT_ALARM) ,XIC(BM1_C.STATUS.VSU_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_02_TPB) ]OTE(O_WA_MCP_02_ALM);
				RC: "MCP Inputs$N"
				    "";
				N: XIC(I_TS_MCP_02_ALM)OTE(F_MCP_02_FIRE_ALM_FAULT);
				N: XIC(I_TS_MCP_02_ALM)OTE(F_MCP_02_HIGH_TEMP);
				RC: "MCP Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.MCPActive,BM1_C.STATUS.G) ,XIO(CL2T.MTR_GRP.RUN_LATCH) XIO(CL3T.MTR_GRP.RUN_LATCH) XIO(O4T_2.MTR_GRP.RUN_LATCH) XIO(T5T.MTR_GRP.RUN_LATCH) XIO(XO1.MTR_GRP.RUN_LATCH) MOV(Status.MCPTimeOut,BM1_C.STATUS.G) ,XIC(F_MCP_02_CS_E_STOP) MOV(Status.MCPEStop,BM1_C.STATUS.G) ,XIC(F_MCP_02_FIRE_ALM_FAULT) MOV(Status.MCPFireAlarm,BM1_C.STATUS.G) ,XIC(BM1_C.STATUS.CTCTR_FLT_MONITOR) MOV(Status.MCPCTCTRFlt,BM1_C.STATUS.G) ,XIC(BM1_C.STATUS.MOL_MONITOR) MOV(Status.MCPMTRFlt,BM1_C.STATUS.G) ,XIC(F_MCP_02_HIGH_TEMP) MOV(Status.MCPOverTemp,BM1_C.STATUS.G) ,AFI() MOV(Status.MCPFuseFlt,BM1_C.STATUS.G) ,[XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ] MOV(Status.MCPCommFault,BM1_C.STATUS.G) ,MOV(BM1_C.STATUS.G,G_MCP_02_STS) ];
		END_ROUTINE

		ROUTINE MCP_02_MONITOR_ALARMS 
				RC: "****************************************************************************************************$N"
				    "This subroutine monitors the status/faults for the associated motor group such as: Emergency Stops,  Motor Overloads, Jams and Motor Startup.$N"
				    "$N"
				    "The output of this routine is used for controlling the beacons/audible alarms.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Ready";
				N: XIO(BM1_C.STATUS.E_STOP_MONITOR)XIO(BM1_C.STATUS.MSD_OFF_MONITOR)XIO(BM1_C.STATUS.MOL_MONITOR)XIO(BM1_C.STATUS.JAM_MONITOR)XIO(BM1_C.STATUS.MB_JAM_MONITOR)XIO(BM1_C.STATUS.VFD_FLT_MONITOR)XIO(BM1_C.STATUS.CTCTR_FLT_MONITOR)XIO(BM1_C.STATUS.DR_FLT_MONITOR)XIO(BM1_C.STATUS.VSU_FLT_MONITOR)XIO(BM1_C.STATUS.DIV_FLT_MONITOR)XIO(BM1_C.STATUS.VMU_FLT_MONITOR)OTE(BM1_C.STATUS.READY);
				RC: "E-stop Monitor";
				N: [XIC(F_MCP_02_CS_E_STOP) ,XIC(F_CL2T_01_CS1_E_STOP) ,XIC(F_CL2T_01_CS2_E_STOP) ,XIC(F_CL2T_02_CS1_E_STOP) ,XIC(F_CL2T_02_CS2_E_STOP) ,XIC(F_CL2T_02_CS3_E_STOP) ,XIC(F_CL2T_04_CS_E_STOP) ,XIC(F_CL2T_05_CS1_E_STOP) ,XIC(F_CL2T_05_CS2_E_STOP) ,XIC(F_CL2T_09_CS_E_STOP) ,XIC(F_CL3T_01_CS1_E_STOP) ,XIC(F_CL3T_01_CS2_E_STOP) ,XIC(F_CL3T_02_CS1_E_STOP) ,XIC(F_CL3T_02_CS2_E_STOP) ,XIC(F_CL3T_02_CS3_E_STOP) ,XIC(F_CL3T_02_CS4_E_STOP) ,XIC(F_CL3T_04_CS_E_STOP) ,XIC(F_O4T_06_CS_E_STOP) ,XIC(F_O4T_10_CS_E_STOP) ,XIC(F_XO1_01_CS_E_STOP) ,XIC(F_T5T_09_CS_E_STOP) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.E_STOP_MONITOR);
				RC: "E-stop Alarm Trigger";
				N: [XIC(MCP_02_EPB_ONS) ,XIC(CL2T_01_EPB1_ONS) ,XIC(CL2T_01_EPB2_ONS) ,XIC(CL2T_02_EPB1_ONS) ,XIC(CL2T_02_EPB2_ONS) ,XIC(CL2T_02_EPB3_ONS) ,XIC(CL2T_04_EPB_ONS) ,XIC(CL2T_05_EPB1_ONS) ,XIC(CL2T_05_EPB2_ONS) ,XIC(CL2T_09_EPB_ONS) ,XIC(CL3T_01_EPB1_ONS) ,XIC(CL3T_01_EPB2_ONS) ,XIC(CL3T_02_EPB1_ONS) ,XIC(CL3T_02_EPB2_ONS) ,XIC(CL3T_02_EPB3_ONS) ,XIC(CL3T_02_EPB4_ONS) ,XIC(CL3T_04_EPB_ONS) ,XIC(O4T_06_EPB_ONS) ,XIC(O4T_10_EPB_ONS) ,XIC(XO1_01_EPB_ONS) ,XIC(T5T_09_EPB_ONS) ,AFI() ,AFI() ][OTE(BM1_C.STATUS.E_STOP_ALM_TRIG) ,RES(BM1_C.STATUS.E_STOP_ALM_TMR) ];
				RC: "E-stop Alarm";
				N: [XIC(BM1_C.STATUS.E_STOP_ALM_TRIG) ,XIC(BM1_C.STATUS.E_STOP_ALARM) XIC(BM1_C.STATUS.E_STOP_MONITOR) XIO(BM1_C.STATUS.E_STOP_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.E_STOP_ALARM) ,TON(BM1_C.STATUS.E_STOP_ALM_TMR,?,?) ];
				RC: "Motor Safety Disconnect Off Monitor";
				N: [XIC(F_CL2T_09_MSD_OFF) ,XIC(F_CL2T_08_MSD_OFF) ,XIC(F_CL2T_07_MSD_OFF) ,XIC(F_CL2T_06_MSD_OFF) ,XIC(F_CL2T_05_MSD_OFF) ,XIC(F_CL2T_04_MSD_OFF) ,XIC(F_CL2T_03_MSD_OFF) ,XIC(F_CL2T_02_MSD_OFF) ,XIC(F_CL2T_01_MSD_OFF) ,XIC(F_CL3T_08_MSD_OFF) ,XIC(F_CL3T_07_MSD_OFF) ,XIC(F_CL3T_06_MSD_OFF) ,XIC(F_CL3T_05_MSD_OFF) ,XIC(F_CL3T_04_MSD_OFF) ,XIC(F_CL3T_03_MSD_OFF) ,XIC(F_CL3T_02_MSD_OFF) ,XIC(F_CL3T_01_MSD_OFF) ,XIC(F_O4T_13_MSD_OFF) ,XIC(F_O4T_12_MSD_OFF) ,XIC(F_O4T_11_MSD_OFF) ,XIC(F_O4T_10_MSD_OFF) ,XIC(F_XO1_01_HSD_IP_DISC_OFF) ,XIC(F_O4T_09_MSD_OFF) ,XIC(F_O4T_08_MSD_OFF) ,XIC(F_O4T_07_MSD_OFF) ,XIC(F_O4T_06_MSD_OFF) ,XIC(F_O4T_05_MSD_OFF) ,XIC(F_XO1_03_MSD_OFF) ,XIC(F_XO1_02_MSD_OFF) ,XIC(F_XO1_01_MSD_OFF) ,XIC(F_T5T_09_MSD_OFF) ,XIC(F_T5T_08_MSD_OFF) ,AFI() ]OTE(BM1_C.STATUS.MSD_OFF_MONITOR);
				RC: "Motor Safety Disconnect Off Alarm Trigger";
				N: [XIC(CL2T_09_MTR.MSD_ONS) ,XIC(CL2T_08_MTR.MSD_ONS) ,XIC(CL2T_07_MTR.MSD_ONS) ,XIC(CL2T_06_MTR.MSD_ONS) ,XIC(CL2T_05_MTR.MSD_ONS) ,XIC(CL2T_04_MTR.MSD_ONS) ,XIC(CL2T_03_MTR.MSD_ONS) ,XIC(CL2T_02_MTR.MSD_ONS) ,XIC(CL2T_01_MTR.MSD_ONS) ,XIC(CL3T_08_MTR.MSD_ONS) ,XIC(CL3T_07_MTR.MSD_ONS) ,XIC(CL3T_06_MTR.MSD_ONS) ,XIC(CL3T_05_MTR.MSD_ONS) ,XIC(CL3T_04_MTR.MSD_ONS) ,XIC(CL3T_03_MTR.MSD_ONS) ,XIC(CL3T_02_MTR.MSD_ONS) ,XIC(CL3T_01_MTR.MSD_ONS) ,XIC(O4T_13_MTR.MSD_ONS) ,XIC(O4T_12_MTR.MSD_ONS) ,XIC(O4T_11_MTR.MSD_ONS) ,XIC(O4T_10_MTR.MSD_ONS) ,XIC(XO1_HSD.IP_DISC_ONS) ,XIC(O4T_09_MTR.MSD_ONS) ,XIC(O4T_08_MTR.MSD_ONS) ,XIC(O4T_07_MTR.MSD_ONS) ,XIC(O4T_06_MTR.MSD_ONS) ,XIC(O4T_05_MTR.MSD_ONS) ,XIC(XO1_03_MTR.MSD_ONS) ,XIC(XO1_02_MTR.MSD_ONS) ,XIC(XO1_01_MTR.MSD_ONS) ,XIC(T5T_09_MTR.MSD_ONS) ,XIC(T5T_08_MTR.MSD_ONS) ,AFI() ][OTE(BM1_C.STATUS.MSD_OFF_ALM_TRIG) ,RES(BM1_C.STATUS.MSD_OFF_ALM_TMR) ];
				RC: "Motor Safety Disconnect Off Alarm";
				N: [XIC(BM1_C.STATUS.MSD_OFF_ALM_TRIG) ,XIC(BM1_C.STATUS.MSD_OFF_ALARM) XIC(BM1_C.STATUS.MSD_OFF_MONITOR) XIO(BM1_C.STATUS.MSD_OFF_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.MSD_OFF_ALARM) ,TON(BM1_C.STATUS.MSD_OFF_ALM_TMR,?,?) ];
				RC: "Motor Overload Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_C.STATUS.MOL_MONITOR);
				RC: "Motor Overload Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_C.STATUS.MOL_ALM_TRIG) ,RES(BM1_C.STATUS.MOL_ALM_TMR) ];
				RC: "Motor Overload Alarm";
				N: [XIC(BM1_C.STATUS.MOL_ALM_TRIG) ,XIC(BM1_C.STATUS.MOL_ALARM) XIC(BM1_C.STATUS.MOL_MONITOR) XIO(BM1_C.STATUS.MOL_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.MOL_ALARM) ,TON(BM1_C.STATUS.MOL_ALM_TMR,?,?) ];
				RC: "VFD Fault Monitor";
				N: [XIC(F_CL2T_09_VFD_FAULT) ,XIC(F_CL2T_08_VFD_FAULT) ,XIC(F_CL2T_07_VFD_FAULT) ,XIC(F_CL2T_06_VFD_FAULT) ,XIC(F_CL2T_05_VFD_FAULT) ,XIC(F_CL2T_04_VFD_FAULT) ,XIC(F_CL2T_03_VFD_FAULT) ,XIC(F_CL2T_02_VFD_FAULT) ,XIC(F_CL2T_01_VFD_FAULT) ,XIC(F_CL3T_08_VFD_FAULT) ,XIC(F_CL3T_07_VFD_FAULT) ,XIC(F_CL3T_06_VFD_FAULT) ,XIC(F_CL3T_05_VFD_FAULT) ,XIC(F_CL3T_04_VFD_FAULT) ,XIC(F_CL3T_03_VFD_FAULT) ,XIC(F_CL3T_02_VFD_FAULT) ,XIC(F_CL3T_01_VFD_FAULT) ,XIC(F_O4T_13_VFD_FAULT) ,XIC(F_O4T_12_VFD_FAULT) ,XIC(F_O4T_11_VFD_FAULT) ,XIC(F_O4T_10_VFD_FAULT) ,XIC(F_O4T_09_VFD_FAULT) ,XIC(F_O4T_08_VFD_FAULT) ,XIC(F_O4T_07_VFD_FAULT) ,XIC(F_O4T_06_VFD_FAULT) ,XIC(F_O4T_05_VFD_FAULT) ,XIC(F_XO1_03_VFD_FAULT) ,XIC(F_XO1_02_VFD_FAULT) ,XIC(F_XO1_01_VFD_FAULT) ,XIC(F_T5T_09_VFD_FAULT) ,XIC(F_T5T_08_VFD_FAULT) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.VFD_FLT_MONITOR);
				RC: "VFD Fault Alarm Trigger";
				N: [XIC(CL2T_09_VFD.FAULT_ONS) ,XIC(CL2T_08_VFD.FAULT_ONS) ,XIC(CL2T_07_VFD.FAULT_ONS) ,XIC(CL2T_06_VFD.FAULT_ONS) ,XIC(CL2T_05_VFD.FAULT_ONS) ,XIC(CL2T_04_VFD.FAULT_ONS) ,XIC(CL2T_03_VFD.FAULT_ONS) ,XIC(CL2T_02_VFD.FAULT_ONS) ,XIC(CL2T_01_VFD.FAULT_ONS) ,XIC(CL3T_08_VFD.FAULT_ONS) ,XIC(CL3T_07_VFD.FAULT_ONS) ,XIC(CL3T_06_VFD.FAULT_ONS) ,XIC(CL3T_05_VFD.FAULT_ONS) ,XIC(CL3T_04_VFD.FAULT_ONS) ,XIC(CL3T_03_VFD.FAULT_ONS) ,XIC(CL3T_02_VFD.FAULT_ONS) ,XIC(CL3T_01_VFD.FAULT_ONS) ,XIC(O4T_13_VFD.FAULT_ONS) ,XIC(O4T_12_VFD.FAULT_ONS) ,XIC(O4T_11_VFD.FAULT_ONS) ,XIC(O4T_10_VFD.FAULT_ONS) ,XIC(O4T_09_VFD.FAULT_ONS) ,XIC(O4T_08_VFD.FAULT_ONS) ,XIC(O4T_07_VFD.FAULT_ONS) ,XIC(O4T_06_VFD.FAULT_ONS) ,XIC(O4T_05_VFD.FAULT_ONS) ,XIC(XO1_03_VFD.FAULT_ONS) ,XIC(XO1_02_VFD.FAULT_ONS) ,XIC(XO1_01_VFD.FAULT_ONS) ,XIC(T5T_09_VFD.FAULT_ONS) ,XIC(T5T_08_VFD.FAULT_ONS) ,AFI() ,AFI() ][OTE(BM1_C.STATUS.VFD_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.VFD_FLT_ALM_TMR) ];
				RC: "VFD Fault Alarm";
				N: [XIC(BM1_C.STATUS.VFD_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.VFD_FLT_ALARM) XIC(BM1_C.STATUS.VFD_FLT_MONITOR) XIO(BM1_C.STATUS.VFD_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.VFD_FLT_ALARM) ,TON(BM1_C.STATUS.VFD_FLT_ALM_TMR,?,?) ];
				RC: "Contactor Fault Monitor";
				N: [XIC(F_CL2T_09_CTCTR_FAULT) ,XIC(F_CL2T_08_CTCTR_FAULT) ,XIC(F_CL2T_07_CTCTR_FAULT) ,XIC(F_CL2T_06_CTCTR_FAULT) ,XIC(F_CL2T_05_CTCTR_FAULT) ,XIC(F_CL2T_04_CTCTR_FAULT) ,XIC(F_CL2T_03_CTCTR_FAULT) ,XIC(F_CL2T_02_CTCTR_FAULT) ,XIC(F_CL2T_01_CTCTR_FAULT) ,XIC(F_CL3T_08_CTCTR_FAULT) ,XIC(F_CL3T_07_CTCTR_FAULT) ,XIC(F_CL3T_06_CTCTR_FAULT) ,XIC(F_CL3T_05_CTCTR_FAULT) ,XIC(F_CL3T_04_CTCTR_FAULT) ,XIC(F_CL3T_03_CTCTR_FAULT) ,XIC(F_CL3T_02_CTCTR_FAULT) ,XIC(F_CL3T_01_CTCTR_FAULT) ,XIC(F_O4T_13_CTCTR_FAULT) ,XIC(F_O4T_12_CTCTR_FAULT) ,XIC(F_O4T_11_CTCTR_FAULT) ,XIC(F_O4T_10_CTCTR_FAULT) ,XIC(F_O4T_09_CTCTR_FAULT) ,XIC(F_O4T_08_CTCTR_FAULT) ,XIC(F_O4T_07_CTCTR_FAULT) ,XIC(F_O4T_06_CTCTR_FAULT) ,XIC(F_O4T_05_CTCTR_FAULT) ,XIC(F_XO1_03_CTCTR_FAULT) ,XIC(F_XO1_02_CTCTR_FAULT) ,XIC(F_XO1_01_CTCTR_FAULT) ,XIC(F_T5T_09_CTCTR_FAULT) ,XIC(F_T5T_08_CTCTR_FAULT) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.CTCTR_FLT_MONITOR);
				RC: "Contactor Fault Alarm Trigger";
				N: [XIC(CL2T_09_MTR.MS_FLT_ONS) ,XIC(CL2T_08_MTR.MS_FLT_ONS) ,XIC(CL2T_07_MTR.MS_FLT_ONS) ,XIC(CL2T_06_MTR.MS_FLT_ONS) ,XIC(CL2T_05_MTR.MS_FLT_ONS) ,XIC(CL2T_04_MTR.MS_FLT_ONS) ,XIC(CL2T_03_MTR.MS_FLT_ONS) ,XIC(CL2T_02_MTR.MS_FLT_ONS) ,XIC(CL2T_01_MTR.MS_FLT_ONS) ,XIC(CL3T_08_MTR.MS_FLT_ONS) ,XIC(CL3T_07_MTR.MS_FLT_ONS) ,XIC(CL3T_06_MTR.MS_FLT_ONS) ,XIC(CL3T_05_MTR.MS_FLT_ONS) ,XIC(CL3T_04_MTR.MS_FLT_ONS) ,XIC(CL3T_03_MTR.MS_FLT_ONS) ,XIC(CL3T_02_MTR.MS_FLT_ONS) ,XIC(CL3T_01_MTR.MS_FLT_ONS) ,XIC(O4T_13_MTR.MS_FLT_ONS) ,XIC(O4T_12_MTR.MS_FLT_ONS) ,XIC(O4T_11_MTR.MS_FLT_ONS) ,XIC(O4T_10_MTR.MS_FLT_ONS) ,XIC(O4T_09_MTR.MS_FLT_ONS) ,XIC(O4T_08_MTR.MS_FLT_ONS) ,XIC(O4T_07_MTR.MS_FLT_ONS) ,XIC(O4T_06_MTR.MS_FLT_ONS) ,XIC(O4T_05_MTR.MS_FLT_ONS) ,XIC(XO1_03_MTR.MS_FLT_ONS) ,XIC(XO1_02_MTR.MS_FLT_ONS) ,XIC(XO1_01_MTR.MS_FLT_ONS) ,XIC(T5T_09_MTR.MS_FLT_ONS) ,XIC(T5T_08_MTR.MS_FLT_ONS) ,AFI() ,AFI() ][OTE(BM1_C.STATUS.CTCTR_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.CTCTR_FLT_ALM_TMR) ];
				RC: "Contactor Fault Alarm";
				N: [XIC(BM1_C.STATUS.CTCTR_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.CTCTR_FLT_ALARM) XIC(BM1_C.STATUS.CTCTR_FLT_MONITOR) XIO(BM1_C.STATUS.CTCTR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.CTCTR_FLT_ALARM) ,TON(BM1_C.STATUS.CTCTR_FLT_ALM_TMR,?,?) ];
				RC: "Jam Monitor";
				N: [XIC(F_CL2T_09_PE_JAMMED) ,XIC(F_CL2T_08_PE_JAMMED) ,XIC(F_CL2T_07_PE_JAMMED) ,XIC(F_CL2T_06_PE_JAMMED) ,XIC(F_CL2T_05_PE_JAMMED) ,XIC(F_CL2T_04_PE_JAMMED) ,XIC(F_CL2T_03_PE_JAMMED) ,XIC(F_CL2T_02_PE_JAMMED) ,XIC(F_CL2T_01_PE_JAMMED) ,XIC(F_CL3T_08_PE_JAMMED) ,XIC(F_CL3T_07_PE_JAMMED) ,XIC(F_CL3T_06_PE_JAMMED) ,XIC(F_CL3T_05_PE_JAMMED) ,XIC(F_CL3T_04_PE_JAMMED) ,XIC(F_CL3T_03_PE_JAMMED) ,XIC(F_CL3T_02_PE_JAMMED) ,XIC(F_CL3T_01_PE_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_11_PE_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_09_PE_JAMMED) ,XIC(F_O4T_08_PE_JAMMED) ,XIC(F_O4T_07_PE_JAMMED) ,XIC(F_O4T_06_PE_JAMMED) ,XIC(F_O4T_05_PE_JAMMED) ,XIC(F_XO1_01_PE2_JAMMED) ,XIC(F_XO1_02_PE_JAMMED) ,XIC(F_O4T_05_PE_JAMMED) ,XIC(F_XO1_01_PE2_JAMMED) ,XIC(F_T5T_09_PE_JAMMED) ,XIC(F_T5T_08_PE_JAMMED) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.JAM_MONITOR);
				RC: "Jam Alarm Trigger";
				N: [XIC(CL2T_09_PE.JAM_ONS) ,XIC(CL2T_08_PE.JAM_ONS) ,XIC(CL2T_07_PE.JAM_ONS) ,XIC(CL2T_06_PE.JAM_ONS) ,XIC(CL2T_05_PE.JAM_ONS) ,XIC(CL2T_04_PE.JAM_ONS) ,XIC(CL2T_03_PE.JAM_ONS) ,XIC(CL2T_02_PE.JAM_ONS) ,XIC(CL2T_01_PE.JAM_ONS) ,XIC(CL3T_08_PE.JAM_ONS) ,XIC(CL3T_07_PE.JAM_ONS) ,XIC(CL3T_06_PE.JAM_ONS) ,XIC(CL3T_05_PE.JAM_ONS) ,XIC(CL3T_04_PE.JAM_ONS) ,XIC(CL3T_03_PE.JAM_ONS) ,XIC(CL3T_02_PE.JAM_ONS) ,XIC(CL3T_01_PE.JAM_ONS) ,XIC(O4T_13_PE.JAM_ONS) ,XIC(O4T_12_PE.JAM_ONS) ,XIC(O4T_11_PE.JAM_ONS) ,XIC(O4T_10_PE1.JAM_ONS) ,XIC(O4T_10_PE2.JAM_ONS) ,XIC(O4T_09_PE.JAM_ONS) ,XIC(O4T_08_PE.JAM_ONS) ,XIC(O4T_07_PE.JAM_ONS) ,XIC(O4T_06_PE.JAM_ONS) ,XIC(O4T_05_PE.JAM_ONS) ,XIC(XO1_03_PE.JAM_ONS) ,XIC(XO1_02_PE.JAM_ONS) ,XIC(XO1_01_PE.JAM_ONS) ,XIC(XO1_01_PE2.JAM_ONS) ,XIC(T5T_09_PE.JAM_ONS) ,XIC(T5T_08_PE.JAM_ONS) ,AFI() ,AFI() ][OTE(BM1_C.STATUS.JAM_ALM_TRIG) ,RES(BM1_C.STATUS.JAM_ALM_TMR) ];
				RC: "Jam Alarm";
				N: [XIC(BM1_C.STATUS.JAM_ALM_TRIG) ,XIC(BM1_C.STATUS.JAM_ALARM) XIC(BM1_C.STATUS.JAM_MONITOR) XIO(BM1_C.STATUS.JAM_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.JAM_ALARM) ,TON(BM1_C.STATUS.JAM_ALM_TMR,?,?) ];
				RC: "Missing Bag Jam Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_C.STATUS.MB_JAM_MONITOR);
				RC: "Missing Bag Jam Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_C.STATUS.MB_JAM_ALM_TRIG) ,RES(BM1_C.STATUS.MB_JAM_ALM_TMR) ];
				RC: "Missing Bag Jam Alarm";
				N: [XIC(BM1_C.STATUS.MB_JAM_ALM_TRIG) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) XIC(BM1_C.STATUS.MB_JAM_MONITOR) XIO(BM1_C.STATUS.MB_JAM_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.MB_JAM_ALARM) ,TON(BM1_C.STATUS.MB_JAM_ALM_TMR,?,?) ];
				RC: "Door Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_C.STATUS.DR_FLT_MONITOR);
				RC: "Door Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_C.STATUS.DR_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.DR_FLT_ALM_TMR) ];
				RC: "Door Fault Alarm";
				N: [XIC(BM1_C.STATUS.DR_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.DR_FLT_ALARM) XIC(BM1_C.STATUS.DR_FLT_MONITOR) XIO(BM1_C.STATUS.DR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.DR_FLT_ALARM) ,TON(BM1_C.STATUS.DR_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Sorter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_C.STATUS.VSU_FLT_MONITOR);
				RC: "Vertical Sorter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_C.STATUS.VSU_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.VSU_FLT_ALM_TMR) ];
				RC: "Vertical Sorter Fault Alarm";
				N: [XIC(BM1_C.STATUS.VSU_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.VSU_FLT_ALARM) XIC(BM1_C.STATUS.VSU_FLT_MONITOR) XIO(BM1_C.STATUS.VSU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.VSU_FLT_ALARM) ,TON(BM1_C.STATUS.VSU_FLT_ALM_TMR,?,?) ];
				RC: "Diverter Fault Monitor";
				N: [XIC(XO1_HSD.FAULT) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.DIV_FLT_MONITOR);
				RC: "Diverter Fault Alarm Trigger";
				N: [XIC(XO1_HSD.FAIL_EXTEND_ONS) ,XIC(XO1_HSD.FAIL_RETRACT_ONS) ,XIC(XO1_HSD.POS_FLT_ONS) ,XIC(XO1_HSD.FAULT_ONS) ,AFI() ,AFI() ][OTE(BM1_C.STATUS.DIV_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.DIV_FLT_ALM_TMR) ];
				RC: "Diverter Fault Alarm";
				N: [XIC(BM1_C.STATUS.DIV_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.DIV_FLT_ALARM) XIC(BM1_C.STATUS.DIV_FLT_MONITOR) XIO(BM1_C.STATUS.DIV_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.DIV_FLT_ALARM) ,TON(BM1_C.STATUS.DIV_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Merge Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_C.STATUS.VMU_FLT_MONITOR);
				RC: "Vertical Merge Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_C.STATUS.VMU_FLT_ALM_TRIG) ,RES(BM1_C.STATUS.VMU_FLT_ALM_TMR) ];
				RC: "Vertical Merge Fault Alarm";
				N: [XIC(BM1_C.STATUS.VMU_FLT_ALM_TRIG) ,XIC(BM1_C.STATUS.VMU_FLT_ALARM) XIC(BM1_C.STATUS.VMU_FLT_MONITOR) XIO(BM1_C.STATUS.VMU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_02_APB) ][OTE(BM1_C.STATUS.VMU_FLT_ALARM) ,TON(BM1_C.STATUS.VMU_FLT_ALM_TMR,?,?) ];
				RC: "STARTUP WARNING";
				N: [XIC(CL2T_09_MTR.IM_TMR.TT) ,XIC(CL2T_08_MTR.IM_TMR.TT) ,XIC(CL2T_07_MTR.IM_TMR.TT) ,XIC(CL2T_06_MTR.IM_TMR.TT) ,XIC(CL2T_05_MTR.IM_TMR.TT) ,XIC(CL2T_04_MTR.IM_TMR.TT) ,XIC(CL2T_03_MTR.IM_TMR.TT) ,XIC(CL2T_02_MTR.IM_TMR.TT) ,XIC(CL2T_01_MTR.IM_TMR.TT) ,XIC(CL3T_08_MTR.IM_TMR.TT) ,XIC(CL3T_07_MTR.IM_TMR.TT) ,XIC(CL3T_06_MTR.IM_TMR.TT) ,XIC(CL3T_05_MTR.IM_TMR.TT) ,XIC(CL3T_04_MTR.IM_TMR.TT) ,XIC(CL3T_03_MTR.IM_TMR.TT) ,XIC(CL3T_02_MTR.IM_TMR.TT) ,XIC(CL3T_01_MTR.IM_TMR.TT) ,XIC(O4T_13_MTR.IM_TMR.TT) ,XIC(O4T_12_MTR.IM_TMR.TT) ,XIC(O4T_11_MTR.IM_TMR.TT) ,XIC(O4T_10_MTR.IM_TMR.TT) ,XIC(O4T_09_MTR.IM_TMR.TT) ,XIC(O4T_08_MTR.IM_TMR.TT) ,XIC(O4T_07_MTR.IM_TMR.TT) ,XIC(O4T_06_MTR.IM_TMR.TT) ,XIC(O4T_05_MTR.IM_TMR.TT) ,XIC(XO1_03_MTR.IM_TMR.TT) ,XIC(XO1_02_MTR.IM_TMR.TT) ,XIC(XO1_01_MTR.IM_TMR.TT) ,XIC(T5T_09_MTR.IM_TMR.TT) ,XIC(T5T_08_MTR.IM_TMR.TT) ,AFI() ,AFI() ]OTE(BM1_C.STATUS.STARTUP_WARN);
				RC: "Fire Alarm";
				N: XIC(F_MCP_02_FIRE_ALM_FAULT)[OTE(BM1_C.STATUS.FIRE_ALM) ,OTE(CL2T.STATUS.FIRE_ALM) ,OTE(CL3T.STATUS.FIRE_ALM) ,OTE(O4T_2.STATUS.FIRE_ALM) ,OTE(T5T.STATUS.FIRE_ALM) ,OTE(XO1.STATUS.FIRE_ALM) ,NOP() ];
		END_ROUTINE

		ROUTINE MCP_03_DEVICES 
				RC: "****************************************************************************************************$N"
				    "This routine controls devices associated with the MCP.$N"
				    "This routine also sets HMI statuses for the MCP.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station Operators$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(MCP_03.STATUS.READY) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_CS_MCP_03_LTG);
				N: [XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_CS_MCP_03_LTB);
				N: [XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_CS_MCP_03_LTA);
				N: [XIC(I_CS_MCP_03_EPB) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_CS_MCP_03_EPB);
				RC: "Beacons or Stacklights$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(MCP_03.STATUS.MSD_OFF_MONITOR) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ,XIC(MCP_03.STATUS.MOL_MONITOR) ,XIC(MCP_03.STATUS.JAM_MONITOR) ,XIC(MCP_03.STATUS.MB_JAM_MONITOR) ,XIC(MCP_03.STATUS.CTCTR_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_WA_MCP_03_LTA);
				N: [XIC(MCP_03.STATUS.E_STOP_MONITOR) XIC(INT.FLASHER_BIT) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_WA_MCP_03_LTR);
				N: [[XIC(MCP_03.STATUS.MSD_OFF_ALARM) ,XIC(MCP_03.STATUS.VFD_FLT_MONITOR) ,XIC(MCP_03.STATUS.MOL_ALARM) ,XIC(MCP_03.STATUS.JAM_ALARM) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) ,XIC(MCP_03.STATUS.CTCTR_FLT_MONITOR) ,XIC(MCP_03.STATUS.E_STOP_ALARM) ,XIC(MCP_03.STATUS.DR_FLT_ALARM) ,XIC(MCP_03.STATUS.VSU_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(MCP_03.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_03_TPB) ]OTE(O_WA_MCP_03_ALM);
				RC: "MCP Inputs$N"
				    "";
				N: XIC(I_TS_MCP_03_ALM)OTE(F_MCP_03_FIRE_ALM_FAULT);
				N: XIC(I_TS_MCP_03_ALM)OTE(F_MCP_03_HIGH_TEMP);
				RC: "MCP Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.MCPActive,MCP_03.STATUS.G) ,XIO(XO2.MTR_GRP.RUN_LATCH) XIO(CL1T.MTR_GRP.RUN_LATCH) XIO(HX1T.MTR_GRP.RUN_LATCH) MOV(Status.MCPTimeOut,MCP_03.STATUS.G) ,XIC(F_MCP_03_CS_E_STOP) MOV(Status.MCPEStop,MCP_03.STATUS.G) ,XIC(F_MCP_03_FIRE_ALM_FAULT) MOV(Status.MCPFireAlarm,MCP_03.STATUS.G) ,XIC(MCP_03.STATUS.CTCTR_FLT_MONITOR) MOV(Status.MCPCTCTRFlt,MCP_03.STATUS.G) ,XIC(MCP_03.STATUS.MOL_MONITOR) MOV(Status.MCPMTRFlt,MCP_03.STATUS.G) ,XIC(F_MCP_03_HIGH_TEMP) MOV(Status.MCPOverTemp,MCP_03.STATUS.G) ,AFI() MOV(Status.MCPFuseFlt,MCP_03.STATUS.G) ,[XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ] MOV(Status.MCPCommFault,MCP_03.STATUS.G) ,MOV(MCP_03.STATUS.G,G_MCP_03_STS) ];
		END_ROUTINE

		ROUTINE MCP_03_MONITOR_ALARMS 
				RC: "****************************************************************************************************$N"
				    "This subroutine monitors the status/faults for the associated motor group such as: Emergency Stops,  Motor Overloads, Jams and Motor Startup.$N"
				    "$N"
				    "The output of this routine is used for controlling the beacons/audible alarms.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Ready";
				N: XIO(MCP_03.STATUS.E_STOP_MONITOR)XIO(MCP_03.STATUS.MSD_OFF_MONITOR)XIO(MCP_03.STATUS.MOL_MONITOR)XIO(MCP_03.STATUS.JAM_MONITOR)XIO(MCP_03.STATUS.MB_JAM_MONITOR)XIO(MCP_03.STATUS.VFD_FLT_MONITOR)XIO(MCP_03.STATUS.CTCTR_FLT_MONITOR)XIO(MCP_03.STATUS.DR_FLT_MONITOR)XIO(MCP_03.STATUS.VSU_FLT_MONITOR)XIO(MCP_03.STATUS.DIV_FLT_MONITOR)XIO(MCP_03.STATUS.VMU_FLT_MONITOR)OTE(MCP_03.STATUS.READY);
				RC: "E-stop Monitor";
				N: [XIC(F_MCP_03_CS_E_STOP) ,XIC(F_XO2_02_CS_E_STOP) ,XIC(F_XO2_05_CS_E_STOP) ,XIC(F_CL1T_01_CS1_E_STOP) ,XIC(F_CL1T_01_CS2_E_STOP) ,XIC(F_CL1T_01_CS3_E_STOP) ,XIC(F_CL1T_02_CS1_E_STOP) ,XIC(F_CL1T_02_CS2_E_STOP) ,XIC(F_CL1T_02_CS3_E_STOP) ,XIC(F_CL1T_05_CS_E_STOP) ,XIC(F_CL1T_09_CS_E_STOP) ,XIC(F_CL1T_11_CS_E_STOP) ,XIC(F_CL1T_12_CS_E_STOP) ,XIC(F_CL1T_16_CS_E_STOP) ,XIC(F_CL1T_20_CS_E_STOP) ,XIC(F_CL1T_24_CS_E_STOP) ,XIC(F_HX1T_10_CS_E_STOP) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.E_STOP_MONITOR);
				RC: "E-stop Alarm Trigger";
				N: [XIC(MCP_03_EPB_ONS) ,XIC(X02_05_EPB_ONS) ,XIC(XO2_05_EPB_ONS) ,XIC(CL1T_01_EPB1_ONS) ,XIC(CL1T_01_EPB2_ONS) ,XIC(CL1T_01_EPB3_ONS) ,XIC(CL1T_02_EPB1_ONS) ,XIC(CL1T_02_EPB2_ONS) ,XIC(CL1T_02_EPB3_ONS) ,XIC(CL1T_05_EPB_ONS) ,XIC(CL1T_09_EPB_ONS) ,XIC(CL1T_11_EPB_ONS) ,XIC(CL1T_12_EPB_ONS) ,XIC(CL1T_16_EPB_ONS) ,XIC(CL1T_20_EPB_ONS) ,XIC(CL1T_24_EPB_ONS) ,XIC(HX1T_10_EPB_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.E_STOP_ALM_TRIG) ,RES(MCP_03.STATUS.E_STOP_ALM_TMR) ];
				RC: "E-stop Alarm";
				N: [XIC(MCP_03.STATUS.E_STOP_ALM_TRIG) ,XIC(MCP_03.STATUS.E_STOP_ALARM) XIC(MCP_03.STATUS.E_STOP_MONITOR) XIO(MCP_03.STATUS.E_STOP_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.E_STOP_ALARM) ,TON(MCP_03.STATUS.E_STOP_ALM_TMR,?,?) ];
				RC: "Motor Safety Disconnect Off Monitor";
				N: [XIC(F_XO2_05_MSD_OFF) ,XIC(F_XO2_04_MSD_OFF) ,XIC(F_XO2_03_MSD_OFF) ,XIC(F_XO2_02_MSD_OFF) ,XIC(F_XO2_01_MSD_OFF) ,XIC(F_CL1T_26_MSD_OFF) ,XIC(F_CL1T_25_MSD_OFF) ,XIC(F_CL1T_24_MSD_OFF) ,XIC(F_CL1T_23_MSD_OFF) ,XIC(F_CL1T_22_MSD_OFF) ,XIC(F_CL1T_21_MSD_OFF) ,XIC(F_CL1T_20_MSD_OFF) ,XIC(F_CL1T_19_MSD_OFF) ,XIC(F_CL1T_18_MSD_OFF) ,XIC(F_CL1T_17_MSD_OFF) ,XIC(F_CL1T_16_MSD_OFF) ,XIC(F_CL1T_15_MSD_OFF) ,XIC(F_CL1T_14_MSD_OFF) ,XIC(F_CL1T_13_MSD_OFF) ,XIC(F_CL1T_12_MSD_OFF) ,XIC(F_CL1T_11_MSD_OFF) ,XIC(F_CL1T_10_MSD_OFF) ,XIC(F_CL1T_09_MSD_OFF) ,XIC(F_CL1T_08_MSD_OFF) ,XIC(F_CL1T_07_MSD_OFF) ,XIC(F_CL1T_06_MSD_OFF) ,XIC(F_CL1T_05_MSD_OFF) ,XIC(F_CL1T_04_MSD_OFF) ,XIC(F_CL1T_03_MSD_OFF) ,XIC(F_CL1T_02_MSD_OFF) ,XIC(F_CL1T_01_MSD_OFF) ,XIC(F_HX1T_10A_MSD_OFF) ,XIC(F_HX1T_10_MSD_OFF) ,XIC(F_HX1T_09_MSD_OFF) ,XIC(F_HX1T_08_MSD_OFF) ,XIC(F_HX1T_07_MSD_OFF) ,XIC(F_HX1T_06_MSD_OFF) ,AFI() ]OTE(MCP_03.STATUS.MSD_OFF_MONITOR);
				RC: "Motor Safety Disconnect Off Alarm Trigger";
				N: [XIC(XO2_05_MTR.MSD_ONS) ,XIC(XO2_04_MTR.MSD_ONS) ,XIC(XO2_03_MTR.MSD_ONS) ,XIC(XO2_02_MTR.MSD_ONS) ,XIC(XO2_01_MTR.MSD_ONS) ,XIC(CL1T_26_MTR.MSD_ONS) ,XIC(CL1T_25_MTR.MSD_ONS) ,XIC(CL1T_24_MTR.MSD_ONS) ,XIC(CL1T_23_MTR.MSD_ONS) ,XIC(CL1T_22_MTR.MSD_ONS) ,XIC(CL1T_21_MTR.MSD_ONS) ,XIC(CL1T_20_MTR.MSD_ONS) ,XIC(CL1T_19_MTR.MSD_ONS) ,XIC(CL1T_18_MTR.MSD_ONS) ,XIC(CL1T_17_MTR.MSD_ONS) ,XIC(CL1T_16_MTR.MSD_ONS) ,XIC(CL1T_15_MTR.MSD_ONS) ,XIC(CL1T_14_MTR.MSD_ONS) ,XIC(CL1T_13_MTR.MSD_ONS) ,XIC(CL1T_12_MTR.MSD_ONS) ,XIC(CL1T_11_MTR.MSD_ONS) ,XIC(CL1T_10_MTR.MSD_ONS) ,XIC(CL1T_09_MTR.MSD_ONS) ,XIC(CL1T_08_MTR.MSD_ONS) ,XIC(CL1T_07_MTR.MSD_ONS) ,XIC(CL1T_06_MTR.MSD_ONS) ,XIC(CL1T_05_MTR.MSD_ONS) ,XIC(CL1T_04_MTR.MSD_ONS) ,XIC(CL1T_03_MTR.MSD_ONS) ,XIC(CL1T_02_MTR.MSD_ONS) ,XIC(CL1T_01_MTR.MSD_ONS) ,XIC(HX1T_10A_MTR.MSD_ONS) ,XIC(HX1T_10_MTR.MSD_ONS) ,XIC(HX1T_09_MTR.MSD_ONS) ,XIC(HX1T_08_MTR.MSD_ONS) ,XIC(HX1T_07_MTR.MSD_ONS) ,XIC(HX1T_06_MTR.MSD_ONS) ,AFI() ][OTE(MCP_03.STATUS.MSD_OFF_ALM_TRIG) ,RES(MCP_03.STATUS.MSD_OFF_ALM_TMR) ];
				RC: "Motor Safety Disconnect Off Alarm";
				N: [XIC(MCP_03.STATUS.MSD_OFF_ALM_TRIG) ,XIC(MCP_03.STATUS.MSD_OFF_ALARM) XIC(MCP_03.STATUS.MSD_OFF_MONITOR) XIO(MCP_03.STATUS.MSD_OFF_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.MSD_OFF_ALARM) ,TON(MCP_03.STATUS.MSD_OFF_ALM_TMR,?,?) ];
				RC: "Motor Overload Monitor";
				N: [XIC(F_CL1T_25_MOL) ,XIC(F_CL1T_22_MOL) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.MOL_MONITOR);
				RC: "Motor Overload Alarm Trigger";
				N: [XIC(CL1T_25_MTR.MOL_ONS) ,XIC(CL1T_22_MTR.MOL_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.MOL_ALM_TRIG) ,RES(MCP_03.STATUS.MOL_ALM_TMR) ];
				RC: "Motor Overload Alarm";
				N: [XIC(MCP_03.STATUS.MOL_ALM_TRIG) ,XIC(MCP_03.STATUS.MOL_ALARM) XIC(MCP_03.STATUS.MOL_MONITOR) XIO(MCP_03.STATUS.MOL_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.MOL_ALARM) ,TON(MCP_03.STATUS.MOL_ALM_TMR,?,?) ];
				RC: "VFD Fault Monitor";
				N: [XIC(F_XO2_05_VFD_FAULT) ,XIC(F_XO2_04_VFD_FAULT) ,XIC(F_XO2_03_VFD_FAULT) ,XIC(F_XO2_02_VFD_FAULT) ,XIC(F_XO2_01_VFD_FAULT) ,XIC(F_CL1T_26_VFD_FAULT) ,XIC(F_CL1T_24_VFD_FAULT) ,XIC(F_CL1T_23_VFD_FAULT) ,XIC(F_CL1T_21_VFD_FAULT) ,XIC(F_CL1T_20_VFD_FAULT) ,XIC(F_CL1T_19_VFD_FAULT) ,XIC(F_CL1T_18_VFD_FAULT) ,XIC(F_CL1T_17_VFD_FAULT) ,XIC(F_CL1T_16_VFD_FAULT) ,XIC(F_CL1T_15_VFD_FAULT) ,XIC(F_CL1T_14_VFD_FAULT) ,XIC(F_CL1T_13_VFD_FAULT) ,XIC(F_CL1T_12_VFD_FAULT) ,XIC(F_CL1T_11_VFD_FAULT) ,XIC(F_CL1T_10_VFD_FAULT) ,XIC(F_CL1T_09_VFD_FAULT) ,XIC(F_CL1T_08_VFD_FAULT) ,XIC(F_CL1T_07_VFD_FAULT) ,XIC(F_CL1T_06_VFD_FAULT) ,XIC(F_CL1T_05_VFD_FAULT) ,XIC(F_CL1T_04_VFD_FAULT) ,XIC(F_CL1T_03_VFD_FAULT) ,XIC(F_CL1T_02_VFD_FAULT) ,XIC(F_CL1T_01_VFD_FAULT) ,XIC(F_HX1T_10A_VFD_FAULT) ,XIC(F_HX1T_10_VFD_FAULT) ,XIC(F_HX1T_09_VFD_FAULT) ,XIC(F_HX1T_08_VFD_FAULT) ,XIC(F_HX1T_07_VFD_FAULT) ,XIC(F_HX1T_06_VFD_FAULT) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.VFD_FLT_MONITOR);
				RC: "VFD Fault Alarm Trigger";
				N: [XIC(XO2_05_VFD.FAULT_ONS) ,XIC(XO2_04_VFD.FAULT_ONS) ,XIC(XO2_03_VFD.FAULT_ONS) ,XIC(XO2_02_VFD.FAULT_ONS) ,XIC(XO2_01_VFD.FAULT_ONS) ,XIC(CL1T_26_VFD.FAULT_ONS) ,XIC(CL1T_24_VFD.FAULT_ONS) ,XIC(CL1T_23_VFD.FAULT_ONS) ,XIC(CL1T_21_VFD.FAULT_ONS) ,XIC(CL1T_20_VFD.FAULT_ONS) ,XIC(CL1T_19_VFD.FAULT_ONS) ,XIC(CL1T_18_VFD.FAULT_ONS) ,XIC(CL1T_17_VFD.FAULT_ONS) ,XIC(CL1T_16_VFD.FAULT_ONS) ,XIC(CL1T_15_VFD.FAULT_ONS) ,XIC(CL1T_14_VFD.FAULT_ONS) ,XIC(CL1T_13_VFD.FAULT_ONS) ,XIC(CL1T_12_VFD.FAULT_ONS) ,XIC(CL1T_11_VFD.FAULT_ONS) ,XIC(CL1T_10_VFD.FAULT_ONS) ,XIC(CL1T_09_VFD.FAULT_ONS) ,XIC(CL1T_08_VFD.FAULT_ONS) ,XIC(CL1T_07_VFD.FAULT_ONS) ,XIC(CL1T_06_VFD.FAULT_ONS) ,XIC(CL1T_05_VFD.FAULT_ONS) ,XIC(CL1T_04_VFD.FAULT_ONS) ,XIC(CL1T_03_VFD.FAULT_ONS) ,XIC(CL1T_02_VFD.FAULT_ONS) ,XIC(CL1T_01_VFD.FAULT_ONS) ,XIC(HX1T_10A_VFD.FAULT_ONS) ,XIC(HX1T_10_VFD.FAULT_ONS) ,XIC(HX1T_09_VFD.FAULT_ONS) ,XIC(HX1T_08_VFD.FAULT_ONS) ,XIC(HX1T_07_VFD.FAULT_ONS) ,XIC(HX1T_06_VFD.FAULT_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.VFD_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.VFD_FLT_ALM_TMR) ];
				RC: "VFD Fault Alarm";
				N: [XIC(MCP_03.STATUS.VFD_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.VFD_FLT_ALARM) XIC(MCP_03.STATUS.VFD_FLT_MONITOR) XIO(MCP_03.STATUS.VFD_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.VFD_FLT_ALARM) ,TON(MCP_03.STATUS.VFD_FLT_ALM_TMR,?,?) ];
				RC: "Contactor Fault Monitor";
				N: [XIC(F_XO2_05_CTCTR_FAULT) ,XIC(F_XO2_04_CTCTR_FAULT) ,XIC(F_XO2_03_CTCTR_FAULT) ,XIC(F_XO2_02_CTCTR_FAULT) ,XIC(F_XO2_01_CTCTR_FAULT) ,XIC(F_CL1T_26_CTCTR_FAULT) ,XIC(F_CL1T_25_CTCTR_FAULT) ,XIC(F_CL1T_24_CTCTR_FAULT) ,XIC(F_CL1T_23_CTCTR_FAULT) ,XIC(F_CL1T_22_CTCTR_FAULT) ,XIC(F_CL1T_21_CTCTR_FAULT) ,XIC(F_CL1T_20_CTCTR_FAULT) ,XIC(F_CL1T_19_CTCTR_FAULT) ,XIC(F_CL1T_18_CTCTR_FAULT) ,XIC(F_CL1T_17_CTCTR_FAULT) ,XIC(F_CL1T_16_CTCTR_FAULT) ,XIC(F_CL1T_15_CTCTR_FAULT) ,XIC(F_CL1T_14_CTCTR_FAULT) ,XIC(F_CL1T_13_CTCTR_FAULT) ,XIC(F_CL1T_12_CTCTR_FAULT) ,XIC(F_CL1T_11_CTCTR_FAULT) ,XIC(F_CL1T_10_CTCTR_FAULT) ,XIC(F_CL1T_09_CTCTR_FAULT) ,XIC(F_CL1T_08_CTCTR_FAULT) ,XIC(F_CL1T_07_CTCTR_FAULT) ,XIC(F_CL1T_06_CTCTR_FAULT) ,XIC(F_CL1T_05_CTCTR_FAULT) ,XIC(F_CL1T_04_CTCTR_FAULT) ,XIC(F_CL1T_03_CTCTR_FAULT) ,XIC(F_CL1T_02_CTCTR_FAULT) ,XIC(F_CL1T_01_CTCTR_FAULT) ,XIC(F_HX1T_10A_CTCTR_FAULT) ,XIC(F_HX1T_10_CTCTR_FAULT) ,XIC(F_HX1T_09_CTCTR_FAULT) ,XIC(F_HX1T_08_CTCTR_FAULT) ,XIC(F_HX1T_07_CTCTR_FAULT) ,XIC(F_HX1T_06_CTCTR_FAULT) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.CTCTR_FLT_MONITOR);
				RC: "Contactor Fault Alarm Trigger";
				N: [XIC(XO2_05_MTR.MS_FLT_ONS) ,XIC(XO2_04_MTR.MS_FLT_ONS) ,XIC(XO2_03_MTR.MS_FLT_ONS) ,XIC(XO2_02_MTR.MS_FLT_ONS) ,XIC(XO2_01_MTR.MS_FLT_ONS) ,XIC(CL1T_26_MTR.MS_FLT_ONS) ,XIC(CL1T_25_MTR.MS_FLT_ONS) ,XIC(CL1T_24_MTR.MS_FLT_ONS) ,XIC(CL1T_23_MTR.MS_FLT_ONS) ,XIC(CL1T_22_MTR.MS_FLT_ONS) ,XIC(CL1T_21_MTR.MS_FLT_ONS) ,XIC(CL1T_20_MTR.MS_FLT_ONS) ,XIC(CL1T_19_MTR.MS_FLT_ONS) ,XIC(CL1T_18_MTR.MS_FLT_ONS) ,XIC(CL1T_17_MTR.MS_FLT_ONS) ,XIC(CL1T_16_MTR.MS_FLT_ONS) ,XIC(CL1T_15_MTR.MS_FLT_ONS) ,XIC(CL1T_14_MTR.MS_FLT_ONS) ,XIC(CL1T_13_MTR.MS_FLT_ONS) ,XIC(CL1T_12_MTR.MS_FLT_ONS) ,XIC(CL1T_11_MTR.MS_FLT_ONS) ,XIC(CL1T_10_MTR.MS_FLT_ONS) ,XIC(CL1T_09_MTR.MS_FLT_ONS) ,XIC(CL1T_08_MTR.MS_FLT_ONS) ,XIC(CL1T_07_MTR.MS_FLT_ONS) ,XIC(CL1T_06_MTR.MS_FLT_ONS) ,XIC(CL1T_05_MTR.MS_FLT_ONS) ,XIC(CL1T_04_MTR.MS_FLT_ONS) ,XIC(CL1T_03_MTR.MS_FLT_ONS) ,XIC(CL1T_02_MTR.MS_FLT_ONS) ,XIC(CL1T_01_MTR.MS_FLT_ONS) ,XIC(HX1T_10A_MTR.MS_FLT_ONS) ,XIC(HX1T_10_MTR.MS_FLT_ONS) ,XIC(HX1T_09_MTR.MS_FLT_ONS) ,XIC(HX1T_08_MTR.MS_FLT_ONS) ,XIC(HX1T_07_MTR.MS_FLT_ONS) ,XIC(HX1T_06_MTR.MS_FLT_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.CTCTR_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.CTCTR_FLT_ALM_TMR) ];
				RC: "Contactor Fault Alarm";
				N: [XIC(MCP_03.STATUS.CTCTR_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.CTCTR_FLT_ALARM) XIC(MCP_03.STATUS.CTCTR_FLT_MONITOR) XIO(MCP_03.STATUS.CTCTR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.CTCTR_FLT_ALARM) ,TON(MCP_03.STATUS.CTCTR_FLT_ALM_TMR,?,?) ];
				RC: "Jam Monitor";
				N: [XIC(F_BM1_23_PE2_JAMMED) ,XIC(F_BM1_23_PE1_JAMMED) ,XIC(F_XO2_05_PE_JAMMED) ,XIC(F_XO2_04_PE_JAMMED) ,XIC(F_XO2_03_PE_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,XIC(F_CL1T_24_PE_JAMMED) ,XIC(F_CL1T_23_PE_JAMMED) ,XIC(F_CL1T_21_PE_JAMMED) ,XIC(F_CL1T_20_PE_JAMMED) ,XIC(F_CL1T_19_PE_JAMMED) ,XIC(F_CL1T_18_PE_JAMMED) ,XIC(F_CL1T_17_PE_JAMMED) ,XIC(F_CL1T_16_PE_JAMMED) ,XIC(F_CL1T_15_PE_JAMMED) ,XIC(F_CL1T_14_PE_JAMMED) ,XIC(F_CL1T_13_PE_JAMMED) ,XIC(F_CL1T_12_PE_JAMMED) ,XIC(F_CL1T_11_PE_JAMMED) ,XIC(F_CL1T_10_PE_JAMMED) ,XIC(F_CL1T_09_PE_JAMMED) ,XIC(F_CL1T_08_PE_JAMMED) ,XIC(F_CL1T_07_PE_JAMMED) ,XIC(F_CL1T_06_PE_JAMMED) ,XIC(F_CL1T_05_PE_JAMMED) ,XIC(F_CL1T_04_PE_JAMMED) ,XIC(F_CL1T_03_PE_JAMMED) ,XIC(F_CL1T_02_PE_JAMMED) ,XIC(F_CL1T_01_PE_JAMMED) ,XIC(F_HX1T_10A_PE_JAMMED) ,XIC(F_HX1T_10_PE_JAMMED) ,XIC(F_HX1T_09_PE_JAMMED) ,XIC(F_HX1T_08_PE_JAMMED) ,XIC(F_HX1T_07_PE_JAMMED) ,XIC(F_HX1T_06_PE_JAMMED) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.JAM_MONITOR);
				RC: "Jam Alarm Trigger";
				N: [XIC(BM1_23_PE1.JAM_ONS) ,XIC(BM1_23_PE.JAM_ONS) ,XIC(XO2_05_PE.JAM_ONS) ,XIC(XO2_04_PE.JAM_ONS) ,XIC(XO2_03_PE.JAM_ONS) ,XIC(XO2_02_PE.JAM_ONS) ,XIC(XO2_01_PE.JAM_ONS) ,XIC(CL1T_26_PE1.JAM_ONS) ,XIC(CL1T_26_PE2.JAM_ONS) ,XIC(CL1T_24_PE.JAM_ONS) ,XIC(CL1T_23_PE.JAM_ONS) ,XIC(CL1T_21_PE.JAM_ONS) ,XIC(CL1T_20_PE.JAM_ONS) ,XIC(CL1T_19_PE.JAM_ONS) ,XIC(CL1T_18_PE.JAM_ONS) ,XIC(CL1T_17_PE.JAM_ONS) ,XIC(CL1T_16_PE.JAM_ONS) ,XIC(CL1T_15_PE.JAM_ONS) ,XIC(CL1T_14_PE.JAM_ONS) ,XIC(CL1T_13_PE.JAM_ONS) ,XIC(CL1T_12_PE.JAM_ONS) ,XIC(CL1T_11_PE.JAM_ONS) ,XIC(CL1T_10_PE.JAM_ONS) ,XIC(CL1T_09_PE.JAM_ONS) ,XIC(CL1T_08_PE.JAM_ONS) ,XIC(CL1T_07_PE.JAM_ONS) ,XIC(CL1T_06_PE.JAM_ONS) ,XIC(CL1T_05_PE.JAM_ONS) ,XIC(CL1T_04_PE.JAM_ONS) ,XIC(CL1T_03_PE.JAM_ONS) ,XIC(CL1T_02_PE.JAM_ONS) ,XIC(CL1T_01_PE.JAM_ONS) ,XIC(HX1T_10A_PE.JAM_ONS) ,XIC(HX1T_10_PE.JAM_ONS) ,XIC(HX1T_09_PE.JAM_ONS) ,XIC(HX1T_08_PE.JAM_ONS) ,XIC(HX1T_07_PE.JAM_ONS) ,XIC(HX1T_06_PE.JAM_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.JAM_ALM_TRIG) ,RES(MCP_03.STATUS.JAM_ALM_TMR) ];
				RC: "Jam Alarm";
				N: [XIC(MCP_03.STATUS.JAM_ALM_TRIG) ,XIC(MCP_03.STATUS.JAM_ALARM) XIC(MCP_03.STATUS.JAM_MONITOR) XIO(MCP_03.STATUS.JAM_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.JAM_ALARM) ,TON(MCP_03.STATUS.JAM_ALM_TMR,?,?) ];
				RC: "Missing Bag Jam Monitor";
				N: [AFI() ,AFI() ]OTE(MCP_03.STATUS.MB_JAM_MONITOR);
				RC: "Missing Bag Jam Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(MCP_03.STATUS.MB_JAM_ALM_TRIG) ,RES(MCP_03.STATUS.MB_JAM_ALM_TMR) ];
				RC: "Missing Bag Jam Alarm";
				N: [XIC(MCP_03.STATUS.MB_JAM_ALM_TRIG) ,XIC(MCP_03.STATUS.MB_JAM_ALARM) XIC(MCP_03.STATUS.MB_JAM_MONITOR) XIO(MCP_03.STATUS.MB_JAM_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.MB_JAM_ALARM) ,TON(MCP_03.STATUS.MB_JAM_ALM_TMR,?,?) ];
				RC: "Door Fault Monitor";
				N: [AFI() ,AFI() ]OTE(MCP_03.STATUS.DR_FLT_MONITOR);
				RC: "Door Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(MCP_03.STATUS.DR_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.DR_FLT_ALM_TMR) ];
				RC: "Door Fault Alarm";
				N: [XIC(MCP_03.STATUS.DR_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.DR_FLT_ALARM) XIC(MCP_03.STATUS.DR_FLT_MONITOR) XIO(MCP_03.STATUS.DR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.DR_FLT_ALARM) ,TON(MCP_03.STATUS.DR_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Sorter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(MCP_03.STATUS.VSU_FLT_MONITOR);
				RC: "Vertical Sorter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(MCP_03.STATUS.VSU_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.VSU_FLT_ALM_TMR) ];
				RC: "Vertical Sorter Fault Alarm";
				N: [XIC(MCP_03.STATUS.VSU_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.VSU_FLT_ALARM) XIC(MCP_03.STATUS.VSU_FLT_MONITOR) XIO(MCP_03.STATUS.VSU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.VSU_FLT_ALARM) ,TON(MCP_03.STATUS.VSU_FLT_ALM_TMR,?,?) ];
				RC: "Diverter Fault Monitor";
				N: [XIC(XO2_HSD.FAULT) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.DIV_FLT_MONITOR);
				RC: "Diverter Fault Alarm Trigger";
				N: [XIC(XO2_HSD.FAIL_EXTEND_ONS) ,XIC(XO2_HSD.FAIL_RETRACT_ONS) ,XIC(XO2_HSD.POS_FLT_ONS) ,XIC(XO2_HSD.FAULT_ONS) ,AFI() ,AFI() ][OTE(MCP_03.STATUS.DIV_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.DIV_FLT_ALM_TMR) ];
				RC: "Diverter Fault Alarm";
				N: [XIC(MCP_03.STATUS.DIV_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.DIV_FLT_ALARM) XIC(MCP_03.STATUS.DIV_FLT_MONITOR) XIO(MCP_03.STATUS.DIV_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.DIV_FLT_ALARM) ,TON(MCP_03.STATUS.DIV_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Merge Fault Monitor";
				N: [AFI() ,AFI() ]OTE(MCP_03.STATUS.VMU_FLT_MONITOR);
				RC: "Vertical Merge Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(MCP_03.STATUS.VMU_FLT_ALM_TRIG) ,RES(MCP_03.STATUS.VMU_FLT_ALM_TMR) ];
				RC: "Vertical Merge Fault Alarm";
				N: [XIC(MCP_03.STATUS.VMU_FLT_ALM_TRIG) ,XIC(MCP_03.STATUS.VMU_FLT_ALARM) XIC(MCP_03.STATUS.VMU_FLT_MONITOR) XIO(MCP_03.STATUS.VMU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_03_APB) ][OTE(MCP_03.STATUS.VMU_FLT_ALARM) ,TON(MCP_03.STATUS.VMU_FLT_ALM_TMR,?,?) ];
				RC: "STARTUP WARNING";
				N: [XIC(XO2_05_MTR.IM_TMR.TT) ,XIC(XO2_04_MTR.IM_TMR.TT) ,XIC(XO2_03_MTR.IM_TMR.TT) ,XIC(XO2_02_MTR.IM_TMR.TT) ,XIC(XO2_01_MTR.IM_TMR.TT) ,XIC(CL1T_26_MTR.IM_TMR.TT) ,XIC(CL1T_25_MTR.IM_TMR.TT) ,XIC(CL1T_24_MTR.IM_TMR.TT) ,XIC(CL1T_23_MTR.IM_TMR.TT) ,XIC(CL1T_22_MTR.IM_TMR.TT) ,XIC(CL1T_21_MTR.IM_TMR.TT) ,XIC(CL1T_20_MTR.IM_TMR.TT) ,XIC(CL1T_19_MTR.IM_TMR.TT) ,XIC(CL1T_18_MTR.IM_TMR.TT) ,XIC(CL1T_17_MTR.IM_TMR.TT) ,XIC(CL1T_16_MTR.IM_TMR.TT) ,XIC(CL1T_15_MTR.IM_TMR.TT) ,XIC(CL1T_14_MTR.IM_TMR.TT) ,XIC(CL1T_13_MTR.IM_TMR.TT) ,XIC(CL1T_12_MTR.IM_TMR.TT) ,XIC(CL1T_11_MTR.IM_TMR.TT) ,XIC(CL1T_10_MTR.IM_TMR.TT) ,XIC(CL1T_09_MTR.IM_TMR.TT) ,XIC(CL1T_08_MTR.IM_TMR.TT) ,XIC(CL1T_07_MTR.IM_TMR.TT) ,XIC(CL1T_06_MTR.IM_TMR.TT) ,XIC(CL1T_05_MTR.IM_TMR.TT) ,XIC(CL1T_04_MTR.IM_TMR.TT) ,XIC(CL1T_03_MTR.IM_TMR.TT) ,XIC(CL1T_02_MTR.IM_TMR.TT) ,XIC(CL1T_01_MTR.IM_TMR.TT) ,XIC(HX1T_10A_MTR.IM_TMR.TT) ,XIC(HX1T_10_MTR.IM_TMR.TT) ,XIC(HX1T_09_MTR.IM_TMR.TT) ,XIC(HX1T_08_MTR.IM_TMR.TT) ,XIC(HX1T_07_MTR.IM_TMR.TT) ,XIC(HX1T_06_MTR.IM_TMR.TT) ,AFI() ,AFI() ]OTE(MCP_03.STATUS.STARTUP_WARN);
				RC: "Fire Alarm";
				N: XIC(F_MCP_03_FIRE_ALM_FAULT)[OTE(MCP_03.STATUS.FIRE_ALM) ,OTE(XO2.STATUS.FIRE_ALM) ,OTE(CL1T.STATUS.FIRE_ALM) ,OTE(HX1T.STATUS.FIRE_ALM) ,NOP() ];
		END_ROUTINE

		ROUTINE MCP_16_DEVICES 
				RC: "****************************************************************************************************$N"
				    "This routine controls devices associated with the MCP.$N"
				    "This routine also sets HMI statuses for the MCP.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station Operators$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(C2T.STATUS.READY) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_CS_MCP_16_LTG);
				N: [XIC(C2T.STATUS.MOL_MONITOR) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_CS_MCP_16_LTB);
				N: [XIC(C2T.STATUS.JAM_MONITOR) ,XIC(C2T.STATUS.MB_JAM_MONITOR) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_CS_MCP_16_LTA);
				N: [XIC(I_CS_MCP_16_EPB) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_CS_MCP_16_EPB);
				RC: "Beacons or Stacklights$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(C2T.STATUS.MSD_OFF_MONITOR) ,XIC(C2T.STATUS.VFD_FLT_MONITOR) ,XIC(C2T.STATUS.MOL_MONITOR) ,XIC(C2T.STATUS.JAM_MONITOR) ,XIC(C2T.STATUS.MB_JAM_MONITOR) ,XIC(C2T.STATUS.CTCTR_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(C2T.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_WA_MCP_16_LTA);
				N: [XIC(C2T.STATUS.E_STOP_MONITOR) XIC(INT.FLASHER_BIT) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_WA_MCP_16_LTR);
				N: [[XIC(C2T.STATUS.MSD_OFF_ALARM) ,XIC(C2T.STATUS.VFD_FLT_MONITOR) ,XIC(C2T.STATUS.MOL_ALARM) ,XIC(C2T.STATUS.JAM_ALARM) ,XIC(C2T.STATUS.MB_JAM_ALARM) ,XIC(C2T.STATUS.CTCTR_FLT_MONITOR) ,XIC(C2T.STATUS.E_STOP_ALARM) ,XIC(C2T.STATUS.DR_FLT_ALARM) ,XIC(C2T.STATUS.VSU_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(C2T.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_16_TPB) ]OTE(O_WA_MCP_16_ALM);
				RC: "MCP Inputs$N"
				    "";
				N: XIC(I_TS_MCP_16_ALM)OTE(F_MCP_16_FIRE_ALM_FAULT);
				N: XIC(I_TS_MCP_16_ALM)OTE(F_MCP_16_HIGH_TEMP);
				RC: "MCP Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.MCPActive,C2T.STATUS.G) ,XIO(O3T.MTR_GRP.RUN_LATCH) XIO(O4T.MTR_GRP.RUN_LATCH) XIO(CL12T.MTR_GRP.RUN_LATCH) MOV(Status.MCPTimeOut,C2T.STATUS.G) ,XIC(F_MCP_16_CS_E_STOP) MOV(Status.MCPEStop,C2T.STATUS.G) ,XIC(F_MCP_16_FIRE_ALM_FAULT) MOV(Status.MCPFireAlarm,C2T.STATUS.G) ,XIC(C2T.STATUS.CTCTR_FLT_MONITOR) MOV(Status.MCPCTCTRFlt,C2T.STATUS.G) ,XIC(C2T.STATUS.MOL_MONITOR) MOV(Status.MCPMTRFlt,C2T.STATUS.G) ,XIC(F_MCP_16_HIGH_TEMP) MOV(Status.MCPOverTemp,C2T.STATUS.G) ,AFI() MOV(Status.MCPFuseFlt,C2T.STATUS.G) ,[XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ] MOV(Status.MCPCommFault,C2T.STATUS.G) ,MOV(C2T.STATUS.G,G_MCP_16_STS) ];
		END_ROUTINE

		ROUTINE MCP_16_MONITOR_ALARMS 
				RC: "****************************************************************************************************$N"
				    "This subroutine monitors the status/faults for the associated motor group such as: Emergency Stops,  Motor Overloads, Jams and Motor Startup.$N"
				    "$N"
				    "The output of this routine is used for controlling the beacons/audible alarms.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Ready";
				N: XIO(C2T.STATUS.E_STOP_MONITOR)XIO(C2T.STATUS.MSD_OFF_MONITOR)XIO(C2T.STATUS.MOL_MONITOR)XIO(C2T.STATUS.JAM_MONITOR)XIO(C2T.STATUS.MB_JAM_MONITOR)XIO(C2T.STATUS.VFD_FLT_MONITOR)XIO(C2T.STATUS.CTCTR_FLT_MONITOR)XIO(C2T.STATUS.DR_FLT_MONITOR)XIO(C2T.STATUS.VSU_FLT_MONITOR)XIO(C2T.STATUS.DIV_FLT_MONITOR)XIO(C2T.STATUS.VMU_FLT_MONITOR)OTE(C2T.STATUS.READY);
				RC: "E-stop Monitor";
				N: [XIC(F_MCP_16_CS_E_STOP) ,XIC(F_O3T_17_CS_E_STOP) ,XIC(F_O3T_19_CS1_E_STOP) ,XIC(F_O3T_19_CS2_E_STOP) ,XIC(F_O4T_16_CS_E_STOP) ,XIC(F_O4T_19_CS1_E_STOP) ,XIC(F_O4T_19_CS2_E_STOP) ,AFI() ,AFI() ]OTE(C2T.STATUS.E_STOP_MONITOR);
				RC: "E-stop Alarm Trigger";
				N: [XIC(MCP_16_EPB_ONS) ,XIC(O3T_17_EPB_ONS) ,XIC(O3T_19_EPB1_ONS) ,XIC(O3T_19_EPB2_ONS) ,XIC(O4T_16_EPB_ONS) ,XIC(O4T_21_EPB1_ONS) ,XIC(O4T_21_EPB2_ONS) ,AFI() ,AFI() ][OTE(C2T.STATUS.E_STOP_ALM_TRIG) ,RES(C2T.STATUS.E_STOP_ALM_TMR) ];
				RC: "E-stop Alarm";
				N: [XIC(C2T.STATUS.E_STOP_ALM_TRIG) ,XIC(C2T.STATUS.E_STOP_ALARM) XIC(C2T.STATUS.E_STOP_MONITOR) XIO(C2T.STATUS.E_STOP_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.E_STOP_ALARM) ,TON(C2T.STATUS.E_STOP_ALM_TMR,?,?) ];
				RC: "Motor Safety Disconnect Off Monitor";
				N: [XIC(F_O4T_22_MSD_OFF) ,XIC(F_O4T_21_MSD_OFF) ,XIC(F_O4T_20_MSD_OFF) ,XIC(F_O4T_19_MSD_OFF) ,XIC(F_O4T_18_MSD_OFF) ,XIC(F_O4T_17_MSD_OFF) ,XIC(F_O4T_16_MSD_OFF) ,XIC(F_O3T_20_MSD_OFF) ,XIC(F_O3T_19_MSD_OFF) ,XIC(F_O3T_18_MSD_OFF) ,XIC(F_O3T_17_MSD_OFF) ,XIC(F_CL12T_36_MSD_OFF) ,XIC(F_CL12T_35_MSD_OFF) ,AFI() ]OTE(C2T.STATUS.MSD_OFF_MONITOR);
				RC: "Motor Safety Disconnect Off Alarm Trigger";
				N: [XIC(O4T_22_MTR.MSD_ONS) ,XIC(O4T_21_MTR.MSD_ONS) ,XIC(O4T_20_MTR.MSD_ONS) ,XIC(O4T_19_MTR.MSD_ONS) ,XIC(O4T_18_MTR.MSD_ONS) ,XIC(O4T_17_MTR.MSD_ONS) ,XIC(O3T_21_MTR.MSD_ONS) ,XIC(O3T_20_MTR.MSD_ONS) ,XIC(O3T_19_MTR.MSD_ONS) ,XIC(O3T_18_MTR.MSD_ONS) ,XIC(O3T_17_MTR.MSD_ONS) ,XIC(CL12T_36_MTR.MSD_ONS) ,XIC(CL12T_35_MTR.MSD_ONS) ,AFI() ][OTE(C2T.STATUS.MSD_OFF_ALM_TRIG) ,RES(C2T.STATUS.MSD_OFF_ALM_TMR) ];
				RC: "Motor Safety Disconnect Off Alarm";
				N: [XIC(C2T.STATUS.MSD_OFF_ALM_TRIG) ,XIC(C2T.STATUS.MSD_OFF_ALARM) XIC(C2T.STATUS.MSD_OFF_MONITOR) XIO(C2T.STATUS.MSD_OFF_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.MSD_OFF_ALARM) ,TON(C2T.STATUS.MSD_OFF_ALM_TMR,?,?) ];
				RC: "Motor Overload Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.MOL_MONITOR);
				RC: "Motor Overload Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.MOL_ALM_TRIG) ,RES(C2T.STATUS.MOL_ALM_TMR) ];
				RC: "Motor Overload Alarm";
				N: [XIC(C2T.STATUS.MOL_ALM_TRIG) ,XIC(C2T.STATUS.MOL_ALARM) XIC(C2T.STATUS.MOL_MONITOR) XIO(C2T.STATUS.MOL_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.MOL_ALARM) ,TON(C2T.STATUS.MOL_ALM_TMR,?,?) ];
				RC: "VFD Fault Monitor";
				N: [XIC(F_O4T_22_VFD_FAULT) ,XIC(F_O4T_21_VFD_FAULT) ,XIC(F_O4T_20_VFD_FAULT) ,XIC(F_O4T_19_VFD_FAULT) ,XIC(F_O4T_18_VFD_FAULT) ,XIC(F_O4T_17_VFD_FAULT) ,XIC(F_O4T_16_VFD_FAULT) ,XIC(F_O3T_20_VFD_FAULT) ,XIC(F_O3T_19_VFD_FAULT) ,XIC(F_O3T_18_VFD_FAULT) ,XIC(F_O3T_17_VFD_FAULT) ,XIC(F_CL12T_36_VFD_FAULT) ,XIC(F_CL12T_35_VFD_FAULT) ,AFI() ,AFI() ]OTE(C2T.STATUS.VFD_FLT_MONITOR);
				RC: "VFD Fault Alarm Trigger";
				N: [XIC(O4T_22_VFD.FAULT_ONS) ,XIC(O4T_21_VFD.FAULT_ONS) ,XIC(O4T_20_VFD.FAULT_ONS) ,XIC(O4T_19_VFD.FAULT_ONS) ,XIC(O4T_18_VFD.FAULT_ONS) ,XIC(O4T_17_VFD.FAULT_ONS) ,XIC(O3T_21_VFD.FAULT_ONS) ,XIC(O3T_20_VFD.FAULT_ONS) ,XIC(O3T_19_VFD.FAULT_ONS) ,XIC(O3T_18_VFD.FAULT_ONS) ,XIC(O3T_17_VFD.FAULT_ONS) ,XIC(CL12T_36_VFD.FAULT_ONS) ,XIC(CL12T_35_VFD.FAULT_ONS) ,AFI() ,AFI() ][OTE(C2T.STATUS.VFD_FLT_ALM_TRIG) ,RES(C2T.STATUS.VFD_FLT_ALM_TMR) ];
				RC: "VFD Fault Alarm";
				N: [XIC(C2T.STATUS.VFD_FLT_ALM_TRIG) ,XIC(C2T.STATUS.VFD_FLT_ALARM) XIC(C2T.STATUS.VFD_FLT_MONITOR) XIO(C2T.STATUS.VFD_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.VFD_FLT_ALARM) ,TON(C2T.STATUS.VFD_FLT_ALM_TMR,?,?) ];
				RC: "Contactor Fault Monitor";
				N: [XIC(F_O4T_22_CTCTR_FAULT) ,XIC(F_O4T_21_CTCTR_FAULT) ,XIC(F_O4T_20_CTCTR_FAULT) ,XIC(F_O4T_19_CTCTR_FAULT) ,XIC(F_O4T_18_CTCTR_FAULT) ,XIC(F_O4T_17_CTCTR_FAULT) ,XIC(F_O4T_16_CTCTR_FAULT) ,XIC(F_O3T_20_CTCTR_FAULT) ,XIC(F_O3T_19_CTCTR_FAULT) ,XIC(F_O3T_18_CTCTR_FAULT) ,XIC(F_O3T_17_CTCTR_FAULT) ,XIC(F_CL12T_36_CTCTR_FAULT) ,XIC(F_CL12T_35_CTCTR_FAULT) ,AFI() ,AFI() ]OTE(C2T.STATUS.CTCTR_FLT_MONITOR);
				RC: "Contactor Fault Alarm Trigger";
				N: [XIC(O4T_22_MTR.MS_FLT_ONS) ,XIC(O4T_21_MTR.MS_FLT_ONS) ,XIC(O4T_20_MTR.MS_FLT_ONS) ,XIC(O4T_19_MTR.MS_FLT_ONS) ,XIC(O4T_18_MTR.MS_FLT_ONS) ,XIC(O4T_17_MTR.MS_FLT_ONS) ,XIC(O3T_21_MTR.MS_FLT_ONS) ,XIC(O3T_20_MTR.MS_FLT_ONS) ,XIC(O3T_19_MTR.MS_FLT_ONS) ,XIC(O3T_18_MTR.MS_FLT_ONS) ,XIC(O3T_17_MTR.MS_FLT_ONS) ,XIC(CL12T_36_MTR.MS_FLT_ONS) ,XIC(CL12T_35_MTR.MS_FLT_ONS) ,AFI() ,AFI() ][OTE(C2T.STATUS.CTCTR_FLT_ALM_TRIG) ,RES(C2T.STATUS.CTCTR_FLT_ALM_TMR) ];
				RC: "Contactor Fault Alarm";
				N: [XIC(C2T.STATUS.CTCTR_FLT_ALM_TRIG) ,XIC(C2T.STATUS.CTCTR_FLT_ALARM) XIC(C2T.STATUS.CTCTR_FLT_MONITOR) XIO(C2T.STATUS.CTCTR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.CTCTR_FLT_ALARM) ,TON(C2T.STATUS.CTCTR_FLT_ALM_TMR,?,?) ];
				RC: "Jam Monitor";
				N: [XIC(F_O4T_22_PE_JAMMED) ,XIC(F_O4T_21_PE_JAMMED) ,XIC(F_O4T_20_PE_JAMMED) ,XIC(F_O4T_19_PE_JAMMED) ,XIC(F_O4T_18_PE_JAMMED) ,XIC(F_O4T_17_PE_JAMMED) ,XIC(F_O4T_16_PE_JAMMED) ,XIC(F_O3T_20_PE_JAMMED) ,XIC(F_O3T_19_PE_JAMMED) ,XIC(F_O3T_18_PE_JAMMED) ,XIC(F_O3T_17_PE_JAMMED) ,XIC(F_CL12T_36_PE_JAMMED) ,XIC(F_CL12T_35_PE_JAMMED) ,AFI() ,AFI() ]OTE(C2T.STATUS.JAM_MONITOR);
				RC: "Jam Alarm Trigger";
				N: [XIC(O4T_22_PE.JAM_ONS) ,XIC(O4T_21_PE.JAM_ONS) ,XIC(O4T_20_PE.JAM_ONS) ,XIC(O4T_19_PE.JAM_ONS) ,XIC(O4T_18_PE.JAM_ONS) ,XIC(O4T_17_PE.JAM_ONS) ,XIC(O4T_16_PE.JAM_ONS) ,XIC(O3T_20_PE.JAM_ONS) ,XIC(O3T_19_PE.JAM_ONS) ,XIC(O3T_18_PE.JAM_ONS) ,XIC(O3T_17_PE.JAM_ONS) ,XIC(CL12T_36_PE.JAM_ONS) ,XIC(CL12T_35_PE.JAM_ONS) ,AFI() ,AFI() ][OTE(C2T.STATUS.JAM_ALM_TRIG) ,RES(C2T.STATUS.JAM_ALM_TMR) ];
				RC: "Jam Alarm";
				N: [XIC(C2T.STATUS.JAM_ALM_TRIG) ,XIC(C2T.STATUS.JAM_ALARM) XIC(C2T.STATUS.JAM_MONITOR) XIO(C2T.STATUS.JAM_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.JAM_ALARM) ,TON(C2T.STATUS.JAM_ALM_TMR,?,?) ];
				RC: "Missing Bag Jam Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.MB_JAM_MONITOR);
				RC: "Missing Bag Jam Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.MB_JAM_ALM_TRIG) ,RES(C2T.STATUS.MB_JAM_ALM_TMR) ];
				RC: "Missing Bag Jam Alarm";
				N: [XIC(C2T.STATUS.MB_JAM_ALM_TRIG) ,XIC(C2T.STATUS.MB_JAM_ALARM) XIC(C2T.STATUS.MB_JAM_MONITOR) XIO(C2T.STATUS.MB_JAM_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.MB_JAM_ALARM) ,TON(C2T.STATUS.MB_JAM_ALM_TMR,?,?) ];
				RC: "Door Fault Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.DR_FLT_MONITOR);
				RC: "Door Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.DR_FLT_ALM_TRIG) ,RES(C2T.STATUS.DR_FLT_ALM_TMR) ];
				RC: "Door Fault Alarm";
				N: [XIC(C2T.STATUS.DR_FLT_ALM_TRIG) ,XIC(C2T.STATUS.DR_FLT_ALARM) XIC(C2T.STATUS.DR_FLT_MONITOR) XIO(C2T.STATUS.DR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.DR_FLT_ALARM) ,TON(C2T.STATUS.DR_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Sorter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.VSU_FLT_MONITOR);
				RC: "Vertical Sorter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.VSU_FLT_ALM_TRIG) ,RES(C2T.STATUS.VSU_FLT_ALM_TMR) ];
				RC: "Vertical Sorter Fault Alarm";
				N: [XIC(C2T.STATUS.VSU_FLT_ALM_TRIG) ,XIC(C2T.STATUS.VSU_FLT_ALARM) XIC(C2T.STATUS.VSU_FLT_MONITOR) XIO(C2T.STATUS.VSU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.VSU_FLT_ALARM) ,TON(C2T.STATUS.VSU_FLT_ALM_TMR,?,?) ];
				RC: "Diverter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.DIV_FLT_MONITOR);
				RC: "Diverter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.DIV_FLT_ALM_TRIG) ,RES(C2T.STATUS.DIV_FLT_ALM_TMR) ];
				RC: "Diverter Fault Alarm";
				N: [XIC(C2T.STATUS.DIV_FLT_ALM_TRIG) ,XIC(C2T.STATUS.DIV_FLT_ALARM) XIC(C2T.STATUS.DIV_FLT_MONITOR) XIO(C2T.STATUS.DIV_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.DIV_FLT_ALARM) ,TON(C2T.STATUS.DIV_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Merge Fault Monitor";
				N: [AFI() ,AFI() ]OTE(C2T.STATUS.VMU_FLT_MONITOR);
				RC: "Vertical Merge Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(C2T.STATUS.VMU_FLT_ALM_TRIG) ,RES(C2T.STATUS.VMU_FLT_ALM_TMR) ];
				RC: "Vertical Merge Fault Alarm";
				N: [XIC(C2T.STATUS.VMU_FLT_ALM_TRIG) ,XIC(C2T.STATUS.VMU_FLT_ALARM) XIC(C2T.STATUS.VMU_FLT_MONITOR) XIO(C2T.STATUS.VMU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_16_APB) ][OTE(C2T.STATUS.VMU_FLT_ALARM) ,TON(C2T.STATUS.VMU_FLT_ALM_TMR,?,?) ];
				RC: "STARTUP WARNING";
				N: [XIC(O4T_22_MTR.IM_TMR.TT) ,XIC(O4T_21_MTR.IM_TMR.TT) ,XIC(O4T_20_MTR.IM_TMR.TT) ,XIC(O4T_19_MTR.IM_TMR.TT) ,XIC(O4T_18_MTR.IM_TMR.TT) ,XIC(O4T_17_MTR.IM_TMR.TT) ,XIC(O3T_21_MTR.IM_TMR.TT) ,XIC(O3T_20_MTR.IM_TMR.TT) ,XIC(O3T_19_MTR.IM_TMR.TT) ,XIC(O3T_18_MTR.IM_TMR.TT) ,XIC(O3T_17_MTR.IM_TMR.TT) ,XIC(CL12T_36_MTR.IM_TMR.TT) ,XIC(CL12T_35_MTR.IM_TMR.TT) ,AFI() ,AFI() ]OTE(C2T.STATUS.STARTUP_WARN);
				RC: "Fire Alarm";
				N: XIC(F_MCP_16_FIRE_ALM_FAULT)[OTE(C2T.STATUS.FIRE_ALM) ,OTE(O3T.STATUS.FIRE_ALM) ,OTE(O4T.STATUS.FIRE_ALM) ,OTE(CL12T.STATUS.FIRE_ALM) ,NOP() ];
		END_ROUTINE

		ROUTINE MCP_BM1_DEVICES 
				RC: "****************************************************************************************************$N"
				    "This routine controls devices associated with the MCP.$N"
				    "This routine also sets HMI statuses for the MCP.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station Operators$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(BM1_A.STATUS.READY) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_CS_BM1_MCP_LTG);
				N: [XIC(BM1_A.STATUS.MOL_MONITOR) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_CS_BM1_MCP_LTB);
				N: [XIC(BM1_A.STATUS.JAM_MONITOR) ,XIC(BM1_A.STATUS.MB_JAM_MONITOR) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_CS_BM1_MCP_RPBA);
				N: [XIC(BM1_A.MTR_GRP.RUN_LATCH) ,XIC(BM1_B.MTR_GRP.RUN_LATCH) ,XIC(BM1_C.MTR_GRP.RUN_LATCH) ,AFI() ]OTE(O_CS_MCP_01_HM);
				N: [XIC(I_CS_MCP_BM1_EPB) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_CS_BM1_MCP_EPB);
				RC: "Beacons or Stacklights$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_A.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_A.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_A.STATUS.MOL_MONITOR) ,XIC(BM1_A.STATUS.JAM_MONITOR) ,XIC(BM1_A.STATUS.MB_JAM_MONITOR) ,XIC(BM1_A.STATUS.CTCTR_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_WA_BM1_MCP_LTA);
				N: [XIC(BM1_A.STATUS.E_STOP_MONITOR) XIC(INT.FLASHER_BIT) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_WA_BM1_MCP_LTR);
				N: [[XIC(BM1_A.STATUS.MSD_OFF_ALARM) ,XIC(BM1_A.STATUS.VFD_FLT_MONITOR) ,XIC(BM1_A.STATUS.MOL_ALARM) ,XIC(BM1_A.STATUS.JAM_ALARM) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) ,XIC(BM1_A.STATUS.CTCTR_FLT_MONITOR) ,XIC(BM1_A.STATUS.E_STOP_ALARM) ,XIC(BM1_A.STATUS.DR_FLT_ALARM) ,XIC(BM1_A.STATUS.VSU_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_A.STATUS.STARTUP_WARN) ,XIC(I_CS_MCP_BM1_TPB) ]OTE(O_WA_BM1_MCP_ALM);
				RC: "MCP Inputs$N"
				    "";
				N: AFI()OTE(F_MCP_BM1_FIRE_ALM_FAULT);
				RC: "MCP Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.MCPActive,BM1_A.STATUS.G) ,XIO(BM1_A.MTR_GRP.RUN_LATCH) XIO(BM1_B.MTR_GRP.RUN_LATCH) XIO(BM1_C.MTR_GRP.RUN_LATCH) MOV(Status.MCPTimeOut,BM1_A.STATUS.G) ,XIC(F_MCP_BM1_CS_E_STOP) MOV(Status.MCPEStop,BM1_A.STATUS.G) ,XIC(F_MCP_BM1_FIRE_ALM_FAULT) MOV(Status.MCPFireAlarm,BM1_A.STATUS.G) ,XIC(BM1_A.STATUS.CTCTR_FLT_MONITOR) MOV(Status.MCPCTCTRFlt,BM1_A.STATUS.G) ,XIC(BM1_A.STATUS.MOL_MONITOR) MOV(Status.MCPMTRFlt,BM1_A.STATUS.G) ,AFI() MOV(Status.MCPFuseFlt,BM1_A.STATUS.G) ,[XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ] MOV(Status.MCPCommFault,BM1_A.STATUS.G) ,MOV(BM1_A.STATUS.G,G_MCP_BM1_STS) ];
		END_ROUTINE

		ROUTINE MCP_BM1_MONITOR_ALARMS 
				RC: "****************************************************************************************************$N"
				    "This subroutine monitors the status/faults for the associated motor group such as: Emergency Stops,  Motor Overloads, Jams and Motor Startup.$N"
				    "$N"
				    "The output of this routine is used for controlling the beacons/audible alarms.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Ready";
				N: XIO(BM1_A.STATUS.E_STOP_MONITOR)XIO(BM1_A.STATUS.MSD_OFF_MONITOR)XIO(BM1_A.STATUS.MOL_MONITOR)XIO(BM1_A.STATUS.JAM_MONITOR)XIO(BM1_A.STATUS.MB_JAM_MONITOR)XIO(BM1_A.STATUS.VFD_FLT_MONITOR)XIO(BM1_A.STATUS.CTCTR_FLT_MONITOR)XIO(BM1_A.STATUS.DR_FLT_MONITOR)XIO(BM1_A.STATUS.VSU_FLT_MONITOR)XIO(BM1_A.STATUS.DIV_FLT_MONITOR)XIO(BM1_A.STATUS.VMU_FLT_MONITOR)OTE(BM1_A.STATUS.READY);
				RC: "E-stop Monitor";
				N: [XIC(F_MCP_BM1_CS_E_STOP) ,XIC(F_BM1_01_CS_E_STOP) ,XIC(F_BM1_02_CS_E_STOP) ,XIC(F_BM1_03_CS_E_STOP) ,XIC(F_BM1_06_CS_E_STOP) ,XIC(F_BM1_07_CS_E_STOP) ,XIC(F_BM1_13_CS_E_STOP) ,XIC(F_BM1_14_CS1_E_STOP) ,XIC(F_BM1_14_CS2_E_STOP) ,XIC(F_BM1_15_CS_E_STOP) ,XIC(F_BM1_16_CS1_E_STOP) ,XIC(F_BM1_16_CS2_E_STOP) ,XIC(F_BM1_17_CS1_E_STOP) ,XIC(F_BM1_17_CS2_E_STOP) ,XIC(F_BM1_18_CS_E_STOP) ,XIC(F_BM1_19_CS_E_STOP) ,XIC(F_BM1_20_CS_E_STOP) ,XIC(F_BM1_23_CS1_E_STOP) ,XIC(F_BM1_23_CS2_E_STOP) ,XIC(F_BM1_25_CS_E_STOP) ,XIC(F_BM1_27_CS1_E_STOP) ,XIC(F_BM1_27_CS2_E_STOP) ,XIC(F_BM1_27_CS3_E_STOP) ,XIC(F_BM1_27_CS3_E_STOP1) ,XIC(F_BM1_27_CS5_E_STOP) ,XIC(F_BM1_28_CS1_E_STOP) ,XIC(F_BM1_28_CS2_E_STOP) ,XIC(F_BM1_28_CS3_E_STOP) ,XIC(F_BM1_28_CS4_E_STOP) ,XIC(F_BM1_29_CS1_E_STOP) ,XIC(F_BM1_29_CS2_E_STOP) ,XIC(F_BM1_29_CS3_E_STOP) ,XIC(F_BM1_29_CS4_E_STOP) ,XIC(F_BM1_30_CS1_E_STOP) ,XIC(F_BM1_30_CS2_E_STOP) ,XIC(F_BM1_30_CS3_E_STOP) ,XIC(F_BM1_30_CS2_E_STOP) ,XIC(F_BM1_34_CS_E_STOP) ,XIC(F_BM1_38_CS_E_STOP) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.E_STOP_MONITOR);
				RC: "E-stop Alarm Trigger";
				N: [XIC(MCP_BM1_EPB_ONS) ,XIC(BM1_01_EPB_ONS) ,XIC(BM1_02_EPB_ONS) ,XIC(BM1_03_EPB_ONS) ,XIC(BM1_06_EPB_ONS) ,XIC(BM1_07_EPB_ONS) ,XIC(BM1_13_EPB_ONS) ,XIC(BM1_14_EPB1_ONS) ,XIC(BM1_14_EPB2_ONS) ,XIC(BM1_15_EPB_ONS) ,XIC(BM1_16_EPB1_ONS) ,XIC(BM1_16_EPB2_ONS) ,XIC(BM1_17_EPB1_ONS) ,XIC(BM1_17_EPB2_ONS) ,XIC(BM1_18_EPB_ONS) ,XIC(BM1_19_EPB_ONS) ,XIC(BM1_20_EPB_ONS) ,XIC(BM1_23_EPB_ONS) ,XIC(BM1_23_EPB1_ONS) ,XIC(BM1_25_EPB_ONS) ,XIC(BM1_27_EPB1_ONS) ,XIC(BM1_27_EPB2_ONS) ,XIC(BM1_27_EPB3_ONS) ,XIC(BM1_27_EPB4_ONS) ,XIC(BM1_27_EPB5_ONS) ,XIC(BM1_28_EPB1_ONS) ,XIC(BM1_28_EPB2_ONS) ,XIC(BM1_28_EPB3_ONS) ,XIC(BM1_28_EPB4_ONS) ,XIC(BM1_29_EPB1_ONS) ,XIC(BM1_29_EPB2_ONS) ,XIC(BM1_29_EPB3_ONS) ,XIC(BM1_29_EPB4_ONS) ,XIC(BM1_30_EPB1_ONS) ,XIC(BM1_30_EPB2_ONS) ,XIC(BM1_30_EPB3_ONS) ,XIC(BM1_30_EPB4_ONS) ,XIC(BM1_34_EPB_ONS) ,XIC(BM1_38_EPB_ONS) ,AFI() ,AFI() ][OTE(BM1_A.STATUS.E_STOP_ALM_TRIG) ,RES(BM1_A.STATUS.E_STOP_ALM_TMR) ];
				RC: "E-stop Alarm";
				N: [XIC(BM1_A.STATUS.E_STOP_ALM_TRIG) ,XIC(BM1_A.STATUS.E_STOP_ALARM) XIC(BM1_A.STATUS.E_STOP_MONITOR) XIO(BM1_A.STATUS.E_STOP_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.E_STOP_ALARM) ,TON(BM1_A.STATUS.E_STOP_ALM_TMR,?,?) ];
				RC: "Motor Safety Disconnect Off Monitor";
				N: [XIC(F_BM1_30_MSD_OFF) ,XIC(F_BM1_29_MSD_OFF) ,XIC(F_BM1_28_MSD_OFF) ,XIC(F_BM1_27_MSD_OFF) ,XIC(F_BM1_26_MSD_OFF) ,XIC(F_BM1_25_MSD_OFF) ,XIC(F_BM1_24_MSD_OFF) ,XIC(F_BM1_23_MSD_OFF) ,XIC(F_XO2_01_HSD_IP_DISC_OFF) ,XIC(F_BM1_22_MSD_OFF) ,XIC(F_BM1_21_MSD_OFF) ,XIC(F_BM1_20_MSD_OFF) ,XIC(F_BM1_19_MSD_OFF) ,XIC(F_BM1_18_MSD_OFF) ,XIC(F_BM1_17_MSD_OFF) ,XIC(F_BM1_16_MSD_OFF) ,XIC(F_BM1_15_MSD_OFF) ,XIC(F_BM1_14_MSD_OFF) ,XIC(F_BM1_38_MSD_OFF) ,XIC(F_BM1_37_MSD_OFF) ,XIC(F_BM1_36_MSD_OFF) ,XIC(F_BM1_35_MSD_OFF) ,XIC(F_BM1_34_MSD_OFF) ,XIC(F_BM1_13_MSD_OFF) ,XIC(F_BM1_12_MSD_OFF) ,XIC(F_BM1_11_MSD_OFF) ,XIC(F_BM1_10_MSD_OFF) ,XIC(F_BM1_09_MSD_OFF) ,XIC(F_BM1_08_MSD_OFF) ,XIC(F_BM1_07_MSD_OFF) ,XIC(F_BM1_06_MSD_OFF) ,XIC(F_BM1_05_MSD_OFF) ,XIC(F_BM1_04_MSD_OFF) ,XIC(F_BM1_03_MSD_OFF) ,XIC(F_BM1_02_MSD_OFF) ,XIC(F_BM1_01_MSD_OFF) ,AFI() ]OTE(BM1_A.STATUS.MSD_OFF_MONITOR);
				RC: "Motor Safety Disconnect Off Alarm Trigger";
				N: [XIC(BM1_30_MTR.MSD_ONS) ,XIC(BM1_29_MTR.MSD_ONS) ,XIC(BM1_28_MTR.MSD_ONS) ,XIC(BM1_27_MTR.MSD_ONS) ,XIC(BM1_26_MTR.MSD_ONS) ,XIC(BM1_25_MTR.MSD_ONS) ,XIC(BM1_24_MTR.MSD_ONS) ,XIC(BM1_23_MTR.MSD_ONS) ,XIC(XO2_HSD.IP_DISC_ONS) ,XIC(BM1_22_MTR.MSD_ONS) ,XIC(BM1_21_MTR.MSD_ONS) ,XIC(BM1_20_MTR.MSD_ONS) ,XIC(BM1_19_MTR.MSD_ONS) ,XIC(BM1_18_MTR.MSD_ONS) ,XIC(BM1_17_MTR.MSD_ONS) ,XIC(BM1_16_MTR.MSD_ONS) ,XIC(BM1_15_MTR.MSD_ONS) ,XIC(BM1_14_MTR.MSD_ONS) ,XIC(BM1_38_MTR.MSD_ONS) ,XIC(BM1_37_MTR.MSD_ONS) ,XIC(BM1_36_MTR.MSD_ONS) ,XIC(BM1_35_MTR.MSD_ONS) ,XIC(BM1_34_MTR.MSD_ONS) ,XIC(BM1_13_MTR.MSD_ONS) ,XIC(BM1_12_MTR.MSD_ONS) ,XIC(BM1_11_MTR.MSD_ONS) ,XIC(BM1_10_MTR.MSD_ONS) ,XIC(BM1_09_MTR.MSD_ONS) ,XIC(BM1_08_MTR.MSD_ONS) ,XIC(BM1_07_MTR.MSD_ONS) ,XIC(BM1_06_MTR.MSD_ONS) ,XIC(BM1_05_MTR.MSD_ONS) ,XIC(BM1_04_MTR.MSD_ONS) ,XIC(BM1_03_MTR.MSD_ONS) ,XIC(BM1_02_MTR.MSD_ONS) ,XIC(BM1_01_MTR.MSD_ONS) ,AFI() ][OTE(BM1_A.STATUS.MSD_OFF_ALM_TRIG) ,RES(BM1_A.STATUS.MSD_OFF_ALM_TMR) ];
				RC: "Motor Safety Disconnect Off Alarm";
				N: [XIC(BM1_A.STATUS.MSD_OFF_ALM_TRIG) ,XIC(BM1_A.STATUS.MSD_OFF_ALARM) XIC(BM1_A.STATUS.MSD_OFF_MONITOR) XIO(BM1_A.STATUS.MSD_OFF_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.MSD_OFF_ALARM) ,TON(BM1_A.STATUS.MSD_OFF_ALM_TMR,?,?) ];
				RC: "Motor Overload Monitor";
				N: [XIC(F_BM1_26_MOL) ,XIC(F_BM1_25_MOL) ,XIC(F_BM1_24_MOL) ,XIC(F_BM1_23_MOL) ,XIC(F_BM1_22_MOL) ,XIC(F_BM1_21_MOL) ,XIC(F_BM1_20_MOL) ,XIC(F_BM1_19_MOL) ,XIC(F_BM1_18_MOL) ,XIC(F_BM1_17_MOL) ,XIC(F_BM1_16_MOL) ,XIC(F_BM1_15_MOL) ,XIC(F_BM1_14_MOL) ,XIC(F_BM1_38_MOL) ,XIC(F_BM1_37_MOL) ,XIC(F_BM1_36_MOL) ,XIC(F_BM1_35_MOL) ,XIC(F_BM1_34_MOL) ,XIC(F_BM1_13_MOL) ,XIC(F_BM1_12_MOL) ,XIC(F_BM1_11_MOL) ,XIC(F_BM1_10_MOL) ,XIC(F_BM1_09_MOL) ,XIC(F_BM1_08_MOL) ,XIC(F_BM1_07_MOL) ,XIC(F_BM1_06_MOL) ,XIC(F_BM1_05_MOL) ,XIC(F_BM1_04_MOL) ,XIC(F_BM1_03_MOL) ,XIC(F_BM1_02_MOL) ,XIC(F_BM1_01_MOL) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.MOL_MONITOR);
				RC: "Motor Overload Alarm Trigger";
				N: [XIC(BM1_26_MTR.MOL_ONS) ,XIC(BM1_25_MTR.MOL_ONS) ,XIC(BM1_24_MTR.MOL_ONS) ,XIC(BM1_23_MTR.MOL_ONS) ,XIC(BM1_22_MTR.MOL_ONS) ,XIC(BM1_21_MTR.MOL_ONS) ,XIC(BM1_20_MTR.MOL_ONS) ,XIC(BM1_19_MTR.MOL_ONS) ,XIC(BM1_18_MTR.MOL_ONS) ,XIC(BM1_17_MTR.MOL_ONS) ,XIC(BM1_16_MTR.MOL_ONS) ,XIC(BM1_15_MTR.MOL_ONS) ,XIC(BM1_14_MTR.MOL_ONS) ,XIC(BM1_38_MTR.MOL_ONS) ,XIC(BM1_37_MTR.MOL_ONS) ,XIC(BM1_36_MTR.MOL_ONS) ,XIC(BM1_35_MTR.MOL_ONS) ,XIC(BM1_34_MTR.MOL_ONS) ,XIC(BM1_13_MTR.MOL_ONS) ,XIC(BM1_12_MTR.MOL_ONS) ,XIC(BM1_11_MTR.MOL_ONS) ,XIC(BM1_10_MTR.MOL_ONS) ,XIC(BM1_09_MTR.MOL_ONS) ,XIC(BM1_08_MTR.MOL_ONS) ,XIC(BM1_07_MTR.MOL_ONS) ,XIC(BM1_06_MTR.MOL_ONS) ,XIC(BM1_05_MTR.MOL_ONS) ,XIC(BM1_04_MTR.MOL_ONS) ,XIC(BM1_03_MTR.MOL_ONS) ,XIC(BM1_02_MTR.MOL_ONS) ,XIC(BM1_01_MTR.MOL_ONS) ,AFI() ,AFI() ][OTE(BM1_A.STATUS.MOL_ALM_TRIG) ,RES(BM1_A.STATUS.MOL_ALM_TMR) ];
				RC: "Motor Overload Alarm";
				N: [XIC(BM1_A.STATUS.MOL_ALM_TRIG) ,XIC(BM1_A.STATUS.MOL_ALARM) XIC(BM1_A.STATUS.MOL_MONITOR) XIO(BM1_A.STATUS.MOL_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.MOL_ALARM) ,TON(BM1_A.STATUS.MOL_ALM_TMR,?,?) ];
				RC: "VFD Fault Monitor";
				N: [XIC(F_BM1_30_VFD_FAULT) ,XIC(F_BM1_29_VFD_FAULT) ,XIC(F_BM1_28_VFD_FAULT) ,XIC(F_BM1_27_VFD_FAULT) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.VFD_FLT_MONITOR);
				RC: "VFD Fault Alarm Trigger";
				N: [XIC(BM1_30_VFD.FAULT_ONS) ,XIC(BM1_29_VFD.FAULT_ONS) ,XIC(BM1_28_VFD.FAULT_ONS) ,XIC(BM1_27_VFD.FAULT_ONS) ,AFI() ,AFI() ][OTE(BM1_A.STATUS.VFD_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.VFD_FLT_ALM_TMR) ];
				RC: "VFD Fault Alarm";
				N: [XIC(BM1_A.STATUS.VFD_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.VFD_FLT_ALARM) XIC(BM1_A.STATUS.VFD_FLT_MONITOR) XIO(BM1_A.STATUS.VFD_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.VFD_FLT_ALARM) ,TON(BM1_A.STATUS.VFD_FLT_ALM_TMR,?,?) ];
				RC: "Contactor Fault Monitor";
				N: [XIC(F_BM1_30_CTCTR_FAULT) ,XIC(F_BM1_29_CTCTR_FAULT) ,XIC(F_BM1_28_CTCTR_FAULT) ,XIC(F_BM1_27_CTCTR_FAULT) ,XIC(F_BM1_26_CTCTR_FAULT) ,XIC(F_BM1_25_CTCTR_FAULT) ,XIC(F_BM1_24_CTCTR_FAULT) ,XIC(F_BM1_23_CTCTR_FAULT) ,XIC(F_BM1_22_CTCTR_FAULT) ,XIC(F_BM1_21_CTCTR_FAULT) ,XIC(F_BM1_20_CTCTR_FAULT) ,XIC(F_BM1_19_CTCTR_FAULT) ,XIC(F_BM1_18_CTCTR_FAULT) ,XIC(F_BM1_17_CTCTR_FAULT) ,XIC(F_BM1_16_CTCTR_FAULT) ,XIC(F_BM1_15_CTCTR_FAULT) ,XIC(F_BM1_14_CTCTR_FAULT) ,XIC(F_BM1_38_CTCTR_FAULT) ,XIC(F_BM1_37_CTCTR_FAULT) ,XIC(F_BM1_36_CTCTR_FAULT) ,XIC(F_BM1_35_CTCTR_FAULT) ,XIC(F_BM1_34_CTCTR_FAULT) ,XIC(F_BM1_13_CTCTR_FAULT) ,XIC(F_BM1_12_CTCTR_FAULT) ,XIC(F_BM1_11_CTCTR_FAULT) ,XIC(F_BM1_10_CTCTR_FAULT) ,XIC(F_BM1_09_CTCTR_FAULT) ,XIC(F_BM1_08_CTCTR_FAULT) ,XIC(F_BM1_07_CTCTR_FAULT) ,XIC(F_BM1_06_CTCTR_FAULT) ,XIC(F_BM1_05_CTCTR_FAULT) ,XIC(F_BM1_04_CTCTR_FAULT) ,XIC(F_BM1_03_CTCTR_FAULT) ,XIC(F_BM1_02_CTCTR_FAULT) ,XIC(F_BM1_01_CTCTR_FAULT) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.CTCTR_FLT_MONITOR);
				RC: "Contactor Fault Alarm Trigger";
				N: [XIC(BM1_30_MTR.MS_FLT_ONS) ,XIC(BM1_29_MTR.MS_FLT_ONS) ,XIC(BM1_28_MTR.MS_FLT_ONS) ,XIC(BM1_27_MTR.MS_FLT_ONS) ,XIC(BM1_26_MTR.MS_FLT_ONS) ,XIC(BM1_25_MTR.MS_FLT_ONS) ,XIC(BM1_24_MTR.MS_FLT_ONS) ,XIC(BM1_23_MTR.MS_FLT_ONS) ,XIC(BM1_22_MTR.MS_FLT_ONS) ,XIC(BM1_21_MTR.MS_FLT_ONS) ,XIC(BM1_20_MTR.MS_FLT_ONS) ,XIC(BM1_19_MTR.MS_FLT_ONS) ,XIC(BM1_18_MTR.MS_FLT_ONS) ,XIC(BM1_17_MTR.MS_FLT_ONS) ,XIC(BM1_16_MTR.MS_FLT_ONS) ,XIC(BM1_15_MTR.MS_FLT_ONS) ,XIC(BM1_14_MTR.MS_FLT_ONS) ,XIC(BM1_38_MTR.MS_FLT_ONS) ,XIC(BM1_37_MTR.MS_FLT_ONS) ,XIC(BM1_36_MTR.MS_FLT_ONS) ,XIC(BM1_35_MTR.MS_FLT_ONS) ,XIC(BM1_34_MTR.MS_FLT_ONS) ,XIC(BM1_13_MTR.MS_FLT_ONS) ,XIC(BM1_12_MTR.MS_FLT_ONS) ,XIC(BM1_11_MTR.MS_FLT_ONS) ,XIC(BM1_10_MTR.MS_FLT_ONS) ,XIC(BM1_09_MTR.MS_FLT_ONS) ,XIC(BM1_08_MTR.MS_FLT_ONS) ,XIC(BM1_07_MTR.MS_FLT_ONS) ,XIC(BM1_06_MTR.MS_FLT_ONS) ,XIC(BM1_05_MTR.MS_FLT_ONS) ,XIC(BM1_04_MTR.MS_FLT_ONS) ,XIC(BM1_03_MTR.MS_FLT_ONS) ,XIC(BM1_02_MTR.MS_FLT_ONS) ,XIC(BM1_01_MTR.MS_FLT_ONS) ,AFI() ,AFI() ][OTE(BM1_A.STATUS.CTCTR_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.CTCTR_FLT_ALM_TMR) ];
				RC: "Contactor Fault Alarm";
				N: [XIC(BM1_A.STATUS.CTCTR_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.CTCTR_FLT_ALARM) XIC(BM1_A.STATUS.CTCTR_FLT_MONITOR) XIO(BM1_A.STATUS.CTCTR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.CTCTR_FLT_ALARM) ,TON(BM1_A.STATUS.CTCTR_FLT_ALM_TMR,?,?) ];
				RC: "Jam Monitor";
				N: [XIC(F_BM1_06_PE2_OVERHEIGHT) ,XIC(F_BM1_06_PE1_JAMMED) ,XIC(F_BM1_07_PE_JAMMED) ,XIC(F_BM1_08_PE_JAMMED) ,XIC(F_BM1_09_PE_JAMMED) ,XIC(F_BM1_10_PE_JAMMED) ,XIC(F_BM1_11_PE_JAMMED) ,XIC(F_BM1_12_PE_JAMMED) ,XIC(F_BM1_13_PE_JAMMED) ,XIC(F_BM1_14_PE2_JAMMED) ,XIC(F_BM1_14_PE1_JAMMED) ,XIC(F_BM1_15_PE_JAMMED) ,XIC(F_BM1_16_PE_JAMMED) ,XIC(F_BM1_17_PE_JAMMED) ,XIC(F_BM1_18_PE_JAMMED) ,XIC(F_BM1_19_PE2_OVERHEIGHT) ,XIC(F_BM1_19_PE1_JAMMED) ,XIC(F_BM1_20_PE_JAMMED) ,XIC(F_BM1_21_PE_JAMMED) ,XIC(F_BM1_22_PE_JAMMED) ,XIC(F_BM1_23_PE3_JAMMED) ,XIC(F_BM1_24_PE_JAMMED) ,XIC(F_BM1_25_PE_JAMMED) ,XIC(F_BM1_26_PE_JAMMED) ,XIC(F_BM1_27_PE2_JAMMED) ,XIC(F_BM1_27_PE1_JAMMED) ,XIC(F_BM1_28_PE2_JAMMED) ,XIC(F_BM1_28_PE1_JAMMED) ,XIC(F_BM1_29_PE2_JAMMED) ,XIC(F_BM1_29_PE1_JAMMED) ,XIC(F_BM1_30_PE3_JAMMED) ,XIC(F_BM1_30_PE2_OVERHEIGHT) ,XIC(F_BM1_30_PE1_JAMMED) ,XIC(F_BM1_34_PE_JAMMED) ,XIC(F_BM1_35_PE_JAMMED) ,XIC(F_BM1_36_PE_JAMMED) ,XIC(F_BM1_37_PE_JAMMED) ,XIC(F_BM1_38_PE_JAMMED) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.JAM_MONITOR);
				RC: "Jam Alarm Trigger";
				N: [XIC(BM1_06_PE2.JAM_ONS) ,XIC(BM1_06_PE1.JAM_ONS) ,XIC(BM1_07_PE.JAM_ONS) ,XIC(BM1_08_PE.JAM_ONS) ,XIC(BM1_09_PE.JAM_ONS) ,XIC(BM1_10_PE.JAM_ONS) ,XIC(BM1_11_PE.JAM_ONS) ,XIC(BM1_12_PE.JAM_ONS) ,XIC(BM1_13_PE.JAM_ONS) ,XIC(BM1_14_PE2.JAM_ONS) ,XIC(BM1_14_PE1.JAM_ONS) ,XIC(BM1_15_PE.JAM_ONS) ,XIC(BM1_16_PE.JAM_ONS) ,XIC(BM1_17_PE.JAM_ONS) ,XIC(BM1_18_PE.JAM_ONS) ,XIC(BM1_19_PE2.JAM_ONS) ,XIC(BM1_19_PE1.JAM_ONS) ,XIC(BM1_20_PE.JAM_ONS) ,XIC(BM1_21_PE.JAM_ONS) ,XIC(BM1_22_PE.JAM_ONS) ,XIC(BM1_23_PE2.JAM_ONS) ,XIC(BM1_24_PE.JAM_ONS) ,XIC(BM1_25_PE.JAM_ONS) ,XIC(BM1_26_PE.JAM_ONS) ,XIC(BM1_27_PE2.JAM_ONS) ,XIC(BM1_27_PE1.JAM_ONS) ,XIC(BM1_28_PE2.JAM_ONS) ,XIC(BM1_28_PE1.JAM_ONS) ,XIC(BM1_29_PE2.JAM_ONS) ,XIC(BM1_29_PE1.JAM_ONS) ,XIC(BM1_30_PE3.JAM_ONS) ,XIC(BM1_30_PE2.JAM_ONS) ,XIC(BM1_30_PE1.JAM_ONS) ,XIC(BM1_34_PE.JAM_ONS) ,XIC(BM1_35_PE.JAM_ONS) ,XIC(BM1_36_PE.JAM_ONS) ,XIC(BM1_37_PE.JAM_ONS) ,XIC(BM1_38_PE.JAM_ONS) ,AFI() ,AFI() ][OTE(BM1_A.STATUS.JAM_ALM_TRIG) ,RES(BM1_A.STATUS.JAM_ALM_TMR) ];
				RC: "Jam Alarm";
				N: [XIC(BM1_A.STATUS.JAM_ALM_TRIG) ,XIC(BM1_A.STATUS.JAM_ALARM) XIC(BM1_A.STATUS.JAM_MONITOR) XIO(BM1_A.STATUS.JAM_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.JAM_ALARM) ,TON(BM1_A.STATUS.JAM_ALM_TMR,?,?) ];
				RC: "Missing Bag Jam Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_A.STATUS.MB_JAM_MONITOR);
				RC: "Missing Bag Jam Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_A.STATUS.MB_JAM_ALM_TRIG) ,RES(BM1_A.STATUS.MB_JAM_ALM_TMR) ];
				RC: "Missing Bag Jam Alarm";
				N: [XIC(BM1_A.STATUS.MB_JAM_ALM_TRIG) ,XIC(BM1_A.STATUS.MB_JAM_ALARM) XIC(BM1_A.STATUS.MB_JAM_MONITOR) XIO(BM1_A.STATUS.MB_JAM_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.MB_JAM_ALARM) ,TON(BM1_A.STATUS.MB_JAM_ALM_TMR,?,?) ];
				RC: "Door Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_A.STATUS.DR_FLT_MONITOR);
				RC: "Door Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_A.STATUS.DR_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.DR_FLT_ALM_TMR) ];
				RC: "Door Fault Alarm";
				N: [XIC(BM1_A.STATUS.DR_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.DR_FLT_ALARM) XIC(BM1_A.STATUS.DR_FLT_MONITOR) XIO(BM1_A.STATUS.DR_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.DR_FLT_ALARM) ,TON(BM1_A.STATUS.DR_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Sorter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_A.STATUS.VSU_FLT_MONITOR);
				RC: "Vertical Sorter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_A.STATUS.VSU_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.VSU_FLT_ALM_TMR) ];
				RC: "Vertical Sorter Fault Alarm";
				N: [XIC(BM1_A.STATUS.VSU_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.VSU_FLT_ALARM) XIC(BM1_A.STATUS.VSU_FLT_MONITOR) XIO(BM1_A.STATUS.VSU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.VSU_FLT_ALARM) ,TON(BM1_A.STATUS.VSU_FLT_ALM_TMR,?,?) ];
				RC: "Diverter Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_A.STATUS.DIV_FLT_MONITOR);
				RC: "Diverter Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_A.STATUS.DIV_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.DIV_FLT_ALM_TMR) ];
				RC: "Diverter Fault Alarm";
				N: [XIC(BM1_A.STATUS.DIV_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.DIV_FLT_ALARM) XIC(BM1_A.STATUS.DIV_FLT_MONITOR) XIO(BM1_A.STATUS.DIV_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.DIV_FLT_ALARM) ,TON(BM1_A.STATUS.DIV_FLT_ALM_TMR,?,?) ];
				RC: "Vertical Merge Fault Monitor";
				N: [AFI() ,AFI() ]OTE(BM1_A.STATUS.VMU_FLT_MONITOR);
				RC: "Vertical Merge Fault Alarm Trigger";
				N: [AFI() ,AFI() ][OTE(BM1_A.STATUS.VMU_FLT_ALM_TRIG) ,RES(BM1_A.STATUS.VMU_FLT_ALM_TMR) ];
				RC: "Vertical Merge Fault Alarm";
				N: [XIC(BM1_A.STATUS.VMU_FLT_ALM_TRIG) ,XIC(BM1_A.STATUS.VMU_FLT_ALARM) XIC(BM1_A.STATUS.VMU_FLT_MONITOR) XIO(BM1_A.STATUS.VMU_FLT_ALM_TMR.DN) XIO(I_CS_MCP_BM1_APB) ][OTE(BM1_A.STATUS.VMU_FLT_ALARM) ,TON(BM1_A.STATUS.VMU_FLT_ALM_TMR,?,?) ];
				RC: "STARTUP WARNING";
				N: [XIC(BM1_30_MTR.IM_TMR.TT) ,XIC(BM1_29_MTR.IM_TMR.TT) ,XIC(BM1_28_MTR.IM_TMR.TT) ,XIC(BM1_27_MTR.IM_TMR.TT) ,XIC(BM1_26_MTR.IM_TMR.TT) ,XIC(BM1_25_MTR.IM_TMR.TT) ,XIC(BM1_24_MTR.IM_TMR.TT) ,XIC(BM1_23_MTR.IM_TMR.TT) ,XIC(BM1_22_MTR.IM_TMR.TT) ,XIC(BM1_21_MTR.IM_TMR.TT) ,XIC(BM1_20_MTR.IM_TMR.TT) ,XIC(BM1_19_MTR.IM_TMR.TT) ,XIC(BM1_18_MTR.IM_TMR.TT) ,XIC(BM1_17_MTR.IM_TMR.TT) ,XIC(BM1_16_MTR.IM_TMR.TT) ,XIC(BM1_15_MTR.IM_TMR.TT) ,XIC(BM1_14_MTR.IM_TMR.TT) ,XIC(BM1_38_MTR.IM_TMR.TT) ,XIC(BM1_37_MTR.IM_TMR.TT) ,XIC(BM1_36_MTR.IM_TMR.TT) ,XIC(BM1_35_MTR.IM_TMR.TT) ,XIC(BM1_34_MTR.IM_TMR.TT) ,XIC(BM1_13_MTR.IM_TMR.TT) ,XIC(BM1_12_MTR.IM_TMR.TT) ,XIC(BM1_11_MTR.IM_TMR.TT) ,XIC(BM1_10_MTR.IM_TMR.TT) ,XIC(BM1_09_MTR.IM_TMR.TT) ,XIC(BM1_08_MTR.IM_TMR.TT) ,XIC(BM1_07_MTR.IM_TMR.TT) ,XIC(BM1_06_MTR.IM_TMR.TT) ,XIC(BM1_05_MTR.IM_TMR.TT) ,XIC(BM1_04_MTR.IM_TMR.TT) ,XIC(BM1_03_MTR.IM_TMR.TT) ,XIC(BM1_02_MTR.IM_TMR.TT) ,XIC(BM1_01_MTR.IM_TMR.TT) ,AFI() ,AFI() ]OTE(BM1_A.STATUS.STARTUP_WARN);
				RC: "Fire Alarm";
				N: XIC(F_MCP_BM1_FIRE_ALM_FAULT)[OTE(BM1_A.STATUS.FIRE_ALM) ,OTE(BM1_A.STATUS.FIRE_ALM) ,OTE(BM1_B.STATUS.FIRE_ALM) ,OTE(BM1_C.STATUS.FIRE_ALM) ,NOP() ];
		END_ROUTINE

		ROUTINE O2T_18_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE_BM1_38)OTL(O2T_18_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(BM1_14_BT.BT_PULSE)[OTU(O2T_18_MRG.MainLineBScntrl.EN) ,BSR(O2T_18_MRG.MainLineBS[0],O2T_18_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(O2T_18_MRG.Lead_Gap_Acc.6) ADD(1,O2T_18_MRG.Lead_Gap_Acc,O2T_18_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(O2T_18_MRG.BagPastPE,O2T_18_MRGx.Lead_Gap,O2T_18_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(O2T_18_MRG.MainLineBScntrl.UL)CLR(O2T_18_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(O2T_18_MRG.Lead_Gap_Acc,O2T_18_MRG.Lead_Gap)OTE(O2T_18_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(O2T_18_MRG.MrgSeal)XIC(O2T_18_PE.FILT_NEG_XITN)RES(O2T_18_MRG.SyncRunTmr);
				N: [XIC(O2T_18_MTR.CONV_RUN) ,XIC(O2T_18_MTR.IM_TMR.TT) ]RTO(O2T_18_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_O2T_18) ,XIC(O2T_18_PE.FILT) ,XIC(O2T_18_MRG.PeSeal) XIO(O2T_18_MTR.ANTI_CASC) XIO(O2T_18_MTR.CONV_RUN) XIC(O2T_18_MTR.INTL_MTR) ][XIO(O2T_18_MRG.PeSeal) OTE(O2T_18_MRG.PeSeal_PosXitn) ,OTE(O2T_18_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(O2T_18_MRG.PeSeal_PosXitn)[MOV(O2T_18_MRG.Length,O2T_18_MRG.BagLength_Gap) CLR(O2T_18_MRG.Length) ,MOV(54,O2T_18_MRGx.MinLength) ,EQU(O2T_18_MRG.BagLength_Gap,0) DIV(O2T_18_MRGx.MinLength,O2T_18_BTx.RES,O2T_18_MRG.BagLength_Gap) ,ADD(O2T_18_MRG.BagLength_Gap,O2T_18_MRGx.Trail_Gap,O2T_18_MRG.BagLength_Gap) ,GRT(O2T_18_MRG.BagLength_Gap,O2T_18_MRGx.MaxLength) MOV(O2T_18_MRGx.MaxLength,O2T_18_MRG.BagLength_Gap) ,FLL(0,O2T_18_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[O2T_18_MRG.BagLength_Gap],O2T_18_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[O2T_18_MRG.BagLength_Gap],O2T_18_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[O2T_18_MRG.BagLength_Gap],O2T_18_MRG.MrgLineBS[2]) ,CLR(O2T_18_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(O2T_18_MRG.PeSeal)XIO(O2T_18_MRG.MrgSeal)XIC(O2T_18_BT.BT_PULSE)[OTU(O2T_18_MRG.MrgLineBScntrl.EN) ,BSR(O2T_18_MRG.MrgLineBS[0],O2T_18_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,O2T_18_MRG.BagPastPE,O2T_18_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(O2T_18_MRG.MainLineBS[0],O2T_18_MRG.MrgLineBS[0],O2T_18_MRG.Intrfr[0])AND(O2T_18_MRG.MainLineBS[1],O2T_18_MRG.MrgLineBS[1],O2T_18_MRG.Intrfr[1])AND(O2T_18_MRG.MainLineBS[2],O2T_18_MRG.MrgLineBS[2],O2T_18_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(O2T_18_MRG.Intrfr[0],0)EQU(O2T_18_MRG.Intrfr[1],0)EQU(O2T_18_MRG.Intrfr[2],0)[XIC(O2T_18_MRG.Lead_Gap_DN) ,XIC(O2T_18_MRG.Hold_Align) ][XIO(O2T_18_MRG.MrgOK) OTE(O2T_18_MRG.MrgOK_PosXitn) ,OTE(O2T_18_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(O2T_18_MTR.INTL_MTR) [XIO(O2T_18_MRG.Hold_MB) XIO(O2T_18_MRG.Hold_MA) XIO(O2T_18_MRG.Hold_Align) XIC(O2T_18_MRG.MrgOK) ,XIC(O2T_18_MRG.Hold_MA) XIO(O2T_18_MRG.MrgOK) ,XIC(O2T_18_MRG.MrgOK_PosXitn) ] ,XIC(O2T_18_MRG.MrgSeal) ]XIO(O2T_18_MTR.SPACE)XIC(O2T_18_MRG.PeSeal)[OTE(O2T_18_MRG.MrgSeal) ,OTU(O2T_18_MRG.Hold_MA) ,OTU(O2T_18_MRG.Hold_MB) ,OTU(O2T_18_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(O2T_18_MRG.PeSeal)XIC(BM1_14_MTR.CONV_RUN)RTO(O2T_18_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(O2T_18_MRG.MLPriorityTmr.DN)OTE(O2T_18_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(O2T_18_MRG.PriorityStop)XIC(O2T_18_MTR.CONV_RUN)RTO(O2T_18_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(O2T_18_MRG.MrgSeal)XIO(O2T_18_MRG.PriorityStop)RES(O2T_18_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(O2T_18_MRG.MrgLBagflow.DN)[XIO(O2T_18_MRG.PeSeal) RES(O2T_18_MRG.MLPriorityTmr) ,RES(O2T_18_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(O2T_18_MRG.MrgLPriorityTmr.DN)[RES(O2T_18_MRG.MrgLPriorityTmr) ,RES(O2T_18_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(O2T_17_PE.FILT)TON(O2T_18_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(O2T_17_MTR.CONV_RUN) [XIO(I_PE_O2T_17) ,XIC(O2T_17_PE.FILT) ] ,XIC(O2T_16_MTR.CONV_RUN) [XIO(I_PE_O2T_16) ,XIC(O2T_16_PE.FILT) ] ,XIC(O2T_18_MRG.PeSeal) ,XIC(O2T_18_MTR.IM_ONS) ,XIC(F_O2T_18_OVRIDE) ]RES(O2T_18_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(O2T_18_MTR.CONV_RUN)RTO(O2T_18_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(O2T_18_PE.FILT) XIC(O2T_18_MRG.MrgOK_PosXitn) ,XIC(O2T_18_PE.FILT_POS_XITN) XIC(O2T_18_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(41,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE O2T_18_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(BM1_14_PE2.FILT_NEG_XITN)MOV(0,O2T_18_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(BM1_14_PE2.POS_XITN)[MOV(O2T_18_MRG.HeadHeadAcc,O2T_18_MRG.HeadHeadCnt) ,MOV(O2T_18_MRG.TailHeadAcc,O2T_18_MRG.TailHeadCnt) ,MOV(0,O2T_18_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(BM1_14_BT.BT_PULSE)[ADD(1,O2T_18_MRG.HeadHeadAcc,O2T_18_MRG.HeadHeadAcc) ,ADD(1,O2T_18_MRG.TailHeadAcc,O2T_18_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(BM1_14_PE2.POS_XITN)CPT(O2T_18_MRG.LastBagMrgWndo,O2T_18_MRG.HeadHeadCnt*BM1_14_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(BM1_14_PE2.POS_XITN)CPT(O2T_18_MRG.LastBagGapDist,O2T_18_MRG.TailHeadCnt*BM1_14_BTx.RES);
		END_ROUTINE

		ROUTINE O2T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_05_PE_JAMMED) XIC(I_PE_O2T_05) ,XIC(F_O2T_04_PE_JAMMED) XIC(I_PE_O2T_04) ,XIC(F_O2T_04_CS_E_STOP) XIO(I_CS_O2T_04_EPB) ,AFI() ]OTE(CS_O2T_04_LTA_FLASH);
				N: [[XIC(F_O2T_05_PE_JAMMED) ,XIC(F_O2T_04_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_04_LTA_FLASH) ,XIC(CS_O2T_04_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_04_RPBA);
				N: XIO(EZ_30101.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_04_EPB) ]OTE(O_CS_O2T_04_EPB);
				N: XIC(F_O2T_04_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_04_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_07_PE_JAMMED) XIC(I_PE_O2T_07) ,XIC(F_O2T_06_PE_JAMMED) XIC(I_PE_O2T_06) ,XIC(F_O2T_09_PE_JAMMED) XIC(I_PE_O2T_09) ,XIC(F_O2T_08_PE_JAMMED) XIC(I_PE_O2T_08) ,XIC(F_O2T_05_PE_JAMMED) XIC(I_PE_O2T_05) ,XIC(F_O2T_06_CS_E_STOP) XIO(I_CS_O2T_06_EPB) ,AFI() ]OTE(CS_O2T_06_LTA_FLASH);
				N: [[XIC(F_O2T_07_PE_JAMMED) ,XIC(F_O2T_06_PE_JAMMED) ,XIC(F_O2T_09_PE_JAMMED) ,XIC(F_O2T_08_PE_JAMMED) ,XIC(F_O2T_05_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_06_LTA_FLASH) ,XIC(CS_O2T_06_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_06_RPBA);
				N: XIO(EZ_30101.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_06_EPB) ]OTE(O_CS_O2T_06_EPB);
				N: XIC(F_O2T_06_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_06_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_10_PE_JAMMED) XIC(I_PE_O2T_10) ,XIC(F_O2T_09_PE_JAMMED) XIC(I_PE_O2T_09) ,XIC(F_O2T_08_PE_JAMMED) XIC(I_PE_O2T_08) ,XIC(F_C2T_17_PE_JAMMED) XIC(I_PE_C2T_17) ,XIC(F_O2T_10_CS_E_STOP) XIO(I_CS_O2T_10_EPB) ,AFI() ]OTE(CS_O2T_10_LTA_FLASH);
				N: [[XIC(F_O2T_10_PE_JAMMED) ,XIC(F_O2T_09_PE_JAMMED) ,XIC(F_O2T_08_PE_JAMMED) ,XIC(F_C2T_17_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_10_LTA_FLASH) ,XIC(CS_O2T_10_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_10_RPBA);
				N: XIO(EZ_30101.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_10_EPB) ]OTE(O_CS_O2T_10_EPB);
				N: XIC(F_O2T_10_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_10_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_14_PE_JAMMED) XIC(I_PE_O2T_14) ,XIC(F_O2T_13_PE_JAMMED) XIC(I_PE_O2T_13) ,XIC(F_O2T_12_PE_JAMMED) XIC(I_PE_O2T_12) ,XIC(F_O2T_11_PE_JAMMED) XIC(I_PE_O2T_11) ,XIC(F_O2T_12_CS_E_STOP) XIO(I_CS_O2T_12_EPB) ,AFI() ]OTE(CS_O2T_12_LTA_FLASH);
				N: [[XIC(F_O2T_14_PE_JAMMED) ,XIC(F_O2T_13_PE_JAMMED) ,XIC(F_O2T_12_PE_JAMMED) ,XIC(F_O2T_11_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_12_LTA_FLASH) ,XIC(CS_O2T_12_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_12_RPBA);
				N: XIO(EZ_30103.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_12_EPB) ]OTE(O_CS_O2T_12_EPB);
				N: XIC(F_O2T_12_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_12_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_17_PE_JAMMED) XIC(I_PE_O2T_17) ,XIC(F_O2T_16_PE_JAMMED) XIC(I_PE_O2T_16) ,XIC(F_O2T_15_PE_JAMMED) XIC(I_PE_O2T_15) ,XIC(F_O2T_14_PE_JAMMED) XIC(I_PE_O2T_14) ,XIC(F_O2T_14_CS_E_STOP) XIO(I_CS_O2T_14_EPB) ,AFI() ]OTE(CS_O2T_14_LTA_FLASH);
				N: [[XIC(F_O2T_17_PE_JAMMED) ,XIC(F_O2T_16_PE_JAMMED) ,XIC(F_O2T_15_PE_JAMMED) ,XIC(F_O2T_14_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_14_LTA_FLASH) ,XIC(CS_O2T_14_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_14_RPBA);
				N: XIO(EZ_30103.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_14_EPB) ]OTE(O_CS_O2T_14_EPB);
				N: XIC(F_O2T_14_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_14_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O2T_18_PE_JAMMED) XIC(I_PE_O2T_18) ,XIC(F_O2T_17_PE_JAMMED) XIC(I_PE_O2T_17) ,XIC(F_O2T_16_PE_JAMMED) XIC(I_PE_O2T_16) ,XIC(F_O2T_15_PE_JAMMED) XIC(I_PE_O2T_15) ,XIC(F_O2T_18_CS_E_STOP) XIO(I_CS_O2T_18_EPB) ,AFI() ]OTE(CS_O2T_18_LTA_FLASH);
				N: [[XIC(F_O2T_18_PE_JAMMED) ,XIC(F_O2T_17_PE_JAMMED) ,XIC(F_O2T_16_PE_JAMMED) ,XIC(F_O2T_15_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O2T_18_LTA_FLASH) ,XIC(CS_O2T_18_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O2T_18_RPBA);
				N: XIO(EZ_ZONE_2.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O2T_18_EPB) ]OTE(O_CS_O2T_18_EPB);
				N: XIC(F_O2T_18_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O2T_18_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_B.STATUS.DR_FLT_MONITOR) ,XIC(BM1_B.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_B.STATUS.MOL_MONITOR) ,XIC(BM1_B.STATUS.JAM_MONITOR) ,XIC(BM1_B.STATUS.MB_JAM_MONITOR) ,XIC(BM1_B.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_O2T_06_LTA);
				N: XIC(BM1_B.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_O2T_06_LTR);
				N: [[XIC(BM1_B.STATUS.DR_FLT_ALARM) ,XIC(BM1_B.STATUS.MOL_ALARM) ,XIC(BM1_B.STATUS.JAM_ALARM) ,XIC(BM1_B.STATUS.MB_JAM_ALARM) ,XIC(BM1_B.STATUS.E_STOP_ALARM) ,XIC(BM1_B.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_O2T_06_ALM);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_B.STATUS.DR_FLT_MONITOR) ,XIC(BM1_B.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_B.STATUS.MOL_MONITOR) ,XIC(BM1_B.STATUS.JAM_MONITOR) ,XIC(BM1_B.STATUS.MB_JAM_MONITOR) ,XIC(BM1_B.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_O2T_18_LTA);
				N: XIC(BM1_B.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_O2T_18_LTR);
				N: [[XIC(BM1_B.STATUS.DR_FLT_ALARM) ,XIC(BM1_B.STATUS.MOL_ALARM) ,XIC(BM1_B.STATUS.JAM_ALARM) ,XIC(BM1_B.STATUS.MB_JAM_ALARM) ,XIC(BM1_B.STATUS.E_STOP_ALARM) ,XIC(BM1_B.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_B.STATUS.STARTUP_WARN) ]OTE(O_WA_O2T_18_ALM);
		END_ROUTINE

		ROUTINE O2T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_18_MTR.G) ,XIC(O2T_18_MTR.RUNNING) MOV(Status.ConvRunning,O2T_18_MTR.G) ,XIC(O2T_18_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_18_MTR.G) ,[XIC(O2T_18_MTR.IM_TMR.TT) ,XIO(O2T_18_MTR.AUTO_STOP) XIC(O2T_18_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,O2T_18_MTR.G) ,XIC(O2T_18_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_18_MTR.G) ,XIC(F_O2T_18_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_18_MTR.G) ,XIC(O2T_18_MTR.CASC) MOV(Status.ConvCascade,O2T_18_MTR.G) ,XIC(O2T_18_MTR.CASC) XIO(I_PE_O2T_18) MOV(Status.ConvBagPresCasc,O2T_18_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_18_MTR.G) ,XIC(F_O2T_18_MSD_OFF) MOV(Status.ConvDisc,O2T_18_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_18_MTR.G) ,XIC(O2T_18_MTR.JAMMED) MOV(Status.ConvJammed,O2T_18_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_18_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_18_MTR.G) ,XIC(F_O2T_18_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_18_MTR.G) ,XIC(F_O2T_18_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_18_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_18_MTR.G) ,XIC(F_O2T_18_OVRIDE) MOV(Status.ConvOverRide,O2T_18_MTR.G) ,XIC(O2T_18_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_18_MTR.G) ,XIC(O2T_18_MTR.E_STOP) XIO(O2T_18_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_18_MTR.G) ,XIC(F_O2T_18_OUTSERV) MOV(Status.ConvOutOfServ,O2T_18_MTR.G) ,XIC(O2T_18_MTR.COMM) MOV(Status.ConvCommFault,O2T_18_MTR.G) ,MOV(O2T_18_MTR.G,G_O2T_18_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_17_MTR.G) ,XIC(O2T_17_MTR.RUNNING) MOV(Status.ConvRunning,O2T_17_MTR.G) ,XIC(O2T_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_17_MTR.G) ,[XIC(O2T_17_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_17_MTR.G) ,XIC(O2T_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_17_MTR.G) ,XIC(F_O2T_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_17_MTR.G) ,XIC(O2T_17_MTR.CASC) MOV(Status.ConvCascade,O2T_17_MTR.G) ,XIC(O2T_17_MTR.CASC) XIO(I_PE_O2T_17) MOV(Status.ConvBagPresCasc,O2T_17_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_17_MTR.G) ,XIC(F_O2T_17_MSD_OFF) MOV(Status.ConvDisc,O2T_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_17_MTR.G) ,XIC(O2T_17_MTR.JAMMED) MOV(Status.ConvJammed,O2T_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_17_MTR.G) ,XIC(F_O2T_17_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_17_MTR.G) ,XIC(F_O2T_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_17_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_17_MTR.G) ,XIC(F_O2T_17_OVRIDE) MOV(Status.ConvOverRide,O2T_17_MTR.G) ,XIC(O2T_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_17_MTR.G) ,XIC(O2T_17_MTR.E_STOP) XIO(O2T_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_17_MTR.G) ,XIC(F_O2T_17_OUTSERV) MOV(Status.ConvOutOfServ,O2T_17_MTR.G) ,XIC(O2T_17_MTR.COMM) MOV(Status.ConvCommFault,O2T_17_MTR.G) ,MOV(O2T_17_MTR.G,G_O2T_17_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_16_MTR.G) ,XIC(O2T_16_MTR.RUNNING) MOV(Status.ConvRunning,O2T_16_MTR.G) ,XIC(O2T_16_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_16_MTR.G) ,[XIC(O2T_16_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_16_MTR.G) ,XIC(O2T_16_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_16_MTR.G) ,XIC(F_O2T_16_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_16_MTR.G) ,XIC(O2T_16_MTR.CASC) MOV(Status.ConvCascade,O2T_16_MTR.G) ,XIC(O2T_16_MTR.CASC) XIO(I_PE_O2T_16) MOV(Status.ConvBagPresCasc,O2T_16_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_16_MTR.G) ,XIC(F_O2T_16_MSD_OFF) MOV(Status.ConvDisc,O2T_16_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_16_MTR.G) ,XIC(O2T_16_MTR.JAMMED) MOV(Status.ConvJammed,O2T_16_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_16_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_16_MTR.G) ,XIC(F_O2T_16_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_16_MTR.G) ,XIC(F_O2T_16_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_16_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_16_MTR.G) ,XIC(F_O2T_16_OVRIDE) MOV(Status.ConvOverRide,O2T_16_MTR.G) ,XIC(O2T_16_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_16_MTR.G) ,XIC(O2T_16_MTR.E_STOP) XIO(O2T_16_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_16_MTR.G) ,XIC(F_O2T_16_OUTSERV) MOV(Status.ConvOutOfServ,O2T_16_MTR.G) ,XIC(O2T_16_MTR.COMM) MOV(Status.ConvCommFault,O2T_16_MTR.G) ,MOV(O2T_16_MTR.G,G_O2T_16_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_15_MTR.G) ,XIC(O2T_15_MTR.RUNNING) MOV(Status.ConvRunning,O2T_15_MTR.G) ,XIC(O2T_15_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_15_MTR.G) ,[XIC(O2T_15_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_15_MTR.G) ,XIC(O2T_15_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_15_MTR.G) ,XIC(F_O2T_15_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_15_MTR.G) ,XIC(O2T_15_MTR.CASC) MOV(Status.ConvCascade,O2T_15_MTR.G) ,XIC(O2T_15_MTR.CASC) XIO(I_PE_O2T_15) MOV(Status.ConvBagPresCasc,O2T_15_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_15_MTR.G) ,XIC(F_O2T_15_MSD_OFF) MOV(Status.ConvDisc,O2T_15_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_15_MTR.G) ,XIC(O2T_15_MTR.JAMMED) MOV(Status.ConvJammed,O2T_15_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_15_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_15_MTR.G) ,XIC(F_O2T_15_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_15_MTR.G) ,XIC(F_O2T_15_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_15_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_15_MTR.G) ,XIC(F_O2T_15_OVRIDE) MOV(Status.ConvOverRide,O2T_15_MTR.G) ,XIC(O2T_15_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_15_MTR.G) ,XIC(O2T_15_MTR.E_STOP) XIO(O2T_15_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_15_MTR.G) ,XIC(F_O2T_15_OUTSERV) MOV(Status.ConvOutOfServ,O2T_15_MTR.G) ,XIC(O2T_15_MTR.COMM) MOV(Status.ConvCommFault,O2T_15_MTR.G) ,MOV(O2T_15_MTR.G,G_O2T_15_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_14_MTR.G) ,XIC(O2T_14_MTR.RUNNING) MOV(Status.ConvRunning,O2T_14_MTR.G) ,XIC(O2T_14_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_14_MTR.G) ,[XIC(O2T_14_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_14_MTR.G) ,XIC(O2T_14_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_14_MTR.G) ,XIC(F_O2T_14_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_14_MTR.G) ,XIC(O2T_14_MTR.CASC) MOV(Status.ConvCascade,O2T_14_MTR.G) ,XIC(O2T_14_MTR.CASC) XIO(I_PE_O2T_14) MOV(Status.ConvBagPresCasc,O2T_14_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_14_MTR.G) ,XIC(F_O2T_14_MSD_OFF) MOV(Status.ConvDisc,O2T_14_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_14_MTR.G) ,XIC(O2T_14_MTR.JAMMED) MOV(Status.ConvJammed,O2T_14_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_14_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_14_MTR.G) ,XIC(F_O2T_14_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_14_MTR.G) ,XIC(F_O2T_14_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_14_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_14_MTR.G) ,XIC(F_O2T_14_OVRIDE) MOV(Status.ConvOverRide,O2T_14_MTR.G) ,XIC(O2T_14_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_14_MTR.G) ,XIC(O2T_14_MTR.E_STOP) XIO(O2T_14_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_14_MTR.G) ,XIC(F_O2T_14_OUTSERV) MOV(Status.ConvOutOfServ,O2T_14_MTR.G) ,XIC(O2T_14_MTR.COMM) MOV(Status.ConvCommFault,O2T_14_MTR.G) ,MOV(O2T_14_MTR.G,G_O2T_14_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_13_MTR.G) ,XIC(O2T_13_MTR.RUNNING) MOV(Status.ConvRunning,O2T_13_MTR.G) ,XIC(O2T_13_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_13_MTR.G) ,[XIC(O2T_13_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_13_MTR.G) ,XIC(O2T_13_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_13_MTR.G) ,XIC(F_O2T_13_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_13_MTR.G) ,XIC(O2T_13_MTR.CASC) MOV(Status.ConvCascade,O2T_13_MTR.G) ,XIC(O2T_13_MTR.CASC) XIO(I_PE_O2T_13) MOV(Status.ConvBagPresCasc,O2T_13_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_13_MTR.G) ,XIC(F_O2T_13_MSD_OFF) MOV(Status.ConvDisc,O2T_13_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_13_MTR.G) ,XIC(O2T_13_MTR.JAMMED) MOV(Status.ConvJammed,O2T_13_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_13_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_13_MTR.G) ,XIC(F_O2T_13_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_13_MTR.G) ,XIC(F_O2T_13_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_13_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_13_MTR.G) ,XIC(F_O2T_13_OVRIDE) MOV(Status.ConvOverRide,O2T_13_MTR.G) ,XIC(O2T_13_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_13_MTR.G) ,XIC(O2T_13_MTR.E_STOP) XIO(O2T_13_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_13_MTR.G) ,XIC(F_O2T_13_OUTSERV) MOV(Status.ConvOutOfServ,O2T_13_MTR.G) ,XIC(O2T_13_MTR.COMM) MOV(Status.ConvCommFault,O2T_13_MTR.G) ,MOV(O2T_13_MTR.G,G_O2T_13_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_12_MTR.G) ,XIC(O2T_12_MTR.RUNNING) MOV(Status.ConvRunning,O2T_12_MTR.G) ,XIC(O2T_12_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_12_MTR.G) ,[XIC(O2T_12_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_12_MTR.G) ,XIC(O2T_12_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_12_MTR.G) ,XIC(F_O2T_12_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_12_MTR.G) ,XIC(O2T_12_MTR.CASC) MOV(Status.ConvCascade,O2T_12_MTR.G) ,XIC(O2T_12_MTR.CASC) XIO(I_PE_O2T_12) MOV(Status.ConvBagPresCasc,O2T_12_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_12_MTR.G) ,XIC(F_O2T_12_MSD_OFF) MOV(Status.ConvDisc,O2T_12_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_12_MTR.G) ,XIC(O2T_12_MTR.JAMMED) MOV(Status.ConvJammed,O2T_12_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_12_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_12_MTR.G) ,XIC(F_O2T_12_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_12_MTR.G) ,XIC(F_O2T_12_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_12_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_12_MTR.G) ,XIC(F_O2T_12_OVRIDE) MOV(Status.ConvOverRide,O2T_12_MTR.G) ,XIC(O2T_12_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_12_MTR.G) ,XIC(O2T_12_MTR.E_STOP) XIO(O2T_12_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_12_MTR.G) ,XIC(F_O2T_12_OUTSERV) MOV(Status.ConvOutOfServ,O2T_12_MTR.G) ,XIC(O2T_12_MTR.COMM) MOV(Status.ConvCommFault,O2T_12_MTR.G) ,MOV(O2T_12_MTR.G,G_O2T_12_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_11_MTR.G) ,XIC(O2T_11_MTR.RUNNING) MOV(Status.ConvRunning,O2T_11_MTR.G) ,XIC(O2T_11_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_11_MTR.G) ,[XIC(O2T_11_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_11_MTR.G) ,XIC(O2T_11_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_11_MTR.G) ,XIC(F_O2T_11_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_11_MTR.G) ,XIC(O2T_11_MTR.CASC) MOV(Status.ConvCascade,O2T_11_MTR.G) ,XIC(O2T_11_MTR.CASC) XIO(I_PE_O2T_11) MOV(Status.ConvBagPresCasc,O2T_11_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_11_MTR.G) ,XIC(F_O2T_11_MSD_OFF) MOV(Status.ConvDisc,O2T_11_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_11_MTR.G) ,XIC(O2T_11_MTR.JAMMED) MOV(Status.ConvJammed,O2T_11_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_11_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_11_MTR.G) ,XIC(F_O2T_11_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_11_MTR.G) ,XIC(F_O2T_11_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_11_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_11_MTR.G) ,XIC(F_O2T_11_OVRIDE) MOV(Status.ConvOverRide,O2T_11_MTR.G) ,XIC(O2T_11_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_11_MTR.G) ,XIC(O2T_11_MTR.E_STOP) XIO(O2T_11_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_11_MTR.G) ,XIC(F_O2T_11_OUTSERV) MOV(Status.ConvOutOfServ,O2T_11_MTR.G) ,XIC(O2T_11_MTR.COMM) MOV(Status.ConvCommFault,O2T_11_MTR.G) ,MOV(O2T_11_MTR.G,G_O2T_11_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_10_MTR.G) ,XIC(O2T_10_MTR.RUNNING) MOV(Status.ConvRunning,O2T_10_MTR.G) ,XIC(O2T_10_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_10_MTR.G) ,[XIC(O2T_10_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_10_MTR.G) ,XIC(O2T_10_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_10_MTR.G) ,XIC(F_O2T_10_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_10_MTR.G) ,XIC(O2T_10_MTR.CASC) MOV(Status.ConvCascade,O2T_10_MTR.G) ,XIC(O2T_10_MTR.CASC) XIO(I_PE_O2T_10) MOV(Status.ConvBagPresCasc,O2T_10_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_10_MTR.G) ,XIC(F_O2T_10_MSD_OFF) MOV(Status.ConvDisc,O2T_10_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_10_MTR.G) ,XIC(O2T_10_MTR.JAMMED) MOV(Status.ConvJammed,O2T_10_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_10_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_10_MTR.G) ,XIC(F_O2T_10_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_10_MTR.G) ,XIC(F_O2T_10_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_10_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_10_MTR.G) ,XIC(F_O2T_10_OVRIDE) MOV(Status.ConvOverRide,O2T_10_MTR.G) ,XIC(O2T_10_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_10_MTR.G) ,XIC(O2T_10_MTR.E_STOP) XIO(O2T_10_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_10_MTR.G) ,XIC(F_O2T_10_OUTSERV) MOV(Status.ConvOutOfServ,O2T_10_MTR.G) ,XIC(O2T_10_MTR.COMM) MOV(Status.ConvCommFault,O2T_10_MTR.G) ,MOV(O2T_10_MTR.G,G_O2T_10_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_09_MTR.G) ,XIC(O2T_09_MTR.RUNNING) MOV(Status.ConvRunning,O2T_09_MTR.G) ,XIC(O2T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_09_MTR.G) ,[XIC(O2T_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_09_MTR.G) ,XIC(O2T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_09_MTR.G) ,XIC(F_O2T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_09_MTR.G) ,XIC(O2T_09_MTR.CASC) MOV(Status.ConvCascade,O2T_09_MTR.G) ,XIC(O2T_09_MTR.CASC) XIO(I_PE_O2T_09) MOV(Status.ConvBagPresCasc,O2T_09_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_09_MTR.G) ,XIC(F_O2T_09_MSD_OFF) MOV(Status.ConvDisc,O2T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_09_MTR.G) ,XIC(O2T_09_MTR.JAMMED) MOV(Status.ConvJammed,O2T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_09_MTR.G) ,XIC(F_O2T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_09_MTR.G) ,XIC(F_O2T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_09_MTR.G) ,XIC(F_O2T_09_OVRIDE) MOV(Status.ConvOverRide,O2T_09_MTR.G) ,XIC(O2T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_09_MTR.G) ,XIC(O2T_09_MTR.E_STOP) XIO(O2T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_09_MTR.G) ,XIC(F_O2T_09_OUTSERV) MOV(Status.ConvOutOfServ,O2T_09_MTR.G) ,XIC(O2T_09_MTR.COMM) MOV(Status.ConvCommFault,O2T_09_MTR.G) ,MOV(O2T_09_MTR.G,G_O2T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_08_MTR.G) ,XIC(O2T_08_MTR.RUNNING) MOV(Status.ConvRunning,O2T_08_MTR.G) ,XIC(O2T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_08_MTR.G) ,[XIC(O2T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_08_MTR.G) ,XIC(O2T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_08_MTR.G) ,XIC(F_O2T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_08_MTR.G) ,XIC(O2T_08_MTR.CASC) MOV(Status.ConvCascade,O2T_08_MTR.G) ,XIC(O2T_08_MTR.CASC) XIO(I_PE_O2T_08) MOV(Status.ConvBagPresCasc,O2T_08_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_08_MTR.G) ,XIC(F_O2T_08_MSD_OFF) MOV(Status.ConvDisc,O2T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_08_MTR.G) ,XIC(O2T_08_MTR.JAMMED) MOV(Status.ConvJammed,O2T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_08_MTR.G) ,XIC(F_O2T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_08_MTR.G) ,XIC(F_O2T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_08_MTR.G) ,XIC(F_O2T_08_OVRIDE) MOV(Status.ConvOverRide,O2T_08_MTR.G) ,XIC(O2T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_08_MTR.G) ,XIC(O2T_08_MTR.E_STOP) XIO(O2T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_08_MTR.G) ,XIC(F_O2T_08_OUTSERV) MOV(Status.ConvOutOfServ,O2T_08_MTR.G) ,XIC(O2T_08_MTR.COMM) MOV(Status.ConvCommFault,O2T_08_MTR.G) ,MOV(O2T_08_MTR.G,G_O2T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_07_MTR.G) ,XIC(O2T_07_MTR.RUNNING) MOV(Status.ConvRunning,O2T_07_MTR.G) ,XIC(O2T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_07_MTR.G) ,[XIC(O2T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_07_MTR.G) ,XIC(O2T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_07_MTR.G) ,XIC(F_O2T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_07_MTR.G) ,XIC(O2T_07_MTR.CASC) MOV(Status.ConvCascade,O2T_07_MTR.G) ,XIC(O2T_07_MTR.CASC) XIO(I_PE_O2T_07) MOV(Status.ConvBagPresCasc,O2T_07_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_07_MTR.G) ,XIC(F_O2T_07_MSD_OFF) MOV(Status.ConvDisc,O2T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_07_MTR.G) ,XIC(O2T_07_MTR.JAMMED) MOV(Status.ConvJammed,O2T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_07_MTR.G) ,XIC(F_O2T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_07_MTR.G) ,XIC(F_O2T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_07_MTR.G) ,XIC(F_O2T_07_OVRIDE) MOV(Status.ConvOverRide,O2T_07_MTR.G) ,XIC(O2T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_07_MTR.G) ,XIC(O2T_07_MTR.E_STOP) XIO(O2T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_07_MTR.G) ,XIC(F_O2T_07_OUTSERV) MOV(Status.ConvOutOfServ,O2T_07_MTR.G) ,XIC(O2T_07_MTR.COMM) MOV(Status.ConvCommFault,O2T_07_MTR.G) ,MOV(O2T_07_MTR.G,G_O2T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_06_MTR.G) ,XIC(O2T_06_MTR.RUNNING) MOV(Status.ConvRunning,O2T_06_MTR.G) ,XIC(O2T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_06_MTR.G) ,[XIC(O2T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_06_MTR.G) ,XIC(O2T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_06_MTR.G) ,XIC(F_O2T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_06_MTR.G) ,XIC(O2T_06_MTR.CASC) MOV(Status.ConvCascade,O2T_06_MTR.G) ,XIC(O2T_06_MTR.CASC) XIO(I_PE_O2T_06) MOV(Status.ConvBagPresCasc,O2T_06_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_06_MTR.G) ,XIC(F_O2T_06_MSD_OFF) MOV(Status.ConvDisc,O2T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_06_MTR.G) ,XIC(O2T_06_MTR.JAMMED) MOV(Status.ConvJammed,O2T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_06_MTR.G) ,XIC(F_O2T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_06_MTR.G) ,XIC(F_O2T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_06_MTR.G) ,XIC(F_O2T_06_OVRIDE) MOV(Status.ConvOverRide,O2T_06_MTR.G) ,XIC(O2T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_06_MTR.G) ,XIC(O2T_06_MTR.E_STOP) XIO(O2T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_06_MTR.G) ,XIC(F_O2T_06_OUTSERV) MOV(Status.ConvOutOfServ,O2T_06_MTR.G) ,XIC(O2T_06_MTR.COMM) MOV(Status.ConvCommFault,O2T_06_MTR.G) ,MOV(O2T_06_MTR.G,G_O2T_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_05_MTR.G) ,XIC(O2T_05_MTR.RUNNING) MOV(Status.ConvRunning,O2T_05_MTR.G) ,XIC(O2T_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_05_MTR.G) ,[XIC(O2T_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_05_MTR.G) ,XIC(O2T_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_05_MTR.G) ,XIC(F_O2T_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_05_MTR.G) ,XIC(O2T_05_MTR.CASC) MOV(Status.ConvCascade,O2T_05_MTR.G) ,XIC(O2T_05_MTR.CASC) XIO(I_PE_O2T_05) MOV(Status.ConvBagPresCasc,O2T_05_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_05_MTR.G) ,XIC(F_O2T_05_MSD_OFF) MOV(Status.ConvDisc,O2T_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_05_MTR.G) ,XIC(O2T_05_MTR.JAMMED) MOV(Status.ConvJammed,O2T_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_05_MTR.G) ,XIC(F_O2T_05_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_05_MTR.G) ,XIC(F_O2T_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_05_MTR.G) ,XIC(F_O2T_05_OVRIDE) MOV(Status.ConvOverRide,O2T_05_MTR.G) ,XIC(O2T_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_05_MTR.G) ,XIC(O2T_05_MTR.E_STOP) XIO(O2T_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_05_MTR.G) ,XIC(F_O2T_05_OUTSERV) MOV(Status.ConvOutOfServ,O2T_05_MTR.G) ,XIC(O2T_05_MTR.COMM) MOV(Status.ConvCommFault,O2T_05_MTR.G) ,MOV(O2T_05_MTR.G,G_O2T_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O2T_04_MTR.G) ,XIC(O2T_04_MTR.RUNNING) MOV(Status.ConvRunning,O2T_04_MTR.G) ,XIC(O2T_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O2T_04_MTR.G) ,[XIC(O2T_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O2T_04_MTR.G) ,XIC(O2T_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O2T_04_MTR.G) ,XIC(F_O2T_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O2T_04_MTR.G) ,XIC(O2T_04_MTR.CASC) MOV(Status.ConvCascade,O2T_04_MTR.G) ,XIC(O2T_04_MTR.CASC) XIO(I_PE_O2T_04) MOV(Status.ConvBagPresCasc,O2T_04_MTR.G) ,AFI() MOV(Status.ConvFull,O2T_04_MTR.G) ,XIC(F_O2T_04_MSD_OFF) MOV(Status.ConvDisc,O2T_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O2T_04_MTR.G) ,XIC(O2T_04_MTR.JAMMED) MOV(Status.ConvJammed,O2T_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,O2T_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O2T_04_MTR.G) ,XIC(F_O2T_04_VFD_FAULT) MOV(Status.ConvVFDFlt,O2T_04_MTR.G) ,XIC(F_O2T_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O2T_04_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O2T_04_MTR.G) ,XIC(F_O2T_04_OVRIDE) MOV(Status.ConvOverRide,O2T_04_MTR.G) ,XIC(O2T_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O2T_04_MTR.G) ,XIC(O2T_04_MTR.E_STOP) XIO(O2T_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,O2T_04_MTR.G) ,XIC(F_O2T_04_OUTSERV) MOV(Status.ConvOutOfServ,O2T_04_MTR.G) ,XIC(O2T_04_MTR.COMM) MOV(Status.ConvCommFault,O2T_04_MTR.G) ,MOV(O2T_04_MTR.G,G_O2T_04_STS) ];
		END_ROUTINE

		ROUTINE O2T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_18_MTR.CONV_RUN)RTO(O2T_18_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_18_RPBA) ,XIC(I_CS_BM1_38_RPBA) ] XIC(O2T_18_PE.JAM_TMR.DN) ,XIO(O2T_18_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_18)RES(O2T_18_PE.JAM_TMR);
				N: XIC(O2T_18_PE.JAM_TMR.DN)[XIO(F_O2T_18_PE_JAMMED) [ADD(S_O2T_18_PE_JAM,1,S_O2T_18_PE_JAM) ,OTE(O2T_18_PE.JAM_ONS) ] ,OTE(F_O2T_18_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_17_MTR.CONV_RUN)RTO(O2T_17_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_18_RPBA) ,XIC(I_CS_O2T_14_RPBA) ] XIC(O2T_17_PE.JAM_TMR.DN) ,XIO(O2T_17_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_17)RES(O2T_17_PE.JAM_TMR);
				N: XIC(O2T_17_PE.JAM_TMR.DN)[XIO(F_O2T_17_PE_JAMMED) [ADD(S_O2T_17_PE_JAM,1,S_O2T_17_PE_JAM) ,OTE(O2T_17_PE.JAM_ONS) ] ,OTE(F_O2T_17_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_16_MTR.CONV_RUN)RTO(O2T_16_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_18_RPBA) ,XIC(I_CS_O2T_14_RPBA) ] XIC(O2T_16_PE.JAM_TMR.DN) ,XIO(O2T_16_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_16)RES(O2T_16_PE.JAM_TMR);
				N: XIC(O2T_16_PE.JAM_TMR.DN)[XIO(F_O2T_16_PE_JAMMED) [ADD(S_O2T_16_PE_JAM,1,S_O2T_16_PE_JAM) ,OTE(O2T_16_PE.JAM_ONS) ] ,OTE(F_O2T_16_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_15_MTR.CONV_RUN)RTO(O2T_15_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_18_RPBA) ,XIC(I_CS_O2T_14_RPBA) ] XIC(O2T_15_PE.JAM_TMR.DN) ,XIO(O2T_15_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_15)RES(O2T_15_PE.JAM_TMR);
				N: XIC(O2T_15_PE.JAM_TMR.DN)[XIO(F_O2T_15_PE_JAMMED) [ADD(S_O2T_15_PE_JAM,1,S_O2T_15_PE_JAM) ,OTE(O2T_15_PE.JAM_ONS) ] ,OTE(F_O2T_15_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_14_MTR.CONV_RUN)RTO(O2T_14_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_12_RPBA) ,XIC(I_CS_O2T_14_RPBA) ] XIC(O2T_14_PE.JAM_TMR.DN) ,XIO(O2T_14_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_14)RES(O2T_14_PE.JAM_TMR);
				N: XIC(O2T_14_PE.JAM_TMR.DN)[XIO(F_O2T_14_PE_JAMMED) [ADD(S_O2T_14_PE_JAM,1,S_O2T_14_PE_JAM) ,OTE(O2T_14_PE.JAM_ONS) ] ,OTE(F_O2T_14_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_13_MTR.CONV_RUN)RTO(O2T_13_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_12_RPBA) XIC(O2T_13_PE.JAM_TMR.DN) ,XIO(O2T_13_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_13)RES(O2T_13_PE.JAM_TMR);
				N: XIC(O2T_13_PE.JAM_TMR.DN)[XIO(F_O2T_13_PE_JAMMED) [ADD(S_O2T_13_PE_JAM,1,S_O2T_13_PE_JAM) ,OTE(O2T_13_PE.JAM_ONS) ] ,OTE(F_O2T_13_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_12_MTR.CONV_RUN)RTO(O2T_12_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_12_RPBA) XIC(O2T_12_PE.JAM_TMR.DN) ,XIO(O2T_12_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_12)RES(O2T_12_PE.JAM_TMR);
				N: XIC(O2T_12_PE.JAM_TMR.DN)[XIO(F_O2T_12_PE_JAMMED) [ADD(S_O2T_12_PE_JAM,1,S_O2T_12_PE_JAM) ,OTE(O2T_12_PE.JAM_ONS) ] ,OTE(F_O2T_12_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_11_MTR.CONV_RUN)RTO(O2T_11_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_12_RPBA) XIC(O2T_11_PE.JAM_TMR.DN) ,XIO(O2T_11_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_11)RES(O2T_11_PE.JAM_TMR);
				N: XIC(O2T_11_PE.JAM_TMR.DN)[XIO(F_O2T_11_PE_JAMMED) [ADD(S_O2T_11_PE_JAM,1,S_O2T_11_PE_JAM) ,OTE(O2T_11_PE.JAM_ONS) ] ,OTE(F_O2T_11_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_10_MTR.CONV_RUN)RTO(O2T_10_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_10_RPBA) ,XIC(I_CS_O2T_12_RPBA) ,XIC(I_CS_O2T_06_RPBA) ] XIC(O2T_10_PE.JAM_TMR.DN) ,XIO(O2T_10_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_10)RES(O2T_10_PE.JAM_TMR);
				N: XIC(O2T_10_PE.JAM_TMR.DN)[XIO(F_O2T_10_PE_JAMMED) [ADD(S_O2T_10_PE_JAM,1,S_O2T_10_PE_JAM) ,OTE(O2T_10_PE.JAM_ONS) ] ,OTE(F_O2T_10_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_09_MTR.CONV_RUN)RTO(O2T_09_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_10_RPBA) ,XIC(I_CS_O2T_06_RPBA) ] XIC(O2T_09_PE.JAM_TMR.DN) ,XIO(O2T_09_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_09)RES(O2T_09_PE.JAM_TMR);
				N: XIC(O2T_09_PE.JAM_TMR.DN)[XIO(F_O2T_09_PE_JAMMED) [ADD(S_O2T_09_PE_JAM,1,S_O2T_09_PE_JAM) ,OTE(O2T_09_PE.JAM_ONS) ] ,OTE(F_O2T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_08_MTR.CONV_RUN)RTO(O2T_08_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_10_RPBA) ,XIC(I_CS_O2T_06_RPBA) ] XIC(O2T_08_PE.JAM_TMR.DN) ,XIO(O2T_08_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_08)RES(O2T_08_PE.JAM_TMR);
				N: XIC(O2T_08_PE.JAM_TMR.DN)[XIO(F_O2T_08_PE_JAMMED) [ADD(S_O2T_08_PE_JAM,1,S_O2T_08_PE_JAM) ,OTE(O2T_08_PE.JAM_ONS) ] ,OTE(F_O2T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_07_MTR.CONV_RUN)RTO(O2T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_06_RPBA) XIC(O2T_07_PE.JAM_TMR.DN) ,XIO(O2T_07_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_07)RES(O2T_07_PE.JAM_TMR);
				N: XIC(O2T_07_PE.JAM_TMR.DN)[XIO(F_O2T_07_PE_JAMMED) [ADD(S_O2T_07_PE_JAM,1,S_O2T_07_PE_JAM) ,OTE(O2T_07_PE.JAM_ONS) ] ,OTE(F_O2T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_06_MTR.CONV_RUN)RTO(O2T_06_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_06_RPBA) XIC(O2T_06_PE.JAM_TMR.DN) ,XIO(O2T_06_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_06)RES(O2T_06_PE.JAM_TMR);
				N: XIC(O2T_06_PE.JAM_TMR.DN)[XIO(F_O2T_06_PE_JAMMED) [ADD(S_O2T_06_PE_JAM,1,S_O2T_06_PE_JAM) ,OTE(O2T_06_PE.JAM_ONS) ] ,OTE(F_O2T_06_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_05_MTR.CONV_RUN)RTO(O2T_05_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O2T_04_RPBA) ,XIC(I_CS_O2T_06_RPBA) ] XIC(O2T_05_PE.JAM_TMR.DN) ,XIO(O2T_05_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_05)RES(O2T_05_PE.JAM_TMR);
				N: XIC(O2T_05_PE.JAM_TMR.DN)[XIO(F_O2T_05_PE_JAMMED) [ADD(S_O2T_05_PE_JAM,1,S_O2T_05_PE_JAM) ,OTE(O2T_05_PE.JAM_ONS) ] ,OTE(F_O2T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O2T_04_MTR.CONV_RUN)RTO(O2T_04_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O2T_04_RPBA) XIC(O2T_04_PE.JAM_TMR.DN) ,XIO(O2T_04_PE.JAM_TMR.DN) ]XIC(I_PE_O2T_04)RES(O2T_04_PE.JAM_TMR);
				N: XIC(O2T_04_PE.JAM_TMR.DN)[XIO(F_O2T_04_PE_JAMMED) [ADD(S_O2T_04_PE_JAM,1,S_O2T_04_PE_JAM) ,OTE(O2T_04_PE.JAM_ONS) ] ,OTE(F_O2T_04_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE O2T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_01_SPBG) ,XIC(I_INT_O2T_04_START) ]OTE(MCP_03.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(O2T_18_MTR.INTL_MTR)XIC(O2T_17_MTR.CONV_RUN)XIC(O2T_16_MTR.CONV_RUN)XIC(O2T_15_MTR.CONV_RUN)XIC(O2T_14_MTR.CONV_RUN)XIC(O2T_13_MTR.CONV_RUN)XIC(O2T_12_MTR.CONV_RUN)XIC(O2T_11_MTR.CONV_RUN)XIC(O2T_10_MTR.CONV_RUN)XIC(O2T_09_MTR.CONV_RUN)XIC(O2T_08_MTR.CONV_RUN)XIC(O2T_07_MTR.CONV_RUN)XIC(O2T_06_MTR.CONV_RUN)XIC(O2T_05_MTR.CONV_RUN)XIC(O2T_04_MTR.CONV_RUN)OTE(MCP_03.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_O2T_18) ,XIO(I_PE_O2T_17) ,XIO(I_PE_O2T_16) ,XIO(I_PE_O2T_15) ,XIO(I_PE_O2T_14) ,XIO(I_PE_O2T_13) ,XIO(I_PE_O2T_12) ,XIO(I_PE_O2T_11) ,XIO(I_PE_O2T_10) ,XIO(I_PE_O2T_09) ,XIO(I_PE_O2T_08) ,XIO(I_PE_O2T_07) ,XIO(I_PE_O2T_06) ,XIO(I_PE_O2T_05) ,XIO(I_PE_O2T_04) ]OTE(MCP_03.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(MCP_03.MTR_GRP.START) ,XIC(MCP_03.MTR_GRP.PEs) XIO(MCP_03.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(MCP_03.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(MCP_03.MTR_GRP.RUN_LATCH)XIC(MCP_03.MTR_GRP.PEs)OTE(MCP_03.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(MCP_03.MTR_GRP.RUN_EXPAND)RTO(MCP_03.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(MCP_03.MTR_GRP.START) ,XIC(MCP_03.MTR_GRP.RUN_LATCH) ]XIO(MCP_03.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(MCP_03.STATUS.FIRE_ALM)OTE(MCP_03.MTR_GRP.RUN_LATCH);
				RC: "Motor O2T_18$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_14_MSD_OFF)OTE(O2T_18_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_O2T_18_JRB) TON(O2T_18_MTR.JRB_FILT_TON,?,?) ,XIC(O2T_18_MTR.JRB_FILT_TON.DN) OTE(O2T_18_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(O2T_18_MTR.E_STOP)[XIC(O2T_18_VFD.READY) XIO(O2T_18_MTR.JAMMED) ,XIC(F_O2T_18_OVRIDE) ,XIC(F_O2T_18_JOG_REVERSE) ]XIO(F_O2T_18_MSD_OFF)XIO(F_O2T_18_OUTSERV)XIO(O2T_18_MTR.COMM)OTE(O2T_18_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_18_OVRIDE) ]XIC(O2T_18_MTR.NO_FAULT)TON(O2T_18_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_18_MTR.IM_TMR.DN)[XIO(O2T_18_MTR.INTL_MTR) OTE(O2T_18_MTR.IM_ONS) ,OTE(O2T_18_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_18_PE.FILT_NEG_XITN)RES(O2T_18_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_14_MTR.CONV_RUN)RTO(O2T_18_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_18_PE.POS_XITN) XIC(O2T_18_MTR.INTL_MTR) ,XIC(O2T_18_MTR.T2H_SPACE) ]XIO(O2T_18_MTR.T2H_SPACE_TMR.DN)OTE(O2T_18_MTR.T2H_SPACE);
				N: XIC(O2T_18_MTR.T2H_SPACE)OTE(O2T_18_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_14_MTR.ON_TMR.DN) XIC(O2T_18_MTR.OFF_TMR.DN) ,XIO(BM1_14_MTR.IM_ONS) XIC(O2T_18_MTR.IM_ONS) ,XIC(O2T_18_MTR.ANTI_CASC) XIC(I_PE_O2T_18) ]OTE(O2T_18_MTR.START_EN);
				N: [[XIO(BM1_14_MTR.ON_TMR.DN) ,XIO(O2T_18_MRG.MrgSeal) ] [XIO(I_PE_O2T_18) ,XIC(O2T_18_MRG.PeSeal) ,XIO(O2T_18_MRG.SyncRunTmr.DN) ] ,XIO(O2T_18_MTR.ANTI_CASC) XIC(O2T_18_MTR.SPACE) ]OTE(O2T_18_MTR.STOP);
				N: XIC(O2T_18_MTR.INTL_MTR)XIO(F_O2T_18_JOG_REVERSE)[[XIC(O2T_18_MTR.START_EN) ,XIC(O2T_18_MTR.CONV_RUN) ] XIO(O2T_18_MTR.STOP) ,[XIO(O2T_18_MRG.SyncRunTmr.DN) ,XIC(O2T_18_MRG.MrgSeal) ] XIC(BM1_14_MTR.CONV_RUN) ,XIC(F_O2T_18_OVRIDE) ][OTE(O2T_18_MTR.CONV_RUN) ,XIO(O2T_18_MRG.MergeRunTmr.DN) OTE(O_VFD_O2T_18_FWD) ];
				N: XIC(F_O2T_18_JOG_REVERSE)XIC(O2T_18_MTR.JRB_FILT)XIO(O2T_18_MTR.E_STOP)XIC(O2T_18_VFD.READY)XIO(F_O2T_18_MSD_OFF)XIO(O2T_18_MTR.COMM)XIO(F_O2T_18_OVRIDE)OTE(O_VFD_O2T_18_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_18_MTR.CONV_RUN)TON(O2T_18_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_18_MTR.CONV_RUN)TON(O2T_18_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_18_MSD_OFF)OTE(O2T_17_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_17_MTR.E_STOP)[XIC(O2T_17_VFD.READY) XIO(O2T_17_MTR.JAMMED) ,XIC(F_O2T_17_OVRIDE) ]XIO(F_O2T_17_MSD_OFF)XIO(F_O2T_17_OUTSERV)XIO(O2T_17_MTR.COMM)OTE(O2T_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_17_OVRIDE) ]XIC(O2T_17_MTR.NO_FAULT)TON(O2T_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_17_MTR.IM_TMR.DN)[XIO(O2T_17_MTR.INTL_MTR) OTE(O2T_17_MTR.IM_ONS) ,OTE(O2T_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_17_PE.FILT_NEG_XITN)RES(O2T_17_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_18_MTR.CONV_RUN)RTO(O2T_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_17_PE.POS_XITN) XIC(O2T_17_MTR.INTL_MTR) ,XIC(O2T_17_MTR.T2H_SPACE) ]XIO(O2T_17_MTR.T2H_SPACE_TMR.DN)OTE(O2T_17_MTR.T2H_SPACE);
				N: XIC(O2T_17_MTR.T2H_SPACE)OTE(O2T_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_18_MTR.ON_TMR.DN) XIC(O2T_17_MTR.OFF_TMR.DN) ,XIO(O2T_18_MTR.IM_ONS) XIC(O2T_17_MTR.IM_ONS) ,XIC(O2T_17_MTR.ANTI_CASC) XIC(I_PE_O2T_17) ]OTE(O2T_17_MTR.START_EN);
				N: [XIO(O2T_18_MTR.ON_TMR.DN) XIO(I_PE_O2T_17) ,XIO(O2T_17_MTR.ANTI_CASC) XIC(O2T_17_MTR.SPACE) ]OTE(O2T_17_MTR.STOP);
				N: XIC(O2T_17_MTR.INTL_MTR)[[XIC(O2T_17_MTR.START_EN) ,XIC(O2T_17_MTR.CONV_RUN) ] XIO(O2T_17_MTR.STOP) ,XIC(F_O2T_17_OVRIDE) ][OTE(O2T_17_MTR.CONV_RUN) ,OTE(O_VFD_O2T_17_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_17_MTR.CONV_RUN)TON(O2T_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_17_MTR.CONV_RUN)TON(O2T_17_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_16$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_17_MSD_OFF)OTE(O2T_16_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_16_MTR.E_STOP)[XIC(O2T_16_VFD.READY) XIO(O2T_16_MTR.JAMMED) ,XIC(F_O2T_16_OVRIDE) ]XIO(F_O2T_16_MSD_OFF)XIO(F_O2T_16_OUTSERV)XIO(O2T_16_MTR.COMM)OTE(O2T_16_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_16_OVRIDE) ]XIC(O2T_16_MTR.NO_FAULT)TON(O2T_16_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_16_MTR.IM_TMR.DN)[XIO(O2T_16_MTR.INTL_MTR) OTE(O2T_16_MTR.IM_ONS) ,OTE(O2T_16_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_16_PE.FILT_NEG_XITN)RES(O2T_16_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_17_MTR.CONV_RUN)RTO(O2T_16_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_16_PE.POS_XITN) XIC(O2T_16_MTR.INTL_MTR) ,XIC(O2T_16_MTR.T2H_SPACE) ]XIO(O2T_16_MTR.T2H_SPACE_TMR.DN)OTE(O2T_16_MTR.T2H_SPACE);
				N: XIC(O2T_16_MTR.T2H_SPACE)OTE(O2T_16_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_17_MTR.ON_TMR.DN) XIC(O2T_16_MTR.OFF_TMR.DN) ,XIO(O2T_17_MTR.IM_ONS) XIC(O2T_16_MTR.IM_ONS) ,XIC(O2T_16_MTR.ANTI_CASC) XIC(I_PE_O2T_16) ]OTE(O2T_16_MTR.START_EN);
				N: [XIO(O2T_17_MTR.ON_TMR.DN) XIO(I_PE_O2T_16) ,XIO(O2T_16_MTR.ANTI_CASC) XIC(O2T_16_MTR.SPACE) ]OTE(O2T_16_MTR.STOP);
				N: XIC(O2T_16_MTR.INTL_MTR)[[XIC(O2T_16_MTR.START_EN) ,XIC(O2T_16_MTR.CONV_RUN) ] XIO(O2T_16_MTR.STOP) ,XIC(F_O2T_16_OVRIDE) ][OTE(O2T_16_MTR.CONV_RUN) ,OTE(O_VFD_O2T_16_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_16_MTR.CONV_RUN)TON(O2T_16_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_16_MTR.CONV_RUN)TON(O2T_16_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_15$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_16_MSD_OFF)OTE(O2T_15_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_15_MTR.E_STOP)[XIC(O2T_15_VFD.READY) XIO(O2T_15_MTR.JAMMED) ,XIC(F_O2T_15_OVRIDE) ]XIO(F_O2T_15_MSD_OFF)XIO(F_O2T_15_OUTSERV)XIO(O2T_15_MTR.COMM)OTE(O2T_15_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_15_OVRIDE) ]XIC(O2T_15_MTR.NO_FAULT)TON(O2T_15_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_15_MTR.IM_TMR.DN)[XIO(O2T_15_MTR.INTL_MTR) OTE(O2T_15_MTR.IM_ONS) ,OTE(O2T_15_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_15_PE.FILT_NEG_XITN)RES(O2T_15_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_16_MTR.CONV_RUN)RTO(O2T_15_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_15_PE.POS_XITN) XIC(O2T_15_MTR.INTL_MTR) ,XIC(O2T_15_MTR.T2H_SPACE) ]XIO(O2T_15_MTR.T2H_SPACE_TMR.DN)OTE(O2T_15_MTR.T2H_SPACE);
				N: XIC(O2T_15_MTR.T2H_SPACE)OTE(O2T_15_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_16_MTR.ON_TMR.DN) XIC(O2T_15_MTR.OFF_TMR.DN) ,XIO(O2T_16_MTR.IM_ONS) XIC(O2T_15_MTR.IM_ONS) ,XIC(O2T_15_MTR.ANTI_CASC) XIC(I_PE_O2T_15) ]OTE(O2T_15_MTR.START_EN);
				N: [XIO(O2T_16_MTR.ON_TMR.DN) XIO(I_PE_O2T_15) ,XIO(O2T_15_MTR.ANTI_CASC) XIC(O2T_15_MTR.SPACE) ]OTE(O2T_15_MTR.STOP);
				N: XIC(O2T_15_MTR.INTL_MTR)[[XIC(O2T_15_MTR.START_EN) ,XIC(O2T_15_MTR.CONV_RUN) ] XIO(O2T_15_MTR.STOP) ,XIC(F_O2T_15_OVRIDE) ][OTE(O2T_15_MTR.CONV_RUN) ,OTE(O_VFD_O2T_15_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_15_MTR.CONV_RUN)TON(O2T_15_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_15_MTR.CONV_RUN)TON(O2T_15_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_14$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_15_MSD_OFF)OTE(O2T_14_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_14_MTR.E_STOP)[XIC(O2T_14_VFD.READY) XIO(O2T_14_MTR.JAMMED) ,XIC(F_O2T_14_OVRIDE) ]XIO(F_O2T_14_MSD_OFF)XIO(F_O2T_14_OUTSERV)XIO(O2T_14_MTR.COMM)OTE(O2T_14_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_14_OVRIDE) ]XIC(O2T_14_MTR.NO_FAULT)TON(O2T_14_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_14_MTR.IM_TMR.DN)[XIO(O2T_14_MTR.INTL_MTR) OTE(O2T_14_MTR.IM_ONS) ,OTE(O2T_14_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_14_PE.FILT_NEG_XITN)RES(O2T_14_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_15_MTR.CONV_RUN)RTO(O2T_14_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_14_PE.POS_XITN) XIC(O2T_14_MTR.INTL_MTR) ,XIC(O2T_14_MTR.T2H_SPACE) ]XIO(O2T_14_MTR.T2H_SPACE_TMR.DN)OTE(O2T_14_MTR.T2H_SPACE);
				N: XIC(O2T_14_MTR.T2H_SPACE)OTE(O2T_14_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_15_MTR.ON_TMR.DN) XIC(O2T_14_MTR.OFF_TMR.DN) ,XIO(O2T_15_MTR.IM_ONS) XIC(O2T_14_MTR.IM_ONS) ,XIC(O2T_14_MTR.ANTI_CASC) XIC(I_PE_O2T_14) ]OTE(O2T_14_MTR.START_EN);
				N: [XIO(O2T_15_MTR.ON_TMR.DN) XIO(I_PE_O2T_14) ,XIO(O2T_14_MTR.ANTI_CASC) XIC(O2T_14_MTR.SPACE) ]OTE(O2T_14_MTR.STOP);
				N: XIC(O2T_14_MTR.INTL_MTR)[[XIC(O2T_14_MTR.START_EN) ,XIC(O2T_14_MTR.CONV_RUN) ] XIO(O2T_14_MTR.STOP) ,XIC(F_O2T_14_OVRIDE) ][OTE(O2T_14_MTR.CONV_RUN) ,OTE(O_VFD_O2T_14_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_14_MTR.CONV_RUN)TON(O2T_14_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_14_MTR.CONV_RUN)TON(O2T_14_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_13$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_14_MSD_OFF)OTE(O2T_13_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_13_MTR.E_STOP)[XIC(O2T_13_VFD.READY) XIO(O2T_13_MTR.JAMMED) ,XIC(F_O2T_13_OVRIDE) ]XIO(F_O2T_13_MSD_OFF)XIO(F_O2T_13_OUTSERV)XIO(O2T_13_MTR.COMM)OTE(O2T_13_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_13_OVRIDE) ]XIC(O2T_13_MTR.NO_FAULT)TON(O2T_13_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_13_MTR.IM_TMR.DN)[XIO(O2T_13_MTR.INTL_MTR) OTE(O2T_13_MTR.IM_ONS) ,OTE(O2T_13_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_13_PE.FILT_NEG_XITN)RES(O2T_13_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_14_MTR.CONV_RUN)RTO(O2T_13_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_13_PE.POS_XITN) XIC(O2T_13_MTR.INTL_MTR) ,XIC(O2T_13_MTR.T2H_SPACE) ]XIO(O2T_13_MTR.T2H_SPACE_TMR.DN)OTE(O2T_13_MTR.T2H_SPACE);
				N: XIC(O2T_13_MTR.T2H_SPACE)OTE(O2T_13_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_14_MTR.ON_TMR.DN) XIC(O2T_13_MTR.OFF_TMR.DN) ,XIO(O2T_14_MTR.IM_ONS) XIC(O2T_13_MTR.IM_ONS) ,XIC(O2T_13_MTR.ANTI_CASC) XIC(I_PE_O2T_13) ]OTE(O2T_13_MTR.START_EN);
				N: [XIO(O2T_14_MTR.ON_TMR.DN) XIO(I_PE_O2T_13) ,XIO(O2T_13_MTR.ANTI_CASC) XIC(O2T_13_MTR.SPACE) ]OTE(O2T_13_MTR.STOP);
				N: XIC(O2T_13_MTR.INTL_MTR)[[XIC(O2T_13_MTR.START_EN) ,XIC(O2T_13_MTR.CONV_RUN) ] XIO(O2T_13_MTR.STOP) ,XIC(F_O2T_13_OVRIDE) ][OTE(O2T_13_MTR.CONV_RUN) ,OTE(O_VFD_O2T_13_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_13_MTR.CONV_RUN)TON(O2T_13_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_13_MTR.CONV_RUN)TON(O2T_13_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_12$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_13_MSD_OFF)OTE(O2T_12_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_12_MTR.E_STOP)[XIC(O2T_12_VFD.READY) XIO(O2T_12_MTR.JAMMED) ,XIC(F_O2T_12_OVRIDE) ]XIO(F_O2T_12_MSD_OFF)XIO(F_O2T_12_OUTSERV)XIO(O2T_12_MTR.COMM)OTE(O2T_12_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_12_OVRIDE) ]XIC(O2T_12_MTR.NO_FAULT)TON(O2T_12_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_12_MTR.IM_TMR.DN)[XIO(O2T_12_MTR.INTL_MTR) OTE(O2T_12_MTR.IM_ONS) ,OTE(O2T_12_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_12_PE.FILT_NEG_XITN)RES(O2T_12_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_13_MTR.CONV_RUN)RTO(O2T_12_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_12_PE.POS_XITN) XIC(O2T_12_MTR.INTL_MTR) ,XIC(O2T_12_MTR.T2H_SPACE) ]XIO(O2T_12_MTR.T2H_SPACE_TMR.DN)OTE(O2T_12_MTR.T2H_SPACE);
				N: XIC(O2T_12_MTR.T2H_SPACE)OTE(O2T_12_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_13_MTR.ON_TMR.DN) XIC(O2T_12_MTR.OFF_TMR.DN) ,XIO(O2T_13_MTR.IM_ONS) XIC(O2T_12_MTR.IM_ONS) ,XIC(O2T_12_MTR.ANTI_CASC) XIC(I_PE_O2T_12) ]OTE(O2T_12_MTR.START_EN);
				N: [XIO(O2T_13_MTR.ON_TMR.DN) XIO(I_PE_O2T_12) ,XIO(O2T_12_MTR.ANTI_CASC) XIC(O2T_12_MTR.SPACE) ]OTE(O2T_12_MTR.STOP);
				N: XIC(O2T_12_MTR.INTL_MTR)[[XIC(O2T_12_MTR.START_EN) ,XIC(O2T_12_MTR.CONV_RUN) ] XIO(O2T_12_MTR.STOP) ,XIC(F_O2T_12_OVRIDE) ][OTE(O2T_12_MTR.CONV_RUN) ,OTE(O_VFD_O2T_12_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_12_MTR.CONV_RUN)TON(O2T_12_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_12_MTR.CONV_RUN)TON(O2T_12_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_11$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_12_MSD_OFF)OTE(O2T_11_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_11_MTR.E_STOP)[XIC(O2T_11_VFD.READY) XIO(O2T_11_MTR.JAMMED) ,XIC(F_O2T_11_OVRIDE) ]XIO(F_O2T_11_MSD_OFF)XIO(F_O2T_11_OUTSERV)XIO(O2T_11_MTR.COMM)OTE(O2T_11_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_11_OVRIDE) ]XIC(O2T_11_MTR.NO_FAULT)TON(O2T_11_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_11_MTR.IM_TMR.DN)[XIO(O2T_11_MTR.INTL_MTR) OTE(O2T_11_MTR.IM_ONS) ,OTE(O2T_11_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_11_PE.FILT_NEG_XITN)RES(O2T_11_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_12_MTR.CONV_RUN)RTO(O2T_11_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_11_PE.POS_XITN) XIC(O2T_11_MTR.INTL_MTR) ,XIC(O2T_11_MTR.T2H_SPACE) ]XIO(O2T_11_MTR.T2H_SPACE_TMR.DN)OTE(O2T_11_MTR.T2H_SPACE);
				N: XIC(O2T_11_MTR.T2H_SPACE)OTE(O2T_11_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_12_MTR.ON_TMR.DN) XIC(O2T_11_MTR.OFF_TMR.DN) ,XIO(O2T_12_MTR.IM_ONS) XIC(O2T_11_MTR.IM_ONS) ,XIC(O2T_11_MTR.ANTI_CASC) XIC(I_PE_O2T_11) ]OTE(O2T_11_MTR.START_EN);
				N: [XIO(O2T_12_MTR.ON_TMR.DN) XIO(I_PE_O2T_11) ,XIO(O2T_11_MTR.ANTI_CASC) XIC(O2T_11_MTR.SPACE) ]OTE(O2T_11_MTR.STOP);
				N: XIC(O2T_11_MTR.INTL_MTR)[[XIC(O2T_11_MTR.START_EN) ,XIC(O2T_11_MTR.CONV_RUN) ] XIO(O2T_11_MTR.STOP) ,XIC(F_O2T_11_OVRIDE) ][OTE(O2T_11_MTR.CONV_RUN) ,OTE(O_VFD_O2T_11_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_11_MTR.CONV_RUN)TON(O2T_11_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_11_MTR.CONV_RUN)TON(O2T_11_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_10$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_11_MSD_OFF)OTE(O2T_10_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_10_MTR.E_STOP)[XIC(O2T_10_VFD.READY) XIO(O2T_10_MTR.JAMMED) ,XIC(F_O2T_10_OVRIDE) ]XIO(F_O2T_10_MSD_OFF)XIO(F_O2T_10_OUTSERV)XIO(O2T_10_MTR.COMM)OTE(O2T_10_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_10_OVRIDE) ]XIC(O2T_10_MTR.NO_FAULT)TON(O2T_10_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_10_MTR.IM_TMR.DN)[XIO(O2T_10_MTR.INTL_MTR) OTE(O2T_10_MTR.IM_ONS) ,OTE(O2T_10_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_10_PE.FILT_NEG_XITN)RES(O2T_10_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_11_MTR.CONV_RUN)RTO(O2T_10_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_10_PE.POS_XITN) XIC(O2T_10_MTR.INTL_MTR) ,XIC(O2T_10_MTR.T2H_SPACE) ]XIO(O2T_10_MTR.T2H_SPACE_TMR.DN)OTE(O2T_10_MTR.T2H_SPACE);
				N: XIC(O2T_10_MTR.T2H_SPACE)OTE(O2T_10_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_11_MTR.ON_TMR.DN) XIC(O2T_10_MTR.OFF_TMR.DN) ,XIO(O2T_11_MTR.IM_ONS) XIC(O2T_10_MTR.IM_ONS) ,XIC(O2T_10_MTR.ANTI_CASC) XIC(I_PE_O2T_10) ]OTE(O2T_10_MTR.START_EN);
				N: [XIO(O2T_11_MTR.ON_TMR.DN) XIO(I_PE_O2T_10) ,XIO(O2T_10_MTR.ANTI_CASC) XIC(O2T_10_MTR.SPACE) ]OTE(O2T_10_MTR.STOP);
				N: XIC(O2T_10_MTR.INTL_MTR)[[XIC(O2T_10_MTR.START_EN) ,XIC(O2T_10_MTR.CONV_RUN) ] XIO(O2T_10_MTR.STOP) ,XIC(F_O2T_10_OVRIDE) ][OTE(O2T_10_MTR.CONV_RUN) ,OTE(O_VFD_O2T_10_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_10_MTR.CONV_RUN)TON(O2T_10_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_10_MTR.CONV_RUN)TON(O2T_10_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_10_MSD_OFF)OTE(O2T_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_09_MTR.E_STOP)[XIC(O2T_09_VFD.READY) XIO(O2T_09_MTR.JAMMED) ,XIC(F_O2T_09_OVRIDE) ]XIO(F_O2T_09_MSD_OFF)XIO(F_O2T_09_OUTSERV)XIO(O2T_09_MTR.COMM)OTE(O2T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_09_OVRIDE) ]XIC(O2T_09_MTR.NO_FAULT)TON(O2T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_09_MTR.IM_TMR.DN)[XIO(O2T_09_MTR.INTL_MTR) OTE(O2T_09_MTR.IM_ONS) ,OTE(O2T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_09_PE.FILT_NEG_XITN)RES(O2T_09_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_10_MTR.CONV_RUN)RTO(O2T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_09_PE.POS_XITN) XIC(O2T_09_MTR.INTL_MTR) ,XIC(O2T_09_MTR.T2H_SPACE) ]XIO(O2T_09_MTR.T2H_SPACE_TMR.DN)OTE(O2T_09_MTR.T2H_SPACE);
				N: XIC(O2T_09_MTR.T2H_SPACE)OTE(O2T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_10_MTR.ON_TMR.DN) XIC(O2T_09_MTR.OFF_TMR.DN) ,XIO(O2T_10_MTR.IM_ONS) XIC(O2T_09_MTR.IM_ONS) ,XIC(O2T_09_MTR.ANTI_CASC) XIC(I_PE_O2T_09) ]OTE(O2T_09_MTR.START_EN);
				N: [XIO(O2T_10_MTR.ON_TMR.DN) XIO(I_PE_O2T_09) ,XIO(O2T_09_MTR.ANTI_CASC) XIC(O2T_09_MTR.SPACE) ]OTE(O2T_09_MTR.STOP);
				N: XIC(O2T_09_MTR.INTL_MTR)[[XIC(O2T_09_MTR.START_EN) ,XIC(O2T_09_MTR.CONV_RUN) ] XIO(O2T_09_MTR.STOP) ,XIC(F_O2T_09_OVRIDE) ][OTE(O2T_09_MTR.CONV_RUN) ,OTE(O_VFD_O2T_09_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_09_MTR.CONV_RUN)TON(O2T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_09_MTR.CONV_RUN)TON(O2T_09_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_09_MSD_OFF)OTE(O2T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_08_MTR.E_STOP)[XIC(O2T_08_VFD.READY) XIO(O2T_08_MTR.JAMMED) ,XIC(F_O2T_08_OVRIDE) ]XIO(F_O2T_08_MSD_OFF)XIO(F_O2T_08_OUTSERV)XIO(O2T_08_MTR.COMM)OTE(O2T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_08_OVRIDE) ]XIC(O2T_08_MTR.NO_FAULT)TON(O2T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_08_MTR.IM_TMR.DN)[XIO(O2T_08_MTR.INTL_MTR) OTE(O2T_08_MTR.IM_ONS) ,OTE(O2T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_08_PE.FILT_NEG_XITN)RES(O2T_08_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_09_MTR.CONV_RUN)RTO(O2T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_08_PE.POS_XITN) XIC(O2T_08_MTR.INTL_MTR) ,XIC(O2T_08_MTR.T2H_SPACE) ]XIO(O2T_08_MTR.T2H_SPACE_TMR.DN)OTE(O2T_08_MTR.T2H_SPACE);
				N: XIC(O2T_08_MTR.T2H_SPACE)OTE(O2T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_09_MTR.ON_TMR.DN) XIC(O2T_08_MTR.OFF_TMR.DN) ,XIO(O2T_09_MTR.IM_ONS) XIC(O2T_08_MTR.IM_ONS) ,XIC(O2T_08_MTR.ANTI_CASC) XIC(I_PE_O2T_08) ]OTE(O2T_08_MTR.START_EN);
				N: [XIO(O2T_09_MTR.ON_TMR.DN) XIO(I_PE_O2T_08) ,XIO(O2T_08_MTR.ANTI_CASC) XIC(O2T_08_MTR.SPACE) ]OTE(O2T_08_MTR.STOP);
				N: XIC(O2T_08_MTR.INTL_MTR)[[XIC(O2T_08_MTR.START_EN) ,XIC(O2T_08_MTR.CONV_RUN) ] XIO(O2T_08_MTR.STOP) ,XIC(F_O2T_08_OVRIDE) ][OTE(O2T_08_MTR.CONV_RUN) ,OTE(O_VFD_O2T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_08_MTR.CONV_RUN)TON(O2T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_08_MTR.CONV_RUN)TON(O2T_08_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_08_MSD_OFF)OTE(O2T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_07_MTR.E_STOP)[XIC(O2T_07_VFD.READY) XIO(O2T_07_MTR.JAMMED) ,XIC(F_O2T_07_OVRIDE) ]XIO(F_O2T_07_MSD_OFF)XIO(F_O2T_07_OUTSERV)XIO(O2T_07_MTR.COMM)OTE(O2T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_07_OVRIDE) ]XIC(O2T_07_MTR.NO_FAULT)TON(O2T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_07_MTR.IM_TMR.DN)[XIO(O2T_07_MTR.INTL_MTR) OTE(O2T_07_MTR.IM_ONS) ,OTE(O2T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_07_PE.FILT_NEG_XITN)RES(O2T_07_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_08_MTR.CONV_RUN)RTO(O2T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_07_PE.POS_XITN) XIC(O2T_07_MTR.INTL_MTR) ,XIC(O2T_07_MTR.T2H_SPACE) ]XIO(O2T_07_MTR.T2H_SPACE_TMR.DN)OTE(O2T_07_MTR.T2H_SPACE);
				N: XIC(O2T_07_MTR.T2H_SPACE)OTE(O2T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_08_MTR.ON_TMR.DN) XIC(O2T_07_MTR.OFF_TMR.DN) ,XIO(O2T_08_MTR.IM_ONS) XIC(O2T_07_MTR.IM_ONS) ,XIC(O2T_07_MTR.ANTI_CASC) XIC(I_PE_O2T_07) ]OTE(O2T_07_MTR.START_EN);
				N: [XIO(O2T_08_MTR.ON_TMR.DN) XIO(I_PE_O2T_07) ,XIO(O2T_07_MTR.ANTI_CASC) XIC(O2T_07_MTR.SPACE) ]OTE(O2T_07_MTR.STOP);
				N: XIC(O2T_07_MTR.INTL_MTR)[[XIC(O2T_07_MTR.START_EN) ,XIC(O2T_07_MTR.CONV_RUN) ] XIO(O2T_07_MTR.STOP) ,XIC(F_O2T_07_OVRIDE) ][OTE(O2T_07_MTR.CONV_RUN) ,OTE(O_VFD_O2T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_07_MTR.CONV_RUN)TON(O2T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_07_MTR.CONV_RUN)TON(O2T_07_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_07_MSD_OFF)OTE(O2T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_06_MTR.E_STOP)[XIC(O2T_06_VFD.READY) XIO(O2T_06_MTR.JAMMED) ,XIC(F_O2T_06_OVRIDE) ]XIO(F_O2T_06_MSD_OFF)XIO(F_O2T_06_OUTSERV)XIO(O2T_06_MTR.COMM)OTE(O2T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_06_OVRIDE) ]XIC(O2T_06_MTR.NO_FAULT)TON(O2T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_06_MTR.IM_TMR.DN)[XIO(O2T_06_MTR.INTL_MTR) OTE(O2T_06_MTR.IM_ONS) ,OTE(O2T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_06_PE.FILT_NEG_XITN)RES(O2T_06_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_07_MTR.CONV_RUN)RTO(O2T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_06_PE.POS_XITN) XIC(O2T_06_MTR.INTL_MTR) ,XIC(O2T_06_MTR.T2H_SPACE) ]XIO(O2T_06_MTR.T2H_SPACE_TMR.DN)OTE(O2T_06_MTR.T2H_SPACE);
				N: XIC(O2T_06_MTR.T2H_SPACE)OTE(O2T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_07_MTR.ON_TMR.DN) XIC(O2T_06_MTR.OFF_TMR.DN) ,XIO(O2T_07_MTR.IM_ONS) XIC(O2T_06_MTR.IM_ONS) ,XIC(O2T_06_MTR.ANTI_CASC) XIC(I_PE_O2T_06) ]OTE(O2T_06_MTR.START_EN);
				N: [XIO(O2T_07_MTR.ON_TMR.DN) XIO(I_PE_O2T_06) ,XIO(O2T_06_MTR.ANTI_CASC) XIC(O2T_06_MTR.SPACE) ]OTE(O2T_06_MTR.STOP);
				N: XIC(O2T_06_MTR.INTL_MTR)[[XIC(O2T_06_MTR.START_EN) ,XIC(O2T_06_MTR.CONV_RUN) ] XIO(O2T_06_MTR.STOP) ,XIC(F_O2T_06_OVRIDE) ][OTE(O2T_06_MTR.CONV_RUN) ,OTE(O_VFD_O2T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_06_MTR.CONV_RUN)TON(O2T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_06_MTR.CONV_RUN)TON(O2T_06_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_06_MSD_OFF)OTE(O2T_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_05_MTR.E_STOP)[XIC(O2T_05_VFD.READY) XIO(O2T_05_MTR.JAMMED) ,XIC(F_O2T_05_OVRIDE) ]XIO(F_O2T_05_MSD_OFF)XIO(F_O2T_05_OUTSERV)XIO(O2T_05_MTR.COMM)OTE(O2T_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_05_OVRIDE) ]XIC(O2T_05_MTR.NO_FAULT)TON(O2T_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_05_MTR.IM_TMR.DN)[XIO(O2T_05_MTR.INTL_MTR) OTE(O2T_05_MTR.IM_ONS) ,OTE(O2T_05_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_05_PE.FILT_NEG_XITN)RES(O2T_05_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_06_MTR.CONV_RUN)RTO(O2T_05_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_05_PE.POS_XITN) XIC(O2T_05_MTR.INTL_MTR) ,XIC(O2T_05_MTR.T2H_SPACE) ]XIO(O2T_05_MTR.T2H_SPACE_TMR.DN)OTE(O2T_05_MTR.T2H_SPACE);
				N: XIC(O2T_05_MTR.T2H_SPACE)OTE(O2T_05_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_06_MTR.ON_TMR.DN) XIC(O2T_05_MTR.OFF_TMR.DN) ,XIO(O2T_06_MTR.IM_ONS) XIC(O2T_05_MTR.IM_ONS) ,XIC(O2T_05_MTR.ANTI_CASC) XIC(I_PE_O2T_05) ]OTE(O2T_05_MTR.START_EN);
				N: [XIO(O2T_06_MTR.ON_TMR.DN) XIO(I_PE_O2T_05) ,XIO(O2T_05_MTR.ANTI_CASC) XIC(O2T_05_MTR.SPACE) ]OTE(O2T_05_MTR.STOP);
				N: XIC(O2T_05_MTR.INTL_MTR)[[XIC(O2T_05_MTR.START_EN) ,XIC(O2T_05_MTR.CONV_RUN) ] XIO(O2T_05_MTR.STOP) ,XIC(F_O2T_05_OVRIDE) ][OTE(O2T_05_MTR.CONV_RUN) ,OTE(O_VFD_O2T_05_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_05_MTR.CONV_RUN)TON(O2T_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_05_MTR.CONV_RUN)TON(O2T_05_MTR.OFF_TMR,?,?);
				RC: "Motor O2T_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O2T_05_MSD_OFF)OTE(O2T_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O2T_04_MTR.E_STOP)[XIC(O2T_04_VFD.READY) XIO(O2T_04_MTR.JAMMED) ,XIC(F_O2T_04_OVRIDE) ]XIO(F_O2T_04_MSD_OFF)XIO(F_O2T_04_OUTSERV)XIO(O2T_04_MTR.COMM)OTE(O2T_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(MCP_03.MTR_GRP.RUN_LATCH) ,XIC(F_O2T_04_OVRIDE) ]XIC(O2T_04_MTR.NO_FAULT)TON(O2T_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O2T_04_MTR.IM_TMR.DN)[XIO(O2T_04_MTR.INTL_MTR) OTE(O2T_04_MTR.IM_ONS) ,OTE(O2T_04_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O2T_04_PE.FILT_NEG_XITN)RES(O2T_04_MTR.T2H_SPACE_TMR);
				N: XIC(O2T_05_MTR.CONV_RUN)RTO(O2T_04_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O2T_04_PE.POS_XITN) XIC(O2T_04_MTR.INTL_MTR) ,XIC(O2T_04_MTR.T2H_SPACE) ]XIO(O2T_04_MTR.T2H_SPACE_TMR.DN)OTE(O2T_04_MTR.T2H_SPACE);
				N: XIC(O2T_04_MTR.T2H_SPACE)OTE(O2T_04_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O2T_05_MTR.ON_TMR.DN) XIC(O2T_04_MTR.OFF_TMR.DN) ,XIO(O2T_05_MTR.IM_ONS) XIC(O2T_04_MTR.IM_ONS) ,XIC(O2T_04_MTR.ANTI_CASC) XIC(I_PE_O2T_04) ]OTE(O2T_04_MTR.START_EN);
				N: [XIO(O2T_05_MTR.ON_TMR.DN) XIO(I_PE_O2T_04) ,XIO(O2T_04_MTR.ANTI_CASC) XIC(O2T_04_MTR.SPACE) ]OTE(O2T_04_MTR.STOP);
				N: XIC(O2T_04_MTR.INTL_MTR)[[XIC(O2T_04_MTR.START_EN) ,XIC(O2T_04_MTR.CONV_RUN) ] XIO(O2T_04_MTR.STOP) ,XIC(F_O2T_04_OVRIDE) ][OTE(O2T_04_MTR.CONV_RUN) ,OTE(O_VFD_O2T_04_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O2T_04_MTR.CONV_RUN)TON(O2T_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O2T_04_MTR.CONV_RUN)TON(O2T_04_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE O2T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(O2T_18_MTR.COMM)[[XIO(I_PE_O2T_18) ,XIC(O2T_18_PE.TOF.DN) ] TON(O2T_18_PE.TON,?,?) ,XIO(I_PE_O2T_18) XIC(O2T_18_PE.TON.DN) TOF(O2T_18_PE.TOF,?,?) ,XIC(O2T_18_PE.TOF.DN) OTE(O2T_18_PE.FILT) ];
				N: XIC(O2T_18_PE.FILT)[XIO(O2T_18_PE.FILT_POS_XITN_MEM) OTE(O2T_18_PE.FILT_POS_XITN) ,OTE(O2T_18_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_18_PE.FILT)[XIO(O2T_18_PE.FILT_NEG_XITN_MEM) OTE(O2T_18_PE.FILT_NEG_XITN) ,OTE(O2T_18_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_17_MTR.COMM)[[XIO(I_PE_O2T_17) ,XIC(O2T_17_PE.TOF.DN) ] TON(O2T_17_PE.TON,?,?) ,XIO(I_PE_O2T_17) XIC(O2T_17_PE.TON.DN) TOF(O2T_17_PE.TOF,?,?) ,XIC(O2T_17_PE.TOF.DN) OTE(O2T_17_PE.FILT) ];
				N: XIC(O2T_17_PE.FILT)[XIO(O2T_17_PE.FILT_POS_XITN_MEM) OTE(O2T_17_PE.FILT_POS_XITN) ,OTE(O2T_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_17_PE.FILT)[XIO(O2T_17_PE.FILT_NEG_XITN_MEM) OTE(O2T_17_PE.FILT_NEG_XITN) ,OTE(O2T_17_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_17)[XIO(O2T_17_PE.POS_XITN_MEM) OTE(O2T_17_PE.POS_XITN) ,OTE(O2T_17_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_16_MTR.COMM)[[XIO(I_PE_O2T_16) ,XIC(O2T_16_PE.TOF.DN) ] TON(O2T_16_PE.TON,?,?) ,XIO(I_PE_O2T_16) XIC(O2T_16_PE.TON.DN) TOF(O2T_16_PE.TOF,?,?) ,XIC(O2T_16_PE.TOF.DN) OTE(O2T_16_PE.FILT) ];
				N: XIC(O2T_16_PE.FILT)[XIO(O2T_16_PE.FILT_POS_XITN_MEM) OTE(O2T_16_PE.FILT_POS_XITN) ,OTE(O2T_16_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_16_PE.FILT)[XIO(O2T_16_PE.FILT_NEG_XITN_MEM) OTE(O2T_16_PE.FILT_NEG_XITN) ,OTE(O2T_16_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_16)[XIO(O2T_16_PE.POS_XITN_MEM) OTE(O2T_16_PE.POS_XITN) ,OTE(O2T_16_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_15_MTR.COMM)[[XIO(I_PE_O2T_15) ,XIC(O2T_15_PE.TOF.DN) ] TON(O2T_15_PE.TON,?,?) ,XIO(I_PE_O2T_15) XIC(O2T_15_PE.TON.DN) TOF(O2T_15_PE.TOF,?,?) ,XIC(O2T_15_PE.TOF.DN) OTE(O2T_15_PE.FILT) ];
				N: XIC(O2T_15_PE.FILT)[XIO(O2T_15_PE.FILT_POS_XITN_MEM) OTE(O2T_15_PE.FILT_POS_XITN) ,OTE(O2T_15_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_15_PE.FILT)[XIO(O2T_15_PE.FILT_NEG_XITN_MEM) OTE(O2T_15_PE.FILT_NEG_XITN) ,OTE(O2T_15_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_15)[XIO(O2T_15_PE.POS_XITN_MEM) OTE(O2T_15_PE.POS_XITN) ,OTE(O2T_15_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_14_MTR.COMM)[[XIO(I_PE_O2T_14) ,XIC(O2T_14_PE.TOF.DN) ] TON(O2T_14_PE.TON,?,?) ,XIO(I_PE_O2T_14) XIC(O2T_14_PE.TON.DN) TOF(O2T_14_PE.TOF,?,?) ,XIC(O2T_14_PE.TOF.DN) OTE(O2T_14_PE.FILT) ];
				N: XIC(O2T_14_PE.FILT)[XIO(O2T_14_PE.FILT_POS_XITN_MEM) OTE(O2T_14_PE.FILT_POS_XITN) ,OTE(O2T_14_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_14_PE.FILT)[XIO(O2T_14_PE.FILT_NEG_XITN_MEM) OTE(O2T_14_PE.FILT_NEG_XITN) ,OTE(O2T_14_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_14)[XIO(O2T_14_PE.POS_XITN_MEM) OTE(O2T_14_PE.POS_XITN) ,OTE(O2T_14_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_13_MTR.COMM)[[XIO(I_PE_O2T_13) ,XIC(O2T_13_PE.TOF.DN) ] TON(O2T_13_PE.TON,?,?) ,XIO(I_PE_O2T_13) XIC(O2T_13_PE.TON.DN) TOF(O2T_13_PE.TOF,?,?) ,XIC(O2T_13_PE.TOF.DN) OTE(O2T_13_PE.FILT) ];
				N: XIC(O2T_13_PE.FILT)[XIO(O2T_13_PE.FILT_POS_XITN_MEM) OTE(O2T_13_PE.FILT_POS_XITN) ,OTE(O2T_13_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_13_PE.FILT)[XIO(O2T_13_PE.FILT_NEG_XITN_MEM) OTE(O2T_13_PE.FILT_NEG_XITN) ,OTE(O2T_13_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_13)[XIO(O2T_13_PE.POS_XITN_MEM) OTE(O2T_13_PE.POS_XITN) ,OTE(O2T_13_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_12_MTR.COMM)[[XIO(I_PE_O2T_12) ,XIC(O2T_12_PE.TOF.DN) ] TON(O2T_12_PE.TON,?,?) ,XIO(I_PE_O2T_12) XIC(O2T_12_PE.TON.DN) TOF(O2T_12_PE.TOF,?,?) ,XIC(O2T_12_PE.TOF.DN) OTE(O2T_12_PE.FILT) ];
				N: XIC(O2T_12_PE.FILT)[XIO(O2T_12_PE.FILT_POS_XITN_MEM) OTE(O2T_12_PE.FILT_POS_XITN) ,OTE(O2T_12_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_12_PE.FILT)[XIO(O2T_12_PE.FILT_NEG_XITN_MEM) OTE(O2T_12_PE.FILT_NEG_XITN) ,OTE(O2T_12_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_12)[XIO(O2T_12_PE.POS_XITN_MEM) OTE(O2T_12_PE.POS_XITN) ,OTE(O2T_12_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_11_MTR.COMM)[[XIO(I_PE_O2T_11) ,XIC(O2T_11_PE.TOF.DN) ] TON(O2T_11_PE.TON,?,?) ,XIO(I_PE_O2T_11) XIC(O2T_11_PE.TON.DN) TOF(O2T_11_PE.TOF,?,?) ,XIC(O2T_11_PE.TOF.DN) OTE(O2T_11_PE.FILT) ];
				N: XIC(O2T_11_PE.FILT)[XIO(O2T_11_PE.FILT_POS_XITN_MEM) OTE(O2T_11_PE.FILT_POS_XITN) ,OTE(O2T_11_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_11_PE.FILT)[XIO(O2T_11_PE.FILT_NEG_XITN_MEM) OTE(O2T_11_PE.FILT_NEG_XITN) ,OTE(O2T_11_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_11)[XIO(O2T_11_PE.POS_XITN_MEM) OTE(O2T_11_PE.POS_XITN) ,OTE(O2T_11_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_10_MTR.COMM)[[XIO(I_PE_O2T_10) ,XIC(O2T_10_PE.TOF.DN) ] TON(O2T_10_PE.TON,?,?) ,XIO(I_PE_O2T_10) XIC(O2T_10_PE.TON.DN) TOF(O2T_10_PE.TOF,?,?) ,XIC(O2T_10_PE.TOF.DN) OTE(O2T_10_PE.FILT) ];
				N: XIC(O2T_10_PE.FILT)[XIO(O2T_10_PE.FILT_POS_XITN_MEM) OTE(O2T_10_PE.FILT_POS_XITN) ,OTE(O2T_10_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_10_PE.FILT)[XIO(O2T_10_PE.FILT_NEG_XITN_MEM) OTE(O2T_10_PE.FILT_NEG_XITN) ,OTE(O2T_10_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_10)[XIO(O2T_10_PE.POS_XITN_MEM) OTE(O2T_10_PE.POS_XITN) ,OTE(O2T_10_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_09_MTR.COMM)[[XIO(I_PE_O2T_09) ,XIC(O2T_09_PE.TOF.DN) ] TON(O2T_09_PE.TON,?,?) ,XIO(I_PE_O2T_09) XIC(O2T_09_PE.TON.DN) TOF(O2T_09_PE.TOF,?,?) ,XIC(O2T_09_PE.TOF.DN) OTE(O2T_09_PE.FILT) ];
				N: XIC(O2T_09_PE.FILT)[XIO(O2T_09_PE.FILT_POS_XITN_MEM) OTE(O2T_09_PE.FILT_POS_XITN) ,OTE(O2T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_09_PE.FILT)[XIO(O2T_09_PE.FILT_NEG_XITN_MEM) OTE(O2T_09_PE.FILT_NEG_XITN) ,OTE(O2T_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_09)[XIO(O2T_09_PE.POS_XITN_MEM) OTE(O2T_09_PE.POS_XITN) ,OTE(O2T_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_08_MTR.COMM)[[XIO(I_PE_O2T_08) ,XIC(O2T_08_PE.TOF.DN) ] TON(O2T_08_PE.TON,?,?) ,XIO(I_PE_O2T_08) XIC(O2T_08_PE.TON.DN) TOF(O2T_08_PE.TOF,?,?) ,XIC(O2T_08_PE.TOF.DN) OTE(O2T_08_PE.FILT) ];
				N: XIC(O2T_08_PE.FILT)[XIO(O2T_08_PE.FILT_POS_XITN_MEM) OTE(O2T_08_PE.FILT_POS_XITN) ,OTE(O2T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_08_PE.FILT)[XIO(O2T_08_PE.FILT_NEG_XITN_MEM) OTE(O2T_08_PE.FILT_NEG_XITN) ,OTE(O2T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_08)[XIO(O2T_08_PE.POS_XITN_MEM) OTE(O2T_08_PE.POS_XITN) ,OTE(O2T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_07_MTR.COMM)[[XIO(I_PE_O2T_07) ,XIC(O2T_07_PE.TOF.DN) ] TON(O2T_07_PE.TON,?,?) ,XIO(I_PE_O2T_07) XIC(O2T_07_PE.TON.DN) TOF(O2T_07_PE.TOF,?,?) ,XIC(O2T_07_PE.TOF.DN) OTE(O2T_07_PE.FILT) ];
				N: XIC(O2T_07_PE.FILT)[XIO(O2T_07_PE.FILT_POS_XITN_MEM) OTE(O2T_07_PE.FILT_POS_XITN) ,OTE(O2T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_07_PE.FILT)[XIO(O2T_07_PE.FILT_NEG_XITN_MEM) OTE(O2T_07_PE.FILT_NEG_XITN) ,OTE(O2T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_07)[XIO(O2T_07_PE.POS_XITN_MEM) OTE(O2T_07_PE.POS_XITN) ,OTE(O2T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_06_MTR.COMM)[[XIO(I_PE_O2T_06) ,XIC(O2T_06_PE.TOF.DN) ] TON(O2T_06_PE.TON,?,?) ,XIO(I_PE_O2T_06) XIC(O2T_06_PE.TON.DN) TOF(O2T_06_PE.TOF,?,?) ,XIC(O2T_06_PE.TOF.DN) OTE(O2T_06_PE.FILT) ];
				N: XIC(O2T_06_PE.FILT)[XIO(O2T_06_PE.FILT_POS_XITN_MEM) OTE(O2T_06_PE.FILT_POS_XITN) ,OTE(O2T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_06_PE.FILT)[XIO(O2T_06_PE.FILT_NEG_XITN_MEM) OTE(O2T_06_PE.FILT_NEG_XITN) ,OTE(O2T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_06)[XIO(O2T_06_PE.POS_XITN_MEM) OTE(O2T_06_PE.POS_XITN) ,OTE(O2T_06_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_05_MTR.COMM)[[XIO(I_PE_O2T_05) ,XIC(O2T_05_PE.TOF.DN) ] TON(O2T_05_PE.TON,?,?) ,XIO(I_PE_O2T_05) XIC(O2T_05_PE.TON.DN) TOF(O2T_05_PE.TOF,?,?) ,XIC(O2T_05_PE.TOF.DN) OTE(O2T_05_PE.FILT) ];
				N: XIC(O2T_05_PE.FILT)[XIO(O2T_05_PE.FILT_POS_XITN_MEM) OTE(O2T_05_PE.FILT_POS_XITN) ,OTE(O2T_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_05_PE.FILT)[XIO(O2T_05_PE.FILT_NEG_XITN_MEM) OTE(O2T_05_PE.FILT_NEG_XITN) ,OTE(O2T_05_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_05)[XIO(O2T_05_PE.POS_XITN_MEM) OTE(O2T_05_PE.POS_XITN) ,OTE(O2T_05_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O2T_04_MTR.COMM)[[XIO(I_PE_O2T_04) ,XIC(O2T_04_PE.TOF.DN) ] TON(O2T_04_PE.TON,?,?) ,XIO(I_PE_O2T_04) XIC(O2T_04_PE.TON.DN) TOF(O2T_04_PE.TOF,?,?) ,XIC(O2T_04_PE.TOF.DN) OTE(O2T_04_PE.FILT) ];
				N: XIC(O2T_04_PE.FILT)[XIO(O2T_04_PE.FILT_POS_XITN_MEM) OTE(O2T_04_PE.FILT_POS_XITN) ,OTE(O2T_04_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O2T_04_PE.FILT)[XIO(O2T_04_PE.FILT_NEG_XITN_MEM) OTE(O2T_04_PE.FILT_NEG_XITN) ,OTE(O2T_04_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O2T_04)[XIO(O2T_04_PE.POS_XITN_MEM) OTE(O2T_04_PE.POS_XITN) ,OTE(O2T_04_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE O2T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_18_MTR.COMM);
				N: [XIC(O_VFD_O2T_18_FWD) ,XIC(O_VFD_O2T_18_REV) ]XIC(O2T_18_MTR.CONV_RUN)OTE(O2T_18_MTR.RUNNING);
				N: XIO(I_CS_O2T_18_AUTO)OTE(F_O2T_18_JOG_REVERSE);
				N: XIC(O2T_18_VFD.FAULTED)[XIO(F_O2T_18_VFD_FAULT) OTE(O2T_18_VFD.FAULT_ONS) ,OTE(F_O2T_18_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_18_MOL);
				N: XIO(I_MSD_O2T_18)XIO(O2T_18_MTR.COMM)[XIO(F_O2T_18_MSD_OFF) OTE(O2T_18_MTR.MSD_ONS) ,OTE(F_O2T_18_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_18_CTCTR_FAULT) OTE(O2T_18_MTR.MS_FLT_ONS) ,OTE(F_O2T_18_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(O2T_18_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(O2T_18_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_18_MTR.FIRE_ALM);
				N: XIO(O2T_18_MTR.CONV_RUN)XIC(O2T_18_MTR.INTL_MTR)OTE(O2T_18_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_18_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_18_OVRIDE_REQ)[XIO(F_O2T_18_OVRIDE) OTE(O2T_18_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_18_OVRIDE) ];
				N: XIC(HMI_O2T_18_OUTSERV_REQ)[XIO(F_O2T_18_OUTSERV) OTE(O2T_18_MTR.OOS_ONS) ,OTE(F_O2T_18_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_18_MTR.MB_JAMMED);
				N: [XIC(F_O2T_18_PE_JAMMED) ,XIC(F_O2T_17_PE_JAMMED) ,XIC(O2T_18_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_18_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_17_MTR.COMM);
				N: XIC(O_VFD_O2T_17_FWD)XIC(O2T_17_MTR.CONV_RUN)OTE(O2T_17_MTR.RUNNING);
				N: XIC(O2T_17_VFD.FAULTED)[XIO(F_O2T_17_VFD_FAULT) OTE(O2T_17_VFD.FAULT_ONS) ,OTE(F_O2T_17_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_17_MOL);
				N: XIO(I_MSD_O2T_17)XIO(O2T_17_MTR.COMM)[XIO(F_O2T_17_MSD_OFF) OTE(O2T_17_MTR.MSD_ONS) ,OTE(F_O2T_17_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_17_CTCTR_FAULT) OTE(O2T_17_MTR.MS_FLT_ONS) ,OTE(F_O2T_17_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(O2T_17_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(O2T_17_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_17_MTR.FIRE_ALM);
				N: XIO(O2T_17_MTR.CONV_RUN)XIC(O2T_17_MTR.INTL_MTR)OTE(O2T_17_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_17_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_17_OVRIDE_REQ)[XIO(F_O2T_17_OVRIDE) OTE(O2T_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_17_OVRIDE) ];
				N: XIC(HMI_O2T_17_OUTSERV_REQ)[XIO(F_O2T_17_OUTSERV) OTE(O2T_17_MTR.OOS_ONS) ,OTE(F_O2T_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_17_MTR.MB_JAMMED);
				N: [XIC(F_O2T_17_PE_JAMMED) ,XIC(F_O2T_16_PE_JAMMED) ,XIC(O2T_17_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_17_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_16_MTR.COMM);
				N: XIC(O_VFD_O2T_16_FWD)XIC(O2T_16_MTR.CONV_RUN)OTE(O2T_16_MTR.RUNNING);
				N: XIC(O2T_16_VFD.FAULTED)[XIO(F_O2T_16_VFD_FAULT) OTE(O2T_16_VFD.FAULT_ONS) ,OTE(F_O2T_16_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_16_MOL);
				N: XIO(I_MSD_O2T_16)XIO(O2T_16_MTR.COMM)[XIO(F_O2T_16_MSD_OFF) OTE(O2T_16_MTR.MSD_ONS) ,OTE(F_O2T_16_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_16_CTCTR_FAULT) OTE(O2T_16_MTR.MS_FLT_ONS) ,OTE(F_O2T_16_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_16_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_16_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_16_MTR.FIRE_ALM);
				N: XIO(O2T_16_MTR.CONV_RUN)XIC(O2T_16_MTR.INTL_MTR)OTE(O2T_16_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_16_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_16_OVRIDE_REQ)[XIO(F_O2T_16_OVRIDE) OTE(O2T_16_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_16_OVRIDE) ];
				N: XIC(HMI_O2T_16_OUTSERV_REQ)[XIO(F_O2T_16_OUTSERV) OTE(O2T_16_MTR.OOS_ONS) ,OTE(F_O2T_16_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_16_MTR.MB_JAMMED);
				N: [XIC(F_O2T_16_PE_JAMMED) ,XIC(F_O2T_15_PE_JAMMED) ,XIC(O2T_16_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_16_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_15_MTR.COMM);
				N: XIC(O_VFD_O2T_15_FWD)XIC(O2T_15_MTR.CONV_RUN)OTE(O2T_15_MTR.RUNNING);
				N: XIC(O2T_15_VFD.FAULTED)[XIO(F_O2T_15_VFD_FAULT) OTE(O2T_15_VFD.FAULT_ONS) ,OTE(F_O2T_15_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_15_MOL);
				N: XIO(I_MSD_O2T_15)XIO(O2T_15_MTR.COMM)[XIO(F_O2T_15_MSD_OFF) OTE(O2T_15_MTR.MSD_ONS) ,OTE(F_O2T_15_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_15_CTCTR_FAULT) OTE(O2T_15_MTR.MS_FLT_ONS) ,OTE(F_O2T_15_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_15_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_15_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_15_MTR.FIRE_ALM);
				N: XIO(O2T_15_MTR.CONV_RUN)XIC(O2T_15_MTR.INTL_MTR)OTE(O2T_15_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_15_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_15_OVRIDE_REQ)[XIO(F_O2T_15_OVRIDE) OTE(O2T_15_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_15_OVRIDE) ];
				N: XIC(HMI_O2T_15_OUTSERV_REQ)[XIO(F_O2T_15_OUTSERV) OTE(O2T_15_MTR.OOS_ONS) ,OTE(F_O2T_15_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_15_MTR.MB_JAMMED);
				N: [XIC(F_O2T_15_PE_JAMMED) ,XIC(F_O2T_14_PE_JAMMED) ,XIC(O2T_15_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_15_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_14_MTR.COMM);
				N: XIC(O_VFD_O2T_14_FWD)XIC(O2T_14_MTR.CONV_RUN)OTE(O2T_14_MTR.RUNNING);
				N: XIC(O2T_14_VFD.FAULTED)[XIO(F_O2T_14_VFD_FAULT) OTE(O2T_14_VFD.FAULT_ONS) ,OTE(F_O2T_14_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_14_MOL);
				N: XIO(I_MSD_O2T_14)XIO(O2T_14_MTR.COMM)[XIO(F_O2T_14_MSD_OFF) OTE(O2T_14_MTR.MSD_ONS) ,OTE(F_O2T_14_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_14_CTCTR_FAULT) OTE(O2T_14_MTR.MS_FLT_ONS) ,OTE(F_O2T_14_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_14_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_14_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_14_MTR.FIRE_ALM);
				N: XIO(O2T_14_MTR.CONV_RUN)XIC(O2T_14_MTR.INTL_MTR)OTE(O2T_14_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_14_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_14_OVRIDE_REQ)[XIO(F_O2T_14_OVRIDE) OTE(O2T_14_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_14_OVRIDE) ];
				N: XIC(HMI_O2T_14_OUTSERV_REQ)[XIO(F_O2T_14_OUTSERV) OTE(O2T_14_MTR.OOS_ONS) ,OTE(F_O2T_14_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_14_MTR.MB_JAMMED);
				N: [XIC(F_O2T_14_PE_JAMMED) ,XIC(F_O2T_13_PE_JAMMED) ,XIC(O2T_14_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_14_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_13_MTR.COMM);
				N: XIC(O_VFD_O2T_13_FWD)XIC(O2T_13_MTR.CONV_RUN)OTE(O2T_13_MTR.RUNNING);
				N: XIC(O2T_13_VFD.FAULTED)[XIO(F_O2T_13_VFD_FAULT) OTE(O2T_13_VFD.FAULT_ONS) ,OTE(F_O2T_13_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_13_MOL);
				N: XIO(I_MSD_O2T_13)XIO(O2T_13_MTR.COMM)[XIO(F_O2T_13_MSD_OFF) OTE(O2T_13_MTR.MSD_ONS) ,OTE(F_O2T_13_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_13_CTCTR_FAULT) OTE(O2T_13_MTR.MS_FLT_ONS) ,OTE(F_O2T_13_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_13_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_13_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_13_MTR.FIRE_ALM);
				N: XIO(O2T_13_MTR.CONV_RUN)XIC(O2T_13_MTR.INTL_MTR)OTE(O2T_13_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_13_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_13_OVRIDE_REQ)[XIO(F_O2T_13_OVRIDE) OTE(O2T_13_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_13_OVRIDE) ];
				N: XIC(HMI_O2T_13_OUTSERV_REQ)[XIO(F_O2T_13_OUTSERV) OTE(O2T_13_MTR.OOS_ONS) ,OTE(F_O2T_13_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_13_MTR.MB_JAMMED);
				N: [XIC(F_O2T_13_PE_JAMMED) ,XIC(F_O2T_12_PE_JAMMED) ,XIC(O2T_13_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_13_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_12_MTR.COMM);
				N: XIC(O_VFD_O2T_12_FWD)XIC(O2T_12_MTR.CONV_RUN)OTE(O2T_12_MTR.RUNNING);
				N: XIC(O2T_12_VFD.FAULTED)[XIO(F_O2T_12_VFD_FAULT) OTE(O2T_12_VFD.FAULT_ONS) ,OTE(F_O2T_12_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_12_MOL);
				N: XIO(I_MSD_O2T_12)XIO(O2T_12_MTR.COMM)[XIO(F_O2T_12_MSD_OFF) OTE(O2T_12_MTR.MSD_ONS) ,OTE(F_O2T_12_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_12_CTCTR_FAULT) OTE(O2T_12_MTR.MS_FLT_ONS) ,OTE(F_O2T_12_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_12_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_12_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_12_MTR.FIRE_ALM);
				N: XIO(O2T_12_MTR.CONV_RUN)XIC(O2T_12_MTR.INTL_MTR)OTE(O2T_12_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_12_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_12_OVRIDE_REQ)[XIO(F_O2T_12_OVRIDE) OTE(O2T_12_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_12_OVRIDE) ];
				N: XIC(HMI_O2T_12_OUTSERV_REQ)[XIO(F_O2T_12_OUTSERV) OTE(O2T_12_MTR.OOS_ONS) ,OTE(F_O2T_12_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_12_MTR.MB_JAMMED);
				N: [XIC(F_O2T_12_PE_JAMMED) ,XIC(F_O2T_11_PE_JAMMED) ,XIC(O2T_12_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_12_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_11_MTR.COMM);
				N: XIC(O_VFD_O2T_11_FWD)XIC(O2T_11_MTR.CONV_RUN)OTE(O2T_11_MTR.RUNNING);
				N: XIC(O2T_11_VFD.FAULTED)[XIO(F_O2T_11_VFD_FAULT) OTE(O2T_11_VFD.FAULT_ONS) ,OTE(F_O2T_11_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_11_MOL);
				N: XIO(I_MSD_O2T_11)XIO(O2T_11_MTR.COMM)[XIO(F_O2T_11_MSD_OFF) OTE(O2T_11_MTR.MSD_ONS) ,OTE(F_O2T_11_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_11_CTCTR_FAULT) OTE(O2T_11_MTR.MS_FLT_ONS) ,OTE(F_O2T_11_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,XIO(EZ_30103.Zone_OK) ,AFI() ]OTE(O2T_11_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,XIC(EZ_30103.Zone_RES) ,AFI() ]OTE(O2T_11_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_11_MTR.FIRE_ALM);
				N: XIO(O2T_11_MTR.CONV_RUN)XIC(O2T_11_MTR.INTL_MTR)OTE(O2T_11_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_11_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_11_OVRIDE_REQ)[XIO(F_O2T_11_OVRIDE) OTE(O2T_11_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_11_OVRIDE) ];
				N: XIC(HMI_O2T_11_OUTSERV_REQ)[XIO(F_O2T_11_OUTSERV) OTE(O2T_11_MTR.OOS_ONS) ,OTE(F_O2T_11_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_11_MTR.MB_JAMMED);
				N: [XIC(F_O2T_11_PE_JAMMED) ,XIC(F_O2T_10_PE_JAMMED) ,XIC(O2T_11_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_11_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_10_MTR.COMM);
				N: XIC(O_VFD_O2T_10_FWD)XIC(O2T_10_MTR.CONV_RUN)OTE(O2T_10_MTR.RUNNING);
				N: XIC(O2T_10_VFD.FAULTED)[XIO(F_O2T_10_VFD_FAULT) OTE(O2T_10_VFD.FAULT_ONS) ,OTE(F_O2T_10_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_10_MOL);
				N: XIO(I_MSD_O2T_10)XIO(O2T_10_MTR.COMM)[XIO(F_O2T_10_MSD_OFF) OTE(O2T_10_MTR.MSD_ONS) ,OTE(F_O2T_10_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_10_CTCTR_FAULT) OTE(O2T_10_MTR.MS_FLT_ONS) ,OTE(F_O2T_10_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_10_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_10_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_10_MTR.FIRE_ALM);
				N: XIO(O2T_10_MTR.CONV_RUN)XIC(O2T_10_MTR.INTL_MTR)OTE(O2T_10_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_10_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_10_OVRIDE_REQ)[XIO(F_O2T_10_OVRIDE) OTE(O2T_10_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_10_OVRIDE) ];
				N: XIC(HMI_O2T_10_OUTSERV_REQ)[XIO(F_O2T_10_OUTSERV) OTE(O2T_10_MTR.OOS_ONS) ,OTE(F_O2T_10_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_10_MTR.MB_JAMMED);
				N: [XIC(F_O2T_10_PE_JAMMED) ,XIC(F_C2T_17_PE_JAMMED) ,XIC(F_O2T_09_PE_JAMMED) ,XIC(O2T_10_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_10_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_09_MTR.COMM);
				N: XIC(O_VFD_O2T_09_FWD)XIC(O2T_09_MTR.CONV_RUN)OTE(O2T_09_MTR.RUNNING);
				N: XIC(O2T_09_VFD.FAULTED)[XIO(F_O2T_09_VFD_FAULT) OTE(O2T_09_VFD.FAULT_ONS) ,OTE(F_O2T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_09_MOL);
				N: XIO(I_MSD_O2T_09)XIO(O2T_09_MTR.COMM)[XIO(F_O2T_09_MSD_OFF) OTE(O2T_09_MTR.MSD_ONS) ,OTE(F_O2T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_09_CTCTR_FAULT) OTE(O2T_09_MTR.MS_FLT_ONS) ,OTE(F_O2T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_09_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_09_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_09_MTR.FIRE_ALM);
				N: XIO(O2T_09_MTR.CONV_RUN)XIC(O2T_09_MTR.INTL_MTR)OTE(O2T_09_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_09_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_09_OVRIDE_REQ)[XIO(F_O2T_09_OVRIDE) OTE(O2T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_09_OVRIDE) ];
				N: XIC(HMI_O2T_09_OUTSERV_REQ)[XIO(F_O2T_09_OUTSERV) OTE(O2T_09_MTR.OOS_ONS) ,OTE(F_O2T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_09_MTR.MB_JAMMED);
				N: [XIC(F_O2T_09_PE_JAMMED) ,XIC(F_O2T_08_PE_JAMMED) ,XIC(O2T_09_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_08_MTR.COMM);
				N: XIC(O_VFD_O2T_08_FWD)XIC(O2T_08_MTR.CONV_RUN)OTE(O2T_08_MTR.RUNNING);
				N: XIC(O2T_08_VFD.FAULTED)[XIO(F_O2T_08_VFD_FAULT) OTE(O2T_08_VFD.FAULT_ONS) ,OTE(F_O2T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_08_MOL);
				N: XIO(I_MSD_O2T_08)XIO(O2T_08_MTR.COMM)[XIO(F_O2T_08_MSD_OFF) OTE(O2T_08_MTR.MSD_ONS) ,OTE(F_O2T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_08_CTCTR_FAULT) OTE(O2T_08_MTR.MS_FLT_ONS) ,OTE(F_O2T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_08_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_08_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_08_MTR.FIRE_ALM);
				N: XIO(O2T_08_MTR.CONV_RUN)XIC(O2T_08_MTR.INTL_MTR)OTE(O2T_08_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_08_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_08_OVRIDE_REQ)[XIO(F_O2T_08_OVRIDE) OTE(O2T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_08_OVRIDE) ];
				N: XIC(HMI_O2T_08_OUTSERV_REQ)[XIO(F_O2T_08_OUTSERV) OTE(O2T_08_MTR.OOS_ONS) ,OTE(F_O2T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_08_MTR.MB_JAMMED);
				N: [XIC(F_O2T_08_PE_JAMMED) ,XIC(F_O2T_07_PE_JAMMED) ,XIC(O2T_08_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_07_MTR.COMM);
				N: XIC(O_VFD_O2T_07_FWD)XIC(O2T_07_MTR.CONV_RUN)OTE(O2T_07_MTR.RUNNING);
				N: XIC(O2T_07_VFD.FAULTED)[XIO(F_O2T_07_VFD_FAULT) OTE(O2T_07_VFD.FAULT_ONS) ,OTE(F_O2T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_07_MOL);
				N: XIO(I_MSD_O2T_07)XIO(O2T_07_MTR.COMM)[XIO(F_O2T_07_MSD_OFF) OTE(O2T_07_MTR.MSD_ONS) ,OTE(F_O2T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_07_CTCTR_FAULT) OTE(O2T_07_MTR.MS_FLT_ONS) ,OTE(F_O2T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_07_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_07_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_07_MTR.FIRE_ALM);
				N: XIO(O2T_07_MTR.CONV_RUN)XIC(O2T_07_MTR.INTL_MTR)OTE(O2T_07_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_07_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_07_OVRIDE_REQ)[XIO(F_O2T_07_OVRIDE) OTE(O2T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_07_OVRIDE) ];
				N: XIC(HMI_O2T_07_OUTSERV_REQ)[XIO(F_O2T_07_OUTSERV) OTE(O2T_07_MTR.OOS_ONS) ,OTE(F_O2T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_07_MTR.MB_JAMMED);
				N: [XIC(F_O2T_07_PE_JAMMED) ,XIC(F_O2T_06_PE_JAMMED) ,XIC(O2T_07_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_06_MTR.COMM);
				N: XIC(O_VFD_O2T_06_FWD)XIC(O2T_06_MTR.CONV_RUN)OTE(O2T_06_MTR.RUNNING);
				N: XIC(O2T_06_VFD.FAULTED)[XIO(F_O2T_06_VFD_FAULT) OTE(O2T_06_VFD.FAULT_ONS) ,OTE(F_O2T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_06_MOL);
				N: XIO(I_MSD_O2T_06)XIO(O2T_06_MTR.COMM)[XIO(F_O2T_06_MSD_OFF) OTE(O2T_06_MTR.MSD_ONS) ,OTE(F_O2T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_06_CTCTR_FAULT) OTE(O2T_06_MTR.MS_FLT_ONS) ,OTE(F_O2T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_06_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_06_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_06_MTR.FIRE_ALM);
				N: XIO(O2T_06_MTR.CONV_RUN)XIC(O2T_06_MTR.INTL_MTR)OTE(O2T_06_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_06_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_06_OVRIDE_REQ)[XIO(F_O2T_06_OVRIDE) OTE(O2T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_06_OVRIDE) ];
				N: XIC(HMI_O2T_06_OUTSERV_REQ)[XIO(F_O2T_06_OUTSERV) OTE(O2T_06_MTR.OOS_ONS) ,OTE(F_O2T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_06_MTR.MB_JAMMED);
				N: [XIC(F_O2T_06_PE_JAMMED) ,XIC(F_O2T_05_PE_JAMMED) ,XIC(O2T_06_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_05_MTR.COMM);
				N: XIC(O_VFD_O2T_05_FWD)XIC(O2T_05_MTR.CONV_RUN)OTE(O2T_05_MTR.RUNNING);
				N: XIC(O2T_05_VFD.FAULTED)[XIO(F_O2T_05_VFD_FAULT) OTE(O2T_05_VFD.FAULT_ONS) ,OTE(F_O2T_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_05_MOL);
				N: XIO(I_MSD_O2T_05)XIO(O2T_05_MTR.COMM)[XIO(F_O2T_05_MSD_OFF) OTE(O2T_05_MTR.MSD_ONS) ,OTE(F_O2T_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_05_CTCTR_FAULT) OTE(O2T_05_MTR.MS_FLT_ONS) ,OTE(F_O2T_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_05_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_05_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_05_MTR.FIRE_ALM);
				N: XIO(O2T_05_MTR.CONV_RUN)XIC(O2T_05_MTR.INTL_MTR)OTE(O2T_05_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_05_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_05_OVRIDE_REQ)[XIO(F_O2T_05_OVRIDE) OTE(O2T_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_05_OVRIDE) ];
				N: XIC(HMI_O2T_05_OUTSERV_REQ)[XIO(F_O2T_05_OUTSERV) OTE(O2T_05_MTR.OOS_ONS) ,OTE(F_O2T_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_05_MTR.MB_JAMMED);
				N: [XIC(F_O2T_05_PE_JAMMED) ,XIC(F_O2T_04_PE_JAMMED) ,XIC(O2T_05_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_01_RK01_S00_COMM) ,XIC(F_MCP_01_RK02_S00_COMM) ,AFI() ]OTE(O2T_04_MTR.COMM);
				N: XIC(O_VFD_O2T_04_FWD)XIC(O2T_04_MTR.CONV_RUN)OTE(O2T_04_MTR.RUNNING);
				N: XIC(O2T_04_VFD.FAULTED)[XIO(F_O2T_04_VFD_FAULT) OTE(O2T_04_VFD.FAULT_ONS) ,OTE(F_O2T_04_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O2T_04_MOL);
				N: XIO(I_MSD_O2T_04)XIO(O2T_04_MTR.COMM)[XIO(F_O2T_04_MSD_OFF) OTE(O2T_04_MTR.MSD_ONS) ,OTE(F_O2T_04_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O2T_04_CTCTR_FAULT) OTE(O2T_04_MTR.MS_FLT_ONS) ,OTE(F_O2T_04_CTCTR_FAULT) ];
				N: [XIO(EZ_30100.Zone_OK) ,XIO(EZ_30101.Zone_OK) ,AFI() ]OTE(O2T_04_MTR.E_STOP);
				N: [XIC(EZ_30100.Zone_RES) ,XIC(EZ_30101.Zone_RES) ,AFI() ]OTE(O2T_04_MTR.E_STOP_RES);
				N: XIC(MCP_03.STATUS.FIRE_ALM)OTE(O2T_04_MTR.FIRE_ALM);
				N: XIO(O2T_04_MTR.CONV_RUN)XIC(O2T_04_MTR.INTL_MTR)OTE(O2T_04_MTR.CASC);
				N: XIO(MCP_03.MTR_GRP.RUN_LATCH)OTE(O2T_04_MTR.AUTO_STOP);
				N: XIC(HMI_O2T_04_OVRIDE_REQ)[XIO(F_O2T_04_OVRIDE) OTE(O2T_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O2T_04_OVRIDE) ];
				N: XIC(HMI_O2T_04_OUTSERV_REQ)[XIO(F_O2T_04_OUTSERV) OTE(O2T_04_MTR.OOS_ONS) ,OTE(F_O2T_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O2T_04_MTR.MB_JAMMED);
				N: [XIC(F_O2T_04_PE_JAMMED) ,XIC(O2T_04_MTR.MB_JAMMED) ,AFI() ]OTE(O2T_04_MTR.JAMMED);
		END_ROUTINE

		ROUTINE O2T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor O2T_18 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_18_MTR.COMM)XIO(O2T_18_MTR.E_STOP)XIO(F_O2T_18_MSD_OFF)TON(O2T_18_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_18_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_18_RDY) OTE(O2T_18_VFD.FAULTED) ,XIO(O2T_18_VFD.FAULTED) OTE(O2T_18_VFD.READY) ];
				RC: "Motor O2T_17 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_17_MTR.COMM)XIO(O2T_17_MTR.E_STOP)XIO(F_O2T_17_MSD_OFF)TON(O2T_17_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_17_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_17_RDY) OTE(O2T_17_VFD.FAULTED) ,XIO(O2T_17_VFD.FAULTED) OTE(O2T_17_VFD.READY) ];
				RC: "Motor O2T_16 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_16_MTR.COMM)XIO(O2T_16_MTR.E_STOP)XIO(F_O2T_16_MSD_OFF)TON(O2T_16_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_16_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_16_RDY) OTE(O2T_16_VFD.FAULTED) ,XIO(O2T_16_VFD.FAULTED) OTE(O2T_16_VFD.READY) ];
				RC: "Motor O2T_15 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_15_MTR.COMM)XIO(O2T_15_MTR.E_STOP)XIO(F_O2T_15_MSD_OFF)TON(O2T_15_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_15_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_15_RDY) OTE(O2T_15_VFD.FAULTED) ,XIO(O2T_15_VFD.FAULTED) OTE(O2T_15_VFD.READY) ];
				RC: "Motor O2T_14 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_14_MTR.COMM)XIO(O2T_14_MTR.E_STOP)XIO(F_O2T_14_MSD_OFF)TON(O2T_14_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_14_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_14_RDY) OTE(O2T_14_VFD.FAULTED) ,XIO(O2T_14_VFD.FAULTED) OTE(O2T_14_VFD.READY) ];
				RC: "Motor O2T_13 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_13_MTR.COMM)XIO(O2T_13_MTR.E_STOP)XIO(F_O2T_13_MSD_OFF)TON(O2T_13_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_13_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_13_RDY) OTE(O2T_13_VFD.FAULTED) ,XIO(O2T_13_VFD.FAULTED) OTE(O2T_13_VFD.READY) ];
				RC: "Motor O2T_12 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_12_MTR.COMM)XIO(O2T_12_MTR.E_STOP)XIO(F_O2T_12_MSD_OFF)TON(O2T_12_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_12_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_12_RDY) OTE(O2T_12_VFD.FAULTED) ,XIO(O2T_12_VFD.FAULTED) OTE(O2T_12_VFD.READY) ];
				RC: "Motor O2T_11 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_11_MTR.COMM)XIO(O2T_11_MTR.E_STOP)XIO(F_O2T_11_MSD_OFF)TON(O2T_11_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_11_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_11_RDY) OTE(O2T_11_VFD.FAULTED) ,XIO(O2T_11_VFD.FAULTED) OTE(O2T_11_VFD.READY) ];
				RC: "Motor O2T_10 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_10_MTR.COMM)XIO(O2T_10_MTR.E_STOP)XIO(F_O2T_10_MSD_OFF)TON(O2T_10_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_10_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_10_RDY) OTE(O2T_10_VFD.FAULTED) ,XIO(O2T_10_VFD.FAULTED) OTE(O2T_10_VFD.READY) ];
				RC: "Motor O2T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_09_MTR.COMM)XIO(O2T_09_MTR.E_STOP)XIO(F_O2T_09_MSD_OFF)TON(O2T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_09_RDY) OTE(O2T_09_VFD.FAULTED) ,XIO(O2T_09_VFD.FAULTED) OTE(O2T_09_VFD.READY) ];
				RC: "Motor O2T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_08_MTR.COMM)XIO(O2T_08_MTR.E_STOP)XIO(F_O2T_08_MSD_OFF)TON(O2T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_08_RDY) OTE(O2T_08_VFD.FAULTED) ,XIO(O2T_08_VFD.FAULTED) OTE(O2T_08_VFD.READY) ];
				RC: "Motor O2T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_07_MTR.COMM)XIO(O2T_07_MTR.E_STOP)XIO(F_O2T_07_MSD_OFF)TON(O2T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_07_RDY) OTE(O2T_07_VFD.FAULTED) ,XIO(O2T_07_VFD.FAULTED) OTE(O2T_07_VFD.READY) ];
				RC: "Motor O2T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_06_MTR.COMM)XIO(O2T_06_MTR.E_STOP)XIO(F_O2T_06_MSD_OFF)TON(O2T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_06_RDY) OTE(O2T_06_VFD.FAULTED) ,XIO(O2T_06_VFD.FAULTED) OTE(O2T_06_VFD.READY) ];
				RC: "Motor O2T_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_05_MTR.COMM)XIO(O2T_05_MTR.E_STOP)XIO(F_O2T_05_MSD_OFF)TON(O2T_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_05_RDY) OTE(O2T_05_VFD.FAULTED) ,XIO(O2T_05_VFD.FAULTED) OTE(O2T_05_VFD.READY) ];
				RC: "Motor O2T_04 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O2T_04_MTR.COMM)XIO(O2T_04_MTR.E_STOP)XIO(F_O2T_04_MSD_OFF)TON(O2T_04_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O2T_04_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O2T_04_RDY) OTE(O2T_04_VFD.FAULTED) ,XIO(O2T_04_VFD.FAULTED) OTE(O2T_04_VFD.READY) ];
		END_ROUTINE

		ROUTINE O3T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O3T_18_PE_JAMMED) XIC(I_PE_O3T_18) ,XIC(F_O3T_17_PE_JAMMED) XIC(I_PE_O3T_17) ,XIC(F_O3T_17_CS_E_STOP) XIO(I_CS_O3T_17_EPB) ,AFI() ]OTE(CS_O3T_17_LTA_FLASH);
				N: [[XIC(F_O3T_18_PE_JAMMED) ,XIC(F_O3T_17_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O3T_17_LTA_FLASH) ,XIC(CS_O3T_17_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O3T_17_RPBA);
				N: XIO(EZ_W12_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O3T_17_EPB) ]OTE(O_CS_O3T_17_EPB);
				N: XIC(F_O3T_17_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O3T_17_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O3T_20_PE_JAMMED) XIC(I_PE_O3T_20) ,XIC(F_O3T_19_PE_JAMMED) XIC(I_PE_O3T_19) ,XIC(F_O3T_19_CS1_E_STOP) XIO(I_CS1_O3T_19_EPB) ,AFI() ]OTE(CS_O3T_19_LTA1_FLASH);
				N: [[XIC(F_O3T_20_PE_JAMMED) ,XIC(F_O3T_19_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O3T_19_LTA1_FLASH) ,XIC(CS_O3T_19_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_O3T_19_RPBA);
				N: XIO(EZ_W12_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_O3T_19_EPB) ]OTE(O_CS1_O3T_19_EPB);
				N: XIC(F_O3T_19_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_O3T_19_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O3T_20_PE_JAMMED) XIC(I_PE_O3T_20) ,XIC(F_O3T_19_PE_JAMMED) XIC(I_PE_O3T_19) ,XIC(F_O3T_19_CS2_E_STOP) XIO(I_CS2_O3T_19_EPB) ,AFI() ]OTE(CS_O3T_19_LTA2_FLASH);
				N: [[XIC(F_O3T_20_PE_JAMMED) ,XIC(F_O3T_19_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O3T_19_LTA2_FLASH) ,XIC(CS_O3T_19_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_O3T_19_RPBA);
				N: XIO(EZ_W12_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_O3T_19_EPB) ]OTE(O_CS2_O3T_19_EPB);
				N: XIC(F_O3T_19_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_O3T_19_SPBG);
		END_ROUTINE

		ROUTINE O3T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O3T_20_MTR.G) ,XIC(O3T_20_MTR.RUNNING) MOV(Status.ConvRunning,O3T_20_MTR.G) ,XIC(O3T_20_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O3T_20_MTR.G) ,[XIC(O3T_20_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O3T_20_MTR.G) ,XIC(O3T_20_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O3T_20_MTR.G) ,XIC(F_O3T_20_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O3T_20_MTR.G) ,XIC(O3T_20_MTR.CASC) MOV(Status.ConvCascade,O3T_20_MTR.G) ,XIC(O3T_20_MTR.CASC) XIO(I_PE_O3T_20) MOV(Status.ConvBagPresCasc,O3T_20_MTR.G) ,AFI() MOV(Status.ConvFull,O3T_20_MTR.G) ,XIC(F_O3T_20_MSD_OFF) MOV(Status.ConvDisc,O3T_20_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O3T_20_MTR.G) ,XIC(O3T_20_MTR.JAMMED) MOV(Status.ConvJammed,O3T_20_MTR.G) ,AFI() MOV(Status.ConvMBJam,O3T_20_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O3T_20_MTR.G) ,XIC(F_O3T_20_VFD_FAULT) MOV(Status.ConvVFDFlt,O3T_20_MTR.G) ,XIC(F_O3T_20_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O3T_20_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O3T_20_MTR.G) ,XIC(F_O3T_20_OVRIDE) MOV(Status.ConvOverRide,O3T_20_MTR.G) ,XIC(O3T_20_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O3T_20_MTR.G) ,XIC(O3T_20_MTR.E_STOP) XIO(O3T_20_MTR.E_STOP_RES) MOV(Status.ConvEStop,O3T_20_MTR.G) ,XIC(F_O3T_20_OUTSERV) MOV(Status.ConvOutOfServ,O3T_20_MTR.G) ,XIC(O3T_20_MTR.COMM) MOV(Status.ConvCommFault,O3T_20_MTR.G) ,MOV(O3T_20_MTR.G,G_O3T_20_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O3T_19_MTR.G) ,XIC(O3T_19_MTR.RUNNING) MOV(Status.ConvRunning,O3T_19_MTR.G) ,XIC(O3T_19_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O3T_19_MTR.G) ,[XIC(O3T_19_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O3T_19_MTR.G) ,XIC(O3T_19_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O3T_19_MTR.G) ,XIC(F_O3T_19_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O3T_19_MTR.G) ,XIC(O3T_19_MTR.CASC) MOV(Status.ConvCascade,O3T_19_MTR.G) ,XIC(O3T_19_MTR.CASC) XIO(I_PE_O3T_19) MOV(Status.ConvBagPresCasc,O3T_19_MTR.G) ,AFI() MOV(Status.ConvFull,O3T_19_MTR.G) ,XIC(F_O3T_19_MSD_OFF) MOV(Status.ConvDisc,O3T_19_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O3T_19_MTR.G) ,XIC(O3T_19_MTR.JAMMED) MOV(Status.ConvJammed,O3T_19_MTR.G) ,AFI() MOV(Status.ConvMBJam,O3T_19_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O3T_19_MTR.G) ,XIC(F_O3T_19_VFD_FAULT) MOV(Status.ConvVFDFlt,O3T_19_MTR.G) ,XIC(F_O3T_19_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O3T_19_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O3T_19_MTR.G) ,XIC(F_O3T_19_OVRIDE) MOV(Status.ConvOverRide,O3T_19_MTR.G) ,XIC(O3T_19_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O3T_19_MTR.G) ,XIC(O3T_19_MTR.E_STOP) XIO(O3T_19_MTR.E_STOP_RES) MOV(Status.ConvEStop,O3T_19_MTR.G) ,XIC(F_O3T_19_OUTSERV) MOV(Status.ConvOutOfServ,O3T_19_MTR.G) ,XIC(O3T_19_MTR.COMM) MOV(Status.ConvCommFault,O3T_19_MTR.G) ,MOV(O3T_19_MTR.G,G_O3T_19_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O3T_18_MTR.G) ,XIC(O3T_18_MTR.RUNNING) MOV(Status.ConvRunning,O3T_18_MTR.G) ,XIC(O3T_18_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O3T_18_MTR.G) ,[XIC(O3T_18_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O3T_18_MTR.G) ,XIC(O3T_18_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O3T_18_MTR.G) ,XIC(F_O3T_18_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O3T_18_MTR.G) ,XIC(O3T_18_MTR.CASC) MOV(Status.ConvCascade,O3T_18_MTR.G) ,XIC(O3T_18_MTR.CASC) XIO(I_PE_O3T_18) MOV(Status.ConvBagPresCasc,O3T_18_MTR.G) ,AFI() MOV(Status.ConvFull,O3T_18_MTR.G) ,XIC(F_O3T_18_MSD_OFF) MOV(Status.ConvDisc,O3T_18_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O3T_18_MTR.G) ,XIC(O3T_18_MTR.JAMMED) MOV(Status.ConvJammed,O3T_18_MTR.G) ,AFI() MOV(Status.ConvMBJam,O3T_18_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O3T_18_MTR.G) ,XIC(F_O3T_18_VFD_FAULT) MOV(Status.ConvVFDFlt,O3T_18_MTR.G) ,XIC(F_O3T_18_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O3T_18_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O3T_18_MTR.G) ,XIC(F_O3T_18_OVRIDE) MOV(Status.ConvOverRide,O3T_18_MTR.G) ,XIC(O3T_18_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O3T_18_MTR.G) ,XIC(O3T_18_MTR.E_STOP) XIO(O3T_18_MTR.E_STOP_RES) MOV(Status.ConvEStop,O3T_18_MTR.G) ,XIC(F_O3T_18_OUTSERV) MOV(Status.ConvOutOfServ,O3T_18_MTR.G) ,XIC(O3T_18_MTR.COMM) MOV(Status.ConvCommFault,O3T_18_MTR.G) ,MOV(O3T_18_MTR.G,G_O3T_18_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O3T_17_MTR.G) ,XIC(O3T_17_MTR.RUNNING) MOV(Status.ConvRunning,O3T_17_MTR.G) ,XIC(O3T_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O3T_17_MTR.G) ,[XIC(O3T_17_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O3T_17_MTR.G) ,XIC(O3T_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O3T_17_MTR.G) ,XIC(F_O3T_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O3T_17_MTR.G) ,XIC(O3T_17_MTR.CASC) MOV(Status.ConvCascade,O3T_17_MTR.G) ,XIC(O3T_17_MTR.CASC) XIO(I_PE_O3T_17) MOV(Status.ConvBagPresCasc,O3T_17_MTR.G) ,AFI() MOV(Status.ConvFull,O3T_17_MTR.G) ,XIC(F_O3T_17_MSD_OFF) MOV(Status.ConvDisc,O3T_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O3T_17_MTR.G) ,XIC(O3T_17_MTR.JAMMED) MOV(Status.ConvJammed,O3T_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,O3T_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O3T_17_MTR.G) ,XIC(F_O3T_17_VFD_FAULT) MOV(Status.ConvVFDFlt,O3T_17_MTR.G) ,XIC(F_O3T_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O3T_17_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O3T_17_MTR.G) ,XIC(F_O3T_17_OVRIDE) MOV(Status.ConvOverRide,O3T_17_MTR.G) ,XIC(O3T_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O3T_17_MTR.G) ,XIC(O3T_17_MTR.E_STOP) XIO(O3T_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,O3T_17_MTR.G) ,XIC(F_O3T_17_OUTSERV) MOV(Status.ConvOutOfServ,O3T_17_MTR.G) ,XIC(O3T_17_MTR.COMM) MOV(Status.ConvCommFault,O3T_17_MTR.G) ,MOV(O3T_17_MTR.G,G_O3T_17_STS) ];
		END_ROUTINE

		ROUTINE O3T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O3T_20_MTR.CONV_RUN)RTO(O3T_20_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O3T_19_RPBA) ,XIC(I_CS2_O3T_19_RPBA) ] XIC(O3T_20_PE.JAM_TMR.DN) ,XIO(O3T_20_PE.JAM_TMR.DN) ]XIC(I_PE_O3T_20)RES(O3T_20_PE.JAM_TMR);
				N: XIC(O3T_20_PE.JAM_TMR.DN)[XIO(F_O3T_20_PE_JAMMED) [ADD(S_O3T_20_PE_JAM,1,S_O3T_20_PE_JAM) ,OTE(O3T_20_PE.JAM_ONS) ] ,OTE(F_O3T_20_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O3T_19_MTR.CONV_RUN)RTO(O3T_19_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O3T_19_RPBA) ,XIC(I_CS2_O3T_19_RPBA) ] XIC(O3T_19_PE.JAM_TMR.DN) ,XIO(O3T_19_PE.JAM_TMR.DN) ]XIC(I_PE_O3T_19)RES(O3T_19_PE.JAM_TMR);
				N: XIC(O3T_19_PE.JAM_TMR.DN)[XIO(F_O3T_19_PE_JAMMED) [ADD(S_O3T_19_PE_JAM,1,S_O3T_19_PE_JAM) ,OTE(O3T_19_PE.JAM_ONS) ] ,OTE(F_O3T_19_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O3T_18_MTR.CONV_RUN)RTO(O3T_18_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O3T_17_RPBA) ,XIC(I_CS1_O3T_19_RPBA) ,XIC(I_CS2_O3T_19_RPBA) ] XIC(O3T_18_PE.JAM_TMR.DN) ,XIO(O3T_18_PE.JAM_TMR.DN) ]XIC(I_PE_O3T_18)RES(O3T_18_PE.JAM_TMR);
				N: XIC(O3T_18_PE.JAM_TMR.DN)[XIO(F_O3T_18_PE_JAMMED) [ADD(S_O3T_18_PE_JAM,1,S_O3T_18_PE_JAM) ,OTE(O3T_18_PE.JAM_ONS) ] ,OTE(F_O3T_18_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O3T_17_MTR.CONV_RUN)RTO(O3T_17_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O3T_17_RPBA) XIC(O3T_17_PE.JAM_TMR.DN) ,XIO(O3T_17_PE.JAM_TMR.DN) ]XIC(I_PE_O3T_17)RES(O3T_17_PE.JAM_TMR);
				N: XIC(O3T_17_PE.JAM_TMR.DN)[XIO(F_O3T_17_PE_JAMMED) [ADD(S_O3T_17_PE_JAM,1,S_O3T_17_PE_JAM) ,OTE(O3T_17_PE.JAM_ONS) ] ,OTE(F_O3T_17_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE O3T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_16_SPBG) ,XIC(I_INT_O3T_17_START) ,AFI() ]OTE(O3T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(O3T_20_MTR.CONV_RUN)XIC(O3T_19_MTR.CONV_RUN)XIC(O3T_18_MTR.CONV_RUN)XIC(O3T_17_MTR.CONV_RUN)OTE(O3T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_O3T_20) ,XIO(I_PE_O3T_19) ,XIO(I_PE_O3T_18) ,XIO(I_PE_O3T_17) ,AFI() ]OTE(O3T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(O3T.MTR_GRP.START) ,XIC(O3T.MTR_GRP.PEs) XIO(O3T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(O3T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(O3T.MTR_GRP.RUN_LATCH)XIC(O3T.MTR_GRP.PEs)OTE(O3T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(O3T.MTR_GRP.RUN_EXPAND)RTO(O3T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(O3T.MTR_GRP.START) ,XIC(O3T.MTR_GRP.RUN_LATCH) ]XIO(O3T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(O3T.STATUS.FIRE_ALM)OTE(O3T.MTR_GRP.RUN_LATCH);
				RC: "Motor O3T_20$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O3T_21_MSD_OFF)OTE(O3T_20_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O3T_20_MTR.E_STOP)[XIC(O3T_20_VFD.READY) XIO(O3T_20_MTR.JAMMED) ,XIC(F_O3T_20_OVRIDE) ]XIO(F_O3T_20_MSD_OFF)XIO(F_O3T_20_OUTSERV)XIO(O3T_20_MTR.COMM)OTE(O3T_20_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O3T.MTR_GRP.RUN_LATCH) ,XIC(F_O3T_20_OVRIDE) ]XIC(O3T_20_MTR.NO_FAULT)TON(O3T_20_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O3T_20_MTR.IM_TMR.DN)[XIO(O3T_20_MTR.INTL_MTR) OTE(O3T_20_MTR.IM_ONS) ,OTE(O3T_20_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(O3T_21_MTR.ON_TMR.DN) XIC(O3T_20_MTR.OFF_TMR.DN) ,XIO(O3T_21_MTR.IM_ONS) XIC(O3T_20_MTR.IM_ONS) ,XIC(O3T_20_MTR.ANTI_CASC) XIC(I_PE_O3T_20) ]OTE(O3T_20_MTR.START_EN);
				N: XIO(O3T_21_MTR.ON_TMR.DN)XIO(I_PE_O3T_20)OTE(O3T_20_MTR.STOP);
				N: XIC(O3T_20_MTR.INTL_MTR)[[XIC(O3T_20_MTR.START_EN) ,XIC(O3T_20_MTR.CONV_RUN) ] XIO(O3T_20_MTR.STOP) ,XIC(F_O3T_20_OVRIDE) ][OTE(O3T_20_MTR.CONV_RUN) ,OTE(O_VFD_O3T_20_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O3T_20_MTR.CONV_RUN)TON(O3T_20_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O3T_20_MTR.CONV_RUN)TON(O3T_20_MTR.OFF_TMR,?,?);
				RC: "Motor O3T_19$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O3T_20_MSD_OFF)OTE(O3T_19_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O3T_19_MTR.E_STOP)[XIC(O3T_19_VFD.READY) XIO(O3T_19_MTR.JAMMED) ,XIC(F_O3T_19_OVRIDE) ]XIO(F_O3T_19_MSD_OFF)XIO(F_O3T_19_OUTSERV)XIO(O3T_19_MTR.COMM)OTE(O3T_19_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O3T.MTR_GRP.RUN_LATCH) ,XIC(F_O3T_19_OVRIDE) ]XIC(O3T_19_MTR.NO_FAULT)TON(O3T_19_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O3T_19_MTR.IM_TMR.DN)[XIO(O3T_19_MTR.INTL_MTR) OTE(O3T_19_MTR.IM_ONS) ,OTE(O3T_19_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O3T_19_PE.FILT_NEG_XITN)RES(O3T_19_MTR.T2H_SPACE_TMR);
				N: XIC(O3T_20_MTR.CONV_RUN)RTO(O3T_19_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O3T_19_PE.POS_XITN) XIC(O3T_19_MTR.INTL_MTR) ,XIC(O3T_19_MTR.T2H_SPACE) ]XIO(O3T_19_MTR.T2H_SPACE_TMR.DN)OTE(O3T_19_MTR.T2H_SPACE);
				N: XIC(O3T_19_MTR.T2H_SPACE)OTE(O3T_19_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O3T_20_MTR.ON_TMR.DN) XIC(O3T_19_MTR.OFF_TMR.DN) ,XIO(O3T_20_MTR.IM_ONS) XIC(O3T_19_MTR.IM_ONS) ,XIC(O3T_19_MTR.ANTI_CASC) XIC(I_PE_O3T_19) ]OTE(O3T_19_MTR.START_EN);
				N: [XIO(O3T_20_MTR.ON_TMR.DN) XIO(I_PE_O3T_19) ,XIO(O3T_19_MTR.ANTI_CASC) XIC(O3T_19_MTR.SPACE) ]OTE(O3T_19_MTR.STOP);
				N: XIC(O3T_19_MTR.INTL_MTR)[[XIC(O3T_19_MTR.START_EN) ,XIC(O3T_19_MTR.CONV_RUN) ] XIO(O3T_19_MTR.STOP) ,XIC(F_O3T_19_OVRIDE) ][OTE(O3T_19_MTR.CONV_RUN) ,OTE(O_VFD_O3T_19_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O3T_19_MTR.CONV_RUN)TON(O3T_19_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O3T_19_MTR.CONV_RUN)TON(O3T_19_MTR.OFF_TMR,?,?);
				RC: "Motor O3T_18$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O3T_19_MSD_OFF)OTE(O3T_18_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O3T_18_MTR.E_STOP)[XIC(O3T_18_VFD.READY) XIO(O3T_18_MTR.JAMMED) ,XIC(F_O3T_18_OVRIDE) ]XIO(F_O3T_18_MSD_OFF)XIO(F_O3T_18_OUTSERV)XIO(O3T_18_MTR.COMM)OTE(O3T_18_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O3T.MTR_GRP.RUN_LATCH) ,XIC(F_O3T_18_OVRIDE) ]XIC(O3T_18_MTR.NO_FAULT)TON(O3T_18_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O3T_18_MTR.IM_TMR.DN)[XIO(O3T_18_MTR.INTL_MTR) OTE(O3T_18_MTR.IM_ONS) ,OTE(O3T_18_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O3T_18_PE.FILT_NEG_XITN)RES(O3T_18_MTR.T2H_SPACE_TMR);
				N: XIC(O3T_19_MTR.CONV_RUN)RTO(O3T_18_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O3T_18_PE.POS_XITN) XIC(O3T_18_MTR.INTL_MTR) ,XIC(O3T_18_MTR.T2H_SPACE) ]XIO(O3T_18_MTR.T2H_SPACE_TMR.DN)OTE(O3T_18_MTR.T2H_SPACE);
				N: XIC(O3T_18_MTR.T2H_SPACE)OTE(O3T_18_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O3T_19_MTR.ON_TMR.DN) XIC(O3T_18_MTR.OFF_TMR.DN) ,XIO(O3T_19_MTR.IM_ONS) XIC(O3T_18_MTR.IM_ONS) ,XIC(O3T_18_MTR.ANTI_CASC) XIC(I_PE_O3T_18) ]OTE(O3T_18_MTR.START_EN);
				N: [XIO(O3T_19_MTR.ON_TMR.DN) XIO(I_PE_O3T_18) ,XIO(O3T_18_MTR.ANTI_CASC) XIC(O3T_18_MTR.SPACE) ]OTE(O3T_18_MTR.STOP);
				N: XIC(O3T_18_MTR.INTL_MTR)[[XIC(O3T_18_MTR.START_EN) ,XIC(O3T_18_MTR.CONV_RUN) ] XIO(O3T_18_MTR.STOP) ,XIC(F_O3T_18_OVRIDE) ][OTE(O3T_18_MTR.CONV_RUN) ,OTE(O_VFD_O3T_18_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O3T_18_MTR.CONV_RUN)TON(O3T_18_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O3T_18_MTR.CONV_RUN)TON(O3T_18_MTR.OFF_TMR,?,?);
				RC: "Motor O3T_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O3T_18_MSD_OFF)OTE(O3T_17_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O3T_17_MTR.E_STOP)[XIC(O3T_17_VFD.READY) XIO(O3T_17_MTR.JAMMED) ,XIC(F_O3T_17_OVRIDE) ]XIO(F_O3T_17_MSD_OFF)XIO(F_O3T_17_OUTSERV)XIO(O3T_17_MTR.COMM)OTE(O3T_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O3T.MTR_GRP.RUN_LATCH) ,XIC(F_O3T_17_OVRIDE) ]XIC(O3T_17_MTR.NO_FAULT)TON(O3T_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O3T_17_MTR.IM_TMR.DN)[XIO(O3T_17_MTR.INTL_MTR) OTE(O3T_17_MTR.IM_ONS) ,OTE(O3T_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O3T_17_PE.FILT_NEG_XITN)RES(O3T_17_MTR.T2H_SPACE_TMR);
				N: XIC(O3T_18_MTR.CONV_RUN)RTO(O3T_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O3T_17_PE.POS_XITN) XIC(O3T_17_MTR.INTL_MTR) ,XIC(O3T_17_MTR.T2H_SPACE) ]XIO(O3T_17_MTR.T2H_SPACE_TMR.DN)OTE(O3T_17_MTR.T2H_SPACE);
				N: XIC(O3T_17_MTR.T2H_SPACE)OTE(O3T_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O3T_18_MTR.ON_TMR.DN) XIC(O3T_17_MTR.OFF_TMR.DN) ,XIO(O3T_18_MTR.IM_ONS) XIC(O3T_17_MTR.IM_ONS) ,XIC(O3T_17_MTR.ANTI_CASC) XIC(I_PE_O3T_17) ]OTE(O3T_17_MTR.START_EN);
				N: [XIO(O3T_18_MTR.ON_TMR.DN) XIO(I_PE_O3T_17) ,XIO(O3T_17_MTR.ANTI_CASC) XIC(O3T_17_MTR.SPACE) ]OTE(O3T_17_MTR.STOP);
				N: XIC(O3T_17_MTR.INTL_MTR)[[XIC(O3T_17_MTR.START_EN) ,XIC(O3T_17_MTR.CONV_RUN) ] XIO(O3T_17_MTR.STOP) ,XIC(F_O3T_17_OVRIDE) ][OTE(O3T_17_MTR.CONV_RUN) ,OTE(O_VFD_O3T_17_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O3T_17_MTR.CONV_RUN)TON(O3T_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O3T_17_MTR.CONV_RUN)TON(O3T_17_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE O3T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(O3T_20_MTR.COMM)[[XIO(I_PE_O3T_20) ,XIC(O3T_20_PE.TOF.DN) ] TON(O3T_20_PE.TON,?,?) ,XIO(I_PE_O3T_20) XIC(O3T_20_PE.TON.DN) TOF(O3T_20_PE.TOF,?,?) ,XIC(O3T_20_PE.TOF.DN) OTE(O3T_20_PE.FILT) ];
				N: XIC(O3T_20_PE.FILT)[XIO(O3T_20_PE.FILT_POS_XITN_MEM) OTE(O3T_20_PE.FILT_POS_XITN) ,OTE(O3T_20_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O3T_20_PE.FILT)[XIO(O3T_20_PE.FILT_NEG_XITN_MEM) OTE(O3T_20_PE.FILT_NEG_XITN) ,OTE(O3T_20_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O3T_19_MTR.COMM)[[XIO(I_PE_O3T_19) ,XIC(O3T_19_PE.TOF.DN) ] TON(O3T_19_PE.TON,?,?) ,XIO(I_PE_O3T_19) XIC(O3T_19_PE.TON.DN) TOF(O3T_19_PE.TOF,?,?) ,XIC(O3T_19_PE.TOF.DN) OTE(O3T_19_PE.FILT) ];
				N: XIC(O3T_19_PE.FILT)[XIO(O3T_19_PE.FILT_POS_XITN_MEM) OTE(O3T_19_PE.FILT_POS_XITN) ,OTE(O3T_19_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O3T_19_PE.FILT)[XIO(O3T_19_PE.FILT_NEG_XITN_MEM) OTE(O3T_19_PE.FILT_NEG_XITN) ,OTE(O3T_19_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O3T_19)[XIO(O3T_19_PE.POS_XITN_MEM) OTE(O3T_19_PE.POS_XITN) ,OTE(O3T_19_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O3T_18_MTR.COMM)[[XIO(I_PE_O3T_18) ,XIC(O3T_18_PE.TOF.DN) ] TON(O3T_18_PE.TON,?,?) ,XIO(I_PE_O3T_18) XIC(O3T_18_PE.TON.DN) TOF(O3T_18_PE.TOF,?,?) ,XIC(O3T_18_PE.TOF.DN) OTE(O3T_18_PE.FILT) ];
				N: XIC(O3T_18_PE.FILT)[XIO(O3T_18_PE.FILT_POS_XITN_MEM) OTE(O3T_18_PE.FILT_POS_XITN) ,OTE(O3T_18_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O3T_18_PE.FILT)[XIO(O3T_18_PE.FILT_NEG_XITN_MEM) OTE(O3T_18_PE.FILT_NEG_XITN) ,OTE(O3T_18_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O3T_18)[XIO(O3T_18_PE.POS_XITN_MEM) OTE(O3T_18_PE.POS_XITN) ,OTE(O3T_18_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O3T_17_MTR.COMM)[[XIO(I_PE_O3T_17) ,XIC(O3T_17_PE.TOF.DN) ] TON(O3T_17_PE.TON,?,?) ,XIO(I_PE_O3T_17) XIC(O3T_17_PE.TON.DN) TOF(O3T_17_PE.TOF,?,?) ,XIC(O3T_17_PE.TOF.DN) OTE(O3T_17_PE.FILT) ];
				N: XIC(O3T_17_PE.FILT)[XIO(O3T_17_PE.FILT_POS_XITN_MEM) OTE(O3T_17_PE.FILT_POS_XITN) ,OTE(O3T_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O3T_17_PE.FILT)[XIO(O3T_17_PE.FILT_NEG_XITN_MEM) OTE(O3T_17_PE.FILT_NEG_XITN) ,OTE(O3T_17_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O3T_17)[XIO(O3T_17_PE.POS_XITN_MEM) OTE(O3T_17_PE.POS_XITN) ,OTE(O3T_17_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE O3T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O3T_20_MTR.COMM);
				N: XIC(O_VFD_O3T_20_FWD)XIC(O3T_20_MTR.CONV_RUN)OTE(O3T_20_MTR.RUNNING);
				N: XIC(O3T_20_VFD.FAULTED)[XIO(F_O3T_20_VFD_FAULT) OTE(O3T_20_VFD.FAULT_ONS) ,OTE(F_O3T_20_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O3T_20_MOL);
				N: XIO(I_MSD_O3T_20)XIO(O3T_20_MTR.COMM)[XIO(F_O3T_20_MSD_OFF) OTE(O3T_20_MTR.MSD_ONS) ,OTE(F_O3T_20_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O3T_20_CTCTR_FAULT) OTE(O3T_20_MTR.MS_FLT_ONS) ,OTE(F_O3T_20_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W12_1CR.Zone_OK) ,AFI() ]OTE(O3T_20_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W12_1CR.Zone_RES) ,AFI() ]OTE(O3T_20_MTR.E_STOP_RES);
				N: XIC(O3T.STATUS.FIRE_ALM)OTE(O3T_20_MTR.FIRE_ALM);
				N: XIO(O3T_20_MTR.CONV_RUN)XIC(O3T_20_MTR.INTL_MTR)OTE(O3T_20_MTR.CASC);
				N: XIO(O3T.MTR_GRP.RUN_LATCH)OTE(O3T_20_MTR.AUTO_STOP);
				N: XIC(HMI_O3T_20_OVRIDE_REQ)[XIO(F_O3T_20_OVRIDE) OTE(O3T_20_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O3T_20_OVRIDE) ];
				N: XIC(HMI_O3T_20_OUTSERV_REQ)[XIO(F_O3T_20_OUTSERV) OTE(O3T_20_MTR.OOS_ONS) ,OTE(F_O3T_20_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O3T_20_MTR.MB_JAMMED);
				N: [XIC(F_O3T_20_PE_JAMMED) ,XIC(F_O3T_19_PE_JAMMED) ,XIC(O3T_20_MTR.MB_JAMMED) ,AFI() ]OTE(O3T_20_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O3T_19_MTR.COMM);
				N: XIC(O_VFD_O3T_19_FWD)XIC(O3T_19_MTR.CONV_RUN)OTE(O3T_19_MTR.RUNNING);
				N: XIC(O3T_19_VFD.FAULTED)[XIO(F_O3T_19_VFD_FAULT) OTE(O3T_19_VFD.FAULT_ONS) ,OTE(F_O3T_19_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O3T_19_MOL);
				N: XIO(I_MSD_O3T_19)XIO(O3T_19_MTR.COMM)[XIO(F_O3T_19_MSD_OFF) OTE(O3T_19_MTR.MSD_ONS) ,OTE(F_O3T_19_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O3T_19_CTCTR_FAULT) OTE(O3T_19_MTR.MS_FLT_ONS) ,OTE(F_O3T_19_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W12_1CR.Zone_OK) ,AFI() ]OTE(O3T_19_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W12_1CR.Zone_RES) ,AFI() ]OTE(O3T_19_MTR.E_STOP_RES);
				N: XIC(O3T.STATUS.FIRE_ALM)OTE(O3T_19_MTR.FIRE_ALM);
				N: XIO(O3T_19_MTR.CONV_RUN)XIC(O3T_19_MTR.INTL_MTR)OTE(O3T_19_MTR.CASC);
				N: XIO(O3T.MTR_GRP.RUN_LATCH)OTE(O3T_19_MTR.AUTO_STOP);
				N: XIC(HMI_O3T_19_OVRIDE_REQ)[XIO(F_O3T_19_OVRIDE) OTE(O3T_19_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O3T_19_OVRIDE) ];
				N: XIC(HMI_O3T_19_OUTSERV_REQ)[XIO(F_O3T_19_OUTSERV) OTE(O3T_19_MTR.OOS_ONS) ,OTE(F_O3T_19_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O3T_19_MTR.MB_JAMMED);
				N: [XIC(F_O3T_19_PE_JAMMED) ,XIC(F_O3T_18_PE_JAMMED) ,XIC(O3T_19_MTR.MB_JAMMED) ,AFI() ]OTE(O3T_19_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O3T_18_MTR.COMM);
				N: XIC(O_VFD_O3T_18_FWD)XIC(O3T_18_MTR.CONV_RUN)OTE(O3T_18_MTR.RUNNING);
				N: XIC(O3T_18_VFD.FAULTED)[XIO(F_O3T_18_VFD_FAULT) OTE(O3T_18_VFD.FAULT_ONS) ,OTE(F_O3T_18_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O3T_18_MOL);
				N: XIO(I_MSD_O3T_18)XIO(O3T_18_MTR.COMM)[XIO(F_O3T_18_MSD_OFF) OTE(O3T_18_MTR.MSD_ONS) ,OTE(F_O3T_18_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O3T_18_CTCTR_FAULT) OTE(O3T_18_MTR.MS_FLT_ONS) ,OTE(F_O3T_18_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W12_1CR.Zone_OK) ,AFI() ]OTE(O3T_18_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W12_1CR.Zone_RES) ,AFI() ]OTE(O3T_18_MTR.E_STOP_RES);
				N: XIC(O3T.STATUS.FIRE_ALM)OTE(O3T_18_MTR.FIRE_ALM);
				N: XIO(O3T_18_MTR.CONV_RUN)XIC(O3T_18_MTR.INTL_MTR)OTE(O3T_18_MTR.CASC);
				N: XIO(O3T.MTR_GRP.RUN_LATCH)OTE(O3T_18_MTR.AUTO_STOP);
				N: XIC(HMI_O3T_18_OVRIDE_REQ)[XIO(F_O3T_18_OVRIDE) OTE(O3T_18_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O3T_18_OVRIDE) ];
				N: XIC(HMI_O3T_18_OUTSERV_REQ)[XIO(F_O3T_18_OUTSERV) OTE(O3T_18_MTR.OOS_ONS) ,OTE(F_O3T_18_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O3T_18_MTR.MB_JAMMED);
				N: [XIC(F_O3T_18_PE_JAMMED) ,XIC(F_O3T_17_PE_JAMMED) ,XIC(O3T_18_MTR.MB_JAMMED) ,AFI() ]OTE(O3T_18_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O3T_17_MTR.COMM);
				N: XIC(O_VFD_O3T_17_FWD)XIC(O3T_17_MTR.CONV_RUN)OTE(O3T_17_MTR.RUNNING);
				N: XIC(O3T_17_VFD.FAULTED)[XIO(F_O3T_17_VFD_FAULT) OTE(O3T_17_VFD.FAULT_ONS) ,OTE(F_O3T_17_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O3T_17_MOL);
				N: XIO(I_MSD_O3T_17)XIO(O3T_17_MTR.COMM)[XIO(F_O3T_17_MSD_OFF) OTE(O3T_17_MTR.MSD_ONS) ,OTE(F_O3T_17_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O3T_17_CTCTR_FAULT) OTE(O3T_17_MTR.MS_FLT_ONS) ,OTE(F_O3T_17_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W12_1CR.Zone_OK) ,AFI() ]OTE(O3T_17_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W12_1CR.Zone_RES) ,AFI() ]OTE(O3T_17_MTR.E_STOP_RES);
				N: XIC(O3T.STATUS.FIRE_ALM)OTE(O3T_17_MTR.FIRE_ALM);
				N: XIO(O3T_17_MTR.CONV_RUN)XIC(O3T_17_MTR.INTL_MTR)OTE(O3T_17_MTR.CASC);
				N: XIO(O3T.MTR_GRP.RUN_LATCH)OTE(O3T_17_MTR.AUTO_STOP);
				N: XIC(HMI_O3T_17_OVRIDE_REQ)[XIO(F_O3T_17_OVRIDE) OTE(O3T_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O3T_17_OVRIDE) ];
				N: XIC(HMI_O3T_17_OUTSERV_REQ)[XIO(F_O3T_17_OUTSERV) OTE(O3T_17_MTR.OOS_ONS) ,OTE(F_O3T_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O3T_17_MTR.MB_JAMMED);
				N: [XIC(F_O3T_17_PE_JAMMED) ,XIC(O3T_17_MTR.MB_JAMMED) ,AFI() ]OTE(O3T_17_MTR.JAMMED);
		END_ROUTINE

		ROUTINE O3T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor O3T_20 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O3T_20_MTR.COMM)XIO(O3T_20_MTR.E_STOP)XIO(F_O3T_20_MSD_OFF)TON(O3T_20_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O3T_20_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O3T_20_RDY) OTE(O3T_20_VFD.FAULTED) ,XIO(O3T_20_VFD.FAULTED) OTE(O3T_20_VFD.READY) ];
				RC: "Motor O3T_19 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O3T_19_MTR.COMM)XIO(O3T_19_MTR.E_STOP)XIO(F_O3T_19_MSD_OFF)TON(O3T_19_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O3T_19_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O3T_19_RDY) OTE(O3T_19_VFD.FAULTED) ,XIO(O3T_19_VFD.FAULTED) OTE(O3T_19_VFD.READY) ];
				RC: "Motor O3T_18 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O3T_18_MTR.COMM)XIO(O3T_18_MTR.E_STOP)XIO(F_O3T_18_MSD_OFF)TON(O3T_18_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O3T_18_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O3T_18_RDY) OTE(O3T_18_VFD.FAULTED) ,XIO(O3T_18_VFD.FAULTED) OTE(O3T_18_VFD.READY) ];
				RC: "Motor O3T_17 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O3T_17_MTR.COMM)XIO(O3T_17_MTR.E_STOP)XIO(F_O3T_17_MSD_OFF)TON(O3T_17_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O3T_17_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O3T_17_RDY) OTE(O3T_17_VFD.FAULTED) ,XIO(O3T_17_VFD.FAULTED) OTE(O3T_17_VFD.READY) ];
		END_ROUTINE

		ROUTINE O4T_2_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE O4T_2_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE O4T_2_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE O4T_2_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_16_SPBG) ,XIC(I_INT_O4T_16_START) ,XIC(CL12T.MTR_GRP.START_DS) ,AFI() ]OTE(O4T_2.MTR_GRP.START);
				RC: "Motor run expander.";
				N: OTE(O4T_2.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: AFI()OTE(O4T_2.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(O4T_2.MTR_GRP.START) ,XIC(O4T_2.MTR_GRP.PEs) XIO(O4T_2.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(O4T_2.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(O4T_2.MTR_GRP.RUN_LATCH)XIC(O4T_2.MTR_GRP.PEs)OTE(O4T_2.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(O4T_2.MTR_GRP.RUN_EXPAND)RTO(O4T_2.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(O4T_2.MTR_GRP.START) ,XIC(O4T_2.MTR_GRP.RUN_LATCH) ]XIO(O4T_2.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(O4T_2.STATUS.FIRE_ALM)OTE(O4T_2.MTR_GRP.RUN_LATCH);
		END_ROUTINE

		ROUTINE O4T_2_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE O4T_2_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: XIC(F_CL12T_36_PE_JAMMED)OTE(O4T_20_MTR.JAMMED);
		END_ROUTINE

		ROUTINE O4T_2_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE O4T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O4T_08_PE_JAMMED) XIC(I_PE_O4T_08) ,XIC(F_O4T_07_PE_JAMMED) XIC(I_PE_O4T_07) ,XIC(F_O4T_06_PE_JAMMED) XIC(I_PE_O4T_06) ,XIC(F_O4T_05_PE_JAMMED) XIC(I_PE_O4T_05) ,XIC(F_O4T_06_CS_E_STOP) XIO(I_CS_O4T_06_EPB) ,AFI() ]OTE(CS_O4T_06_LTA_FLASH);
				N: [[XIC(F_O4T_08_PE_JAMMED) ,XIC(F_O4T_07_PE_JAMMED) ,XIC(F_O4T_06_PE_JAMMED) ,XIC(F_O4T_05_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O4T_06_LTA_FLASH) ,XIC(CS_O4T_06_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O4T_06_RPBA);
				N: XIO(EZ_30203.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O4T_06_EPB) ]OTE(O_CS_O4T_06_EPB);
				N: XIC(F_O4T_06_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O4T_06_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O4T_10_PE1_JAMMED) XIC(I_PE_O4T_13) ,XIC(F_O4T_10_PE2_JAMMED) XIC(I_PE_O4T_12) ,XIC(F_O4T_11_PE_JAMMED) XIC(I_PE_O4T_11) ,XIC(F_O4T_10_PE1_JAMMED) XIC(I_PE1_O4T_10) ,XIC(F_O4T_10_PE2_JAMMED) XIC(I_PE2_O4T_10) ,XIC(F_O4T_09_PE_JAMMED) XIC(I_PE_O4T_09) ,XIC(F_O4T_10_CS_E_STOP) XIO(I_CS_O4T_10_EPB) ,AFI() ]OTE(CS_O4T_10_LTA_FLASH);
				N: [[XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_11_PE_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_09_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O4T_10_LTA_FLASH) ,XIC(CS_O4T_10_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O4T_10_RPBA);
				N: XIO(EZ_30203.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O4T_10_EPB) ]OTE(O_CS_O4T_10_EPB);
				N: XIC(F_O4T_10_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O4T_10_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O4T_18_PE_JAMMED) XIC(I_PE_O4T_18) ,XIC(F_O4T_17_PE_JAMMED) XIC(I_PE_O4T_17) ,XIC(F_O4T_16_PE_JAMMED) XIC(I_PE_O4T_16) ,XIC(F_O4T_16_CS_E_STOP) XIO(I_CS_O4T_16_EPB) ,AFI() ]OTE(CS_O4T_16_LTA_FLASH);
				N: [[XIC(F_O4T_18_PE_JAMMED) ,XIC(F_O4T_17_PE_JAMMED) ,XIC(F_O4T_16_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O4T_16_LTA_FLASH) ,XIC(CS_O4T_16_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_O4T_16_RPBA);
				N: XIO(EZ_W15_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_O4T_16_EPB) ]OTE(O_CS_O4T_16_EPB);
				N: XIC(F_O4T_16_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_O4T_16_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O4T_22_PE_JAMMED) XIC(I_PE_O4T_22) ,XIC(F_O4T_21_PE_JAMMED) XIC(I_PE_O4T_21) ,XIC(F_O4T_20_PE_JAMMED) XIC(I_PE_O4T_20) ,XIC(F_O4T_19_PE_JAMMED) XIC(I_PE_O4T_19) ,XIC(F_O4T_19_CS1_E_STOP) XIO(I_CS1_O4T_21_EPB) ,AFI() ]OTE(CS_O4T_19_LTA1_FLASH);
				N: [[XIC(F_O4T_22_PE_JAMMED) ,XIC(F_O4T_21_PE_JAMMED) ,XIC(F_O4T_20_PE_JAMMED) ,XIC(F_O4T_19_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O4T_19_LTA1_FLASH) ,XIC(CS_O4T_19_LTA1_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS1_O4T_21_RPBA);
				N: XIO(EZ_W15_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS1_O4T_21_EPB) ]OTE(O_CS1_O4T_21_EPB);
				N: XIC(F_O4T_19_CS1_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS1_O4T_21_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_O4T_22_PE_JAMMED) XIC(I_PE_O4T_22) ,XIC(F_O4T_21_PE_JAMMED) XIC(I_PE_O4T_21) ,XIC(F_O4T_20_PE_JAMMED) XIC(I_PE_O4T_20) ,XIC(F_O4T_19_PE_JAMMED) XIC(I_PE_O4T_19) ,XIC(F_O4T_19_CS2_E_STOP) XIO(I_CS2_O4T_21_EPB) ,AFI() ]OTE(CS_O4T_19_LTA2_FLASH);
				N: [[XIC(F_O4T_22_PE_JAMMED) ,XIC(F_O4T_21_PE_JAMMED) ,XIC(F_O4T_20_PE_JAMMED) ,XIC(F_O4T_19_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_O4T_19_LTA2_FLASH) ,XIC(CS_O4T_19_LTA2_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS2_O4T_21_RPBA);
				N: XIO(EZ_W15_1CR.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS2_O4T_21_EPB) ]OTE(O_CS2_O4T_21_EPB);
				N: XIC(F_O4T_19_CS2_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS2_O4T_21_SPBG);
				RC: "Field Annunciator (Beacon or Audible or Stacklight or etc)$N"
				    "$N"
				    "";
				N: NOP();
				N: [[XIC(BM1_C.STATUS.DR_FLT_MONITOR) ,XIC(BM1_C.STATUS.MSD_OFF_MONITOR) ,XIC(BM1_C.STATUS.MOL_MONITOR) ,XIC(BM1_C.STATUS.JAM_MONITOR) ,XIC(BM1_C.STATUS.MB_JAM_MONITOR) ,XIC(BM1_C.STATUS.VFD_FLT_MONITOR) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_O4T_10_LTA);
				N: XIC(BM1_C.STATUS.E_STOP_MONITOR)XIC(INT.FLASHER_BIT)OTE(O_WA_O4T_10_LTR);
				N: [[XIC(BM1_C.STATUS.DR_FLT_ALARM) ,XIC(BM1_C.STATUS.MOL_ALARM) ,XIC(BM1_C.STATUS.JAM_ALARM) ,XIC(BM1_C.STATUS.MB_JAM_ALARM) ,XIC(BM1_C.STATUS.E_STOP_ALARM) ,XIC(BM1_C.STATUS.VFD_FLT_ALARM) ] XIC(INT.FLASHER_BIT) ,XIC(BM1_C.STATUS.STARTUP_WARN) ]OTE(O_WA_O4T_10_ALM);
		END_ROUTINE

		ROUTINE O4T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_13_MTR.G) ,XIC(O4T_13_MTR.RUNNING) MOV(Status.ConvRunning,O4T_13_MTR.G) ,XIC(O4T_13_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_13_MTR.G) ,[XIC(O4T_13_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_13_MTR.G) ,XIC(O4T_13_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_13_MTR.G) ,XIC(F_O4T_13_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_13_MTR.G) ,XIC(O4T_13_MTR.CASC) MOV(Status.ConvCascade,O4T_13_MTR.G) ,XIC(O4T_13_MTR.CASC) XIO(I_PE_O4T_13) MOV(Status.ConvBagPresCasc,O4T_13_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_13_MTR.G) ,XIC(F_O4T_13_MSD_OFF) MOV(Status.ConvDisc,O4T_13_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_13_MTR.G) ,XIC(O4T_13_MTR.JAMMED) MOV(Status.ConvJammed,O4T_13_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_13_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_13_MTR.G) ,XIC(F_O4T_13_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_13_MTR.G) ,XIC(F_O4T_13_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_13_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_13_MTR.G) ,XIC(F_O4T_13_OVRIDE) MOV(Status.ConvOverRide,O4T_13_MTR.G) ,XIC(O4T_13_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_13_MTR.G) ,XIC(O4T_13_MTR.E_STOP) XIO(O4T_13_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_13_MTR.G) ,XIC(F_O4T_13_OUTSERV) MOV(Status.ConvOutOfServ,O4T_13_MTR.G) ,XIC(O4T_13_MTR.COMM) MOV(Status.ConvCommFault,O4T_13_MTR.G) ,MOV(O4T_13_MTR.G,G_O4T_13_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_12_MTR.G) ,XIC(O4T_12_MTR.RUNNING) MOV(Status.ConvRunning,O4T_12_MTR.G) ,XIC(O4T_12_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_12_MTR.G) ,[XIC(O4T_12_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_12_MTR.G) ,XIC(O4T_12_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_12_MTR.G) ,XIC(F_O4T_12_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_12_MTR.G) ,XIC(O4T_12_MTR.CASC) MOV(Status.ConvCascade,O4T_12_MTR.G) ,XIC(O4T_12_MTR.CASC) XIO(I_PE_O4T_12) MOV(Status.ConvBagPresCasc,O4T_12_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_12_MTR.G) ,XIC(F_O4T_12_MSD_OFF) MOV(Status.ConvDisc,O4T_12_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_12_MTR.G) ,XIC(O4T_12_MTR.JAMMED) MOV(Status.ConvJammed,O4T_12_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_12_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_12_MTR.G) ,XIC(F_O4T_12_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_12_MTR.G) ,XIC(F_O4T_12_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_12_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_12_MTR.G) ,XIC(F_O4T_12_OVRIDE) MOV(Status.ConvOverRide,O4T_12_MTR.G) ,XIC(O4T_12_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_12_MTR.G) ,XIC(O4T_12_MTR.E_STOP) XIO(O4T_12_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_12_MTR.G) ,XIC(F_O4T_12_OUTSERV) MOV(Status.ConvOutOfServ,O4T_12_MTR.G) ,XIC(O4T_12_MTR.COMM) MOV(Status.ConvCommFault,O4T_12_MTR.G) ,MOV(O4T_12_MTR.G,G_O4T_12_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_11_MTR.G) ,XIC(O4T_11_MTR.RUNNING) MOV(Status.ConvRunning,O4T_11_MTR.G) ,XIC(O4T_11_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_11_MTR.G) ,[XIC(O4T_11_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_11_MTR.G) ,XIC(O4T_11_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_11_MTR.G) ,XIC(F_O4T_11_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_11_MTR.G) ,XIC(O4T_11_MTR.CASC) MOV(Status.ConvCascade,O4T_11_MTR.G) ,XIC(O4T_11_MTR.CASC) XIO(I_PE_O4T_11) MOV(Status.ConvBagPresCasc,O4T_11_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_11_MTR.G) ,XIC(F_O4T_11_MSD_OFF) MOV(Status.ConvDisc,O4T_11_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_11_MTR.G) ,XIC(O4T_11_MTR.JAMMED) MOV(Status.ConvJammed,O4T_11_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_11_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_11_MTR.G) ,XIC(F_O4T_11_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_11_MTR.G) ,XIC(F_O4T_11_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_11_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_11_MTR.G) ,XIC(F_O4T_11_OVRIDE) MOV(Status.ConvOverRide,O4T_11_MTR.G) ,XIC(O4T_11_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_11_MTR.G) ,XIC(O4T_11_MTR.E_STOP) XIO(O4T_11_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_11_MTR.G) ,XIC(F_O4T_11_OUTSERV) MOV(Status.ConvOutOfServ,O4T_11_MTR.G) ,XIC(O4T_11_MTR.COMM) MOV(Status.ConvCommFault,O4T_11_MTR.G) ,MOV(O4T_11_MTR.G,G_O4T_11_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_10_MTR.G) ,XIC(O4T_10_MTR.RUNNING) MOV(Status.ConvRunning,O4T_10_MTR.G) ,XIC(O4T_10_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_10_MTR.G) ,[XIC(O4T_10_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_10_MTR.G) ,XIC(O4T_10_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_10_MTR.G) ,XIC(F_O4T_10_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_10_MTR.G) ,XIC(O4T_10_MTR.CASC) MOV(Status.ConvCascade,O4T_10_MTR.G) ,XIC(O4T_10_MTR.CASC) XIO(I_PE1_O4T_10) MOV(Status.ConvBagPresCasc,O4T_10_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_10_MTR.G) ,XIC(F_O4T_10_MSD_OFF) MOV(Status.ConvDisc,O4T_10_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_10_MTR.G) ,XIC(O4T_10_MTR.JAMMED) MOV(Status.ConvJammed,O4T_10_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_10_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_10_MTR.G) ,XIC(F_O4T_10_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_10_MTR.G) ,XIC(F_O4T_10_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_10_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_10_MTR.G) ,XIC(F_O4T_10_OVRIDE) MOV(Status.ConvOverRide,O4T_10_MTR.G) ,XIC(O4T_10_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_10_MTR.G) ,XIC(O4T_10_MTR.E_STOP) XIO(O4T_10_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_10_MTR.G) ,XIC(F_O4T_10_OUTSERV) MOV(Status.ConvOutOfServ,O4T_10_MTR.G) ,XIC(O4T_10_MTR.COMM) MOV(Status.ConvCommFault,O4T_10_MTR.G) ,MOV(O4T_10_MTR.G,G_O4T_10_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_09_MTR.G) ,XIC(O4T_09_MTR.RUNNING) MOV(Status.ConvRunning,O4T_09_MTR.G) ,XIC(O4T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_09_MTR.G) ,[XIC(O4T_09_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_09_MTR.G) ,XIC(O4T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_09_MTR.G) ,XIC(F_O4T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_09_MTR.G) ,XIC(O4T_09_MTR.CASC) MOV(Status.ConvCascade,O4T_09_MTR.G) ,XIC(O4T_09_MTR.CASC) XIO(I_PE_O4T_09) MOV(Status.ConvBagPresCasc,O4T_09_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_09_MTR.G) ,XIC(F_O4T_09_MSD_OFF) MOV(Status.ConvDisc,O4T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_09_MTR.G) ,XIC(O4T_09_MTR.JAMMED) MOV(Status.ConvJammed,O4T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_09_MTR.G) ,XIC(F_O4T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_09_MTR.G) ,XIC(F_O4T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_09_MTR.G) ,XIC(F_O4T_09_OVRIDE) MOV(Status.ConvOverRide,O4T_09_MTR.G) ,XIC(O4T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_09_MTR.G) ,XIC(O4T_09_MTR.E_STOP) XIO(O4T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_09_MTR.G) ,XIC(F_O4T_09_OUTSERV) MOV(Status.ConvOutOfServ,O4T_09_MTR.G) ,XIC(O4T_09_MTR.COMM) MOV(Status.ConvCommFault,O4T_09_MTR.G) ,MOV(O4T_09_MTR.G,G_O4T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_08_MTR.G) ,XIC(O4T_08_MTR.RUNNING) MOV(Status.ConvRunning,O4T_08_MTR.G) ,XIC(O4T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_08_MTR.G) ,[XIC(O4T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_08_MTR.G) ,XIC(O4T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_08_MTR.G) ,XIC(F_O4T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_08_MTR.G) ,XIC(O4T_08_MTR.CASC) MOV(Status.ConvCascade,O4T_08_MTR.G) ,XIC(O4T_08_MTR.CASC) XIO(I_PE_O4T_08) MOV(Status.ConvBagPresCasc,O4T_08_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_08_MTR.G) ,XIC(F_O4T_08_MSD_OFF) MOV(Status.ConvDisc,O4T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_08_MTR.G) ,XIC(O4T_08_MTR.JAMMED) MOV(Status.ConvJammed,O4T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_08_MTR.G) ,XIC(F_O4T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_08_MTR.G) ,XIC(F_O4T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_08_MTR.G) ,XIC(F_O4T_08_OVRIDE) MOV(Status.ConvOverRide,O4T_08_MTR.G) ,XIC(O4T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_08_MTR.G) ,XIC(O4T_08_MTR.E_STOP) XIO(O4T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_08_MTR.G) ,XIC(F_O4T_08_OUTSERV) MOV(Status.ConvOutOfServ,O4T_08_MTR.G) ,XIC(O4T_08_MTR.COMM) MOV(Status.ConvCommFault,O4T_08_MTR.G) ,MOV(O4T_08_MTR.G,G_O4T_08_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_07_MTR.G) ,XIC(O4T_07_MTR.RUNNING) MOV(Status.ConvRunning,O4T_07_MTR.G) ,XIC(O4T_07_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_07_MTR.G) ,[XIC(O4T_07_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_07_MTR.G) ,XIC(O4T_07_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_07_MTR.G) ,XIC(F_O4T_07_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_07_MTR.G) ,XIC(O4T_07_MTR.CASC) MOV(Status.ConvCascade,O4T_07_MTR.G) ,XIC(O4T_07_MTR.CASC) XIO(I_PE_O4T_07) MOV(Status.ConvBagPresCasc,O4T_07_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_07_MTR.G) ,XIC(F_O4T_07_MSD_OFF) MOV(Status.ConvDisc,O4T_07_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_07_MTR.G) ,XIC(O4T_07_MTR.JAMMED) MOV(Status.ConvJammed,O4T_07_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_07_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_07_MTR.G) ,XIC(F_O4T_07_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_07_MTR.G) ,XIC(F_O4T_07_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_07_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_07_MTR.G) ,XIC(F_O4T_07_OVRIDE) MOV(Status.ConvOverRide,O4T_07_MTR.G) ,XIC(O4T_07_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_07_MTR.G) ,XIC(O4T_07_MTR.E_STOP) XIO(O4T_07_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_07_MTR.G) ,XIC(F_O4T_07_OUTSERV) MOV(Status.ConvOutOfServ,O4T_07_MTR.G) ,XIC(O4T_07_MTR.COMM) MOV(Status.ConvCommFault,O4T_07_MTR.G) ,MOV(O4T_07_MTR.G,G_O4T_07_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_06_MTR.G) ,XIC(O4T_06_MTR.RUNNING) MOV(Status.ConvRunning,O4T_06_MTR.G) ,XIC(O4T_06_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_06_MTR.G) ,[XIC(O4T_06_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_06_MTR.G) ,XIC(O4T_06_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_06_MTR.G) ,XIC(F_O4T_06_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_06_MTR.G) ,XIC(O4T_06_MTR.CASC) MOV(Status.ConvCascade,O4T_06_MTR.G) ,XIC(O4T_06_MTR.CASC) XIO(I_PE_O4T_06) MOV(Status.ConvBagPresCasc,O4T_06_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_06_MTR.G) ,XIC(F_O4T_06_MSD_OFF) MOV(Status.ConvDisc,O4T_06_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_06_MTR.G) ,XIC(O4T_06_MTR.JAMMED) MOV(Status.ConvJammed,O4T_06_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_06_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_06_MTR.G) ,XIC(F_O4T_06_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_06_MTR.G) ,XIC(F_O4T_06_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_06_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_06_MTR.G) ,XIC(F_O4T_06_OVRIDE) MOV(Status.ConvOverRide,O4T_06_MTR.G) ,XIC(O4T_06_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_06_MTR.G) ,XIC(O4T_06_MTR.E_STOP) XIO(O4T_06_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_06_MTR.G) ,XIC(F_O4T_06_OUTSERV) MOV(Status.ConvOutOfServ,O4T_06_MTR.G) ,XIC(O4T_06_MTR.COMM) MOV(Status.ConvCommFault,O4T_06_MTR.G) ,MOV(O4T_06_MTR.G,G_O4T_06_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_05_MTR.G) ,XIC(O4T_05_MTR.RUNNING) MOV(Status.ConvRunning,O4T_05_MTR.G) ,XIC(O4T_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_05_MTR.G) ,[XIC(O4T_05_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_05_MTR.G) ,XIC(O4T_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_05_MTR.G) ,XIC(F_O4T_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_05_MTR.G) ,XIC(O4T_05_MTR.CASC) MOV(Status.ConvCascade,O4T_05_MTR.G) ,XIC(O4T_05_MTR.CASC) XIO(I_PE_O4T_05) MOV(Status.ConvBagPresCasc,O4T_05_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_05_MTR.G) ,XIC(F_O4T_05_MSD_OFF) MOV(Status.ConvDisc,O4T_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_05_MTR.G) ,XIC(O4T_05_MTR.JAMMED) MOV(Status.ConvJammed,O4T_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_05_MTR.G) ,XIC(F_O4T_05_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_05_MTR.G) ,XIC(F_O4T_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_05_MTR.G) ,XIC(F_O4T_05_OVRIDE) MOV(Status.ConvOverRide,O4T_05_MTR.G) ,XIC(O4T_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_05_MTR.G) ,XIC(O4T_05_MTR.E_STOP) XIO(O4T_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_05_MTR.G) ,XIC(F_O4T_05_OUTSERV) MOV(Status.ConvOutOfServ,O4T_05_MTR.G) ,XIC(O4T_05_MTR.COMM) MOV(Status.ConvCommFault,O4T_05_MTR.G) ,MOV(O4T_05_MTR.G,G_O4T_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_22_MTR.G) ,XIC(O4T_22_MTR.RUNNING) MOV(Status.ConvRunning,O4T_22_MTR.G) ,XIC(O4T_22_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_22_MTR.G) ,[XIC(O4T_22_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_22_MTR.G) ,XIC(O4T_22_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_22_MTR.G) ,XIC(F_O4T_22_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_22_MTR.G) ,XIC(O4T_22_MTR.CASC) MOV(Status.ConvCascade,O4T_22_MTR.G) ,XIC(O4T_22_MTR.CASC) XIO(I_PE_O4T_22) MOV(Status.ConvBagPresCasc,O4T_22_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_22_MTR.G) ,XIC(F_O4T_22_MSD_OFF) MOV(Status.ConvDisc,O4T_22_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_22_MTR.G) ,XIC(O4T_22_MTR.JAMMED) MOV(Status.ConvJammed,O4T_22_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_22_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_22_MTR.G) ,XIC(F_O4T_22_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_22_MTR.G) ,XIC(F_O4T_22_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_22_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_22_MTR.G) ,XIC(F_O4T_22_OVRIDE) MOV(Status.ConvOverRide,O4T_22_MTR.G) ,XIC(O4T_22_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_22_MTR.G) ,XIC(O4T_22_MTR.E_STOP) XIO(O4T_22_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_22_MTR.G) ,XIC(F_O4T_22_OUTSERV) MOV(Status.ConvOutOfServ,O4T_22_MTR.G) ,XIC(O4T_22_MTR.COMM) MOV(Status.ConvCommFault,O4T_22_MTR.G) ,MOV(O4T_22_MTR.G,G_O4T_22_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_21_MTR.G) ,XIC(O4T_21_MTR.RUNNING) MOV(Status.ConvRunning,O4T_21_MTR.G) ,XIC(O4T_21_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_21_MTR.G) ,[XIC(O4T_21_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_21_MTR.G) ,XIC(O4T_21_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_21_MTR.G) ,XIC(F_O4T_21_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_21_MTR.G) ,XIC(O4T_21_MTR.CASC) MOV(Status.ConvCascade,O4T_21_MTR.G) ,XIC(O4T_21_MTR.CASC) XIO(I_PE_O4T_21) MOV(Status.ConvBagPresCasc,O4T_21_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_21_MTR.G) ,XIC(F_O4T_21_MSD_OFF) MOV(Status.ConvDisc,O4T_21_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_21_MTR.G) ,XIC(O4T_21_MTR.JAMMED) MOV(Status.ConvJammed,O4T_21_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_21_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_21_MTR.G) ,XIC(F_O4T_21_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_21_MTR.G) ,XIC(F_O4T_21_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_21_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_21_MTR.G) ,XIC(F_O4T_21_OVRIDE) MOV(Status.ConvOverRide,O4T_21_MTR.G) ,XIC(O4T_21_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_21_MTR.G) ,XIC(O4T_21_MTR.E_STOP) XIO(O4T_21_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_21_MTR.G) ,XIC(F_O4T_21_OUTSERV) MOV(Status.ConvOutOfServ,O4T_21_MTR.G) ,XIC(O4T_21_MTR.COMM) MOV(Status.ConvCommFault,O4T_21_MTR.G) ,MOV(O4T_21_MTR.G,G_O4T_21_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_20_MTR.G) ,XIC(O4T_20_MTR.RUNNING) MOV(Status.ConvRunning,O4T_20_MTR.G) ,XIC(O4T_20_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_20_MTR.G) ,[XIC(O4T_20_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_20_MTR.G) ,XIC(O4T_20_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_20_MTR.G) ,XIC(F_O4T_20_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_20_MTR.G) ,XIC(O4T_20_MTR.CASC) MOV(Status.ConvCascade,O4T_20_MTR.G) ,XIC(O4T_20_MTR.CASC) XIO(I_PE_O4T_20) MOV(Status.ConvBagPresCasc,O4T_20_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_20_MTR.G) ,XIC(F_O4T_20_MSD_OFF) MOV(Status.ConvDisc,O4T_20_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_20_MTR.G) ,XIC(O4T_20_MTR.JAMMED) MOV(Status.ConvJammed,O4T_20_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_20_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_20_MTR.G) ,XIC(F_O4T_20_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_20_MTR.G) ,XIC(F_O4T_20_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_20_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_20_MTR.G) ,XIC(F_O4T_20_OVRIDE) MOV(Status.ConvOverRide,O4T_20_MTR.G) ,XIC(O4T_20_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_20_MTR.G) ,XIC(O4T_20_MTR.E_STOP) XIO(O4T_20_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_20_MTR.G) ,XIC(F_O4T_20_OUTSERV) MOV(Status.ConvOutOfServ,O4T_20_MTR.G) ,XIC(O4T_20_MTR.COMM) MOV(Status.ConvCommFault,O4T_20_MTR.G) ,MOV(O4T_20_MTR.G,G_O4T_20_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_19_MTR.G) ,XIC(O4T_19_MTR.RUNNING) MOV(Status.ConvRunning,O4T_19_MTR.G) ,XIC(O4T_19_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_19_MTR.G) ,[XIC(O4T_19_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_19_MTR.G) ,XIC(O4T_19_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_19_MTR.G) ,XIC(F_O4T_19_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_19_MTR.G) ,XIC(O4T_19_MTR.CASC) MOV(Status.ConvCascade,O4T_19_MTR.G) ,XIC(O4T_19_MTR.CASC) XIO(I_PE_O4T_19) MOV(Status.ConvBagPresCasc,O4T_19_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_19_MTR.G) ,XIC(F_O4T_19_MSD_OFF) MOV(Status.ConvDisc,O4T_19_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_19_MTR.G) ,XIC(O4T_19_MTR.JAMMED) MOV(Status.ConvJammed,O4T_19_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_19_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_19_MTR.G) ,XIC(F_O4T_19_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_19_MTR.G) ,XIC(F_O4T_19_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_19_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_19_MTR.G) ,XIC(F_O4T_19_OVRIDE) MOV(Status.ConvOverRide,O4T_19_MTR.G) ,XIC(O4T_19_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_19_MTR.G) ,XIC(O4T_19_MTR.E_STOP) XIO(O4T_19_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_19_MTR.G) ,XIC(F_O4T_19_OUTSERV) MOV(Status.ConvOutOfServ,O4T_19_MTR.G) ,XIC(O4T_19_MTR.COMM) MOV(Status.ConvCommFault,O4T_19_MTR.G) ,MOV(O4T_19_MTR.G,G_O4T_19_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_18_MTR.G) ,XIC(O4T_18_MTR.RUNNING) MOV(Status.ConvRunning,O4T_18_MTR.G) ,XIC(O4T_18_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_18_MTR.G) ,[XIC(O4T_18_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_18_MTR.G) ,XIC(O4T_18_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_18_MTR.G) ,XIC(F_O4T_18_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_18_MTR.G) ,XIC(O4T_18_MTR.CASC) MOV(Status.ConvCascade,O4T_18_MTR.G) ,XIC(O4T_18_MTR.CASC) XIO(I_PE_O4T_18) MOV(Status.ConvBagPresCasc,O4T_18_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_18_MTR.G) ,XIC(F_O4T_18_MSD_OFF) MOV(Status.ConvDisc,O4T_18_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_18_MTR.G) ,XIC(O4T_18_MTR.JAMMED) MOV(Status.ConvJammed,O4T_18_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_18_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_18_MTR.G) ,XIC(F_O4T_18_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_18_MTR.G) ,XIC(F_O4T_18_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_18_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_18_MTR.G) ,XIC(F_O4T_18_OVRIDE) MOV(Status.ConvOverRide,O4T_18_MTR.G) ,XIC(O4T_18_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_18_MTR.G) ,XIC(O4T_18_MTR.E_STOP) XIO(O4T_18_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_18_MTR.G) ,XIC(F_O4T_18_OUTSERV) MOV(Status.ConvOutOfServ,O4T_18_MTR.G) ,XIC(O4T_18_MTR.COMM) MOV(Status.ConvCommFault,O4T_18_MTR.G) ,MOV(O4T_18_MTR.G,G_O4T_18_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O4T_17_MTR.G) ,XIC(O4T_17_MTR.RUNNING) MOV(Status.ConvRunning,O4T_17_MTR.G) ,XIC(O4T_17_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O4T_17_MTR.G) ,[XIC(O4T_17_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O4T_17_MTR.G) ,XIC(O4T_17_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O4T_17_MTR.G) ,XIC(F_O4T_17_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O4T_17_MTR.G) ,XIC(O4T_17_MTR.CASC) MOV(Status.ConvCascade,O4T_17_MTR.G) ,XIC(O4T_17_MTR.CASC) XIO(I_PE_O4T_17) MOV(Status.ConvBagPresCasc,O4T_17_MTR.G) ,AFI() MOV(Status.ConvFull,O4T_17_MTR.G) ,XIC(F_O4T_17_MSD_OFF) MOV(Status.ConvDisc,O4T_17_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O4T_17_MTR.G) ,XIC(O4T_17_MTR.JAMMED) MOV(Status.ConvJammed,O4T_17_MTR.G) ,AFI() MOV(Status.ConvMBJam,O4T_17_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O4T_17_MTR.G) ,XIC(F_O4T_17_VFD_FAULT) MOV(Status.ConvVFDFlt,O4T_17_MTR.G) ,XIC(F_O4T_17_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O4T_17_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O4T_17_MTR.G) ,XIC(F_O4T_17_OVRIDE) MOV(Status.ConvOverRide,O4T_17_MTR.G) ,XIC(O4T_17_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O4T_17_MTR.G) ,XIC(O4T_17_MTR.E_STOP) XIO(O4T_17_MTR.E_STOP_RES) MOV(Status.ConvEStop,O4T_17_MTR.G) ,XIC(F_O4T_17_OUTSERV) MOV(Status.ConvOutOfServ,O4T_17_MTR.G) ,XIC(O4T_17_MTR.COMM) MOV(Status.ConvCommFault,O4T_17_MTR.G) ,MOV(O4T_17_MTR.G,G_O4T_17_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,O3T_21_MTR.G) ,XIC(O3T_21_MTR.RUNNING) MOV(Status.ConvRunning,O3T_21_MTR.G) ,XIC(O3T_21_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,O3T_21_MTR.G) ,[XIC(O3T_21_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,O3T_21_MTR.G) ,XIC(O3T_21_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,O3T_21_MTR.G) ,XIC(F_O4T_16_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,O3T_21_MTR.G) ,XIC(O3T_21_MTR.CASC) MOV(Status.ConvCascade,O3T_21_MTR.G) ,XIC(O3T_21_MTR.CASC) XIO(I_PE_O4T_16) MOV(Status.ConvBagPresCasc,O3T_21_MTR.G) ,AFI() MOV(Status.ConvFull,O3T_21_MTR.G) ,XIC(F_O4T_16_MSD_OFF) MOV(Status.ConvDisc,O3T_21_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,O3T_21_MTR.G) ,XIC(O3T_21_MTR.JAMMED) MOV(Status.ConvJammed,O3T_21_MTR.G) ,AFI() MOV(Status.ConvMBJam,O3T_21_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,O3T_21_MTR.G) ,XIC(F_O4T_16_VFD_FAULT) MOV(Status.ConvVFDFlt,O3T_21_MTR.G) ,XIC(F_O4T_16_CTCTR_FAULT) MOV(Status.ConvCTCFlt,O3T_21_MTR.G) ,AFI() MOV(Status.ConvOverLoad,O3T_21_MTR.G) ,XIC(F_O4T_16_OVRIDE) MOV(Status.ConvOverRide,O3T_21_MTR.G) ,XIC(O3T_21_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,O3T_21_MTR.G) ,XIC(O3T_21_MTR.E_STOP) XIO(O3T_21_MTR.E_STOP_RES) MOV(Status.ConvEStop,O3T_21_MTR.G) ,XIC(F_O4T_16_OUTSERV) MOV(Status.ConvOutOfServ,O3T_21_MTR.G) ,XIC(O3T_21_MTR.COMM) MOV(Status.ConvCommFault,O3T_21_MTR.G) ,MOV(O3T_21_MTR.G,G_O4T_16_STS) ];
		END_ROUTINE

		ROUTINE O4T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_13_MTR.CONV_RUN)RTO(O4T_13_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_10_RPBA) XIC(O4T_13_PE.JAM_TMR.DN) ,XIO(O4T_13_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_13)RES(O4T_13_PE.JAM_TMR);
				N: XIC(O4T_13_PE.JAM_TMR.DN)[XIO(F_O4T_10_PE1_JAMMED) [ADD(S_O4T_10_PE1_JAM,1,S_O4T_10_PE1_JAM) ,OTE(O4T_13_PE.JAM_ONS) ] ,OTE(F_O4T_10_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_12_MTR.CONV_RUN)RTO(O4T_12_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_10_RPBA) XIC(O4T_12_PE.JAM_TMR.DN) ,XIO(O4T_12_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_12)RES(O4T_12_PE.JAM_TMR);
				N: XIC(O4T_12_PE.JAM_TMR.DN)[XIO(F_O4T_10_PE2_JAMMED) [ADD(S_O4T_10_PE2_JAM,1,S_O4T_10_PE2_JAM) ,OTE(O4T_12_PE.JAM_ONS) ] ,OTE(F_O4T_10_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_11_MTR.CONV_RUN)RTO(O4T_11_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_10_RPBA) XIC(O4T_11_PE.JAM_TMR.DN) ,XIO(O4T_11_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_11)RES(O4T_11_PE.JAM_TMR);
				N: XIC(O4T_11_PE.JAM_TMR.DN)[XIO(F_O4T_11_PE_JAMMED) [ADD(S_O4T_11_PE_JAM,1,S_O4T_11_PE_JAM) ,OTE(O4T_11_PE.JAM_ONS) ] ,OTE(F_O4T_11_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_10_MTR.CONV_RUN)RTO(O4T_10_PE1.JAM_TMR,?,?);
				N: [[XIC(I_CS_O4T_10_RPBA) ,XIC(I_CS_XO1_01_RPBA) ] XIC(O4T_10_PE1.JAM_TMR.DN) ,XIO(O4T_10_PE1.JAM_TMR.DN) ]XIC(I_PE1_O4T_10)RES(O4T_10_PE1.JAM_TMR);
				N: XIC(O4T_10_PE1.JAM_TMR.DN)[XIO(F_O4T_10_PE1_JAMMED) [ADD(S_O4T_10_PE1_JAM,1,S_O4T_10_PE1_JAM) ,OTE(O4T_10_PE1.JAM_ONS) ] ,OTE(F_O4T_10_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_10_MTR.CONV_RUN)RTO(O4T_10_PE2.JAM_TMR,?,?);
				N: [[XIC(I_CS_O4T_10_RPBA) ,XIC(I_CS_XO1_01_RPBA) ] XIC(O4T_10_PE2.JAM_TMR.DN) ,XIO(O4T_10_PE2.JAM_TMR.DN) ]XIC(I_PE2_O4T_10)RES(O4T_10_PE2.JAM_TMR);
				N: XIC(O4T_10_PE2.JAM_TMR.DN)[XIO(F_O4T_10_PE2_JAMMED) [ADD(S_O4T_10_PE2_JAM,1,S_O4T_10_PE2_JAM) ,OTE(O4T_10_PE2.JAM_ONS) ] ,OTE(F_O4T_10_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_09_MTR.CONV_RUN)RTO(O4T_09_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O4T_10_RPBA) ,XIC(I_CS_XO1_01_RPBA) ] XIC(O4T_09_PE.JAM_TMR.DN) ,XIO(O4T_09_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_09)RES(O4T_09_PE.JAM_TMR);
				N: XIC(O4T_09_PE.JAM_TMR.DN)[XIO(F_O4T_09_PE_JAMMED) [ADD(S_O4T_09_PE_JAM,1,S_O4T_09_PE_JAM) ,OTE(O4T_09_PE.JAM_ONS) ] ,OTE(F_O4T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_08_MTR.CONV_RUN)RTO(O4T_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_06_RPBA) XIC(O4T_08_PE.JAM_TMR.DN) ,XIO(O4T_08_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_08)RES(O4T_08_PE.JAM_TMR);
				N: XIC(O4T_08_PE.JAM_TMR.DN)[XIO(F_O4T_08_PE_JAMMED) [ADD(S_O4T_08_PE_JAM,1,S_O4T_08_PE_JAM) ,OTE(O4T_08_PE.JAM_ONS) ] ,OTE(F_O4T_08_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_07_MTR.CONV_RUN)RTO(O4T_07_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_06_RPBA) XIC(O4T_07_PE.JAM_TMR.DN) ,XIO(O4T_07_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_07)RES(O4T_07_PE.JAM_TMR);
				N: XIC(O4T_07_PE.JAM_TMR.DN)[XIO(F_O4T_07_PE_JAMMED) [ADD(S_O4T_07_PE_JAM,1,S_O4T_07_PE_JAM) ,OTE(O4T_07_PE.JAM_ONS) ] ,OTE(F_O4T_07_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_06_MTR.CONV_RUN)RTO(O4T_06_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_06_RPBA) XIC(O4T_06_PE.JAM_TMR.DN) ,XIO(O4T_06_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_06)RES(O4T_06_PE.JAM_TMR);
				N: XIC(O4T_06_PE.JAM_TMR.DN)[XIO(F_O4T_06_PE_JAMMED) [ADD(S_O4T_06_PE_JAM,1,S_O4T_06_PE_JAM) ,OTE(O4T_06_PE.JAM_ONS) ] ,OTE(F_O4T_06_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_05_MTR.CONV_RUN)RTO(O4T_05_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_06_RPBA) XIC(O4T_05_PE.JAM_TMR.DN) ,XIO(O4T_05_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_05)RES(O4T_05_PE.JAM_TMR);
				N: XIC(O4T_05_PE.JAM_TMR.DN)[XIO(F_O4T_05_PE_JAMMED) [ADD(S_O4T_05_PE_JAM,1,S_O4T_05_PE_JAM) ,OTE(O4T_05_PE.JAM_ONS) ] ,OTE(F_O4T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_22_MTR.CONV_RUN)RTO(O4T_22_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS2_O4T_21_RPBA) ] XIC(O4T_22_PE.JAM_TMR.DN) ,XIO(O4T_22_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_22)RES(O4T_22_PE.JAM_TMR);
				N: XIC(O4T_22_PE.JAM_TMR.DN)[XIO(F_O4T_22_PE_JAMMED) [ADD(S_O4T_22_PE_JAM,1,S_O4T_22_PE_JAM) ,OTE(O4T_22_PE.JAM_ONS) ] ,OTE(F_O4T_22_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_21_MTR.CONV_RUN)RTO(O4T_21_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS2_O4T_21_RPBA) ] XIC(O4T_21_PE.JAM_TMR.DN) ,XIO(O4T_21_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_21)RES(O4T_21_PE.JAM_TMR);
				N: XIC(O4T_21_PE.JAM_TMR.DN)[XIO(F_O4T_21_PE_JAMMED) [ADD(S_O4T_21_PE_JAM,1,S_O4T_21_PE_JAM) ,OTE(O4T_21_PE.JAM_ONS) ] ,OTE(F_O4T_21_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_20_MTR.CONV_RUN)RTO(O4T_20_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS2_O4T_21_RPBA) ] XIC(O4T_20_PE.JAM_TMR.DN) ,XIO(O4T_20_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_20)RES(O4T_20_PE.JAM_TMR);
				N: XIC(O4T_20_PE.JAM_TMR.DN)[XIO(F_O4T_20_PE_JAMMED) [ADD(S_O4T_20_PE_JAM,1,S_O4T_20_PE_JAM) ,OTE(O4T_20_PE.JAM_ONS) ] ,OTE(F_O4T_20_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_19_MTR.CONV_RUN)RTO(O4T_19_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS2_O4T_21_RPBA) ] XIC(O4T_19_PE.JAM_TMR.DN) ,XIO(O4T_19_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_19)RES(O4T_19_PE.JAM_TMR);
				N: XIC(O4T_19_PE.JAM_TMR.DN)[XIO(F_O4T_19_PE_JAMMED) [ADD(S_O4T_19_PE_JAM,1,S_O4T_19_PE_JAM) ,OTE(O4T_19_PE.JAM_ONS) ] ,OTE(F_O4T_19_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_18_MTR.CONV_RUN)RTO(O4T_18_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_O4T_16_RPBA) ,XIC(I_CS1_O4T_21_RPBA) ,XIC(I_CS2_O4T_21_RPBA) ] XIC(O4T_18_PE.JAM_TMR.DN) ,XIO(O4T_18_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_18)RES(O4T_18_PE.JAM_TMR);
				N: XIC(O4T_18_PE.JAM_TMR.DN)[XIO(F_O4T_18_PE_JAMMED) [ADD(S_O4T_18_PE_JAM,1,S_O4T_18_PE_JAM) ,OTE(O4T_18_PE.JAM_ONS) ] ,OTE(F_O4T_18_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O4T_17_MTR.CONV_RUN)RTO(O4T_17_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_16_RPBA) XIC(O4T_17_PE.JAM_TMR.DN) ,XIO(O4T_17_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_17)RES(O4T_17_PE.JAM_TMR);
				N: XIC(O4T_17_PE.JAM_TMR.DN)[XIO(F_O4T_17_PE_JAMMED) [ADD(S_O4T_17_PE_JAM,1,S_O4T_17_PE_JAM) ,OTE(O4T_17_PE.JAM_ONS) ] ,OTE(F_O4T_17_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(O3T_21_MTR.CONV_RUN)RTO(O4T_16_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_O4T_16_RPBA) XIC(O4T_16_PE.JAM_TMR.DN) ,XIO(O4T_16_PE.JAM_TMR.DN) ]XIC(I_PE_O4T_16)RES(O4T_16_PE.JAM_TMR);
				N: XIC(O4T_16_PE.JAM_TMR.DN)[XIO(F_O4T_16_PE_JAMMED) [ADD(S_O4T_16_PE_JAM,1,S_O4T_16_PE_JAM) ,OTE(O4T_16_PE.JAM_ONS) ] ,OTE(F_O4T_16_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE O4T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_02_SPBG) ,XIC(I_INT_O4T_05_START) ,AFI() ]OTE(O4T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(O4T_13_MTR.CONV_RUN)XIC(O4T_12_MTR.CONV_RUN)XIC(O4T_11_MTR.CONV_RUN)XIC(O4T_10_MTR.CONV_RUN)XIC(O4T_09_MTR.CONV_RUN)XIC(O4T_08_MTR.CONV_RUN)XIC(O4T_07_MTR.CONV_RUN)XIC(O4T_06_MTR.CONV_RUN)XIC(O4T_05_MTR.CONV_RUN)XIC(O4T_22_MTR.CONV_RUN)XIC(O4T_21_MTR.CONV_RUN)XIC(O4T_20_MTR.CONV_RUN)XIC(O4T_19_MTR.CONV_RUN)XIC(O4T_18_MTR.CONV_RUN)XIC(O4T_17_MTR.CONV_RUN)XIC(O3T_21_MTR.CONV_RUN)OTE(O4T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_O4T_13) ,XIO(I_PE_O4T_12) ,XIO(I_PE_O4T_11) ,XIO(I_PE1_O4T_10) ,XIO(I_PE2_O4T_10) ,XIO(I_PE_O4T_09) ,XIO(I_PE_O4T_08) ,XIO(I_PE_O4T_07) ,XIO(I_PE_O4T_06) ,XIO(I_PE_O4T_05) ,XIO(I_PE_O4T_22) ,XIO(I_PE_O4T_21) ,XIO(I_PE_O4T_20) ,XIO(I_PE_O4T_19) ,XIO(I_PE_O4T_18) ,XIO(I_PE_O4T_17) ,XIO(I_PE_O4T_16) ,AFI() ]OTE(O4T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(O4T.MTR_GRP.START) ,XIC(O4T.MTR_GRP.PEs) XIO(O4T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(O4T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(O4T.MTR_GRP.RUN_LATCH)XIC(O4T.MTR_GRP.PEs)OTE(O4T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(O4T.MTR_GRP.RUN_EXPAND)RTO(O4T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(O4T.MTR_GRP.START) ,XIC(O4T.MTR_GRP.RUN_LATCH) ]XIO(O4T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(O4T.STATUS.FIRE_ALM)OTE(O4T.MTR_GRP.RUN_LATCH);
				RC: "Motor O4T_13$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_30_MSD_OFF)OTE(O4T_13_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_13_MTR.E_STOP)[XIC(O4T_13_VFD.READY) XIO(O4T_13_MTR.JAMMED) ,XIC(F_O4T_13_OVRIDE) ]XIO(F_O4T_13_MSD_OFF)XIO(F_O4T_13_OUTSERV)XIO(O4T_13_MTR.COMM)OTE(O4T_13_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_13_OVRIDE) ]XIC(O4T_13_MTR.NO_FAULT)TON(O4T_13_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_13_MTR.IM_TMR.DN)[XIO(O4T_13_MTR.INTL_MTR) OTE(O4T_13_MTR.IM_ONS) ,OTE(O4T_13_MTR.INTL_MTR) ];
				N: XIC(F_BM1_30_RUN_REV)XIC(BM1_30_MTR.INDEX_EN)XIO(BM1_30_MTR.INDEX_TMR.DN)OTE(O4T_13_MTR.SYNC_RUN);
				RC: "Conveyor Running.";
				N: [XIC(BM1_30_MTR.ON_TMR.DN) XIC(O4T_13_MTR.OFF_TMR.DN) ,[XIO(BM1_30_MTR.IM_ONS) ,XIC(BM1_30_MTR.INDEX_EN) ] XIC(O4T_13_MTR.IM_ONS) ,XIC(O4T_13_MTR.ANTI_CASC) XIC(I_PE_O4T_13) ,XIC(O4T_13_MTR.SYNC_RUN) ]OTE(O4T_13_MTR.START_EN);
				N: [[XIO(BM1_30_MTR.ON_TMR.DN) ,XIO(F_BM1_30_RUN_REV) ] [XIO(I_PE_O4T_13) ,XIC(O4T_13_MTR.SYNC_RUN) ] ,XIO(O4T_13_MTR.ANTI_CASC) XIC(O4T_13_MTR.SPACE) ]OTE(O4T_13_MTR.STOP);
				N: XIC(O4T_13_MTR.INTL_MTR)[[XIC(O4T_13_MTR.START_EN) ,XIC(O4T_13_MTR.CONV_RUN) ] XIO(O4T_13_MTR.STOP) ,XIC(F_O4T_13_OVRIDE) ][OTE(O4T_13_MTR.CONV_RUN) ,OTE(O_VFD_O4T_13_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_13_MTR.CONV_RUN)TON(O4T_13_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_13_MTR.CONV_RUN)TON(O4T_13_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_12$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_13_MSD_OFF)OTE(O4T_12_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_12_MTR.E_STOP)[XIC(O4T_12_VFD.READY) XIO(O4T_12_MTR.JAMMED) ,XIC(F_O4T_12_OVRIDE) ]XIO(F_O4T_12_MSD_OFF)XIO(F_O4T_12_OUTSERV)XIO(O4T_12_MTR.COMM)OTE(O4T_12_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_12_OVRIDE) ]XIC(O4T_12_MTR.NO_FAULT)TON(O4T_12_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_12_MTR.IM_TMR.DN)[XIO(O4T_12_MTR.INTL_MTR) OTE(O4T_12_MTR.IM_ONS) ,OTE(O4T_12_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_12_PE.FILT_NEG_XITN)RES(O4T_12_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_13_MTR.CONV_RUN)RTO(O4T_12_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_12_PE.POS_XITN) XIC(O4T_12_MTR.INTL_MTR) ,XIC(O4T_12_MTR.T2H_SPACE) ]XIO(O4T_12_MTR.T2H_SPACE_TMR.DN)OTE(O4T_12_MTR.T2H_SPACE);
				N: XIC(O4T_12_MTR.T2H_SPACE)OTE(O4T_12_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_13_MTR.ON_TMR.DN) XIC(O4T_12_MTR.OFF_TMR.DN) ,XIO(O4T_13_MTR.IM_ONS) XIC(O4T_12_MTR.IM_ONS) ,XIC(O4T_12_MTR.ANTI_CASC) XIC(I_PE_O4T_12) ]OTE(O4T_12_MTR.START_EN);
				N: [XIO(O4T_13_MTR.ON_TMR.DN) XIO(I_PE_O4T_12) ,XIO(O4T_12_MTR.ANTI_CASC) XIC(O4T_12_MTR.SPACE) ]OTE(O4T_12_MTR.STOP);
				N: XIC(O4T_12_MTR.INTL_MTR)[[XIC(O4T_12_MTR.START_EN) ,XIC(O4T_12_MTR.CONV_RUN) ] XIO(O4T_12_MTR.STOP) ,XIC(F_O4T_12_OVRIDE) ][OTE(O4T_12_MTR.CONV_RUN) ,OTE(O_VFD_O4T_12_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_12_MTR.CONV_RUN)TON(O4T_12_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_12_MTR.CONV_RUN)TON(O4T_12_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_11$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_12_MSD_OFF)OTE(O4T_11_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_11_MTR.E_STOP)[XIC(O4T_11_VFD.READY) XIO(O4T_11_MTR.JAMMED) ,XIC(F_O4T_11_OVRIDE) ]XIO(F_O4T_11_MSD_OFF)XIO(F_O4T_11_OUTSERV)XIO(O4T_11_MTR.COMM)OTE(O4T_11_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_11_OVRIDE) ]XIC(O4T_11_MTR.NO_FAULT)TON(O4T_11_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_11_MTR.IM_TMR.DN)[XIO(O4T_11_MTR.INTL_MTR) OTE(O4T_11_MTR.IM_ONS) ,OTE(O4T_11_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_11_PE.FILT_NEG_XITN)RES(O4T_11_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_12_MTR.CONV_RUN)RTO(O4T_11_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_11_PE.POS_XITN) XIC(O4T_11_MTR.INTL_MTR) ,XIC(O4T_11_MTR.T2H_SPACE) ]XIO(O4T_11_MTR.T2H_SPACE_TMR.DN)OTE(O4T_11_MTR.T2H_SPACE);
				N: XIC(O4T_11_MTR.T2H_SPACE)OTE(O4T_11_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_12_MTR.ON_TMR.DN) XIC(O4T_11_MTR.OFF_TMR.DN) ,XIO(O4T_12_MTR.IM_ONS) XIC(O4T_11_MTR.IM_ONS) ,XIC(O4T_11_MTR.ANTI_CASC) XIC(I_PE_O4T_11) ]OTE(O4T_11_MTR.START_EN);
				N: [XIO(O4T_12_MTR.ON_TMR.DN) XIO(I_PE_O4T_11) ,XIO(O4T_11_MTR.ANTI_CASC) XIC(O4T_11_MTR.SPACE) ]OTE(O4T_11_MTR.STOP);
				N: XIC(O4T_11_MTR.INTL_MTR)[[XIC(O4T_11_MTR.START_EN) ,XIC(O4T_11_MTR.CONV_RUN) ] XIO(O4T_11_MTR.STOP) ,XIC(F_O4T_11_OVRIDE) ][OTE(O4T_11_MTR.CONV_RUN) ,OTE(O_VFD_O4T_11_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_11_MTR.CONV_RUN)TON(O4T_11_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_11_MTR.CONV_RUN)TON(O4T_11_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_10$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_11_MSD_OFF)OTE(O4T_10_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_10_MTR.E_STOP)[XIC(O4T_10_VFD.READY) XIO(O4T_10_MTR.JAMMED) [XIO(XO1_HSD.ML_STOP_FLT) ,XIC(XO1_HSD.DELAY_START_TMR.EN) ] ,XIC(F_O4T_10_OVRIDE) ]XIO(F_O4T_10_MSD_OFF)XIO(F_O4T_10_OUTSERV)XIO(O4T_10_MTR.COMM)OTE(O4T_10_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_10_OVRIDE) ]XIC(O4T_10_MTR.NO_FAULT)TON(O4T_10_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_10_MTR.IM_TMR.DN)[XIO(O4T_10_MTR.INTL_MTR) OTE(O4T_10_MTR.IM_ONS) ,OTE(O4T_10_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_10_PE1.FILT_NEG_XITN)RES(O4T_10_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_11_MTR.CONV_RUN)RTO(O4T_10_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_10_PE1.POS_XITN) XIC(O4T_10_MTR.INTL_MTR) ,XIC(O4T_10_MTR.T2H_SPACE) ]XIO(O4T_10_MTR.T2H_SPACE_TMR.DN)OTE(O4T_10_MTR.T2H_SPACE);
				N: XIC(O4T_10_MTR.T2H_SPACE)OTE(O4T_10_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_11_MTR.ON_TMR.DN) XIC(O4T_10_MTR.OFF_TMR.DN) ,XIO(O4T_11_MTR.IM_ONS) XIC(O4T_10_MTR.IM_ONS) ,XIC(O4T_10_MTR.ANTI_CASC) XIC(I_PE1_O4T_10) ]OTE(O4T_10_MTR.START_EN);
				N: [XIO(O4T_11_MTR.ON_TMR.DN) XIO(I_PE1_O4T_10) ,XIO(O4T_10_MTR.ANTI_CASC) XIC(O4T_10_MTR.SPACE) ]OTE(O4T_10_MTR.STOP);
				N: [XIC(XO1_HSD.SYNC_RUN) XIO(XO1_01_MTR.CONV_RUN) ,AFI() ]OTE(O4T_10_MTR.DIV_SYNC_STOP);
				N: [XIC(XO1_HSD.SYNC_RUN) XIC(XO1_01_MTR.CONV_RUN) ,AFI() ]OTE(O4T_10_MTR.DIV_SYNC_RUN);
				N: [XIC(XO1_HSD.SYNC_RUN) XIO(XO1_01_MTR.CONV_RUN) ,AFI() ]OTE(O4T_10_MTR.DIV_SYNC_STOP);
				N: [XIC(XO1_HSD.SYNC_RUN) XIC(XO1_01_MTR.CONV_RUN) ,AFI() ]OTE(O4T_10_MTR.DIV_SYNC_RUN);
				N: XIC(O4T_10_MTR.INTL_MTR)[XIO(O4T_10_MTR.DIV_SYNC_STOP) [[XIC(O4T_10_MTR.START_EN) ,XIC(O4T_10_MTR.CONV_RUN) ] ,XIC(O4T_10_MTR.DIV_SYNC_RUN) ] XIO(O4T_10_MTR.STOP) ,XIC(F_O4T_10_OVRIDE) ][OTE(O4T_10_MTR.CONV_RUN) ,OTE(O_VFD_O4T_10_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_10_MTR.CONV_RUN)TON(O4T_10_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_10_MTR.CONV_RUN)TON(O4T_10_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_10_MSD_OFF)OTE(O4T_09_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_09_MTR.E_STOP)[XIC(O4T_09_VFD.READY) XIO(O4T_09_MTR.JAMMED) ,XIC(F_O4T_09_OVRIDE) ]XIO(F_O4T_09_MSD_OFF)XIO(F_O4T_09_OUTSERV)XIO(O4T_09_MTR.COMM)OTE(O4T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_09_OVRIDE) ]XIC(O4T_09_MTR.NO_FAULT)TON(O4T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_09_MTR.IM_TMR.DN)[XIO(O4T_09_MTR.INTL_MTR) OTE(O4T_09_MTR.IM_ONS) ,OTE(O4T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_09_PE.FILT_NEG_XITN)RES(O4T_09_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_10_MTR.CONV_RUN)RTO(O4T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_09_PE.POS_XITN) XIC(O4T_09_MTR.INTL_MTR) ,XIC(O4T_09_MTR.T2H_SPACE) ]XIO(O4T_09_MTR.T2H_SPACE_TMR.DN)OTE(O4T_09_MTR.T2H_SPACE);
				N: XIC(O4T_09_MTR.T2H_SPACE)OTE(O4T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_10_MTR.ON_TMR.DN) XIC(O4T_09_MTR.OFF_TMR.DN) ,XIO(O4T_10_MTR.IM_ONS) XIC(O4T_09_MTR.IM_ONS) ,XIC(O4T_09_MTR.ANTI_CASC) XIC(I_PE_O4T_09) ]OTE(O4T_09_MTR.START_EN);
				N: [XIO(O4T_10_MTR.ON_TMR.DN) XIO(I_PE_O4T_09) ,XIO(O4T_09_MTR.ANTI_CASC) XIC(O4T_09_MTR.SPACE) ]OTE(O4T_09_MTR.STOP);
				N: XIC(O4T_09_MTR.INTL_MTR)[[XIC(O4T_09_MTR.START_EN) ,XIC(O4T_09_MTR.CONV_RUN) ] XIO(O4T_09_MTR.STOP) ,XIC(F_O4T_09_OVRIDE) ][OTE(O4T_09_MTR.CONV_RUN) ,OTE(O_VFD_O4T_09_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_09_MTR.CONV_RUN)TON(O4T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_09_MTR.CONV_RUN)TON(O4T_09_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_09_MSD_OFF)OTE(O4T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_08_MTR.E_STOP)[XIC(O4T_08_VFD.READY) XIO(O4T_08_MTR.JAMMED) ,XIC(F_O4T_08_OVRIDE) ]XIO(F_O4T_08_MSD_OFF)XIO(F_O4T_08_OUTSERV)XIO(O4T_08_MTR.COMM)OTE(O4T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_08_OVRIDE) ]XIC(O4T_08_MTR.NO_FAULT)TON(O4T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_08_MTR.IM_TMR.DN)[XIO(O4T_08_MTR.INTL_MTR) OTE(O4T_08_MTR.IM_ONS) ,OTE(O4T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_08_PE.FILT_NEG_XITN)RES(O4T_08_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_09_MTR.CONV_RUN)RTO(O4T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_08_PE.POS_XITN) XIC(O4T_08_MTR.INTL_MTR) ,XIC(O4T_08_MTR.T2H_SPACE) ]XIO(O4T_08_MTR.T2H_SPACE_TMR.DN)OTE(O4T_08_MTR.T2H_SPACE);
				N: XIC(O4T_08_MTR.T2H_SPACE)OTE(O4T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_09_MTR.ON_TMR.DN) XIC(O4T_08_MTR.OFF_TMR.DN) ,XIO(O4T_09_MTR.IM_ONS) XIC(O4T_08_MTR.IM_ONS) ,XIC(O4T_08_MTR.ANTI_CASC) XIC(I_PE_O4T_08) ]OTE(O4T_08_MTR.START_EN);
				N: [XIO(O4T_09_MTR.ON_TMR.DN) XIO(I_PE_O4T_08) ,XIO(O4T_08_MTR.ANTI_CASC) XIC(O4T_08_MTR.SPACE) ]OTE(O4T_08_MTR.STOP);
				N: XIC(O4T_08_MTR.INTL_MTR)[[XIC(O4T_08_MTR.START_EN) ,XIC(O4T_08_MTR.CONV_RUN) ] XIO(O4T_08_MTR.STOP) ,XIC(F_O4T_08_OVRIDE) ][OTE(O4T_08_MTR.CONV_RUN) ,OTE(O_VFD_O4T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_08_MTR.CONV_RUN)TON(O4T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_08_MTR.CONV_RUN)TON(O4T_08_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_07$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_08_MSD_OFF)OTE(O4T_07_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_07_MTR.E_STOP)[XIC(O4T_07_VFD.READY) XIO(O4T_07_MTR.JAMMED) ,XIC(F_O4T_07_OVRIDE) ]XIO(F_O4T_07_MSD_OFF)XIO(F_O4T_07_OUTSERV)XIO(O4T_07_MTR.COMM)OTE(O4T_07_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_07_OVRIDE) ]XIC(O4T_07_MTR.NO_FAULT)TON(O4T_07_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_07_MTR.IM_TMR.DN)[XIO(O4T_07_MTR.INTL_MTR) OTE(O4T_07_MTR.IM_ONS) ,OTE(O4T_07_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_07_PE.FILT_NEG_XITN)RES(O4T_07_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_08_MTR.CONV_RUN)RTO(O4T_07_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_07_PE.POS_XITN) XIC(O4T_07_MTR.INTL_MTR) ,XIC(O4T_07_MTR.T2H_SPACE) ]XIO(O4T_07_MTR.T2H_SPACE_TMR.DN)OTE(O4T_07_MTR.T2H_SPACE);
				N: XIC(O4T_07_MTR.T2H_SPACE)OTE(O4T_07_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_08_MTR.ON_TMR.DN) XIC(O4T_07_MTR.OFF_TMR.DN) ,XIO(O4T_08_MTR.IM_ONS) XIC(O4T_07_MTR.IM_ONS) ,XIC(O4T_07_MTR.ANTI_CASC) XIC(I_PE_O4T_07) ]OTE(O4T_07_MTR.START_EN);
				N: [XIO(O4T_08_MTR.ON_TMR.DN) XIO(I_PE_O4T_07) ,XIO(O4T_07_MTR.ANTI_CASC) XIC(O4T_07_MTR.SPACE) ]OTE(O4T_07_MTR.STOP);
				N: XIC(O4T_07_MTR.INTL_MTR)[[XIC(O4T_07_MTR.START_EN) ,XIC(O4T_07_MTR.CONV_RUN) ] XIO(O4T_07_MTR.STOP) ,XIC(F_O4T_07_OVRIDE) ][OTE(O4T_07_MTR.CONV_RUN) ,OTE(O_VFD_O4T_07_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_07_MTR.CONV_RUN)TON(O4T_07_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_07_MTR.CONV_RUN)TON(O4T_07_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_06$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_07_MSD_OFF)OTE(O4T_06_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_06_MTR.E_STOP)[XIC(O4T_06_VFD.READY) XIO(O4T_06_MTR.JAMMED) ,XIC(F_O4T_06_OVRIDE) ]XIO(F_O4T_06_MSD_OFF)XIO(F_O4T_06_OUTSERV)XIO(O4T_06_MTR.COMM)OTE(O4T_06_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_06_OVRIDE) ]XIC(O4T_06_MTR.NO_FAULT)TON(O4T_06_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_06_MTR.IM_TMR.DN)[XIO(O4T_06_MTR.INTL_MTR) OTE(O4T_06_MTR.IM_ONS) ,OTE(O4T_06_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_06_PE.FILT_NEG_XITN)RES(O4T_06_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_07_MTR.CONV_RUN)RTO(O4T_06_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_06_PE.POS_XITN) XIC(O4T_06_MTR.INTL_MTR) ,XIC(O4T_06_MTR.T2H_SPACE) ]XIO(O4T_06_MTR.T2H_SPACE_TMR.DN)OTE(O4T_06_MTR.T2H_SPACE);
				N: XIC(O4T_06_MTR.T2H_SPACE)OTE(O4T_06_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_07_MTR.ON_TMR.DN) XIC(O4T_06_MTR.OFF_TMR.DN) ,XIO(O4T_07_MTR.IM_ONS) XIC(O4T_06_MTR.IM_ONS) ,XIC(O4T_06_MTR.ANTI_CASC) XIC(I_PE_O4T_06) ]OTE(O4T_06_MTR.START_EN);
				N: [XIO(O4T_07_MTR.ON_TMR.DN) XIO(I_PE_O4T_06) ,XIO(O4T_06_MTR.ANTI_CASC) XIC(O4T_06_MTR.SPACE) ]OTE(O4T_06_MTR.STOP);
				N: XIC(O4T_06_MTR.INTL_MTR)[[XIC(O4T_06_MTR.START_EN) ,XIC(O4T_06_MTR.CONV_RUN) ] XIO(O4T_06_MTR.STOP) ,XIC(F_O4T_06_OVRIDE) ][OTE(O4T_06_MTR.CONV_RUN) ,OTE(O_VFD_O4T_06_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_06_MTR.CONV_RUN)TON(O4T_06_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_06_MTR.CONV_RUN)TON(O4T_06_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_06_MSD_OFF)OTE(O4T_05_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_05_MTR.E_STOP)[XIC(O4T_05_VFD.READY) XIO(O4T_05_MTR.JAMMED) ,XIC(F_O4T_05_OVRIDE) ]XIO(F_O4T_05_MSD_OFF)XIO(F_O4T_05_OUTSERV)XIO(O4T_05_MTR.COMM)OTE(O4T_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_05_OVRIDE) ]XIC(O4T_05_MTR.NO_FAULT)TON(O4T_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_05_MTR.IM_TMR.DN)[XIO(O4T_05_MTR.INTL_MTR) OTE(O4T_05_MTR.IM_ONS) ,OTE(O4T_05_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_05_PE.FILT_NEG_XITN)RES(O4T_05_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_06_MTR.CONV_RUN)RTO(O4T_05_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_05_PE.POS_XITN) XIC(O4T_05_MTR.INTL_MTR) ,XIC(O4T_05_MTR.T2H_SPACE) ]XIO(O4T_05_MTR.T2H_SPACE_TMR.DN)OTE(O4T_05_MTR.T2H_SPACE);
				N: XIC(O4T_05_MTR.T2H_SPACE)OTE(O4T_05_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_06_MTR.ON_TMR.DN) XIC(O4T_05_MTR.OFF_TMR.DN) ,XIO(O4T_06_MTR.IM_ONS) XIC(O4T_05_MTR.IM_ONS) ,XIC(O4T_05_MTR.ANTI_CASC) XIC(I_PE_O4T_05) ]OTE(O4T_05_MTR.START_EN);
				N: [XIO(O4T_06_MTR.ON_TMR.DN) XIO(I_PE_O4T_05) ,XIO(O4T_05_MTR.ANTI_CASC) XIC(O4T_05_MTR.SPACE) ]OTE(O4T_05_MTR.STOP);
				N: XIC(O4T_05_MTR.INTL_MTR)[[XIC(O4T_05_MTR.START_EN) ,XIC(O4T_05_MTR.CONV_RUN) ] XIO(O4T_05_MTR.STOP) ,XIC(F_O4T_05_OVRIDE) ][OTE(O4T_05_MTR.CONV_RUN) ,OTE(O_VFD_O4T_05_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_05_MTR.CONV_RUN)TON(O4T_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_05_MTR.CONV_RUN)TON(O4T_05_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_22$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(O4T_22_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_22_MTR.E_STOP)[XIC(O4T_22_VFD.READY) XIO(O4T_22_MTR.JAMMED) ,XIC(F_O4T_22_OVRIDE) ]XIO(F_O4T_22_MSD_OFF)XIO(F_O4T_22_OUTSERV)XIO(O4T_22_MTR.COMM)OTE(O4T_22_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_22_OVRIDE) ]XIC(O4T_22_MTR.NO_FAULT)TON(O4T_22_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_22_MTR.IM_TMR.DN)[XIO(O4T_22_MTR.INTL_MTR) OTE(O4T_22_MTR.IM_ONS) ,OTE(O4T_22_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(zzzO4T_23ZZ_MTR_ON_TMR_DN) XIC(O4T_22_MTR.OFF_TMR.DN) ,XIO(zzzO4T_23ZZ_MTR_IM_ONS) XIC(O4T_22_MTR.IM_ONS) ,XIC(O4T_22_MTR.ANTI_CASC) XIC(I_PE_O4T_22) ]OTE(O4T_22_MTR.START_EN);
				N: XIO(zzzO4T_23ZZ_MTR_ON_TMR_DN)XIO(I_PE_O4T_22)OTE(O4T_22_MTR.STOP);
				N: XIC(O4T_22_MTR.INTL_MTR)[[XIC(O4T_22_MTR.START_EN) ,XIC(O4T_22_MTR.CONV_RUN) ] XIO(O4T_22_MTR.STOP) ,XIC(F_O4T_22_OVRIDE) ][OTE(O4T_22_MTR.CONV_RUN) ,OTE(O_VFD_O4T_22_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_22_MTR.CONV_RUN)TON(O4T_22_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_22_MTR.CONV_RUN)TON(O4T_22_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_21$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_22_MSD_OFF)OTE(O4T_21_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_21_MTR.E_STOP)[XIC(O4T_21_VFD.READY) XIO(O4T_21_MTR.JAMMED) ,XIC(F_O4T_21_OVRIDE) ]XIO(F_O4T_21_MSD_OFF)XIO(F_O4T_21_OUTSERV)XIO(O4T_21_MTR.COMM)OTE(O4T_21_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_21_OVRIDE) ]XIC(O4T_21_MTR.NO_FAULT)TON(O4T_21_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_21_MTR.IM_TMR.DN)[XIO(O4T_21_MTR.INTL_MTR) OTE(O4T_21_MTR.IM_ONS) ,OTE(O4T_21_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(O4T_22_MTR.ON_TMR.DN) XIC(O4T_21_MTR.OFF_TMR.DN) ,XIO(O4T_22_MTR.IM_ONS) XIC(O4T_21_MTR.IM_ONS) ,XIC(O4T_21_MTR.ANTI_CASC) XIC(I_PE_O4T_21) ]OTE(O4T_21_MTR.START_EN);
				N: XIO(O4T_22_MTR.ON_TMR.DN)XIO(I_PE_O4T_21)OTE(O4T_21_MTR.STOP);
				N: XIC(O4T_21_MTR.INTL_MTR)[[XIC(O4T_21_MTR.START_EN) ,XIC(O4T_21_MTR.CONV_RUN) ] XIO(O4T_21_MTR.STOP) ,XIC(F_O4T_21_OVRIDE) ][OTE(O4T_21_MTR.CONV_RUN) ,OTE(O_VFD_O4T_21_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_21_MTR.CONV_RUN)TON(O4T_21_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_21_MTR.CONV_RUN)TON(O4T_21_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_20$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_21_MSD_OFF)OTE(O4T_20_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_20_MTR.E_STOP)[XIC(O4T_20_VFD.READY) XIO(O4T_20_MTR.JAMMED) ,XIC(F_O4T_20_OVRIDE) ]XIO(F_O4T_20_MSD_OFF)XIO(F_O4T_20_OUTSERV)XIO(O4T_20_MTR.COMM)OTE(O4T_20_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_20_OVRIDE) ]XIC(O4T_20_MTR.NO_FAULT)TON(O4T_20_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_20_MTR.IM_TMR.DN)[XIO(O4T_20_MTR.INTL_MTR) OTE(O4T_20_MTR.IM_ONS) ,OTE(O4T_20_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_20_PE.FILT_NEG_XITN)RES(O4T_20_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_21_MTR.CONV_RUN)RTO(O4T_20_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_20_PE.POS_XITN) XIC(O4T_20_MTR.INTL_MTR) ,XIC(O4T_20_MTR.T2H_SPACE) ]XIO(O4T_20_MTR.T2H_SPACE_TMR.DN)OTE(O4T_20_MTR.T2H_SPACE);
				N: XIC(O4T_20_MTR.T2H_SPACE)OTE(O4T_20_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_21_MTR.ON_TMR.DN) XIC(O4T_20_MTR.OFF_TMR.DN) ,XIO(O4T_21_MTR.IM_ONS) XIC(O4T_20_MTR.IM_ONS) ,XIC(O4T_20_MTR.ANTI_CASC) XIC(I_PE_O4T_20) ]OTE(O4T_20_MTR.START_EN);
				N: [XIO(O4T_21_MTR.ON_TMR.DN) XIO(I_PE_O4T_20) ,XIO(O4T_20_MTR.ANTI_CASC) XIC(O4T_20_MTR.SPACE) ]OTE(O4T_20_MTR.STOP);
				N: XIC(O4T_20_MTR.INTL_MTR)[[XIC(O4T_20_MTR.START_EN) ,XIC(O4T_20_MTR.CONV_RUN) ] XIO(O4T_20_MTR.STOP) ,XIC(F_O4T_20_OVRIDE) ][OTE(O4T_20_MTR.CONV_RUN) ,OTE(O_VFD_O4T_20_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_20_MTR.CONV_RUN)TON(O4T_20_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_20_MTR.CONV_RUN)TON(O4T_20_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_19$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_20_MSD_OFF)OTE(O4T_19_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_19_MTR.E_STOP)[XIC(O4T_19_VFD.READY) XIO(O4T_19_MTR.JAMMED) ,XIC(F_O4T_19_OVRIDE) ]XIO(F_O4T_19_MSD_OFF)XIO(F_O4T_19_OUTSERV)XIO(O4T_19_MTR.COMM)OTE(O4T_19_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_19_OVRIDE) ]XIC(O4T_19_MTR.NO_FAULT)TON(O4T_19_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_19_MTR.IM_TMR.DN)[XIO(O4T_19_MTR.INTL_MTR) OTE(O4T_19_MTR.IM_ONS) ,OTE(O4T_19_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_19_PE.FILT_NEG_XITN)RES(O4T_19_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_20_MTR.CONV_RUN)RTO(O4T_19_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_19_PE.POS_XITN) XIC(O4T_19_MTR.INTL_MTR) ,XIC(O4T_19_MTR.T2H_SPACE) ]XIO(O4T_19_MTR.T2H_SPACE_TMR.DN)OTE(O4T_19_MTR.T2H_SPACE);
				N: XIC(O4T_19_MTR.T2H_SPACE)OTE(O4T_19_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_20_MTR.ON_TMR.DN) XIC(O4T_19_MTR.OFF_TMR.DN) ,XIO(O4T_20_MTR.IM_ONS) XIC(O4T_19_MTR.IM_ONS) ,XIC(O4T_19_MTR.ANTI_CASC) XIC(I_PE_O4T_19) ]OTE(O4T_19_MTR.START_EN);
				N: [XIO(O4T_20_MTR.ON_TMR.DN) XIO(I_PE_O4T_19) ,XIO(O4T_19_MTR.ANTI_CASC) XIC(O4T_19_MTR.SPACE) ]OTE(O4T_19_MTR.STOP);
				N: XIC(O4T_19_MTR.INTL_MTR)[[XIC(O4T_19_MTR.START_EN) ,XIC(O4T_19_MTR.CONV_RUN) ] XIO(O4T_19_MTR.STOP) ,XIC(F_O4T_19_OVRIDE) ][OTE(O4T_19_MTR.CONV_RUN) ,OTE(O_VFD_O4T_19_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_19_MTR.CONV_RUN)TON(O4T_19_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_19_MTR.CONV_RUN)TON(O4T_19_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_18$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_19_MSD_OFF)OTE(O4T_18_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_18_MTR.E_STOP)[XIC(O4T_18_VFD.READY) XIO(O4T_18_MTR.JAMMED) ,XIC(F_O4T_18_OVRIDE) ]XIO(F_O4T_18_MSD_OFF)XIO(F_O4T_18_OUTSERV)XIO(O4T_18_MTR.COMM)OTE(O4T_18_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_18_OVRIDE) ]XIC(O4T_18_MTR.NO_FAULT)TON(O4T_18_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_18_MTR.IM_TMR.DN)[XIO(O4T_18_MTR.INTL_MTR) OTE(O4T_18_MTR.IM_ONS) ,OTE(O4T_18_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_18_PE.FILT_NEG_XITN)RES(O4T_18_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_19_MTR.CONV_RUN)RTO(O4T_18_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_18_PE.POS_XITN) XIC(O4T_18_MTR.INTL_MTR) ,XIC(O4T_18_MTR.T2H_SPACE) ]XIO(O4T_18_MTR.T2H_SPACE_TMR.DN)OTE(O4T_18_MTR.T2H_SPACE);
				N: XIC(O4T_18_MTR.T2H_SPACE)OTE(O4T_18_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_19_MTR.ON_TMR.DN) XIC(O4T_18_MTR.OFF_TMR.DN) ,XIO(O4T_19_MTR.IM_ONS) XIC(O4T_18_MTR.IM_ONS) ,XIC(O4T_18_MTR.ANTI_CASC) XIC(I_PE_O4T_18) ]OTE(O4T_18_MTR.START_EN);
				N: [XIO(O4T_19_MTR.ON_TMR.DN) XIO(I_PE_O4T_18) ,XIO(O4T_18_MTR.ANTI_CASC) XIC(O4T_18_MTR.SPACE) ]OTE(O4T_18_MTR.STOP);
				N: XIC(O4T_18_MTR.INTL_MTR)[[XIC(O4T_18_MTR.START_EN) ,XIC(O4T_18_MTR.CONV_RUN) ] XIO(O4T_18_MTR.STOP) ,XIC(F_O4T_18_OVRIDE) ][OTE(O4T_18_MTR.CONV_RUN) ,OTE(O_VFD_O4T_18_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_18_MTR.CONV_RUN)TON(O4T_18_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_18_MTR.CONV_RUN)TON(O4T_18_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_17$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_18_MSD_OFF)OTE(O4T_17_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O4T_17_MTR.E_STOP)[XIC(O4T_17_VFD.READY) XIO(O4T_17_MTR.JAMMED) ,XIC(F_O4T_17_OVRIDE) ]XIO(F_O4T_17_MSD_OFF)XIO(F_O4T_17_OUTSERV)XIO(O4T_17_MTR.COMM)OTE(O4T_17_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_17_OVRIDE) ]XIC(O4T_17_MTR.NO_FAULT)TON(O4T_17_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O4T_17_MTR.IM_TMR.DN)[XIO(O4T_17_MTR.INTL_MTR) OTE(O4T_17_MTR.IM_ONS) ,OTE(O4T_17_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_17_PE.FILT_NEG_XITN)RES(O4T_17_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_18_MTR.CONV_RUN)RTO(O4T_17_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_17_PE.POS_XITN) XIC(O4T_17_MTR.INTL_MTR) ,XIC(O4T_17_MTR.T2H_SPACE) ]XIO(O4T_17_MTR.T2H_SPACE_TMR.DN)OTE(O4T_17_MTR.T2H_SPACE);
				N: XIC(O4T_17_MTR.T2H_SPACE)OTE(O4T_17_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_18_MTR.ON_TMR.DN) XIC(O4T_17_MTR.OFF_TMR.DN) ,XIO(O4T_18_MTR.IM_ONS) XIC(O4T_17_MTR.IM_ONS) ,XIC(O4T_17_MTR.ANTI_CASC) XIC(I_PE_O4T_17) ]OTE(O4T_17_MTR.START_EN);
				N: [XIO(O4T_18_MTR.ON_TMR.DN) XIO(I_PE_O4T_17) ,XIO(O4T_17_MTR.ANTI_CASC) XIC(O4T_17_MTR.SPACE) ]OTE(O4T_17_MTR.STOP);
				N: XIC(O4T_17_MTR.INTL_MTR)[[XIC(O4T_17_MTR.START_EN) ,XIC(O4T_17_MTR.CONV_RUN) ] XIO(O4T_17_MTR.STOP) ,XIC(F_O4T_17_OVRIDE) ][OTE(O4T_17_MTR.CONV_RUN) ,OTE(O_VFD_O4T_17_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O4T_17_MTR.CONV_RUN)TON(O4T_17_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O4T_17_MTR.CONV_RUN)TON(O4T_17_MTR.OFF_TMR,?,?);
				RC: "Motor O4T_16$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_O4T_17_MSD_OFF)OTE(O3T_21_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(O3T_21_MTR.E_STOP)[XIC(O3T_21_VFD.READY) XIO(O3T_21_MTR.JAMMED) ,XIC(F_O4T_16_OVRIDE) ]XIO(F_O4T_16_MSD_OFF)XIO(F_O4T_16_OUTSERV)XIO(O3T_21_MTR.COMM)OTE(O3T_21_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(O4T.MTR_GRP.RUN_LATCH) ,XIC(F_O4T_16_OVRIDE) ]XIC(O3T_21_MTR.NO_FAULT)TON(O3T_21_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(O3T_21_MTR.IM_TMR.DN)[XIO(O3T_21_MTR.INTL_MTR) OTE(O3T_21_MTR.IM_ONS) ,OTE(O3T_21_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(O4T_16_PE.FILT_NEG_XITN)RES(O3T_21_MTR.T2H_SPACE_TMR);
				N: XIC(O4T_17_MTR.CONV_RUN)RTO(O3T_21_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(O4T_16_PE.POS_XITN) XIC(O3T_21_MTR.INTL_MTR) ,XIC(O3T_21_MTR.T2H_SPACE) ]XIO(O3T_21_MTR.T2H_SPACE_TMR.DN)OTE(O3T_21_MTR.T2H_SPACE);
				N: XIC(O3T_21_MTR.T2H_SPACE)OTE(O3T_21_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(O4T_17_MTR.ON_TMR.DN) XIC(O3T_21_MTR.OFF_TMR.DN) ,XIO(O4T_17_MTR.IM_ONS) XIC(O3T_21_MTR.IM_ONS) ,XIC(O3T_21_MTR.ANTI_CASC) XIC(I_PE_O4T_16) ]OTE(O3T_21_MTR.START_EN);
				N: [XIO(O4T_17_MTR.ON_TMR.DN) XIO(I_PE_O4T_16) ,XIO(O3T_21_MTR.ANTI_CASC) XIC(O3T_21_MTR.SPACE) ]OTE(O3T_21_MTR.STOP);
				N: XIC(O3T_21_MTR.INTL_MTR)[[XIC(O3T_21_MTR.START_EN) ,XIC(O3T_21_MTR.CONV_RUN) ] XIO(O3T_21_MTR.STOP) ,XIC(F_O4T_16_OVRIDE) ][OTE(O3T_21_MTR.CONV_RUN) ,OTE(O_VFD_O4T_16_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(O3T_21_MTR.CONV_RUN)TON(O3T_21_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(O3T_21_MTR.CONV_RUN)TON(O3T_21_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE O4T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(O4T_13_MTR.COMM)[[XIO(I_PE_O4T_13) ,XIC(O4T_13_PE.TOF.DN) ] TON(O4T_13_PE.TON,?,?) ,XIO(I_PE_O4T_13) XIC(O4T_13_PE.TON.DN) TOF(O4T_13_PE.TOF,?,?) ,XIC(O4T_13_PE.TOF.DN) OTE(O4T_13_PE.FILT) ];
				N: XIC(O4T_13_PE.FILT)[XIO(O4T_13_PE.FILT_POS_XITN_MEM) OTE(O4T_13_PE.FILT_POS_XITN) ,OTE(O4T_13_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_13_PE.FILT)[XIO(O4T_13_PE.FILT_NEG_XITN_MEM) OTE(O4T_13_PE.FILT_NEG_XITN) ,OTE(O4T_13_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_12_MTR.COMM)[[XIO(I_PE_O4T_12) ,XIC(O4T_12_PE.TOF.DN) ] TON(O4T_12_PE.TON,?,?) ,XIO(I_PE_O4T_12) XIC(O4T_12_PE.TON.DN) TOF(O4T_12_PE.TOF,?,?) ,XIC(O4T_12_PE.TOF.DN) OTE(O4T_12_PE.FILT) ];
				N: XIC(O4T_12_PE.FILT)[XIO(O4T_12_PE.FILT_POS_XITN_MEM) OTE(O4T_12_PE.FILT_POS_XITN) ,OTE(O4T_12_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_12_PE.FILT)[XIO(O4T_12_PE.FILT_NEG_XITN_MEM) OTE(O4T_12_PE.FILT_NEG_XITN) ,OTE(O4T_12_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_12)[XIO(O4T_12_PE.POS_XITN_MEM) OTE(O4T_12_PE.POS_XITN) ,OTE(O4T_12_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_11_MTR.COMM)[[XIO(I_PE_O4T_11) ,XIC(O4T_11_PE.TOF.DN) ] TON(O4T_11_PE.TON,?,?) ,XIO(I_PE_O4T_11) XIC(O4T_11_PE.TON.DN) TOF(O4T_11_PE.TOF,?,?) ,XIC(O4T_11_PE.TOF.DN) OTE(O4T_11_PE.FILT) ];
				N: XIC(O4T_11_PE.FILT)[XIO(O4T_11_PE.FILT_POS_XITN_MEM) OTE(O4T_11_PE.FILT_POS_XITN) ,OTE(O4T_11_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_11_PE.FILT)[XIO(O4T_11_PE.FILT_NEG_XITN_MEM) OTE(O4T_11_PE.FILT_NEG_XITN) ,OTE(O4T_11_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_11)[XIO(O4T_11_PE.POS_XITN_MEM) OTE(O4T_11_PE.POS_XITN) ,OTE(O4T_11_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_10_MTR.COMM)[[XIO(I_PE1_O4T_10) ,XIC(O4T_10_PE1.TOF.DN) ] TON(O4T_10_PE1.TON,?,?) ,XIO(I_PE1_O4T_10) XIC(O4T_10_PE1.TON.DN) TOF(O4T_10_PE1.TOF,?,?) ,XIC(O4T_10_PE1.TOF.DN) OTE(O4T_10_PE1.FILT) ];
				N: XIC(O4T_10_PE1.FILT)[XIO(O4T_10_PE1.FILT_POS_XITN_MEM) OTE(O4T_10_PE1.FILT_POS_XITN) ,OTE(O4T_10_PE1.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_10_PE1.FILT)[XIO(O4T_10_PE1.FILT_NEG_XITN_MEM) OTE(O4T_10_PE1.FILT_NEG_XITN) ,OTE(O4T_10_PE1.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE1_O4T_10)[XIO(O4T_10_PE1.POS_XITN_MEM) OTE(O4T_10_PE1.POS_XITN) ,OTE(O4T_10_PE1.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_10_MTR.COMM)[[XIO(I_PE2_O4T_10) ,XIC(O4T_10_PE2.TOF.DN) ] TON(O4T_10_PE2.TON,?,?) ,XIO(I_PE2_O4T_10) XIC(O4T_10_PE2.TON.DN) TOF(O4T_10_PE2.TOF,?,?) ,XIC(O4T_10_PE2.TOF.DN) OTE(O4T_10_PE2.FILT) ];
				N: XIC(O4T_10_PE2.FILT)[XIO(O4T_10_PE2.FILT_POS_XITN_MEM) OTE(O4T_10_PE2.FILT_POS_XITN) ,OTE(O4T_10_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_10_PE2.FILT)[XIO(O4T_10_PE2.FILT_NEG_XITN_MEM) OTE(O4T_10_PE2.FILT_NEG_XITN) ,OTE(O4T_10_PE2.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_09_MTR.COMM)[[XIO(I_PE_O4T_09) ,XIC(O4T_09_PE.TOF.DN) ] TON(O4T_09_PE.TON,?,?) ,XIO(I_PE_O4T_09) XIC(O4T_09_PE.TON.DN) TOF(O4T_09_PE.TOF,?,?) ,XIC(O4T_09_PE.TOF.DN) OTE(O4T_09_PE.FILT) ];
				N: XIC(O4T_09_PE.FILT)[XIO(O4T_09_PE.FILT_POS_XITN_MEM) OTE(O4T_09_PE.FILT_POS_XITN) ,OTE(O4T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_09_PE.FILT)[XIO(O4T_09_PE.FILT_NEG_XITN_MEM) OTE(O4T_09_PE.FILT_NEG_XITN) ,OTE(O4T_09_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_09)[XIO(O4T_09_PE.POS_XITN_MEM) OTE(O4T_09_PE.POS_XITN) ,OTE(O4T_09_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_08_MTR.COMM)[[XIO(I_PE_O4T_08) ,XIC(O4T_08_PE.TOF.DN) ] TON(O4T_08_PE.TON,?,?) ,XIO(I_PE_O4T_08) XIC(O4T_08_PE.TON.DN) TOF(O4T_08_PE.TOF,?,?) ,XIC(O4T_08_PE.TOF.DN) OTE(O4T_08_PE.FILT) ];
				N: XIC(O4T_08_PE.FILT)[XIO(O4T_08_PE.FILT_POS_XITN_MEM) OTE(O4T_08_PE.FILT_POS_XITN) ,OTE(O4T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_08_PE.FILT)[XIO(O4T_08_PE.FILT_NEG_XITN_MEM) OTE(O4T_08_PE.FILT_NEG_XITN) ,OTE(O4T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_08)[XIO(O4T_08_PE.POS_XITN_MEM) OTE(O4T_08_PE.POS_XITN) ,OTE(O4T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_07_MTR.COMM)[[XIO(I_PE_O4T_07) ,XIC(O4T_07_PE.TOF.DN) ] TON(O4T_07_PE.TON,?,?) ,XIO(I_PE_O4T_07) XIC(O4T_07_PE.TON.DN) TOF(O4T_07_PE.TOF,?,?) ,XIC(O4T_07_PE.TOF.DN) OTE(O4T_07_PE.FILT) ];
				N: XIC(O4T_07_PE.FILT)[XIO(O4T_07_PE.FILT_POS_XITN_MEM) OTE(O4T_07_PE.FILT_POS_XITN) ,OTE(O4T_07_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_07_PE.FILT)[XIO(O4T_07_PE.FILT_NEG_XITN_MEM) OTE(O4T_07_PE.FILT_NEG_XITN) ,OTE(O4T_07_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_07)[XIO(O4T_07_PE.POS_XITN_MEM) OTE(O4T_07_PE.POS_XITN) ,OTE(O4T_07_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_06_MTR.COMM)[[XIO(I_PE_O4T_06) ,XIC(O4T_06_PE.TOF.DN) ] TON(O4T_06_PE.TON,?,?) ,XIO(I_PE_O4T_06) XIC(O4T_06_PE.TON.DN) TOF(O4T_06_PE.TOF,?,?) ,XIC(O4T_06_PE.TOF.DN) OTE(O4T_06_PE.FILT) ];
				N: XIC(O4T_06_PE.FILT)[XIO(O4T_06_PE.FILT_POS_XITN_MEM) OTE(O4T_06_PE.FILT_POS_XITN) ,OTE(O4T_06_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_06_PE.FILT)[XIO(O4T_06_PE.FILT_NEG_XITN_MEM) OTE(O4T_06_PE.FILT_NEG_XITN) ,OTE(O4T_06_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_06)[XIO(O4T_06_PE.POS_XITN_MEM) OTE(O4T_06_PE.POS_XITN) ,OTE(O4T_06_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_05_MTR.COMM)[[XIO(I_PE_O4T_05) ,XIC(O4T_05_PE.TOF.DN) ] TON(O4T_05_PE.TON,?,?) ,XIO(I_PE_O4T_05) XIC(O4T_05_PE.TON.DN) TOF(O4T_05_PE.TOF,?,?) ,XIC(O4T_05_PE.TOF.DN) OTE(O4T_05_PE.FILT) ];
				N: XIC(O4T_05_PE.FILT)[XIO(O4T_05_PE.FILT_POS_XITN_MEM) OTE(O4T_05_PE.FILT_POS_XITN) ,OTE(O4T_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_05_PE.FILT)[XIO(O4T_05_PE.FILT_NEG_XITN_MEM) OTE(O4T_05_PE.FILT_NEG_XITN) ,OTE(O4T_05_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_05)[XIO(O4T_05_PE.POS_XITN_MEM) OTE(O4T_05_PE.POS_XITN) ,OTE(O4T_05_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_22_MTR.COMM)[[XIO(I_PE_O4T_22) ,XIC(O4T_22_PE.TOF.DN) ] TON(O4T_22_PE.TON,?,?) ,XIO(I_PE_O4T_22) XIC(O4T_22_PE.TON.DN) TOF(O4T_22_PE.TOF,?,?) ,XIC(O4T_22_PE.TOF.DN) OTE(O4T_22_PE.FILT) ];
				N: XIC(O4T_22_PE.FILT)[XIO(O4T_22_PE.FILT_POS_XITN_MEM) OTE(O4T_22_PE.FILT_POS_XITN) ,OTE(O4T_22_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_22_PE.FILT)[XIO(O4T_22_PE.FILT_NEG_XITN_MEM) OTE(O4T_22_PE.FILT_NEG_XITN) ,OTE(O4T_22_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_21_MTR.COMM)[[XIO(I_PE_O4T_21) ,XIC(O4T_21_PE.TOF.DN) ] TON(O4T_21_PE.TON,?,?) ,XIO(I_PE_O4T_21) XIC(O4T_21_PE.TON.DN) TOF(O4T_21_PE.TOF,?,?) ,XIC(O4T_21_PE.TOF.DN) OTE(O4T_21_PE.FILT) ];
				N: XIC(O4T_21_PE.FILT)[XIO(O4T_21_PE.FILT_POS_XITN_MEM) OTE(O4T_21_PE.FILT_POS_XITN) ,OTE(O4T_21_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_21_PE.FILT)[XIO(O4T_21_PE.FILT_NEG_XITN_MEM) OTE(O4T_21_PE.FILT_NEG_XITN) ,OTE(O4T_21_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_20_MTR.COMM)[[XIO(I_PE_O4T_20) ,XIC(O4T_20_PE.TOF.DN) ] TON(O4T_20_PE.TON,?,?) ,XIO(I_PE_O4T_20) XIC(O4T_20_PE.TON.DN) TOF(O4T_20_PE.TOF,?,?) ,XIC(O4T_20_PE.TOF.DN) OTE(O4T_20_PE.FILT) ];
				N: XIC(O4T_20_PE.FILT)[XIO(O4T_20_PE.FILT_POS_XITN_MEM) OTE(O4T_20_PE.FILT_POS_XITN) ,OTE(O4T_20_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_20_PE.FILT)[XIO(O4T_20_PE.FILT_NEG_XITN_MEM) OTE(O4T_20_PE.FILT_NEG_XITN) ,OTE(O4T_20_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_20)[XIO(O4T_20_PE.POS_XITN_MEM) OTE(O4T_20_PE.POS_XITN) ,OTE(O4T_20_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_19_MTR.COMM)[[XIO(I_PE_O4T_19) ,XIC(O4T_19_PE.TOF.DN) ] TON(O4T_19_PE.TON,?,?) ,XIO(I_PE_O4T_19) XIC(O4T_19_PE.TON.DN) TOF(O4T_19_PE.TOF,?,?) ,XIC(O4T_19_PE.TOF.DN) OTE(O4T_19_PE.FILT) ];
				N: XIC(O4T_19_PE.FILT)[XIO(O4T_19_PE.FILT_POS_XITN_MEM) OTE(O4T_19_PE.FILT_POS_XITN) ,OTE(O4T_19_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_19_PE.FILT)[XIO(O4T_19_PE.FILT_NEG_XITN_MEM) OTE(O4T_19_PE.FILT_NEG_XITN) ,OTE(O4T_19_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_19)[XIO(O4T_19_PE.POS_XITN_MEM) OTE(O4T_19_PE.POS_XITN) ,OTE(O4T_19_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_18_MTR.COMM)[[XIO(I_PE_O4T_18) ,XIC(O4T_18_PE.TOF.DN) ] TON(O4T_18_PE.TON,?,?) ,XIO(I_PE_O4T_18) XIC(O4T_18_PE.TON.DN) TOF(O4T_18_PE.TOF,?,?) ,XIC(O4T_18_PE.TOF.DN) OTE(O4T_18_PE.FILT) ];
				N: XIC(O4T_18_PE.FILT)[XIO(O4T_18_PE.FILT_POS_XITN_MEM) OTE(O4T_18_PE.FILT_POS_XITN) ,OTE(O4T_18_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_18_PE.FILT)[XIO(O4T_18_PE.FILT_NEG_XITN_MEM) OTE(O4T_18_PE.FILT_NEG_XITN) ,OTE(O4T_18_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_18)[XIO(O4T_18_PE.POS_XITN_MEM) OTE(O4T_18_PE.POS_XITN) ,OTE(O4T_18_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O4T_17_MTR.COMM)[[XIO(I_PE_O4T_17) ,XIC(O4T_17_PE.TOF.DN) ] TON(O4T_17_PE.TON,?,?) ,XIO(I_PE_O4T_17) XIC(O4T_17_PE.TON.DN) TOF(O4T_17_PE.TOF,?,?) ,XIC(O4T_17_PE.TOF.DN) OTE(O4T_17_PE.FILT) ];
				N: XIC(O4T_17_PE.FILT)[XIO(O4T_17_PE.FILT_POS_XITN_MEM) OTE(O4T_17_PE.FILT_POS_XITN) ,OTE(O4T_17_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_17_PE.FILT)[XIO(O4T_17_PE.FILT_NEG_XITN_MEM) OTE(O4T_17_PE.FILT_NEG_XITN) ,OTE(O4T_17_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_17)[XIO(O4T_17_PE.POS_XITN_MEM) OTE(O4T_17_PE.POS_XITN) ,OTE(O4T_17_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(O3T_21_MTR.COMM)[[XIO(I_PE_O4T_16) ,XIC(O4T_16_PE.TOF.DN) ] TON(O4T_16_PE.TON,?,?) ,XIO(I_PE_O4T_16) XIC(O4T_16_PE.TON.DN) TOF(O4T_16_PE.TOF,?,?) ,XIC(O4T_16_PE.TOF.DN) OTE(O4T_16_PE.FILT) ];
				N: XIC(O4T_16_PE.FILT)[XIO(O4T_16_PE.FILT_POS_XITN_MEM) OTE(O4T_16_PE.FILT_POS_XITN) ,OTE(O4T_16_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4T_16_PE.FILT)[XIO(O4T_16_PE.FILT_NEG_XITN_MEM) OTE(O4T_16_PE.FILT_NEG_XITN) ,OTE(O4T_16_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_O4T_16)[XIO(O4T_16_PE.POS_XITN_MEM) OTE(O4T_16_PE.POS_XITN) ,OTE(O4T_16_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE O4T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_13_MTR.COMM);
				N: XIC(O_VFD_O4T_13_FWD)XIC(O4T_13_MTR.CONV_RUN)OTE(O4T_13_MTR.RUNNING);
				N: XIC(O4T_13_VFD.FAULTED)[XIO(F_O4T_13_VFD_FAULT) OTE(O4T_13_VFD.FAULT_ONS) ,OTE(F_O4T_13_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_13_MOL);
				N: XIO(I_MSD_O4T_13)XIO(O4T_13_MTR.COMM)[XIO(F_O4T_13_MSD_OFF) OTE(O4T_13_MTR.MSD_ONS) ,OTE(F_O4T_13_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_13_CTCTR_FAULT) OTE(O4T_13_MTR.MS_FLT_ONS) ,OTE(F_O4T_13_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_13_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_13_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_13_MTR.FIRE_ALM);
				N: XIO(O4T_13_MTR.CONV_RUN)XIC(O4T_13_MTR.INTL_MTR)OTE(O4T_13_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_13_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_13_OVRIDE_REQ)[XIO(F_O4T_13_OVRIDE) OTE(O4T_13_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_13_OVRIDE) ];
				N: XIC(HMI_O4T_13_OUTSERV_REQ)[XIO(F_O4T_13_OUTSERV) OTE(O4T_13_MTR.OOS_ONS) ,OTE(F_O4T_13_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_13_MTR.MB_JAMMED);
				N: [XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(O4T_13_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_13_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_12_MTR.COMM);
				N: XIC(O_VFD_O4T_12_FWD)XIC(O4T_12_MTR.CONV_RUN)OTE(O4T_12_MTR.RUNNING);
				N: XIC(O4T_12_VFD.FAULTED)[XIO(F_O4T_12_VFD_FAULT) OTE(O4T_12_VFD.FAULT_ONS) ,OTE(F_O4T_12_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_12_MOL);
				N: XIO(I_MSD_O4T_12)XIO(O4T_12_MTR.COMM)[XIO(F_O4T_12_MSD_OFF) OTE(O4T_12_MTR.MSD_ONS) ,OTE(F_O4T_12_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_12_CTCTR_FAULT) OTE(O4T_12_MTR.MS_FLT_ONS) ,OTE(F_O4T_12_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_12_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_12_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_12_MTR.FIRE_ALM);
				N: XIO(O4T_12_MTR.CONV_RUN)XIC(O4T_12_MTR.INTL_MTR)OTE(O4T_12_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_12_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_12_OVRIDE_REQ)[XIO(F_O4T_12_OVRIDE) OTE(O4T_12_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_12_OVRIDE) ];
				N: XIC(HMI_O4T_12_OUTSERV_REQ)[XIO(F_O4T_12_OUTSERV) OTE(O4T_12_MTR.OOS_ONS) ,OTE(F_O4T_12_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_12_MTR.MB_JAMMED);
				N: [XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_11_PE_JAMMED) ,XIC(O4T_12_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_12_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_11_MTR.COMM);
				N: XIC(O_VFD_O4T_11_FWD)XIC(O4T_11_MTR.CONV_RUN)OTE(O4T_11_MTR.RUNNING);
				N: XIC(O4T_11_VFD.FAULTED)[XIO(F_O4T_11_VFD_FAULT) OTE(O4T_11_VFD.FAULT_ONS) ,OTE(F_O4T_11_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_11_MOL);
				N: XIO(I_MSD_O4T_11)XIO(O4T_11_MTR.COMM)[XIO(F_O4T_11_MSD_OFF) OTE(O4T_11_MTR.MSD_ONS) ,OTE(F_O4T_11_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_11_CTCTR_FAULT) OTE(O4T_11_MTR.MS_FLT_ONS) ,OTE(F_O4T_11_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_11_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_11_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_11_MTR.FIRE_ALM);
				N: XIO(O4T_11_MTR.CONV_RUN)XIC(O4T_11_MTR.INTL_MTR)OTE(O4T_11_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_11_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_11_OVRIDE_REQ)[XIO(F_O4T_11_OVRIDE) OTE(O4T_11_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_11_OVRIDE) ];
				N: XIC(HMI_O4T_11_OUTSERV_REQ)[XIO(F_O4T_11_OUTSERV) OTE(O4T_11_MTR.OOS_ONS) ,OTE(F_O4T_11_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_11_MTR.MB_JAMMED);
				N: [XIC(F_O4T_11_PE_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ,XIC(O4T_11_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_11_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_10_MTR.COMM);
				N: XIC(O_VFD_O4T_10_FWD)XIC(O4T_10_MTR.CONV_RUN)OTE(O4T_10_MTR.RUNNING);
				N: XIC(O4T_10_VFD.FAULTED)[XIO(F_O4T_10_VFD_FAULT) OTE(O4T_10_VFD.FAULT_ONS) ,OTE(F_O4T_10_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_10_MOL);
				N: XIO(I_MSD_O4T_10)XIO(O4T_10_MTR.COMM)[XIO(F_O4T_10_MSD_OFF) OTE(O4T_10_MTR.MSD_ONS) ,OTE(F_O4T_10_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_10_CTCTR_FAULT) OTE(O4T_10_MTR.MS_FLT_ONS) ,OTE(F_O4T_10_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_10_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_10_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_10_MTR.FIRE_ALM);
				N: XIO(O4T_10_MTR.CONV_RUN)XIC(O4T_10_MTR.INTL_MTR)OTE(O4T_10_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_10_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_10_OVRIDE_REQ)[XIO(F_O4T_10_OVRIDE) OTE(O4T_10_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_10_OVRIDE) ];
				N: XIC(HMI_O4T_10_OUTSERV_REQ)[XIO(F_O4T_10_OUTSERV) OTE(O4T_10_MTR.OOS_ONS) ,OTE(F_O4T_10_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_10_MTR.MB_JAMMED);
				N: [XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_09_PE_JAMMED) ,XIC(O4T_10_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_10_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_09_MTR.COMM);
				N: XIC(O_VFD_O4T_09_FWD)XIC(O4T_09_MTR.CONV_RUN)OTE(O4T_09_MTR.RUNNING);
				N: XIC(O4T_09_VFD.FAULTED)[XIO(F_O4T_09_VFD_FAULT) OTE(O4T_09_VFD.FAULT_ONS) ,OTE(F_O4T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_09_MOL);
				N: XIO(I_MSD_O4T_09)XIO(O4T_09_MTR.COMM)[XIO(F_O4T_09_MSD_OFF) OTE(O4T_09_MTR.MSD_ONS) ,OTE(F_O4T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_09_CTCTR_FAULT) OTE(O4T_09_MTR.MS_FLT_ONS) ,OTE(F_O4T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_09_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_09_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_09_MTR.FIRE_ALM);
				N: XIO(O4T_09_MTR.CONV_RUN)XIC(O4T_09_MTR.INTL_MTR)OTE(O4T_09_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_09_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_09_OVRIDE_REQ)[XIO(F_O4T_09_OVRIDE) OTE(O4T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_09_OVRIDE) ];
				N: XIC(HMI_O4T_09_OUTSERV_REQ)[XIO(F_O4T_09_OUTSERV) OTE(O4T_09_MTR.OOS_ONS) ,OTE(F_O4T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_09_MTR.MB_JAMMED);
				N: [XIC(F_O4T_09_PE_JAMMED) ,XIC(F_O4T_08_PE_JAMMED) ,XIC(O4T_09_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_08_MTR.COMM);
				N: XIC(O_VFD_O4T_08_FWD)XIC(O4T_08_MTR.CONV_RUN)OTE(O4T_08_MTR.RUNNING);
				N: XIC(O4T_08_VFD.FAULTED)[XIO(F_O4T_08_VFD_FAULT) OTE(O4T_08_VFD.FAULT_ONS) ,OTE(F_O4T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_08_MOL);
				N: XIO(I_MSD_O4T_08)XIO(O4T_08_MTR.COMM)[XIO(F_O4T_08_MSD_OFF) OTE(O4T_08_MTR.MSD_ONS) ,OTE(F_O4T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_08_CTCTR_FAULT) OTE(O4T_08_MTR.MS_FLT_ONS) ,OTE(F_O4T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_08_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_08_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_08_MTR.FIRE_ALM);
				N: XIO(O4T_08_MTR.CONV_RUN)XIC(O4T_08_MTR.INTL_MTR)OTE(O4T_08_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_08_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_08_OVRIDE_REQ)[XIO(F_O4T_08_OVRIDE) OTE(O4T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_08_OVRIDE) ];
				N: XIC(HMI_O4T_08_OUTSERV_REQ)[XIO(F_O4T_08_OUTSERV) OTE(O4T_08_MTR.OOS_ONS) ,OTE(F_O4T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_08_MTR.MB_JAMMED);
				N: [XIC(F_O4T_08_PE_JAMMED) ,XIC(F_O4T_07_PE_JAMMED) ,XIC(O4T_08_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_08_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_07_MTR.COMM);
				N: XIC(O_VFD_O4T_07_FWD)XIC(O4T_07_MTR.CONV_RUN)OTE(O4T_07_MTR.RUNNING);
				N: XIC(O4T_07_VFD.FAULTED)[XIO(F_O4T_07_VFD_FAULT) OTE(O4T_07_VFD.FAULT_ONS) ,OTE(F_O4T_07_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_07_MOL);
				N: XIO(I_MSD_O4T_07)XIO(O4T_07_MTR.COMM)[XIO(F_O4T_07_MSD_OFF) OTE(O4T_07_MTR.MSD_ONS) ,OTE(F_O4T_07_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_07_CTCTR_FAULT) OTE(O4T_07_MTR.MS_FLT_ONS) ,OTE(F_O4T_07_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_07_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_07_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_07_MTR.FIRE_ALM);
				N: XIO(O4T_07_MTR.CONV_RUN)XIC(O4T_07_MTR.INTL_MTR)OTE(O4T_07_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_07_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_07_OVRIDE_REQ)[XIO(F_O4T_07_OVRIDE) OTE(O4T_07_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_07_OVRIDE) ];
				N: XIC(HMI_O4T_07_OUTSERV_REQ)[XIO(F_O4T_07_OUTSERV) OTE(O4T_07_MTR.OOS_ONS) ,OTE(F_O4T_07_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_07_MTR.MB_JAMMED);
				N: [XIC(F_O4T_07_PE_JAMMED) ,XIC(F_O4T_06_PE_JAMMED) ,XIC(O4T_07_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_07_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_06_MTR.COMM);
				N: XIC(O_VFD_O4T_06_FWD)XIC(O4T_06_MTR.CONV_RUN)OTE(O4T_06_MTR.RUNNING);
				N: XIC(O4T_06_VFD.FAULTED)[XIO(F_O4T_06_VFD_FAULT) OTE(O4T_06_VFD.FAULT_ONS) ,OTE(F_O4T_06_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_06_MOL);
				N: XIO(I_MSD_O4T_06)XIO(O4T_06_MTR.COMM)[XIO(F_O4T_06_MSD_OFF) OTE(O4T_06_MTR.MSD_ONS) ,OTE(F_O4T_06_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_06_CTCTR_FAULT) OTE(O4T_06_MTR.MS_FLT_ONS) ,OTE(F_O4T_06_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_06_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_06_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_06_MTR.FIRE_ALM);
				N: XIO(O4T_06_MTR.CONV_RUN)XIC(O4T_06_MTR.INTL_MTR)OTE(O4T_06_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_06_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_06_OVRIDE_REQ)[XIO(F_O4T_06_OVRIDE) OTE(O4T_06_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_06_OVRIDE) ];
				N: XIC(HMI_O4T_06_OUTSERV_REQ)[XIO(F_O4T_06_OUTSERV) OTE(O4T_06_MTR.OOS_ONS) ,OTE(F_O4T_06_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_06_MTR.MB_JAMMED);
				N: [XIC(F_O4T_06_PE_JAMMED) ,XIC(F_O4T_05_PE_JAMMED) ,XIC(O4T_06_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_06_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(O4T_05_MTR.COMM);
				N: XIC(O_VFD_O4T_05_FWD)XIC(O4T_05_MTR.CONV_RUN)OTE(O4T_05_MTR.RUNNING);
				N: XIC(O4T_05_VFD.FAULTED)[XIO(F_O4T_05_VFD_FAULT) OTE(O4T_05_VFD.FAULT_ONS) ,OTE(F_O4T_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_05_MOL);
				N: XIO(I_MSD_O4T_05)XIO(O4T_05_MTR.COMM)[XIO(F_O4T_05_MSD_OFF) OTE(O4T_05_MTR.MSD_ONS) ,OTE(F_O4T_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_05_CTCTR_FAULT) OTE(O4T_05_MTR.MS_FLT_ONS) ,OTE(F_O4T_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(O4T_05_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(O4T_05_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_05_MTR.FIRE_ALM);
				N: XIO(O4T_05_MTR.CONV_RUN)XIC(O4T_05_MTR.INTL_MTR)OTE(O4T_05_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_05_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_05_OVRIDE_REQ)[XIO(F_O4T_05_OVRIDE) OTE(O4T_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_05_OVRIDE) ];
				N: XIC(HMI_O4T_05_OUTSERV_REQ)[XIO(F_O4T_05_OUTSERV) OTE(O4T_05_MTR.OOS_ONS) ,OTE(F_O4T_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_05_MTR.MB_JAMMED);
				N: [XIC(F_O4T_05_PE_JAMMED) ,XIC(O4T_05_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_22_MTR.COMM);
				N: XIC(O_VFD_O4T_22_FWD)XIC(O4T_22_MTR.CONV_RUN)OTE(O4T_22_MTR.RUNNING);
				N: XIC(O4T_22_VFD.FAULTED)[XIO(F_O4T_22_VFD_FAULT) OTE(O4T_22_VFD.FAULT_ONS) ,OTE(F_O4T_22_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_22_MOL);
				N: XIO(I_MSD_O4T_22)XIO(O4T_22_MTR.COMM)[XIO(F_O4T_22_MSD_OFF) OTE(O4T_22_MTR.MSD_ONS) ,OTE(F_O4T_22_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_22_CTCTR_FAULT) OTE(O4T_22_MTR.MS_FLT_ONS) ,OTE(F_O4T_22_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_22_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_22_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_22_MTR.FIRE_ALM);
				N: XIO(O4T_22_MTR.CONV_RUN)XIC(O4T_22_MTR.INTL_MTR)OTE(O4T_22_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_22_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_22_OVRIDE_REQ)[XIO(F_O4T_22_OVRIDE) OTE(O4T_22_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_22_OVRIDE) ];
				N: XIC(HMI_O4T_22_OUTSERV_REQ)[XIO(F_O4T_22_OUTSERV) OTE(O4T_22_MTR.OOS_ONS) ,OTE(F_O4T_22_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_22_MTR.MB_JAMMED);
				N: [XIC(O4T_22_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_22_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_21_MTR.COMM);
				N: XIC(O_VFD_O4T_21_FWD)XIC(O4T_21_MTR.CONV_RUN)OTE(O4T_21_MTR.RUNNING);
				N: XIC(O4T_21_VFD.FAULTED)[XIO(F_O4T_21_VFD_FAULT) OTE(O4T_21_VFD.FAULT_ONS) ,OTE(F_O4T_21_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_21_MOL);
				N: XIO(I_MSD_O4T_21)XIO(O4T_21_MTR.COMM)[XIO(F_O4T_21_MSD_OFF) OTE(O4T_21_MTR.MSD_ONS) ,OTE(F_O4T_21_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_21_CTCTR_FAULT) OTE(O4T_21_MTR.MS_FLT_ONS) ,OTE(F_O4T_21_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_21_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_21_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_21_MTR.FIRE_ALM);
				N: XIO(O4T_21_MTR.CONV_RUN)XIC(O4T_21_MTR.INTL_MTR)OTE(O4T_21_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_21_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_21_OVRIDE_REQ)[XIO(F_O4T_21_OVRIDE) OTE(O4T_21_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_21_OVRIDE) ];
				N: XIC(HMI_O4T_21_OUTSERV_REQ)[XIO(F_O4T_21_OUTSERV) OTE(O4T_21_MTR.OOS_ONS) ,OTE(F_O4T_21_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_21_MTR.MB_JAMMED);
				N: [XIC(F_O4T_21_PE_JAMMED) ,XIC(F_O4T_20_PE_JAMMED) ,XIC(O4T_21_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_21_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_20_MTR.COMM);
				N: XIC(O_VFD_O4T_20_FWD)XIC(O4T_20_MTR.CONV_RUN)OTE(O4T_20_MTR.RUNNING);
				N: XIC(O4T_20_VFD.FAULTED)[XIO(F_O4T_20_VFD_FAULT) OTE(O4T_20_VFD.FAULT_ONS) ,OTE(F_O4T_20_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_20_MOL);
				N: XIO(I_MSD_O4T_20)XIO(O4T_20_MTR.COMM)[XIO(F_O4T_20_MSD_OFF) OTE(O4T_20_MTR.MSD_ONS) ,OTE(F_O4T_20_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_20_CTCTR_FAULT) OTE(O4T_20_MTR.MS_FLT_ONS) ,OTE(F_O4T_20_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_20_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_20_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_20_MTR.FIRE_ALM);
				N: XIO(O4T_20_MTR.CONV_RUN)XIC(O4T_20_MTR.INTL_MTR)OTE(O4T_20_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_20_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_20_OVRIDE_REQ)[XIO(F_O4T_20_OVRIDE) OTE(O4T_20_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_20_OVRIDE) ];
				N: XIC(HMI_O4T_20_OUTSERV_REQ)[XIO(F_O4T_20_OUTSERV) OTE(O4T_20_MTR.OOS_ONS) ,OTE(F_O4T_20_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_20_MTR.MB_JAMMED);
				N: [XIC(F_O4T_20_PE_JAMMED) ,XIC(F_O4T_19_PE_JAMMED) ,XIC(O4T_20_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_20_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_19_MTR.COMM);
				N: XIC(O_VFD_O4T_19_FWD)XIC(O4T_19_MTR.CONV_RUN)OTE(O4T_19_MTR.RUNNING);
				N: XIC(O4T_19_VFD.FAULTED)[XIO(F_O4T_19_VFD_FAULT) OTE(O4T_19_VFD.FAULT_ONS) ,OTE(F_O4T_19_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_19_MOL);
				N: XIO(I_MSD_O4T_19)XIO(O4T_19_MTR.COMM)[XIO(F_O4T_19_MSD_OFF) OTE(O4T_19_MTR.MSD_ONS) ,OTE(F_O4T_19_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_19_CTCTR_FAULT) OTE(O4T_19_MTR.MS_FLT_ONS) ,OTE(F_O4T_19_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_19_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_19_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_19_MTR.FIRE_ALM);
				N: XIO(O4T_19_MTR.CONV_RUN)XIC(O4T_19_MTR.INTL_MTR)OTE(O4T_19_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_19_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_19_OVRIDE_REQ)[XIO(F_O4T_19_OVRIDE) OTE(O4T_19_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_19_OVRIDE) ];
				N: XIC(HMI_O4T_19_OUTSERV_REQ)[XIO(F_O4T_19_OUTSERV) OTE(O4T_19_MTR.OOS_ONS) ,OTE(F_O4T_19_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_19_MTR.MB_JAMMED);
				N: [XIC(F_O4T_19_PE_JAMMED) ,XIC(F_O4T_18_PE_JAMMED) ,XIC(O4T_19_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_19_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_18_MTR.COMM);
				N: XIC(O_VFD_O4T_18_FWD)XIC(O4T_18_MTR.CONV_RUN)OTE(O4T_18_MTR.RUNNING);
				N: XIC(O4T_18_VFD.FAULTED)[XIO(F_O4T_18_VFD_FAULT) OTE(O4T_18_VFD.FAULT_ONS) ,OTE(F_O4T_18_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_18_MOL);
				N: XIO(I_MSD_O4T_18)XIO(O4T_18_MTR.COMM)[XIO(F_O4T_18_MSD_OFF) OTE(O4T_18_MTR.MSD_ONS) ,OTE(F_O4T_18_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_18_CTCTR_FAULT) OTE(O4T_18_MTR.MS_FLT_ONS) ,OTE(F_O4T_18_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_18_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_18_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_18_MTR.FIRE_ALM);
				N: XIO(O4T_18_MTR.CONV_RUN)XIC(O4T_18_MTR.INTL_MTR)OTE(O4T_18_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_18_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_18_OVRIDE_REQ)[XIO(F_O4T_18_OVRIDE) OTE(O4T_18_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_18_OVRIDE) ];
				N: XIC(HMI_O4T_18_OUTSERV_REQ)[XIO(F_O4T_18_OUTSERV) OTE(O4T_18_MTR.OOS_ONS) ,OTE(F_O4T_18_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_18_MTR.MB_JAMMED);
				N: [XIC(F_O4T_18_PE_JAMMED) ,XIC(F_O4T_17_PE_JAMMED) ,XIC(O4T_18_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_18_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O4T_17_MTR.COMM);
				N: XIC(O_VFD_O4T_17_FWD)XIC(O4T_17_MTR.CONV_RUN)OTE(O4T_17_MTR.RUNNING);
				N: XIC(O4T_17_VFD.FAULTED)[XIO(F_O4T_17_VFD_FAULT) OTE(O4T_17_VFD.FAULT_ONS) ,OTE(F_O4T_17_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_17_MOL);
				N: XIO(I_MSD_O4T_17)XIO(O4T_17_MTR.COMM)[XIO(F_O4T_17_MSD_OFF) OTE(O4T_17_MTR.MSD_ONS) ,OTE(F_O4T_17_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_17_CTCTR_FAULT) OTE(O4T_17_MTR.MS_FLT_ONS) ,OTE(F_O4T_17_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O4T_17_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O4T_17_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O4T_17_MTR.FIRE_ALM);
				N: XIO(O4T_17_MTR.CONV_RUN)XIC(O4T_17_MTR.INTL_MTR)OTE(O4T_17_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O4T_17_MTR.AUTO_STOP);
				N: XIC(HMI_O4T_17_OVRIDE_REQ)[XIO(F_O4T_17_OVRIDE) OTE(O4T_17_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_17_OVRIDE) ];
				N: XIC(HMI_O4T_17_OUTSERV_REQ)[XIO(F_O4T_17_OUTSERV) OTE(O4T_17_MTR.OOS_ONS) ,OTE(F_O4T_17_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O4T_17_MTR.MB_JAMMED);
				N: [XIC(F_O4T_17_PE_JAMMED) ,XIC(F_O4T_16_PE_JAMMED) ,XIC(O4T_17_MTR.MB_JAMMED) ,AFI() ]OTE(O4T_17_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_16_RK01_S00_COMM) ,XIC(F_MCP_16_RK02_S00_COMM) ,AFI() ]OTE(O3T_21_MTR.COMM);
				N: XIC(O_VFD_O4T_16_FWD)XIC(O3T_21_MTR.CONV_RUN)OTE(O3T_21_MTR.RUNNING);
				N: XIC(O3T_21_VFD.FAULTED)[XIO(F_O4T_16_VFD_FAULT) OTE(O3T_21_VFD.FAULT_ONS) ,OTE(F_O4T_16_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_O4T_16_MOL);
				N: XIO(I_MSD_O4T_16)XIO(O3T_21_MTR.COMM)[XIO(F_O4T_16_MSD_OFF) OTE(O3T_21_MTR.MSD_ONS) ,OTE(F_O4T_16_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_O4T_16_CTCTR_FAULT) OTE(O3T_21_MTR.MS_FLT_ONS) ,OTE(F_O4T_16_CTCTR_FAULT) ];
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O3T_21_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O3T_21_MTR.E_STOP_RES);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(O3T_21_MTR.FIRE_ALM);
				N: XIO(O3T_21_MTR.CONV_RUN)XIC(O3T_21_MTR.INTL_MTR)OTE(O3T_21_MTR.CASC);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(O3T_21_MTR.AUTO_STOP);
				N: [XIO(EZ_31600.Zone_OK) ,XIO(EZ_W15_1CR.Zone_OK) ,AFI() ]OTE(O3T_21_MTR.E_STOP);
				N: [XIC(EZ_31600.Zone_RES) ,XIC(EZ_W15_1CR.Zone_RES) ,AFI() ]OTE(O3T_21_MTR.E_STOP_RES);
				N: XIC(HMI_O4T_16_OVRIDE_REQ)[XIO(F_O4T_16_OVRIDE) OTE(O3T_21_MTR.HMI_OVERRIDE_ONS) ,OTE(F_O4T_16_OVRIDE) ];
				N: XIC(HMI_O4T_16_OUTSERV_REQ)[XIO(F_O4T_16_OUTSERV) OTE(O3T_21_MTR.OOS_ONS) ,OTE(F_O4T_16_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(O3T_21_MTR.MB_JAMMED);
				N: [XIC(F_O4T_16_PE_JAMMED) ,XIC(O3T_21_MTR.MB_JAMMED) ,AFI() ]OTE(O3T_21_MTR.JAMMED);
		END_ROUTINE

		ROUTINE O4T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor O4T_13 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_13_MTR.COMM)XIO(O4T_13_MTR.E_STOP)XIO(F_O4T_13_MSD_OFF)TON(O4T_13_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_13_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_13_RDY) OTE(O4T_13_VFD.FAULTED) ,XIO(O4T_13_VFD.FAULTED) OTE(O4T_13_VFD.READY) ];
				RC: "Motor O4T_12 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_12_MTR.COMM)XIO(O4T_12_MTR.E_STOP)XIO(F_O4T_12_MSD_OFF)TON(O4T_12_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_12_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_12_RDY) OTE(O4T_12_VFD.FAULTED) ,XIO(O4T_12_VFD.FAULTED) OTE(O4T_12_VFD.READY) ];
				RC: "Motor O4T_11 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_11_MTR.COMM)XIO(O4T_11_MTR.E_STOP)XIO(F_O4T_11_MSD_OFF)TON(O4T_11_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_11_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_11_RDY) OTE(O4T_11_VFD.FAULTED) ,XIO(O4T_11_VFD.FAULTED) OTE(O4T_11_VFD.READY) ];
				RC: "Motor O4T_10 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_10_MTR.COMM)XIO(O4T_10_MTR.E_STOP)XIO(F_O4T_10_MSD_OFF)TON(O4T_10_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_10_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_10_RDY) OTE(O4T_10_VFD.FAULTED) ,XIO(O4T_10_VFD.FAULTED) OTE(O4T_10_VFD.READY) ];
				RC: "Motor O4T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_09_MTR.COMM)XIO(O4T_09_MTR.E_STOP)XIO(F_O4T_09_MSD_OFF)TON(O4T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_09_RDY) OTE(O4T_09_VFD.FAULTED) ,XIO(O4T_09_VFD.FAULTED) OTE(O4T_09_VFD.READY) ];
				RC: "Motor O4T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_08_MTR.COMM)XIO(O4T_08_MTR.E_STOP)XIO(F_O4T_08_MSD_OFF)TON(O4T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_08_RDY) OTE(O4T_08_VFD.FAULTED) ,XIO(O4T_08_VFD.FAULTED) OTE(O4T_08_VFD.READY) ];
				RC: "Motor O4T_07 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_07_MTR.COMM)XIO(O4T_07_MTR.E_STOP)XIO(F_O4T_07_MSD_OFF)TON(O4T_07_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_07_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_07_RDY) OTE(O4T_07_VFD.FAULTED) ,XIO(O4T_07_VFD.FAULTED) OTE(O4T_07_VFD.READY) ];
				RC: "Motor O4T_06 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_06_MTR.COMM)XIO(O4T_06_MTR.E_STOP)XIO(F_O4T_06_MSD_OFF)TON(O4T_06_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_06_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_06_RDY) OTE(O4T_06_VFD.FAULTED) ,XIO(O4T_06_VFD.FAULTED) OTE(O4T_06_VFD.READY) ];
				RC: "Motor O4T_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_05_MTR.COMM)XIO(O4T_05_MTR.E_STOP)XIO(F_O4T_05_MSD_OFF)TON(O4T_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_05_RDY) OTE(O4T_05_VFD.FAULTED) ,XIO(O4T_05_VFD.FAULTED) OTE(O4T_05_VFD.READY) ];
				RC: "Motor O4T_22 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_22_MTR.COMM)XIO(O4T_22_MTR.E_STOP)XIO(F_O4T_22_MSD_OFF)TON(O4T_22_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_22_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_22_RDY) OTE(O4T_22_VFD.FAULTED) ,XIO(O4T_22_VFD.FAULTED) OTE(O4T_22_VFD.READY) ];
				RC: "Motor O4T_21 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_21_MTR.COMM)XIO(O4T_21_MTR.E_STOP)XIO(F_O4T_21_MSD_OFF)TON(O4T_21_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_21_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_21_RDY) OTE(O4T_21_VFD.FAULTED) ,XIO(O4T_21_VFD.FAULTED) OTE(O4T_21_VFD.READY) ];
				RC: "Motor O4T_20 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_20_MTR.COMM)XIO(O4T_20_MTR.E_STOP)XIO(F_O4T_20_MSD_OFF)TON(O4T_20_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_20_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_20_RDY) OTE(O4T_20_VFD.FAULTED) ,XIO(O4T_20_VFD.FAULTED) OTE(O4T_20_VFD.READY) ];
				RC: "Motor O4T_19 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_19_MTR.COMM)XIO(O4T_19_MTR.E_STOP)XIO(F_O4T_19_MSD_OFF)TON(O4T_19_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_19_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_19_RDY) OTE(O4T_19_VFD.FAULTED) ,XIO(O4T_19_VFD.FAULTED) OTE(O4T_19_VFD.READY) ];
				RC: "Motor O4T_18 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_18_MTR.COMM)XIO(O4T_18_MTR.E_STOP)XIO(F_O4T_18_MSD_OFF)TON(O4T_18_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_18_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_18_RDY) OTE(O4T_18_VFD.FAULTED) ,XIO(O4T_18_VFD.FAULTED) OTE(O4T_18_VFD.READY) ];
				RC: "Motor O4T_17 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O4T_17_MTR.COMM)XIO(O4T_17_MTR.E_STOP)XIO(F_O4T_17_MSD_OFF)TON(O4T_17_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O4T_17_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_17_RDY) OTE(O4T_17_VFD.FAULTED) ,XIO(O4T_17_VFD.FAULTED) OTE(O4T_17_VFD.READY) ];
				RC: "Motor O4T_16 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(O3T_21_MTR.COMM)XIO(O3T_21_MTR.E_STOP)XIO(F_O4T_16_MSD_OFF)TON(O3T_21_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(O3T_21_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_O4T_16_RDY) OTE(O3T_21_VFD.FAULTED) ,XIO(O3T_21_VFD.FAULTED) OTE(O3T_21_VFD.READY) ];
		END_ROUTINE

		ROUTINE PICS_IN 
				N: XIC(PICS_I_BAL_BM1_27)OTE(I_BAL_BM1_27);
				N: XIC(PICS_I_BAL_BM1_28)OTE(I_BAL_BM1_28);
				N: XIC(PICS_I_BAL_BM1_29)OTE(I_BAL_BM1_29);
				N: XIC(PICS_I_BAL_BM1_30)OTE(I_BAL_BM1_30);
				N: XIC(PICS_I_C_BM1_01)OTE(I_C_BM1_01);
				N: XIC(PICS_I_C_BM1_02)OTE(I_C_BM1_02);
				N: XIC(PICS_I_C_BM1_03)OTE(I_C_BM1_03);
				N: XIC(PICS_I_C_BM1_04)OTE(I_C_BM1_04);
				N: XIC(PICS_I_C_BM1_05)OTE(I_C_BM1_05);
				N: XIC(PICS_I_C_BM1_06)OTE(I_C_BM1_06);
				N: XIC(PICS_I_C_BM1_07)OTE(I_C_BM1_07);
				N: XIC(PICS_I_C_BM1_08)OTE(I_C_BM1_08);
				N: XIC(PICS_I_C_BM1_09)OTE(I_C_BM1_09);
				N: XIC(PICS_I_C_BM1_10)OTE(I_C_BM1_10);
				N: XIC(PICS_I_C_BM1_11)OTE(I_C_BM1_11);
				N: XIC(PICS_I_C_BM1_12)OTE(I_C_BM1_12);
				N: XIC(PICS_I_C_BM1_13)OTE(I_C_BM1_13);
				N: XIC(PICS_I_C_BM1_14)OTE(I_C_BM1_14);
				N: XIC(PICS_I_C_BM1_15)OTE(I_C_BM1_15);
				N: XIC(PICS_I_C_BM1_16)OTE(I_C_BM1_16);
				N: XIC(PICS_I_C_BM1_17)OTE(I_C_BM1_17);
				N: XIC(PICS_I_C_BM1_18)OTE(I_C_BM1_18);
				N: XIC(PICS_I_C_BM1_19)OTE(I_C_BM1_19);
				N: XIC(PICS_I_C_BM1_20)OTE(I_C_BM1_20);
				N: XIC(PICS_I_C_BM1_21)OTE(I_C_BM1_21);
				N: XIC(PICS_I_C_BM1_22)OTE(I_C_BM1_22);
				N: XIC(PICS_I_C_BM1_23)OTE(I_C_BM1_23);
				N: XIC(PICS_I_C_BM1_24)OTE(I_C_BM1_24);
				N: XIC(PICS_I_C_BM1_25)OTE(I_C_BM1_25);
				N: XIC(PICS_I_C_BM1_26)OTE(I_C_BM1_26);
				N: XIC(PICS_I_C_BM1_31)OTE(I_C_BM1_31);
				N: XIC(PICS_I_C_BM1_32)OTE(I_C_BM1_32);
				N: XIC(PICS_I_C_BM1_33)OTE(I_C_BM1_33);
				N: XIC(PICS_I_C_BM1_34)OTE(I_C_BM1_34);
				N: XIC(PICS_I_C_BM1_35)OTE(I_C_BM1_35);
				N: XIC(PICS_I_C_BM1_36)OTE(I_C_BM1_36);
				N: XIC(PICS_I_C_BM1_37)OTE(I_C_BM1_37);
				N: XIC(PICS_I_C_BM1_38)OTE(I_C_BM1_38);
				N: XIC(PICS_I_CS_BM1_01_EPB)OTE(I_CS_BM1_01_EPB);
				N: XIC(PICS_I_CS_BM1_01_RPBA)OTE(I_CS_BM1_01_RPBA);
				N: XIC(PICS_I_CS_BM1_02_EPB)OTE(I_CS_BM1_02_EPB);
				N: XIC(PICS_I_CS_BM1_02_RPBA)OTE(I_CS_BM1_02_RPBA);
				N: XIC(PICS_I_CS_BM1_03_EPB)OTE(I_CS_BM1_03_EPB);
				N: XIC(PICS_I_CS_BM1_03_RPBA)OTE(I_CS_BM1_03_RPBA);
				N: XIC(PICS_I_CS_BM1_06_EPB)OTE(I_CS_BM1_06_EPB);
				N: XIC(PICS_I_CS_BM1_06_RPBA)OTE(I_CS_BM1_06_RPBA);
				N: XIC(PICS_I_CS_BM1_07_EPB)OTE(I_CS_BM1_07_EPB);
				N: XIC(PICS_I_CS_BM1_07_SPBG)OTE(I_CS_BM1_07_SPBG);
				N: XIC(PICS_I_CS_BM1_13_EPB)OTE(I_CS_BM1_13_EPB);
				N: XIC(PICS_I_CS_BM1_13_JRB)OTE(I_CS_BM1_13_JRB);
				N: XIC(PICS_I_CS_BM1_13_RPBA)OTE(I_CS_BM1_13_RPBA);
				N: XIC(PICS_I_CS_BM1_15_EPB)OTE(I_CS_BM1_15_EPB);
				N: XIC(PICS_I_CS_BM1_15_RPBA)OTE(I_CS_BM1_15_RPBA);
				N: XIC(PICS_I_CS_BM1_17_SPBG)OTE(I_CS2_BM1_17_SPBG);
				N: XIC(PICS_I_CS_BM1_18_EPB)OTE(I_CS_BM1_18_EPB);
				N: XIC(PICS_I_CS_BM1_18_RPBA)OTE(I_CS_BM1_18_RPBA);
				N: XIC(PICS_I_CS_BM1_19_EPB)OTE(I_CS_BM1_19_EPB);
				N: XIC(PICS_I_CS_BM1_19_RPBA)OTE(I_CS_BM1_19_RPBA);
				N: XIC(PICS_I_CS_BM1_20_EPB)OTE(I_CS_BM1_20_EPB);
				N: XIC(PICS_I_CS_BM1_20_RPBA)OTE(I_CS_BM1_20_RPBA);
				N: XIC(PICS_I_CS_BM1_23_EPB)OTE(I_CS_BM1_23_EPB);
				N: XIC(PICS_I_CS_BM1_23_RPBA)OTE(I_CS_BM1_23_RPBA);
				N: XIC(PICS_I_CS_BM1_25_EPB)OTE(I_CS_BM1_25_EPB);
				N: XIC(PICS_I_CS_BM1_25_RPBA)OTE(I_CS_BM1_25_RPBA);
				N: XIC(PICS_I_CS_BM1_34_EPB)OTE(I_CS_BM1_34_EPB);
				N: XIC(PICS_I_CS_BM1_34_RPBA)OTE(I_CS_BM1_34_RPBA);
				N: XIC(PICS_I_CS_BM1_38_EPB)OTE(I_CS_BM1_38_EPB);
				N: XIC(PICS_I_CS_BM1_38_RPBA)OTE(I_CS_BM1_38_RPBA);
				N: XIC(PICS_I_CS_BM1_MCP_RPBA)OTE(I_CS_BM1_MCP_RPBA);
				N: XIC(PICS_I_CS_C2T_13_EPB)OTE(I_CS_C2T_13_EPB);
				N: XIC(PICS_I_CS_C2T_13_RPBA)OTE(I_CS_C2T_13_RPBA);
				N: XIC(PICS_I_CS_C2T_13_SPBG)OTE(I_CS_C2T_13_SPBG);
				N: XIC(PICS_I_CS_C2T_17_AUTO)OTE(I_CS_C2T_17_AUTO);
				N: XIC(PICS_I_CS_C2T_17_EPB)OTE(I_CS_C2T_17_EPB);
				N: XIC(PICS_I_CS_C2T_17_JRB)OTE(I_CS_C2T_17_JRB);
				N: XIC(PICS_I_CS_C2T_17_RPBA)OTE(I_CS_C2T_17_RPBA);
				N: XIC(PICS_I_CS_C2T_17_SPBG)OTE(I_CS_C2T_17_SPBG);
				N: XIC(PICS_I_CS_CL1T_05_EPB)OTE(I_CS_CL1T_05_EPB);
				N: XIC(PICS_I_CS_CL1T_05_RPBA)OTE(I_CS_CL1T_05_RPBA);
				N: XIC(PICS_I_CS_CL1T_05_SPBG)OTE(I_CS_CL1T_05_SPBG);
				N: XIC(PICS_I_CS_CL1T_09_EPB)OTE(I_CS_CL1T_09_EPB);
				N: XIC(PICS_I_CS_CL1T_09_RPBA)OTE(I_CS_CL1T_09_RPBA);
				N: XIC(PICS_I_CS_CL1T_09_SPBG)OTE(I_CS_CL1T_09_SPBG);
				N: XIC(PICS_I_CS_CL1T_11_EPB)OTE(I_CS_CL1T_11_EPB);
				N: XIC(PICS_I_CS_CL1T_11_RPBA)OTE(I_CS_CL1T_11_RPBA);
				N: XIC(PICS_I_CS_CL1T_11_SPBG)OTE(I_CS_CL1T_11_SPBG);
				N: XIC(PICS_I_CS_CL1T_12_EPB)OTE(I_CS_CL1T_12_EPB);
				N: XIC(PICS_I_CS_CL1T_12_RPBA)OTE(I_CS_CL1T_12_RPBA);
				N: XIC(PICS_I_CS_CL1T_12_SPBG)OTE(I_CS_CL1T_12_SPBG);
				N: XIC(PICS_I_CS_CL1T_16_EPB)OTE(I_CS_CL1T_16_EPB);
				N: XIC(PICS_I_CS_CL1T_16_RPBA)OTE(I_CS_CL1T_16_RPBA);
				N: XIC(PICS_I_CS_CL1T_16_SPBG)OTE(I_CS_CL1T_16_SPBG);
				N: XIC(PICS_I_CS_CL1T_20_EPB)OTE(I_CS_CL1T_20_EPB);
				N: XIC(PICS_I_CS_CL1T_20_RPBA)OTE(I_CS_CL1T_20_RPBA);
				N: XIC(PICS_I_CS_CL1T_20_SPBG)OTE(I_CS_CL1T_20_SPBG);
				N: XIC(PICS_I_CS_CL1T_24_EPB)OTE(I_CS_CL1T_24_EPB);
				N: XIC(PICS_I_CS_CL1T_24_RPBA)OTE(I_CS_CL1T_24_RPBA);
				N: XIC(PICS_I_CS_CL1T_24_SPBG)OTE(I_CS_CL1T_24_SPBG);
				N: XIC(PICS_I_CS_CL2T_04_EPB)OTE(I_CS_CL2T_04_EPB);
				N: XIC(PICS_I_CS_CL2T_04_RPBA)OTE(I_CS_CL2T_04_RPBA);
				N: XIC(PICS_I_CS_CL2T_04_SPBG)OTE(I_CS_CL2T_04_SPBG);
				N: XIC(PICS_I_CS_CL2T_09_EPB)OTE(I_CS_CL2T_09_EPB);
				N: XIC(PICS_I_CS_CL2T_09_RPBA)OTE(I_CS_CL2T_09_RPBA);
				N: XIC(PICS_I_CS_CL2T_09_SPBG)OTE(I_CS_CL2T_09_SPBG);
				N: XIC(PICS_I_CS_CL3T_03_EPB)OTE(I_CS_CL3T_03_EPB);
				N: XIC(PICS_I_CS_CL3T_03_RPBA)OTE(I_CS_CL3T_03_RPBA);
				N: XIC(PICS_I_CS_CL3T_03_SPBG)OTE(I_CS_CL3T_03_SPBG);
				N: XIC(PICS_I_CS_CL3T_04_EPB)OTE(I_CS_CL3T_04_EPB);
				N: XIC(PICS_I_CS_CL3T_04_RPBA)OTE(I_CS_CL3T_04_RPBA);
				N: XIC(PICS_I_CS_CL3T_04_SPBG)OTE(I_CS_CL3T_04_SPBG);
				N: XIC(PICS_I_CS_HX1T_10_AUTO)OTE(I_CS_HX1T_10_AUTO);
				N: XIC(PICS_I_CS_HX1T_10_EPB)OTE(I_CS_HX1T_10_EPB);
				N: XIC(PICS_I_CS_HX1T_10_JRB)OTE(I_CS_HX1T_10_JRB);
				N: XIC(PICS_I_CS_HX1T_10_RPBA)OTE(I_CS_HX1T_10_RPBA);
				N: XIC(PICS_I_CS_HX1T_10_SPBG)OTE(I_CS_HX1T_10_SPBG);
				N: XIC(PICS_I_CS_MCP_01_APB)OTE(I_CS_MCP_01_APB);
				N: XIC(PICS_I_CS_MCP_01_EPB)OTE(I_CS_MCP_01_EPB);
				N: XIC(PICS_I_CS_MCP_01_SPBG)OTE(I_CS_MCP_01_SPBG);
				N: XIC(PICS_I_CS_MCP_01_TPB)OTE(I_CS_MCP_01_TPB);
				N: XIC(PICS_I_CS_MCP_02_APB)OTE(I_CS_MCP_02_APB);
				N: XIC(PICS_I_CS_MCP_02_EPB)OTE(I_CS_MCP_02_EPB);
				N: XIC(PICS_I_CS_MCP_02_SPBG)OTE(I_CS_MCP_02_SPBG);
				N: XIC(PICS_I_CS_MCP_02_TPB)OTE(I_CS_MCP_02_TPB);
				N: XIC(PICS_I_CS_MCP_03_APB)OTE(I_CS_MCP_03_APB);
				N: XIC(PICS_I_CS_MCP_03_EPB)OTE(I_CS_MCP_03_EPB);
				N: XIC(PICS_I_CS_MCP_03_SPBG)OTE(I_CS_MCP_03_SPBG);
				N: XIC(PICS_I_CS_MCP_03_TPB)OTE(I_CS_MCP_03_TPB);
				N: XIC(PICS_I_CS_MCP_BM1_APB)OTE(I_CS_MCP_BM1_APB);
				N: XIC(PICS_I_CS_MCP_BM1_EPB)OTE(I_CS_MCP_BM1_EPB);
				N: XIC(PICS_I_CS_MCP_BM1_TPB)OTE(I_CS_MCP_BM1_TPB);
				N: XIC(PICS_I_CS_O2T_04_EPB)OTE(I_CS_O2T_04_EPB);
				N: XIC(PICS_I_CS_O2T_04_RPBA)OTE(I_CS_O2T_04_RPBA);
				N: XIC(PICS_I_CS_O2T_04_SPBG)OTE(I_CS_O2T_04_SPBG);
				N: XIC(PICS_I_CS_O2T_06_EPB)OTE(I_CS_O2T_06_EPB);
				N: XIC(PICS_I_CS_O2T_06_RPBA)OTE(I_CS_O2T_06_RPBA);
				N: XIC(PICS_I_CS_O2T_06_SPBG)OTE(I_CS_O2T_06_SPBG);
				N: XIC(PICS_I_CS_O2T_10_EPB)OTE(I_CS_O2T_10_EPB);
				N: XIC(PICS_I_CS_O2T_10_RPBA)OTE(I_CS_O2T_10_RPBA);
				N: XIC(PICS_I_CS_O2T_10_SPBG)OTE(I_CS_O2T_10_SPBG);
				N: XIC(PICS_I_CS_O2T_12_EPB)OTE(I_CS_O2T_12_EPB);
				N: XIC(PICS_I_CS_O2T_12_RPBA)OTE(I_CS_O2T_12_RPBA);
				N: XIC(PICS_I_CS_O2T_12_SPBG)OTE(I_CS_O2T_12_SPBG);
				N: XIC(PICS_I_CS_O2T_14_EPB)OTE(I_CS_O2T_14_EPB);
				N: XIC(PICS_I_CS_O2T_14_RPBA)OTE(I_CS_O2T_14_RPBA);
				N: XIC(PICS_I_CS_O2T_14_SPBG)OTE(I_CS_O2T_14_SPBG);
				N: XIC(PICS_I_CS_O2T_18_AUTO)OTE(I_CS_O2T_18_AUTO);
				N: XIC(PICS_I_CS_O2T_18_EPB)OTE(I_CS_O2T_18_EPB);
				N: XIC(PICS_I_CS_O2T_18_JRB)OTE(I_CS_O2T_18_JRB);
				N: XIC(PICS_I_CS_O2T_18_RPBA)OTE(I_CS_O2T_18_RPBA);
				N: XIC(PICS_I_CS_O2T_18_SPBG)OTE(I_CS_O2T_18_SPBG);
				N: XIC(PICS_I_CS_O4T_06_EPB)OTE(I_CS_O4T_06_EPB);
				N: XIC(PICS_I_CS_O4T_06_RPBA)OTE(I_CS_O4T_06_RPBA);
				N: XIC(PICS_I_CS_O4T_06_SPBG)OTE(I_CS_O4T_06_SPBG);
				N: XIC(PICS_I_CS_O4T_10_EPB)OTE(I_CS_O4T_10_EPB);
				N: XIC(PICS_I_CS_O4T_10_RPBA)OTE(I_CS_O4T_10_RPBA);
				N: XIC(PICS_I_CS_O4T_10_SPBG)OTE(I_CS_O4T_10_SPBG);
				N: XIC(PICS_I_CS_T5T_09_AUTO)OTE(I_CS_T5T_09_AUTO);
				N: XIC(PICS_I_CS_T5T_09_EPB)OTE(I_CS_T5T_09_EPB);
				N: XIC(PICS_I_CS_T5T_09_JRB)OTE(I_CS_T5T_09_JRB);
				N: XIC(PICS_I_CS_T5T_09_RPBA)OTE(I_CS_T5T_09_RPBA);
				N: XIC(PICS_I_CS_T5T_09_SPBG)OTE(I_CS_T5T_09_SPBG);
				N: XIC(PICS_I_CS_XO1_01_EPB)OTE(I_CS_XO1_01_EPB);
				N: XIC(PICS_I_CS_XO1_01_RPBA)OTE(I_CS_XO1_01_RPBA);
				N: XIC(PICS_I_CS_XO1_01_SPBG)OTE(I_CS_XO1_01_SPBG);
				N: XIC(PICS_I_CS_XO2_02_EPB)OTE(I_CS_XO2_02_EPB);
				N: XIC(PICS_I_CS_XO2_02_RPBA)OTE(I_CS_XO2_02_RPBA);
				N: XIC(PICS_I_CS_XO2_02_SPBG)OTE(I_CS_XO2_02_SPBG);
				N: XIC(PICS_I_CS_XO2_05_AUTO)OTE(I_CS_XO2_05_AUTO);
				N: XIC(PICS_I_CS_XO2_05_EPB)OTE(I_CS_XO2_05_EPB);
				N: XIC(PICS_I_CS_XO2_05_JRB)OTE(I_CS_XO2_05_JRB);
				N: XIC(PICS_I_CS_XO2_05_RPBA)OTE(I_CS_XO2_05_RPBA);
				N: XIC(PICS_I_CS_XO2_05_SPBG)OTE(I_CS_XO2_05_SPBG);
				N: XIC(PICS_I_CS1_BM1_14_EPB)OTE(I_CS1_BM1_14_EPB);
				N: XIC(PICS_I_CS1_BM1_14_RPBA)OTE(I_CS1_BM1_14_RPBA);
				N: XIC(PICS_I_CS1_BM1_16_EPB)OTE(I_CS1_BM1_16_EPB);
				N: XIC(PICS_I_CS1_BM1_16_RPBA)OTE(I_CS1_BM1_16_RPBA);
				N: XIC(PICS_I_CS1_BM1_17_EPB)OTE(I_CS1_BM1_17_EPB);
				N: XIC(PICS_I_CS1_BM1_27_EPB)OTE(I_CS1_BM1_27_EPB);
				N: XIC(PICS_I_CS1_BM1_27_RPBA)OTE(I_CS1_BM1_27_RPBA);
				N: XIC(PICS_I_CS1_BM1_28_EPB)OTE(I_CS1_BM1_28_EPB);
				N: XIC(PICS_I_CS1_BM1_28_RPBA)OTE(I_CS1_BM1_28_RPBA);
				N: XIC(PICS_I_CS4_BM1_28_SPBG)OTE(I_CS4_BM1_28_SPBG);
				N: XIC(PICS_I_CS1_BM1_29_EPB)OTE(I_CS1_BM1_29_EPB);
				N: XIC(PICS_I_CS1_BM1_29_RPBA)OTE(I_CS1_BM1_29_RPBA);
				N: XIC(PICS_I_CS1_BM1_30_EPB)OTE(I_CS1_BM1_30_EPB);
				N: XIC(PICS_I_CS1_BM1_30_RPBA)OTE(I_CS1_BM1_30_RPBA);
				N: XIC(PICS_I_CS1_CL1T_01_EPB)OTE(I_CS1_CL1T_01_EPB);
				N: XIC(PICS_I_CS1_CL1T_01_SPBG)OTE(I_CS1_CL1T_01_SPBG);
				N: XIC(PICS_I_CS1_CL1T_02_EPB)OTE(I_CS1_CL1T_02_EPB);
				N: XIC(PICS_I_CS1_CL1T_02_RPBA)OTE(I_CS1_CL1T_02_RPBA);
				N: XIC(PICS_I_CS1_CL1T_02_SPBG)OTE(I_CS1_CL1T_02_SPBG);
				N: XIC(PICS_I_CS1_CL2T_01_EPB)OTE(I_CS1_CL2T_01_EPB);
				N: XIC(PICS_I_CS1_CL2T_01_SPBG)OTE(I_CS1_CL2T_01_SPBG);
				N: XIC(PICS_I_CS1_CL2T_02_EPB)OTE(I_CS1_CL2T_02_EPB);
				N: XIC(PICS_I_CS1_CL2T_02_RPBA)OTE(I_CS1_CL2T_02_RPBA);
				N: XIC(PICS_I_CS1_CL2T_02_SPBG)OTE(I_CS1_CL2T_02_SPBG);
				N: XIC(PICS_I_CS1_CL2T_05_EPB)OTE(I_CS1_CL2T_05_EPB);
				N: XIC(PICS_I_CS1_CL2T_05_RPBA)OTE(I_CS1_CL2T_05_RPBA);
				N: XIC(PICS_I_CS1_CL2T_05_SPBG)OTE(I_CS1_CL2T_05_SPBG);
				N: XIC(PICS_I_CS1_CL3T_01_EPB)OTE(I_CS1_CL3T_01_EPB);
				N: XIC(PICS_I_CS1_CL3T_01_SPBG)OTE(I_CS1_CL3T_01_SPBG);
				N: XIC(PICS_I_CS1_CL3T_02_EPB)OTE(I_CS1_CL3T_02_EPB);
				N: XIC(PICS_I_CS1_CL3T_02_RPBA)OTE(I_CS1_CL3T_02_RPBA);
				N: XIC(PICS_I_CS1_CL3T_02_SPBG)OTE(I_CS1_CL3T_02_SPBG);
				N: XIC(PICS_I_CS2_BM1_14_EPB)OTE(I_CS2_BM1_14_EPB);
				N: XIC(PICS_I_CS2_BM1_14_RPBA)OTE(I_CS2_BM1_14_RPBA);
				N: XIC(PICS_I_CS2_BM1_16_EPB)OTE(I_CS2_BM1_16_EPB);
				N: XIC(PICS_I_CS2_BM1_16_RPBA)OTE(I_CS2_BM1_16_RPBA);
				N: XIC(PICS_I_CS2_BM1_17_EPB)OTE(I_CS2_BM1_17_EPB);
				N: XIC(PICS_I_CS2_BM1_17_RPBA)OTE(I_CS1_BM1_17_RPBA);
				N: XIC(PICS_I_CS2_BM1_27_EPB)OTE(I_CS2_BM1_27_EPB);
				N: XIC(PICS_I_CS2_BM1_27_RPBA)OTE(I_CS2_BM1_27_RPBA);
				N: XIC(PICS_I_CS2_BM1_28_EPB)OTE(I_CS2_BM1_28_EPB);
				N: XIC(PICS_I_CS2_BM1_29_EPB)OTE(I_CS2_BM1_29_EPB);
				N: XIC(PICS_I_CS2_BM1_29_FWD)OTE(I_CS2_BM1_29_FWD);
				N: XIC(PICS_I_CS2_BM1_29_RPBA)OTE(I_CS2_BM1_29_RPBA);
				N: XIC(PICS_I_CS2_BM1_29_SPBG)OTE(I_CS2_BM1_29_SPBG);
				N: XIC(PICS_I_CS2_BM1_30_EPB)OTE(I_CS2_BM1_30_EPB);
				N: XIC(PICS_I_CS2_BM1_30_RPBA)OTE(I_CS2_BM1_30_RPBA);
				N: XIC(PICS_I_CS2_CL1T_01_EPB)OTE(I_CS2_CL1T_01_EPB);
				N: XIC(PICS_I_CS2_CL1T_01_SPBG)OTE(I_CS2_CL1T_01_SPBG);
				N: XIC(PICS_I_CS2_CL1T_02_EPB)OTE(I_CS2_CL1T_02_EPB);
				N: XIC(PICS_I_CS2_CL1T_02_SPBG)OTE(I_CS2_CL1T_02_SPBG);
				N: XIC(PICS_I_CS2_CL2T_01_EPB)OTE(I_CS2_CL2T_01_EPB);
				N: XIC(PICS_I_CS2_CL2T_01_SPBG)OTE(I_CS2_CL2T_01_SPBG);
				N: XIC(PICS_I_CS2_CL2T_02_EPB)OTE(I_CS2_CL2T_02_EPB);
				N: XIC(PICS_I_CS2_CL2T_02_SPBG)OTE(I_CS2_CL2T_02_SPBG);
				N: XIC(PICS_I_CS2_CL2T_05_EPB)OTE(I_CS2_CL2T_05_EPB);
				N: XIC(PICS_I_CS2_CL2T_05_RPBA)OTE(I_CS2_CL2T_05_RPBA);
				N: XIC(PICS_I_CS2_CL2T_05_SPBG)OTE(I_CS2_CL2T_05_SPBG);
				N: XIC(PICS_I_CS2_CL3T_01_EPB)OTE(I_CS2_CL3T_01_EPB);
				N: XIC(PICS_I_CS2_CL3T_01_SPBG)OTE(I_CS2_CL3T_01_SPBG);
				N: XIC(PICS_I_CS2_CL3T_02_EPB)OTE(I_CS2_CL3T_02_EPB);
				N: XIC(PICS_I_CS2_CL3T_02_SPBG)OTE(I_CS2_CL3T_02_SPBG);
				N: XIC(PICS_I_CS3_BM1_27_EPB)OTE(I_CS3_BM1_27_EPB);
				N: XIC(PICS_I_CS3_BM1_28_EPB)OTE(I_CS3_BM1_28_EPB);
				N: XIC(PICS_I_CS3_BM1_29_EPB)OTE(I_CS3_BM1_29_EPB);
				N: XIC(PICS_I_CS3_BM1_30_EPB)OTE(I_CS3_BM1_30_EPB);
				N: XIC(PICS_I_CS3_BM1_30_FWD)OTE(I_CS3_BM1_30_FWD);
				N: XIC(PICS_I_CS3_BM1_30_RPBA)OTE(I_CS3_BM1_30_RPBA);
				N: XIC(PICS_I_CS3_BM1_30_SPBG)OTE(I_CS3_BM1_30_SPBG);
				N: XIC(PICS_I_CS3_CL1T_01_EPB)OTE(I_CS3_CL1T_01_EPB);
				N: XIC(PICS_I_CS3_CL1T_01_SPBG)OTE(I_CS3_CL1T_01_SPBG);
				N: XIC(PICS_I_CS3_CL1T_02_EPB)OTE(I_CS3_CL1T_02_EPB);
				N: XIC(PICS_I_CS3_CL1T_02_SPBG)OTE(I_CS3_CL1T_02_SPBG);
				N: XIC(PICS_I_CS3_CL2T_02_EPB)OTE(I_CS3_CL2T_02_EPB);
				N: XIC(PICS_I_CS3_CL2T_02_SPBG)OTE(I_CS3_CL2T_02_SPBG);
				N: XIC(PICS_I_CS3_CL3T_02_EPB)OTE(I_CS3_CL3T_02_EPB);
				N: XIC(PICS_I_CS3_CL3T_02_SPBG)OTE(I_CS3_CL3T_02_SPBG);
				N: XIC(PICS_I_CS4_BM1_27_EPB)OTE(I_CS4_BM1_27_EPB);
				N: XIC(PICS_I_CS4_BM1_28_EPB)OTE(I_CS4_BM1_28_EPB);
				N: XIC(PICS_I_CS4_BM1_28_FWD)OTE(I_CS4_BM1_28_FWD);
				N: XIC(PICS_I_CS4_BM1_29_EPB)OTE(I_CS4_BM1_29_EPB);
				N: XIC(PICS_I_CS4_BM1_30_EPB)OTE(I_CS4_BM1_30_EPB);
				N: XIC(PICS_I_CS4_CL3T_02_EPB)OTE(I_CS4_CL3T_02_EPB);
				N: XIC(PICS_I_CS4_CL3T_02_RPBA)OTE(I_CS4_CL3T_02_RPBA);
				N: XIC(PICS_I_CS4_CL3T_02_SPBG)OTE(I_CS4_CL3T_02_SPBG);
				N: XIC(PICS_I_CS5_BM1_27_EPB)OTE(I_CS5_BM1_27_EPB);
				N: XIC(PICS_I_CS5_BM1_27_FWD)OTE(I_CS5_BM1_27_FWD);
				N: XIC(PICS_I_CS5_BM1_27_RPBA)OTE(I_CS5_BM1_27_RPBA);
				N: XIC(PICS_I_CS5_BM1_27_SPBG)OTE(I_CS5_BM1_27_SPBG);
				N: XIC(PICS_I_CS5_BM1_28_EPB)OTE(I_CS5_BM1_28_EPB);
				N: XIC(PICS_I_CS5_BM1_28_RPBA)OTE(I_CS5_BM1_28_RPBA);
				N: XIC(PICS_I_CS5_BM1_28_SPBG)OTE(I_CS5_BM1_28_SPBG);
				N: XIC(PICS_I_ECR_BM1_01)OTE(I_ECR_BM1_01);
				N: XIC(PICS_I_ECR_BM1_02)OTE(I_ECR_BM1_02);
				N: XIC(PICS_I_ECR_BM1_03)OTE(I_ECR_BM1_03);
				N: XIC(PICS_I_INT_C2_11_JAM)OTE(I_INT_C2_11_JAM);
				N: XIC(PICS_I_INT_C2T_12_RES)OTE(I_INT_C2T_12_RES);
				N: XIC(PICS_I_INT_C2T_12_START)OTE(I_INT_C2T_12_START);
				N: XIC(PICS_I_INT_C4_09_RUN)OTE(I_INT_C4_09_RUN);
				N: XIC(PICS_I_INT_HX1_05_JAM)OTE(I_INT_HX1_05_JAM);
				N: XIC(PICS_I_INT_HX1_11_RUN)OTE(I_INT_HX1_11_RUN);
				N: XIC(PICS_I_INT_HX1T_06_RES)OTE(I_INT_HX1T_06_RES);
				N: XIC(PICS_I_INT_HX1T_06_START)OTE(I_INT_HX1T_06_START);
				N: XIC(PICS_I_INT_O2_03_JAM)OTE(I_INT_O2_03_JAM);
				N: XIC(PICS_I_INT_O2T_04_RES)OTE(I_INT_O2T_04_RES);
				N: XIC(PICS_I_INT_O2T_04_START)OTE(I_INT_O2T_04_START);
				N: XIC(PICS_I_INT_O4_03_MRG)OTE(I_INT_O4_03_MRG);
				N: XIC(PICS_I_INT_O4_04_JAM)OTE(I_INT_O4_04_JAM);
				N: XIC(PICS_I_INT_O4_04_RUN)OTE(I_INT_O4_04_RUN);
				N: XIC(PICS_I_INT_O4_06_RUN)OTE(I_INT_O4_06_RUN);
				N: XIC(PICS_I_INT_O4T_05_RES)OTE(I_INT_O4T_05_RES);
				N: XIC(PICS_I_INT_O4T_05_START)OTE(I_INT_O4T_05_START);
				N: XIC(PICS_I_INT_T5_07_JAM)OTE(I_INT_T5_07_JAM);
				N: XIC(PICS_I_INT_T5_10_RUN)OTE(I_INT_T5_10_RUN);
				N: XIC(PICS_I_INT_T5T_08_RES)OTE(I_INT_T5T_08_RES);
				N: XIC(PICS_I_INT_T5T_08_START)OTE(I_INT_T5T_08_START);
				N: XIC(PICS_I_MOL_BM1_01)OTE(I_MOL_BM1_01);
				N: XIC(PICS_I_MOL_BM1_02)OTE(I_MOL_BM1_02);
				N: XIC(PICS_I_MOL_BM1_03)OTE(I_MOL_BM1_03);
				N: XIC(PICS_I_MOL_BM1_04)OTE(I_MOL_BM1_04);
				N: XIC(PICS_I_MOL_BM1_05)OTE(I_MOL_BM1_05);
				N: XIC(PICS_I_MOL_BM1_06)OTE(I_MOL_BM1_06);
				N: XIC(PICS_I_MOL_BM1_07)OTE(I_MOL_BM1_07);
				N: XIC(PICS_I_MOL_BM1_08)OTE(I_MOL_BM1_08);
				N: XIC(PICS_I_MOL_BM1_09)OTE(I_MOL_BM1_09);
				N: XIC(PICS_I_MOL_BM1_10)OTE(I_MOL_BM1_10);
				N: XIC(PICS_I_MOL_BM1_11)OTE(I_MOL_BM1_11);
				N: XIC(PICS_I_MOL_BM1_12)OTE(I_MOL_BM1_12);
				N: XIC(PICS_I_MOL_BM1_13)OTE(I_MOL_BM1_13);
				N: XIC(PICS_I_MOL_BM1_14)OTE(I_MOL_BM1_14);
				N: XIC(PICS_I_MOL_BM1_15)OTE(I_MOL_BM1_15);
				N: XIC(PICS_I_MOL_BM1_16)OTE(I_MOL_BM1_16);
				N: XIC(PICS_I_MOL_BM1_17)OTE(I_MOL_BM1_17);
				N: XIC(PICS_I_MOL_BM1_18)OTE(I_MOL_BM1_18);
				N: XIC(PICS_I_MOL_BM1_19)OTE(I_MOL_BM1_19);
				N: XIC(PICS_I_MOL_BM1_20)OTE(I_MOL_BM1_20);
				N: XIC(PICS_I_MOL_BM1_21)OTE(I_MOL_BM1_21);
				N: XIC(PICS_I_MOL_BM1_22)OTE(I_MOL_BM1_22);
				N: XIC(PICS_I_MOL_BM1_23)OTE(I_MOL_BM1_23);
				N: XIC(PICS_I_MOL_BM1_24)OTE(I_MOL_BM1_24);
				N: XIC(PICS_I_MOL_BM1_25)OTE(I_MOL_BM1_25);
				N: XIC(PICS_I_MOL_BM1_26)OTE(I_MOL_BM1_26);
				N: XIC(PICS_I_MOL_BM1_27)OTE(I_MOL_BM1_27);
				N: XIC(PICS_I_MOL_BM1_28)OTE(I_MOL_BM1_28);
				N: XIC(PICS_I_MOL_BM1_29)OTE(I_MOL_BM1_29);
				N: XIC(PICS_I_MOL_BM1_30)OTE(I_MOL_BM1_30);
				N: XIC(PICS_I_MOL_BM1_31)OTE(I_MOL_BM1_31);
				N: XIC(PICS_I_MOL_BM1_32)OTE(I_MOL_BM1_32);
				N: XIC(PICS_I_MOL_BM1_33)OTE(I_MOL_BM1_33);
				N: XIC(PICS_I_MOL_BM1_34)OTE(I_MOL_BM1_34);
				N: XIC(PICS_I_MOL_BM1_35)OTE(I_MOL_BM1_35);
				N: XIC(PICS_I_MOL_BM1_36)OTE(I_MOL_BM1_36);
				N: XIC(PICS_I_MOL_BM1_37)OTE(I_MOL_BM1_37);
				N: XIC(PICS_I_MOL_BM1_38)OTE(I_MOL_BM1_38);
				N: XIC(PICS_I_MSD_BM1_01)OTE(I_MSD_BM1_01);
				N: XIC(PICS_I_MSD_BM1_02)OTE(I_MSD_BM1_02);
				N: XIC(PICS_I_MSD_BM1_03)OTE(I_MSD_BM1_03);
				N: XIC(PICS_I_MSD_BM1_04)OTE(I_MSD_BM1_04);
				N: XIC(PICS_I_MSD_BM1_05)OTE(I_MSD_BM1_05);
				N: XIC(PICS_I_MSD_BM1_06)OTE(I_MSD_BM1_06);
				N: XIC(PICS_I_MSD_BM1_07)OTE(I_MSD_BM1_07);
				N: XIC(PICS_I_MSD_BM1_08)OTE(I_MSD_BM1_08);
				N: XIC(PICS_I_MSD_BM1_09)OTE(I_MSD_BM1_09);
				N: XIC(PICS_I_MSD_BM1_10)OTE(I_MSD_BM1_10);
				N: XIC(PICS_I_MSD_BM1_11)OTE(I_MSD_BM1_11);
				N: XIC(PICS_I_MSD_BM1_12)OTE(I_MSD_BM1_12);
				N: XIC(PICS_I_MSD_BM1_13)OTE(I_MSD_BM1_13);
				N: XIC(PICS_I_MSD_BM1_14)OTE(I_MSD_BM1_14);
				N: XIC(PICS_I_MSD_BM1_15)OTE(I_MSD_BM1_15);
				N: XIC(PICS_I_MSD_BM1_16)OTE(I_MSD_BM1_16);
				N: XIC(PICS_I_MSD_BM1_17)OTE(I_MSD_BM1_17);
				N: XIC(PICS_I_MSD_BM1_18)OTE(I_MSD_BM1_18);
				N: XIC(PICS_I_MSD_BM1_19)OTE(I_MSD_BM1_19);
				N: XIC(PICS_I_MSD_BM1_20)OTE(I_MSD_BM1_20);
				N: XIC(PICS_I_MSD_BM1_21)OTE(I_MSD_BM1_21);
				N: XIC(PICS_I_MSD_BM1_22)OTE(I_MSD_BM1_22);
				N: XIC(PICS_I_MSD_BM1_23)OTE(I_MSD_BM1_23);
				N: XIC(PICS_I_MSD_BM1_24)OTE(I_MSD_BM1_24);
				N: XIC(PICS_I_MSD_BM1_25)OTE(I_MSD_BM1_25);
				N: XIC(PICS_I_MSD_BM1_26)OTE(I_MSD_BM1_26);
				N: XIC(PICS_I_MSD_BM1_27)OTE(I_MSD_BM1_27);
				N: XIC(PICS_I_MSD_BM1_28)OTE(I_MSD_BM1_28);
				N: XIC(PICS_I_MSD_BM1_29)OTE(I_MSD_BM1_29);
				N: XIC(PICS_I_MSD_BM1_30)OTE(I_MSD_BM1_30);
				N: XIC(PICS_I_MSD_BM1_31)OTE(I_MSD_BM1_31);
				N: XIC(PICS_I_MSD_BM1_32)OTE(I_MSD_BM1_32);
				N: XIC(PICS_I_MSD_BM1_33)OTE(I_MSD_BM1_33);
				N: XIC(PICS_I_MSD_BM1_34)OTE(I_MSD_BM1_34);
				N: XIC(PICS_I_MSD_BM1_35)OTE(I_MSD_BM1_35);
				N: XIC(PICS_I_MSD_BM1_36)OTE(I_MSD_BM1_36);
				N: XIC(PICS_I_MSD_BM1_37)OTE(I_MSD_BM1_37);
				N: XIC(PICS_I_MSD_BM1_38)OTE(I_MSD_BM1_38);
				N: XIC(PICS_I_MSD_C2T_12)OTE(I_MSD_C2T_12);
				N: XIC(PICS_I_MSD_C2T_13)OTE(I_MSD_C2T_13);
				N: XIC(PICS_I_MSD_C2T_14)OTE(I_MSD_C2T_14);
				N: XIC(PICS_I_MSD_C2T_15)OTE(I_MSD_C2T_15);
				N: XIC(PICS_I_MSD_C2T_16)OTE(I_MSD_C2T_16);
				N: XIC(PICS_I_MSD_C2T_17)OTE(I_MSD_C2T_17);
				N: XIC(PICS_I_MSD_CL1T_01)OTE(I_MSD_CL1T_01);
				N: XIC(PICS_I_MSD_CL1T_02)OTE(I_MSD_CL1T_02);
				N: XIC(PICS_I_MSD_CL1T_03)OTE(I_MSD_CL1T_03);
				N: XIC(PICS_I_MSD_CL1T_04)OTE(I_MSD_CL1T_04);
				N: XIC(PICS_I_MSD_CL1T_05)OTE(I_MSD_CL1T_05);
				N: XIC(PICS_I_MSD_CL1T_06)OTE(I_MSD_CL1T_06);
				N: XIC(PICS_I_MSD_CL1T_07)OTE(I_MSD_CL1T_07);
				N: XIC(PICS_I_MSD_CL1T_08)OTE(I_MSD_CL1T_08);
				N: XIC(PICS_I_MSD_CL1T_09)OTE(I_MSD_CL1T_09);
				N: XIC(PICS_I_MSD_CL1T_10)OTE(I_MSD_CL1T_10);
				N: XIC(PICS_I_MSD_CL1T_11)OTE(I_MSD_CL1T_11);
				N: XIC(PICS_I_MSD_CL1T_12)OTE(I_MSD_CL1T_12);
				N: XIC(PICS_I_MSD_CL1T_13)OTE(I_MSD_CL1T_13);
				N: XIC(PICS_I_MSD_CL1T_14)OTE(I_MSD_CL1T_14);
				N: XIC(PICS_I_MSD_CL1T_15)OTE(I_MSD_CL1T_15);
				N: XIC(PICS_I_MSD_CL1T_16)OTE(I_MSD_CL1T_16);
				N: XIC(PICS_I_MSD_CL1T_17)OTE(I_MSD_CL1T_17);
				N: XIC(PICS_I_MSD_CL1T_18)OTE(I_MSD_CL1T_18);
				N: XIC(PICS_I_MSD_CL1T_19)OTE(I_MSD_CL1T_19);
				N: XIC(PICS_I_MSD_CL1T_20)OTE(I_MSD_CL1T_20);
				N: XIC(PICS_I_MSD_CL1T_21)OTE(I_MSD_CL1T_21);
				N: XIC(PICS_I_MSD_CL1T_23)OTE(I_MSD_CL1T_23);
				N: XIC(PICS_I_MSD_CL1T_24)OTE(I_MSD_CL1T_24);
				N: XIC(PICS_I_MSD_CL1T_26)OTE(I_MSD_CL1T_26);
				N: XIC(PICS_I_MSD_CL2T_01)OTE(I_MSD_CL2T_01);
				N: XIC(PICS_I_MSD_CL2T_02)OTE(I_MSD_CL2T_02);
				N: XIC(PICS_I_MSD_CL2T_03)OTE(I_MSD_CL2T_03);
				N: XIC(PICS_I_MSD_CL2T_04)OTE(I_MSD_CL2T_04);
				N: XIC(PICS_I_MSD_CL2T_05)OTE(I_MSD_CL2T_05);
				N: XIC(PICS_I_MSD_CL2T_06)OTE(I_MSD_CL2T_06);
				N: XIC(PICS_I_MSD_CL2T_07)OTE(I_MSD_CL2T_07);
				N: XIC(PICS_I_MSD_CL2T_08)OTE(I_MSD_CL2T_08);
				N: XIC(PICS_I_MSD_CL2T_09)OTE(I_MSD_CL2T_09);
				N: XIC(PICS_I_MSD_CL3T_01)OTE(I_MSD_CL3T_01);
				N: XIC(PICS_I_MSD_CL3T_02)OTE(I_MSD_CL3T_02);
				N: XIC(PICS_I_MSD_CL3T_03)OTE(I_MSD_CL3T_03);
				N: XIC(PICS_I_MSD_CL3T_04)OTE(I_MSD_CL3T_04);
				N: XIC(PICS_I_MSD_CL3T_05)OTE(I_MSD_CL3T_05);
				N: XIC(PICS_I_MSD_CL3T_06)OTE(I_MSD_CL3T_06);
				N: XIC(PICS_I_MSD_CL3T_07)OTE(I_MSD_CL3T_07);
				N: XIC(PICS_I_MSD_CL3T_08)OTE(I_MSD_CL3T_08);
				N: XIC(PICS_I_MSD_HX1T_06)OTE(I_MSD_HX1T_06);
				N: XIC(PICS_I_MSD_HX1T_07)OTE(I_MSD_HX1T_07);
				N: XIC(PICS_I_MSD_HX1T_08)OTE(I_MSD_HX1T_08);
				N: XIC(PICS_I_MSD_HX1T_09)OTE(I_MSD_HX1T_09);
				N: XIC(PICS_I_MSD_HX1T_10)OTE(I_MSD_HX1T_10);
				N: XIC(PICS_I_MSD_HX1T_10A)OTE(I_MSD_HX1T_10A);
				N: XIC(PICS_I_MSD_O2T_04)OTE(I_MSD_O2T_04);
				N: XIC(PICS_I_MSD_O2T_05)OTE(I_MSD_O2T_05);
				N: XIC(PICS_I_MSD_O2T_06)OTE(I_MSD_O2T_06);
				N: XIC(PICS_I_MSD_O2T_07)OTE(I_MSD_O2T_07);
				N: XIC(PICS_I_MSD_O2T_08)OTE(I_MSD_O2T_08);
				N: XIC(PICS_I_MSD_O2T_09)OTE(I_MSD_O2T_09);
				N: XIC(PICS_I_MSD_O2T_10)OTE(I_MSD_O2T_10);
				N: XIC(PICS_I_MSD_O2T_11)OTE(I_MSD_O2T_11);
				N: XIC(PICS_I_MSD_O2T_12)OTE(I_MSD_O2T_12);
				N: XIC(PICS_I_MSD_O2T_13)OTE(I_MSD_O2T_13);
				N: XIC(PICS_I_MSD_O2T_14)OTE(I_MSD_O2T_14);
				N: XIC(PICS_I_MSD_O2T_15)OTE(I_MSD_O2T_15);
				N: XIC(PICS_I_MSD_O2T_16)OTE(I_MSD_O2T_16);
				N: XIC(PICS_I_MSD_O2T_17)OTE(I_MSD_O2T_17);
				N: XIC(PICS_I_MSD_O2T_18)OTE(I_MSD_O2T_18);
				N: XIC(PICS_I_MSD_O4T_05)OTE(I_MSD_O4T_05);
				N: XIC(PICS_I_MSD_O4T_06)OTE(I_MSD_O4T_06);
				N: XIC(PICS_I_MSD_O4T_07)OTE(I_MSD_O4T_07);
				N: XIC(PICS_I_MSD_O4T_08)OTE(I_MSD_O4T_08);
				N: XIC(PICS_I_MSD_O4T_09)OTE(I_MSD_O4T_09);
				N: XIC(PICS_I_MSD_O4T_10)OTE(I_MSD_O4T_10);
				N: XIC(PICS_I_MSD_O4T_11)OTE(I_MSD_O4T_11);
				N: XIC(PICS_I_MSD_O4T_12)OTE(I_MSD_O4T_12);
				N: XIC(PICS_I_MSD_O4T_13)OTE(I_MSD_O4T_13);
				N: XIC(PICS_I_MSD_T5T_08)OTE(I_MSD_T5T_08);
				N: XIC(PICS_I_MSD_T5T_09)OTE(I_MSD_T5T_09);
				N: XIC(PICS_I_MSD_XO1_01)OTE(I_MSD_XO1_01);
				N: XIC(PICS_I_MSD_XO1_02)OTE(I_MSD_XO1_02);
				N: XIC(PICS_I_MSD_XO1_03)OTE(I_MSD_XO1_03);
				N: XIC(PICS_I_MSD_XO2_01)OTE(I_MSD_XO2_01);
				N: XIC(PICS_I_MSD_XO2_02)OTE(I_MSD_XO2_02);
				N: XIC(PICS_I_MSD_XO2_03)OTE(I_MSD_XO2_03);
				N: XIC(PICS_I_MSD_XO2_04)OTE(I_MSD_XO2_04);
				N: XIC(PICS_I_MSD_XO2_05)OTE(I_MSD_XO2_05);
				N: XIC(PICS_I_PE_BM1_07)OTE(I_PE_BM1_07);
				N: XIC(PICS_I_PE_BM1_08)OTE(I_PE_BM1_08);
				N: XIC(PICS_I_PE_BM1_09)OTE(I_PE_BM1_09);
				N: XIC(PICS_I_PE_BM1_10)OTE(I_PE_BM1_10);
				N: XIC(PICS_I_PE_BM1_11)OTE(I_PE_BM1_11);
				N: XIC(PICS_I_PE_BM1_12)OTE(I_PE_BM1_12);
				N: XIC(PICS_I_PE_BM1_13)OTE(I_PE_BM1_13);
				N: XIC(PICS_I_PE_BM1_15)OTE(I_PE1_BM1_28);
				N: XIC(PICS_I_PE_BM1_16)OTE(I_PE2_BM1_28);
				N: XIC(PICS_I_PE_BM1_17)OTE(I_PE1_BM1_27);
				N: XIC(PICS_I_PE_BM1_18)OTE(I_PE_BM1_18);
				N: XIC(PICS_I_PE_BM1_20)OTE(I_PE_BM1_20);
				N: XIC(PICS_I_PE_BM1_21)OTE(I_PE_BM1_21);
				N: XIC(PICS_I_PE_BM1_22)OTE(I_PE_BM1_22);
				N: XIC(PICS_I_PE_BM1_23)OTE(I_PE_BM1_23);
				N: XIC(PICS_I_PE_BM1_24)OTE(I_PE_BM1_24);
				N: XIC(PICS_I_PE_BM1_25)OTE(I_PE_BM1_25);
				N: XIC(PICS_I_PE_BM1_26)OTE(I_PE_BM1_26);
				N: XIC(PICS_I_PE_BM1_31)OTE(I_PE_BM1_31);
				N: XIC(PICS_I_PE_BM1_32)OTE(I_PE_BM1_32);
				N: XIC(PICS_I_PE_BM1_33)OTE(I_PE_BM1_33);
				N: XIC(PICS_I_PE_BM1_34)OTE(I_PE_BM1_34);
				N: XIC(PICS_I_PE_BM1_35)OTE(I_PE_BM1_35);
				N: XIC(PICS_I_PE_BM1_36)OTE(I_PE_BM1_36);
				N: XIC(PICS_I_PE_BM1_37)OTE(I_PE_BM1_37);
				N: XIC(PICS_I_PE_BM1_38)OTE(I_PE_BM1_38);
				N: XIC(PICS_I_PE_C2T_12)OTE(I_PE_C2T_12);
				N: XIC(PICS_I_PE_C2T_13)OTE(I_PE_C2T_13);
				N: XIC(PICS_I_PE_C2T_14)OTE(I_PE_C2T_14);
				N: XIC(PICS_I_PE_C2T_15)OTE(I_PE_C2T_15);
				N: XIC(PICS_I_PE_C2T_16)OTE(I_PE_C2T_16);
				N: XIC(PICS_I_PE_C2T_17)OTE(I_PE_C2T_17);
				N: XIC(PICS_I_PE_C4_08)OTE(I_PE_C4_08);
				N: XIC(PICS_I_PE_CL1T_01)OTE(I_PE_CL1T_01);
				N: XIC(PICS_I_PE_CL1T_02)OTE(I_PE_CL1T_02);
				N: XIC(PICS_I_PE_CL1T_03)OTE(I_PE_CL1T_03);
				N: XIC(PICS_I_PE_CL1T_04)OTE(I_PE_CL1T_04);
				N: XIC(PICS_I_PE_CL1T_05)OTE(I_PE_CL1T_05);
				N: XIC(PICS_I_PE_CL1T_06)OTE(I_PE_CL1T_06);
				N: XIC(PICS_I_PE_CL1T_07)OTE(I_PE_CL1T_07);
				N: XIC(PICS_I_PE_CL1T_08)OTE(I_PE_CL1T_08);
				N: XIC(PICS_I_PE_CL1T_09)OTE(I_PE_CL1T_09);
				N: XIC(PICS_I_PE_CL1T_10)OTE(I_PE_CL1T_10);
				N: XIC(PICS_I_PE_CL1T_11)OTE(I_PE_CL1T_11);
				N: XIC(PICS_I_PE_CL1T_12)OTE(I_PE_CL1T_12);
				N: XIC(PICS_I_PE_CL1T_13)OTE(I_PE_CL1T_13);
				N: XIC(PICS_I_PE_CL1T_14)OTE(I_PE_CL1T_14);
				N: XIC(PICS_I_PE_CL1T_15)OTE(I_PE_CL1T_15);
				N: XIC(PICS_I_PE_CL1T_16)OTE(I_PE_CL1T_16);
				N: XIC(PICS_I_PE_CL1T_17)OTE(I_PE_CL1T_17);
				N: XIC(PICS_I_PE_CL1T_18)OTE(I_PE_CL1T_18);
				N: XIC(PICS_I_PE_CL1T_19)OTE(I_PE_CL1T_19);
				N: XIC(PICS_I_PE_CL1T_20)OTE(I_PE_CL1T_20);
				N: XIC(PICS_I_PE_CL1T_21)OTE(I_PE_CL1T_21);
				N: XIC(PICS_I_PE_CL1T_23)OTE(I_PE_CL1T_23);
				N: XIC(PICS_I_PE_CL1T_24)OTE(I_PE_CL1T_24);
				N: XIC(PICS_I_PE_CL2T_01)OTE(I_PE_CL2T_01);
				N: XIC(PICS_I_PE_CL2T_02)OTE(I_PE_CL2T_02);
				N: XIC(PICS_I_PE_CL2T_03)OTE(I_PE_CL2T_03);
				N: XIC(PICS_I_PE_CL2T_04)OTE(I_PE_CL2T_04);
				N: XIC(PICS_I_PE_CL2T_05)OTE(I_PE_CL2T_05);
				N: XIC(PICS_I_PE_CL2T_06)OTE(I_PE_CL2T_06);
				N: XIC(PICS_I_PE_CL2T_07)OTE(I_PE_CL2T_07);
				N: XIC(PICS_I_PE_CL2T_08)OTE(I_PE_CL2T_08);
				N: XIC(PICS_I_PE_CL2T_09)OTE(I_PE_CL2T_09);
				N: XIC(PICS_I_PE_CL3T_01)OTE(I_PE_CL3T_01);
				N: XIC(PICS_I_PE_CL3T_02)OTE(I_PE_CL3T_02);
				N: XIC(PICS_I_PE_CL3T_03)OTE(I_PE_CL3T_03);
				N: XIC(PICS_I_PE_CL3T_04)OTE(I_PE_CL3T_04);
				N: XIC(PICS_I_PE_CL3T_05)OTE(I_PE_CL3T_05);
				N: XIC(PICS_I_PE_CL3T_06)OTE(I_PE_CL3T_06);
				N: XIC(PICS_I_PE_CL3T_07)OTE(I_PE_CL3T_07);
				N: XIC(PICS_I_PE_CL3T_08)OTE(I_PE_CL3T_08);
				N: XIC(PICS_I_PE_HX1T_06)OTE(I_PE_HX1T_06);
				N: XIC(PICS_I_PE_HX1T_07)OTE(I_PE_HX1T_07);
				N: XIC(PICS_I_PE_HX1T_08)OTE(I_PE_HX1T_08);
				N: XIC(PICS_I_PE_HX1T_09)OTE(I_PE_HX1T_09);
				N: XIC(PICS_I_PE_HX1T_10)OTE(I_PE_HX1T_10);
				N: XIC(PICS_I_PE_HX1T_10A)OTE(I_PE_HX1T_10A);
				N: XIC(PICS_I_PE_O2T_04)OTE(I_PE_O2T_04);
				N: XIC(PICS_I_PE_O2T_05)OTE(I_PE_O2T_05);
				N: XIC(PICS_I_PE_O2T_06)OTE(I_PE_O2T_06);
				N: XIC(PICS_I_PE_O2T_07)OTE(I_PE_O2T_07);
				N: XIC(PICS_I_PE_O2T_08)OTE(I_PE_O2T_08);
				N: XIC(PICS_I_PE_O2T_09)OTE(I_PE_O2T_09);
				N: XIC(PICS_I_PE_O2T_10)OTE(I_PE_O2T_10);
				N: XIC(PICS_I_PE_O2T_11)OTE(I_PE_O2T_11);
				N: XIC(PICS_I_PE_O2T_12)OTE(I_PE_O2T_12);
				N: XIC(PICS_I_PE_O2T_13)OTE(I_PE_O2T_13);
				N: XIC(PICS_I_PE_O2T_14)OTE(I_PE_O2T_14);
				N: XIC(PICS_I_PE_O2T_15)OTE(I_PE_O2T_15);
				N: XIC(PICS_I_PE_O2T_16)OTE(I_PE_O2T_16);
				N: XIC(PICS_I_PE_O2T_17)OTE(I_PE_O2T_17);
				N: XIC(PICS_I_PE_O2T_18)OTE(I_PE_O2T_18);
				N: XIC(PICS_I_PE_O4T_05)OTE(I_PE_O4T_05);
				N: XIC(PICS_I_PE_O4T_06)OTE(I_PE_O4T_06);
				N: XIC(PICS_I_PE_O4T_07)OTE(I_PE_O4T_07);
				N: XIC(PICS_I_PE_O4T_08)OTE(I_PE_O4T_08);
				N: XIC(PICS_I_PE_O4T_09)OTE(I_PE_O4T_09);
				N: XIC(PICS_I_PE_O4T_11)OTE(I_PE_O4T_11);
				N: XIC(PICS_I_PE_O4T_12)OTE(I_PE_O4T_12);
				N: XIC(PICS_I_PE_O4T_13)OTE(I_PE_O4T_13);
				N: XIC(PICS_I_PE_T5T_08)OTE(I_PE_T5T_08);
				N: XIC(PICS_I_PE_T5T_09)OTE(I_PE_T5T_09);
				N: XIC(PICS_I_PE_XO1_02)OTE(I_PE_XO1_02);
				N: XIC(PICS_I_PE_XO1_03)OTE(I_PE_XO1_03);
				N: XIC(PICS_I_PE_XO2_01)OTE(I_PE_XO2_01);
				N: XIC(PICS_I_PE_XO2_02)OTE(I_PE_XO2_02);
				N: XIC(PICS_I_PE_XO2_03)OTE(I_PE_XO2_03);
				N: XIC(PICS_I_PE_XO2_04)OTE(I_PE_XO2_04);
				N: XIC(PICS_I_PE_XO2_05)OTE(I_PE_XO2_05);
				N: XIC(PICS_I_PE1_BM1_06)OTE(I_PE1_BM1_06);
				N: XIC(PICS_I_PE1_BM1_14)OTE(I_PE1_BM1_14);
				N: XIC(PICS_I_PE1_BM1_19)OTE(I_PE1_BM1_19);
				N: XIC(PICS_I_PE1_BM1_27)OTE(I_PE1_BM1_27);
				N: XIC(PICS_I_PE1_BM1_28)OTE(I_PE1_BM1_28);
				N: XIC(PICS_I_PE1_BM1_29)OTE(I_PE1_BM1_29);
				N: XIC(PICS_I_PE1_BM1_30)OTE(I_PE1_BM1_30);
				N: XIC(PICS_I_PE1_BM1_23)OTE(I_PE1_BM1_23);
				N: XIC(PICS_I_PE1_CL1T_26)OTE(I_PE1_CL1T_26);
				N: XIC(PICS_I_PE1_O4T_10)OTE(I_PE1_O4T_10);
				N: XIC(PICS_I_PE1_XO1_01)OTE(I_PE1_XO1_01);
				N: XIC(PICS_I_PE2_BM1_06)OTE(I_PE2_BM1_06);
				N: XIC(PICS_I_PE2_BM1_14)OTE(I_PE2_BM1_14);
				N: XIC(PICS_I_PE2_BM1_19)OTE(I_PE2_BM1_19);
				N: XIC(PICS_I_PE2_BM1_27)OTE(I_PE2_BM1_27);
				N: XIC(PICS_I_PE2_BM1_28)OTE(I_PE2_BM1_28);
				N: XIC(PICS_I_PE2_BM1_29)OTE(I_PE2_BM1_29);
				N: XIC(PICS_I_PE2_BM1_30)OTE(I_PE2_BM1_30);
				N: XIC(PICS_I_PE2_BM1_23)OTE(I_PE2_BM1_23);
				N: XIC(PICS_I_PE2_CL1T_26)OTE(I_PE2_CL1T_26);
				N: XIC(PICS_I_PE2_O4T_10)OTE(I_PE2_O4T_10);
				N: XIC(PICS_I_PE2_XO1_01)OTE(I_PE2_XO1_01);
				N: XIC(PICS_I_PE3_BM1_30)OTE(I_PE3_BM1_30);
				N: XIC(PICS_I_SD_XO1_AUTO)OTE(I_SD_XO1_AUTO);
				N: XIC(PICS_I_SD_XO1_CUR)OTE(I_SD_XO1_CUR);
				N: XIC(PICS_I_SD_XO1_DS)OTE(I_SD_XO1_DS);
				N: XIC(PICS_I_SD_XO1_EXT)OTE(I_SD_XO1_EXT);
				N: XIC(PICS_I_SD_XO1_FLT)OTE(I_SD_XO1_FLT);
				N: XIC(PICS_I_SD_XO1_SLMR)OTE(I_SD_XO1_SLMR);
				N: XIC(PICS_I_SD_XO1_ZERO)OTE(I_SD_XO1_ZERO);
				N: XIC(PICS_I_SD_XO2_AUTO)OTE(I_SD_XO2_AUTO);
				N: XIC(PICS_I_SD_XO2_CUR)OTE(I_SD_XO2_CUR);
				N: XIC(PICS_I_SD_XO2_DS)OTE(I_SD_XO2_DS);
				N: XIC(PICS_I_SD_XO2_EXT)OTE(I_SD_XO2_EXT);
				N: XIC(PICS_I_SD_XO2_FLT)OTE(I_SD_XO2_FLT);
				N: XIC(PICS_I_SD_XO2_SLMR)OTE(I_SD_XO2_SLMR);
				N: XIC(PICS_I_SD_XO2_ZERO)OTE(I_SD_XO2_ZERO);
				N: XIC(PICS_I_SE_BM1_14)OTE(I_SE_BM1_14);
				N: XIC(PICS_I_SE_BM1_23)OTE(I_SE_BM1_23);
				N: XIC(PICS_I_SE_C4_09)OTE(I_SE_C4_09);
				N: XIC(PICS_I_SE_CL1T_26)OTE(I_SE_CL1T_26);
				N: XIC(PICS_I_SE_O2T_10)OTE(I_SE_O2T_10);
				N: XIC(PICS_I_SE_O4_04)OTE(I_SE_O4_04);
				N: XIC(PICS_I_SE_O4T_10)OTE(I_SE_O4T_10);
				N: XIC(PICS_I_TS_MCP_01_ALM)OTE(I_TS_MCP_01_ALM);
				N: XIC(PICS_I_TS_MCP_02_ALM)OTE(I_TS_MCP_02_ALM);
				N: XIC(PICS_I_TS_MCP_03_ALM)OTE(I_TS_MCP_03_ALM);
				N: XIC(PICS_I_VFD_BM1_27_RDY)OTE(I_C_BM1_27);
				N: XIC(PICS_I_VFD_BM1_28_RDY)OTE(I_C_BM1_28);
				N: XIC(PICS_I_VFD_BM1_29_RDY)OTE(I_C_BM1_29);
				N: XIC(PICS_I_VFD_BM1_30_RDY)OTE(I_C_BM1_30);
				N: XIC(PICS_I_VFD_C2T_12_RDY)OTE(I_VFD_C2T_12_RDY);
				N: XIC(PICS_I_VFD_C2T_13_RDY)OTE(I_VFD_C2T_13_RDY);
				N: XIC(PICS_I_VFD_C2T_14_RDY)OTE(I_VFD_C2T_14_RDY);
				N: XIC(PICS_I_VFD_C2T_15_RDY)OTE(I_VFD_C2T_15_RDY);
				N: XIC(PICS_I_VFD_C2T_16_RDY)OTE(I_VFD_C2T_16_RDY);
				N: XIC(PICS_I_VFD_C2T_17_RDY)OTE(I_VFD_C2T_17_RDY);
				N: XIC(PICS_I_VFD_CL1T_01_RDY)OTE(I_VFD_CL1T_01_RDY);
				N: XIC(PICS_I_VFD_CL1T_02_RDY)OTE(I_VFD_CL1T_02_RDY);
				N: XIC(PICS_I_VFD_CL1T_03_RDY)OTE(I_VFD_CL1T_03_RDY);
				N: XIC(PICS_I_VFD_CL1T_04_RDY)OTE(I_VFD_CL1T_04_RDY);
				N: XIC(PICS_I_VFD_CL1T_05_RDY)OTE(I_VFD_CL1T_05_RDY);
				N: XIC(PICS_I_VFD_CL1T_06_RDY)OTE(I_VFD_CL1T_06_RDY);
				N: XIC(PICS_I_VFD_CL1T_07_RDY)OTE(I_VFD_CL1T_07_RDY);
				N: XIC(PICS_I_VFD_CL1T_08_RDY)OTE(I_VFD_CL1T_08_RDY);
				N: XIC(PICS_I_VFD_CL1T_09_RDY)OTE(I_VFD_CL1T_09_RDY);
				N: XIC(PICS_I_VFD_CL1T_10_RDY)OTE(I_VFD_CL1T_10_RDY);
				N: XIC(PICS_I_VFD_CL1T_11_RDY)OTE(I_VFD_CL1T_11_RDY);
				N: XIC(PICS_I_VFD_CL1T_12_RDY)OTE(I_VFD_CL1T_12_RDY);
				N: XIC(PICS_I_VFD_CL1T_13_RDY)OTE(I_VFD_CL1T_13_RDY);
				N: XIC(PICS_I_VFD_CL1T_14_RDY)OTE(I_VFD_CL1T_14_RDY);
				N: XIC(PICS_I_VFD_CL1T_15_RDY)OTE(I_VFD_CL1T_15_RDY);
				N: XIC(PICS_I_VFD_CL1T_16_RDY)OTE(I_VFD_CL1T_16_RDY);
				N: XIC(PICS_I_VFD_CL1T_17_RDY)OTE(I_VFD_CL1T_17_RDY);
				N: XIC(PICS_I_VFD_CL1T_18_RDY)OTE(I_VFD_CL1T_18_RDY);
				N: XIC(PICS_I_VFD_CL1T_19_RDY)OTE(I_VFD_CL1T_19_RDY);
				N: XIC(PICS_I_VFD_CL1T_20_RDY)OTE(I_VFD_CL1T_20_RDY);
				N: XIC(PICS_I_VFD_CL1T_21_RDY)OTE(I_VFD_CL1T_21_RDY);
				N: XIC(PICS_I_VFD_CL1T_23_RDY)OTE(I_VFD_CL1T_23_RDY);
				N: XIC(PICS_I_VFD_CL1T_24_RDY)OTE(I_VFD_CL1T_24_RDY);
				N: XIC(PICS_I_VFD_CL1T_26_RDY)OTE(I_VFD_CL1T_26_RDY);
				N: XIC(PICS_I_VFD_CL2T_01_RDY)OTE(I_VFD_CL2T_01_RDY);
				N: XIC(PICS_I_VFD_CL2T_02_RDY)OTE(I_VFD_CL2T_02_RDY);
				N: XIC(PICS_I_VFD_CL2T_03_RDY)OTE(I_VFD_CL2T_03_RDY);
				N: XIC(PICS_I_VFD_CL2T_04_RDY)OTE(I_VFD_CL2T_04_RDY);
				N: XIC(PICS_I_VFD_CL2T_05_RDY)OTE(I_VFD_CL2T_05_RDY);
				N: XIC(PICS_I_VFD_CL2T_06_RDY)OTE(I_VFD_CL2T_06_RDY);
				N: XIC(PICS_I_VFD_CL2T_07_RDY)OTE(I_VFD_CL2T_07_RDY);
				N: XIC(PICS_I_VFD_CL2T_08_RDY)OTE(I_VFD_CL2T_08_RDY);
				N: XIC(PICS_I_VFD_CL2T_09_RDY)OTE(I_VFD_CL2T_09_RDY);
				N: XIC(PICS_I_VFD_CL3T_01_RDY)OTE(I_VFD_CL3T_01_RDY);
				N: XIC(PICS_I_VFD_CL3T_02_RDY)OTE(I_VFD_CL3T_02_RDY);
				N: XIC(PICS_I_VFD_CL3T_03_RDY)OTE(I_VFD_CL3T_03_RDY);
				N: XIC(PICS_I_VFD_CL3T_04_RDY)OTE(I_VFD_CL3T_04_RDY);
				N: XIC(PICS_I_VFD_CL3T_05_RDY)OTE(I_VFD_CL3T_05_RDY);
				N: XIC(PICS_I_VFD_CL3T_06_RDY)OTE(I_VFD_CL3T_06_RDY);
				N: XIC(PICS_I_VFD_CL3T_07_RDY)OTE(I_VFD_CL3T_07_RDY);
				N: XIC(PICS_I_VFD_CL3T_08_RDY)OTE(I_VFD_CL3T_08_RDY);
				N: XIC(PICS_I_VFD_HX1T_06_RDY)OTE(I_VFD_HX1T_06_RDY);
				N: XIC(PICS_I_VFD_HX1T_07_RDY)OTE(I_VFD_HX1T_07_RDY);
				N: XIC(PICS_I_VFD_HX1T_08_RDY)OTE(I_VFD_HX1T_08_RDY);
				N: XIC(PICS_I_VFD_HX1T_09_RDY)OTE(I_VFD_HX1T_09_RDY);
				N: XIC(PICS_I_VFD_HX1T_10_RDY)OTE(I_VFD_HX1T_10_RDY);
				N: XIC(PICS_I_VFD_HX1T_10A_RDY)OTE(I_VFD_HX1T_10A_RDY);
				N: XIC(PICS_I_VFD_O2T_04_RDY)OTE(I_VFD_O2T_04_RDY);
				N: XIC(PICS_I_VFD_O2T_05_RDY)OTE(I_VFD_O2T_05_RDY);
				N: XIC(PICS_I_VFD_O2T_06_RDY)OTE(I_VFD_O2T_06_RDY);
				N: XIC(PICS_I_VFD_O2T_07_RDY)OTE(I_VFD_O2T_07_RDY);
				N: XIC(PICS_I_VFD_O2T_08_RDY)OTE(I_VFD_O2T_08_RDY);
				N: XIC(PICS_I_VFD_O2T_09_RDY)OTE(I_VFD_O2T_09_RDY);
				N: XIC(PICS_I_VFD_O2T_10_RDY)OTE(I_VFD_O2T_10_RDY);
				N: XIC(PICS_I_VFD_O2T_11_RDY)OTE(I_VFD_O2T_11_RDY);
				N: XIC(PICS_I_VFD_O2T_12_RDY)OTE(I_VFD_O2T_12_RDY);
				N: XIC(PICS_I_VFD_O2T_13_RDY)OTE(I_VFD_O2T_13_RDY);
				N: XIC(PICS_I_VFD_O2T_14_RDY)OTE(I_VFD_O2T_14_RDY);
				N: XIC(PICS_I_VFD_O2T_15_RDY)OTE(I_VFD_O2T_15_RDY);
				N: XIC(PICS_I_VFD_O2T_16_RDY)OTE(I_VFD_O2T_16_RDY);
				N: XIC(PICS_I_VFD_O2T_17_RDY)OTE(I_VFD_O2T_17_RDY);
				N: XIC(PICS_I_VFD_O2T_18_RDY)OTE(I_VFD_O2T_18_RDY);
				N: XIC(PICS_I_VFD_O4T_05_RDY)OTE(I_VFD_O4T_05_RDY);
				N: XIC(PICS_I_VFD_O4T_06_RDY)OTE(I_VFD_O4T_06_RDY);
				N: XIC(PICS_I_VFD_O4T_07_RDY)OTE(I_VFD_O4T_07_RDY);
				N: XIC(PICS_I_VFD_O4T_08_RDY)OTE(I_VFD_O4T_08_RDY);
				N: XIC(PICS_I_VFD_O4T_09_RDY)OTE(I_VFD_O4T_09_RDY);
				N: XIC(PICS_I_VFD_O4T_10_RDY)OTE(I_VFD_O4T_10_RDY);
				N: XIC(PICS_I_VFD_O4T_11_RDY)OTE(I_VFD_O4T_11_RDY);
				N: XIC(PICS_I_VFD_O4T_12_RDY)OTE(I_VFD_O4T_12_RDY);
				N: XIC(PICS_I_VFD_O4T_13_RDY)OTE(I_VFD_O4T_13_RDY);
				N: XIC(PICS_I_VFD_T5T_08_RDY)OTE(I_VFD_T5T_08_RDY);
				N: XIC(PICS_I_VFD_T5T_09_RDY)OTE(I_VFD_T5T_09_RDY);
				N: XIC(PICS_I_VFD_XO1_01_RDY)OTE(I_VFD_XO1_01_RDY);
				N: XIC(PICS_I_VFD_XO1_02_RDY)OTE(I_VFD_XO1_02_RDY);
				N: XIC(PICS_I_VFD_XO1_03_RDY)OTE(I_VFD_XO1_03_RDY);
				N: XIC(PICS_I_VFD_XO2_01_RDY)OTE(I_VFD_XO2_01_RDY);
				N: XIC(PICS_I_VFD_XO2_02_RDY)OTE(I_VFD_XO2_02_RDY);
				N: XIC(PICS_I_VFD_XO2_03_RDY)OTE(I_VFD_XO2_03_RDY);
				N: XIC(PICS_I_VFD_XO2_04_RDY)OTE(I_VFD_XO2_04_RDY);
				N: XIC(PICS_I_VFD_XO2_05_RDY)OTE(I_VFD_XO2_05_RDY);
				N: XIC(PICS_I_VFD_O3T_17_RDY)OTE(I_VFD_O3T_17_RDY);
				N: XIC(PICS_I_VFD_O3T_18_RDY)OTE(I_VFD_O3T_18_RDY);
				N: XIC(PICS_I_VFD_O3T_19_RDY)OTE(I_VFD_O3T_19_RDY);
				N: XIC(PICS_I_VFD_O3T_20_RDY)OTE(I_VFD_O3T_20_RDY);
				N: XIC(PICS_I_VFD_O4T_16_RDY)OTE(I_VFD_O4T_16_RDY);
				N: XIC(PICS_I_VFD_O4T_17_RDY)OTE(I_VFD_O4T_17_RDY);
				N: XIC(PICS_I_VFD_O4T_18_RDY)OTE(I_VFD_O4T_18_RDY);
				N: XIC(PICS_I_VFD_O4T_19_RDY)OTE(I_VFD_O4T_19_RDY);
				N: XIC(PICS_I_VFD_O4T_20_RDY)OTE(I_VFD_O4T_20_RDY);
				N: XIC(PICS_I_VFD_O4T_21_RDY)OTE(I_VFD_O4T_21_RDY);
				N: XIC(PICS_I_VFD_O4T_22_RDY)OTE(I_VFD_O4T_22_RDY);
				N: XIC(PICS_I_VFD_CL12T_35_RDY)OTE(I_VFD_CL12T_35_RDY);
				N: XIC(PICS_I_VFD_CL12T_36_RDY)OTE(I_VFD_CL12T_36_RDY);
				N: XIC(PICS_I_SE_O4T_20)OTE(I_SE_O4T_20);
				N: XIC(PICS_I_CS_MCP_16_EPB)OTE(I_CS_MCP_16_EPB);
				N: XIC(PICS_I_CS_MCP_16_SPBG)OTE(I_CS_MCP_16_SPBG);
				N: XIC(PICS_I_CS_MCP_16_TPB)OTE(I_CS_MCP_16_TPB);
				N: XIC(PICS_I_CS_MCP_16_APB)OTE(I_CS_MCP_16_APB);
				N: XIC(PICS_I_TS_MCP_16_ALM)OTE(I_TS_MCP_16_ALM);
				N: XIC(PICS_I_CS_O3T_17_EPB)OTE(I_CS_O3T_17_EPB);
				N: XIC(PICS_I_CS_O3T_17_SPBG)OTE(I_CS_O3T_17_SPBG);
				N: XIC(PICS_I_CS_O3T_17_RPBA)OTE(I_CS_O3T_17_RPBA);
				N: XIC(PICS_I_CS1_O3T_19_EPB)OTE(I_CS1_O3T_19_EPB);
				N: XIC(PICS_I_CS1_O3T_19_SPBG)OTE(I_CS1_O3T_19_SPBG);
				N: XIC(PICS_I_CS1_O3T_19_RPBA)OTE(I_CS1_O3T_19_RPBA);
				N: XIC(PICS_I_CS2_O3T_19_EPB)OTE(I_CS2_O3T_19_EPB);
				N: XIC(PICS_I_CS2_O3T_19_SPBG)OTE(I_CS2_O3T_19_SPBG);
				N: XIC(PICS_I_CS2_O3T_19_RPBA)OTE(I_CS2_O3T_19_RPBA);
				N: XIC(PICS_I_CS_O4T_16_EPB)OTE(I_CS_O4T_16_EPB);
				N: XIC(PICS_I_CS_O4T_16_SPBG)OTE(I_CS_O4T_16_SPBG);
				N: XIC(PICS_I_CS_O4T_16_RPBA)OTE(I_CS_O4T_16_RPBA);
				N: XIC(PICS_I_CS1_O4T_21_EPB)OTE(I_CS1_O4T_21_EPB);
				N: XIC(PICS_I_CS1_O4T_21_SPBG)OTE(I_CS1_O4T_21_SPBG);
				N: XIC(PICS_I_CS1_O4T_21_RPBA)OTE(I_CS1_O4T_21_RPBA);
				N: XIC(PICS_I_CS2_O4T_21_EPB)OTE(I_CS2_O4T_21_EPB);
				N: XIC(PICS_I_CS2_O4T_21_SPBG)OTE(I_CS2_O4T_21_SPBG);
				N: XIC(PICS_I_CS2_O4T_21_RPBA)OTE(I_CS2_O4T_21_RPBA);
				N: XIC(PICS_I_CS_CL12T_36_EPB)OTE(I_CS_CL12T_36_EPB);
				N: XIC(PICS_I_CS_CL12T_36_SPBG)OTE(I_CS_CL12T_36_SPBG);
				N: XIC(PICS_I_CS_CL12T_36_RPBA)OTE(I_CS_CL12T_36_RPBA);
				N: XIC(PICS_I_CS_CL12T_36_JRB)OTE(I_CS_CL12T_36_JRB);
				N: XIC(PICS_I_CS_CL12T_36_AUTO)OTE(I_CS_CL12T_36_AUTO);
				N: XIC(PICS_I_MSD_O3T_17)OTE(I_MSD_O3T_17);
				N: XIC(PICS_I_MSD_O3T_18)OTE(I_MSD_O3T_18);
				N: XIC(PICS_I_MSD_O3T_19)OTE(I_MSD_O3T_19);
				N: XIC(PICS_I_MSD_O3T_20)OTE(I_MSD_O3T_20);
				N: XIC(PICS_I_MSD_O4T_16)OTE(I_MSD_O4T_16);
				N: XIC(PICS_I_MSD_O4T_17)OTE(I_MSD_O4T_17);
				N: XIC(PICS_I_MSD_O4T_18)OTE(I_MSD_O4T_18);
				N: XIC(PICS_I_MSD_O4T_19)OTE(I_MSD_O4T_19);
				N: XIC(PICS_I_MSD_O4T_20)OTE(I_MSD_O4T_20);
				N: XIC(PICS_I_MSD_O4T_21)OTE(I_MSD_O4T_21);
				N: XIC(PICS_I_MSD_O4T_22)OTE(I_MSD_O4T_22);
				N: XIC(PICS_I_MSD_CL12T_35)OTE(I_MSD_CL12T_35);
				N: XIC(PICS_I_MSD_CL12T_36)OTE(I_MSD_CL12T_36);
				N: XIC(PICS_I_PE_O3T_17)OTE(I_PE_O3T_17);
				N: XIC(PICS_I_PE_O3T_18)OTE(I_PE_O3T_18);
				N: XIC(PICS_I_PE_O3T_19)OTE(I_PE_O3T_19);
				N: XIC(PICS_I_PE_O3T_20)OTE(I_PE_O3T_20);
				N: XIC(PICS_I_PE_O4T_16)OTE(I_PE_O4T_16);
				N: XIC(PICS_I_PE_O4T_17)OTE(I_PE_O4T_17);
				N: XIC(PICS_I_PE_O4T_18)OTE(I_PE_O4T_18);
				N: XIC(PICS_I_PE_O4T_19)OTE(I_PE_O4T_19);
				N: XIC(PICS_I_PE_O4T_20)OTE(I_PE_O4T_20);
				N: XIC(PICS_I_PE_O4T_21)OTE(I_PE_O4T_21);
				N: XIC(PICS_I_PE_O4T_22)OTE(I_PE_O4T_22);
				N: XIC(PICS_I_PE_CL12T_35)OTE(I_PE_CL12T_35);
				N: XIC(PICS_I_PE_CL12T_36)OTE(I_PE_CL12T_36);
				N: XIC(PICS_I_INT_O3T_17_START)OTE(I_INT_O3T_17_START);
				N: XIC(PICS_I_INT_O3_16_JAM)OTE(I_INT_O3_16_JAM);
				N: XIC(PICS_I_INT_O3T_21_RUN)OTE(I_INT_O3T_21_RUN);
				N: XIC(PICS_I_INT_O4T_16_START)OTE(I_INT_O4T_16_START);
				N: XIC(PICS_I_INT_O4_15_JAM)OTE(I_INT_O4_15_JAM);
				N: XIC(PICS_I_INT_O4T_21_RUN)OTE(I_INT_O4T_21_RUN);
				N: XIC(PICS_I_INT_CL12T_35_START)OTE(I_INT_CL12T_35_START);
				N: XIC(PICS_I_INT_CL12_34_JAM)OTE(I_INT_CL12_34_JAM);
				N: XIC(PICS_I_INT_CL12T_35_RES)OTE(I_INT_CL12T_35_RES);
		END_ROUTINE

		ROUTINE PICS_OUT 
				N: XIC(O_CBP_BM1_07_TRIG)OTE(PICS_O_CBP_BM1_07_TRIG);
				N: XIC(O_CBP_BM1_08_TRIG)OTE(PICS_O_CBP_BM1_08_TRIG);
				N: XIC(O_CBP_BM1_09_TRIG)OTE(PICS_O_CBP_BM1_09_TRIG);
				N: XIC(O_CBP_BM1_10_TRIG)OTE(PICS_O_CBP_BM1_10_TRIG);
				N: XIC(O_CBP_BM1_11_TRIG)OTE(PICS_O_CBP_BM1_11_TRIG);
				N: XIC(O_CBP_BM1_12_TRIG)OTE(PICS_O_CBP_BM1_12_TRIG);
				N: XIC(O_CBP_BM1_13_TRIG)OTE(PICS_O_CBP_BM1_13_TRIG);
				N: XIC(O_CS_BM1_01_EPB)OTE(PICS_O_CS_BM1_01_EPB);
				N: XIC(O_CS_BM1_01_RPBA)OTE(PICS_O_CS_BM1_01_RPBA);
				N: XIC(O_CS_BM1_02_EPB)OTE(PICS_O_CS_BM1_02_EPB);
				N: XIC(O_CS_BM1_02_RPBA)OTE(PICS_O_CS_BM1_02_RPBA);
				N: XIC(O_CS_BM1_03_EPB)OTE(PICS_O_CS_BM1_03_EPB);
				N: XIC(O_CS_BM1_03_RPBA)OTE(PICS_O_CS_BM1_03_RPBA);
				N: XIC(O_CS_BM1_06_EPB)OTE(PICS_O_CS_BM1_06_EPB);
				N: XIC(O_CS_BM1_06_RPBA)OTE(PICS_O_CS_BM1_06_RPBA);
				N: XIC(O_CS_BM1_07_EPB)OTE(PICS_O_CS_BM1_07_EPB);
				N: XIC(O_CS_BM1_07_LTW)OTE(PICS_O_CS_BM1_07_LTB);
				N: XIC(O_CS_BM1_07_RPBA)OTE(PICS_O_CS_BM1_07_RPBA);
				N: XIC(O_CS_BM1_07_SPBG)OTE(PICS_O_CS_BM1_07_SPBG);
				N: XIC(O_CS_BM1_13_EPB)OTE(PICS_O_CS_BM1_13_EPB);
				N: XIC(O_CS_BM1_13_RPBA)OTE(PICS_O_CS_BM1_13_RPBA);
				N: XIC(O_CS_BM1_15_EPB)OTE(PICS_O_CS_BM1_15_EPB);
				N: XIC(O_CS_BM1_15_RPBA)OTE(PICS_O_CS_BM1_15_RPBA);
				N: XIC(O_CS2_BM1_17_LTB)OTE(PICS_O_CS_BM1_17_LTB);
				N: XIC(O_CS2_BM1_17_SPBG)OTE(PICS_O_CS_BM1_17_SPBG);
				N: XIC(O_CS_BM1_18_EPB)OTE(PICS_O_CS_BM1_18_EPB);
				N: XIC(O_CS_BM1_18_RPBA)OTE(PICS_O_CS_BM1_18_RPBA);
				N: XIC(O_CS_BM1_19_EPB)OTE(PICS_O_CS_BM1_19_EPB);
				N: XIC(O_CS_BM1_19_RPBA)OTE(PICS_O_CS_BM1_19_RPBA);
				N: XIC(O_CS_BM1_20_EPB)OTE(PICS_O_CS_BM1_20_EPB);
				N: XIC(O_CS_BM1_20_LTW)OTE(PICS_O_CS_BM1_20_LTB);
				N: XIC(O_CS_BM1_20_RPBA)OTE(PICS_O_CS_BM1_20_RPBA);
				N: XIC(O_CS_BM1_23_EPB)OTE(PICS_O_CS_BM1_23_EPB);
				N: XIC(O_CS_BM1_23_RPBA)OTE(PICS_O_CS_BM1_23_RPBA);
				N: XIC(O_CS_BM1_25_EPB)OTE(PICS_O_CS_BM1_25_EPB);
				N: XIC(O_CS_BM1_25_RPBA)OTE(PICS_O_CS_BM1_25_RPBA);
				N: XIC(O_CS_BM1_34_EPB)OTE(PICS_O_CS_BM1_34_EPB);
				N: XIC(O_CS_BM1_34_RPBA)OTE(PICS_O_CS_BM1_34_RPBA);
				N: XIC(O_CS_BM1_38_EPB)OTE(PICS_O_CS_BM1_38_EPB);
				N: XIC(O_CS_BM1_38_RPBA)OTE(PICS_O_CS_BM1_38_RPBA);
				N: XIC(O_CS_C2T_13_EPB)OTE(PICS_O_CS_C2T_13_EPB);
				N: XIC(O_CS_C2T_13_RPBA)OTE(PICS_O_CS_C2T_13_RPBA);
				N: XIC(O_CS_C2T_13_SPBG)OTE(PICS_O_CS_C2T_13_SPBG);
				N: XIC(O_CS_C2T_17_EPB)OTE(PICS_O_CS_C2T_17_EPB);
				N: XIC(O_CS_C2T_17_RPBA)OTE(PICS_O_CS_C2T_17_RPBA);
				N: XIC(O_CS_C2T_17_SPBG)OTE(PICS_O_CS_C2T_17_SPBG);
				N: XIC(O_CS_CL1T_05_EPB)OTE(PICS_O_CS_CL1T_05_EPB);
				N: XIC(O_CS_CL1T_05_RPBA)OTE(PICS_O_CS_CL1T_05_RPBA);
				N: XIC(O_CS_CL1T_05_SPBG)OTE(PICS_O_CS_CL1T_05_SPBG);
				N: XIC(O_CS_CL1T_09_EPB)OTE(PICS_O_CS_CL1T_09_EPB);
				N: XIC(O_CS_CL1T_09_RPBA)OTE(PICS_O_CS_CL1T_09_RPBA);
				N: XIC(O_CS_CL1T_09_SPBG)OTE(PICS_O_CS_CL1T_09_SPBG);
				N: XIC(O_CS_CL1T_11_EPB)OTE(PICS_O_CS_CL1T_11_EPB);
				N: XIC(O_CS_CL1T_11_RPBA)OTE(PICS_O_CS_CL1T_11_RPBA);
				N: XIC(O_CS_CL1T_11_SPBG)OTE(PICS_O_CS_CL1T_11_SPBG);
				N: XIC(O_CS_CL1T_12_EPB)OTE(PICS_O_CS_CL1T_12_EPB);
				N: XIC(O_CS_CL1T_12_RPBA)OTE(PICS_O_CS_CL1T_12_RPBA);
				N: XIC(O_CS_CL1T_12_SPBG)OTE(PICS_O_CS_CL1T_12_SPBG);
				N: XIC(O_CS_CL1T_16_EPB)OTE(PICS_O_CS_CL1T_16_EPB);
				N: XIC(O_CS_CL1T_16_RPBA)OTE(PICS_O_CS_CL1T_16_RPBA);
				N: XIC(O_CS_CL1T_16_SPBG)OTE(PICS_O_CS_CL1T_16_SPBG);
				N: XIC(O_CS_CL1T_20_EPB)OTE(PICS_O_CS_CL1T_20_EPB);
				N: XIC(O_CS_CL1T_20_RPBA)OTE(PICS_O_CS_CL1T_20_RPBA);
				N: XIC(O_CS_CL1T_20_SPBG)OTE(PICS_O_CS_CL1T_20_SPBG);
				N: XIC(O_CS_CL1T_24_EPB)OTE(PICS_O_CS_CL1T_24_EPB);
				N: XIC(O_CS_CL1T_24_RPBA)OTE(PICS_O_CS_CL1T_24_RPBA);
				N: XIC(O_CS_CL1T_24_SPBG)OTE(PICS_O_CS_CL1T_24_SPBG);
				N: XIC(O_CS_CL2T_04_EPB)OTE(PICS_O_CS_CL2T_04_EPB);
				N: XIC(O_CS_CL2T_04_RPBA)OTE(PICS_O_CS_CL2T_04_RPBA);
				N: XIC(O_CS_CL2T_04_SPBG)OTE(PICS_O_CS_CL2T_04_SPBG);
				N: XIC(O_CS_CL2T_09_EPB)OTE(PICS_O_CS_CL2T_09_EPB);
				N: XIC(O_CS_CL2T_09_RPBA)OTE(PICS_O_CS_CL2T_09_RPBA);
				N: XIC(O_CS_CL2T_09_SPBG)OTE(PICS_O_CS_CL2T_09_SPBG);
				N: XIC(O_CS_CL3T_03_EPB)OTE(PICS_O_CS_CL3T_03_EPB);
				N: XIC(O_CS_CL3T_03_RPBA)OTE(PICS_O_CS_CL3T_03_RPBA);
				N: XIC(O_CS_CL3T_03_SPBG)OTE(PICS_O_CS_CL3T_03_SPBG);
				N: XIC(O_CS_CL3T_04_EPB)OTE(PICS_O_CS_CL3T_04_EPB);
				N: XIC(O_CS_CL3T_04_RPBA)OTE(PICS_O_CS_CL3T_04_RPBA);
				N: XIC(O_CS_CL3T_04_SPBG)OTE(PICS_O_CS_CL3T_04_SPBG);
				N: XIC(O_CS_HX1T_10_EPB)OTE(PICS_O_CS_HX1T_10_EPB);
				N: XIC(O_CS_HX1T_10_RPBA)OTE(PICS_O_CS_HX1T_10_RPBA);
				N: XIC(O_CS_HX1T_10_SPBG)OTE(PICS_O_CS_HX1T_10_SPBG);
				N: XIC(O_CS_MCP_01_EPB)OTE(PICS_O_CS_MCP_01_EPB);
				N: XIC(O_CS_MCP_01_HM)OTE(PICS_O_CS_MCP_01_HM);
				N: XIC(O_CS_MCP_01_LTA)OTE(PICS_O_CS_MCP_01_LTA);
				N: XIC(O_CS_MCP_01_LTB)OTE(PICS_O_CS_MCP_01_LTB);
				N: XIC(O_CS_MCP_01_LTG)OTE(PICS_O_CS_MCP_01_LTG);
				N: XIC(O_CS_MCP_01_SPBG)OTE(PICS_O_CS_MCP_01_SPBG);
				N: XIC(O_CS_MCP_02_EPB)OTE(PICS_O_CS_MCP_02_EPB);
				N: XIC(O_CS_MCP_02_LTA)OTE(PICS_O_CS_MCP_02_LTA);
				N: XIC(O_CS_MCP_02_LTB)OTE(PICS_O_CS_MCP_02_LTB);
				N: XIC(O_CS_MCP_02_LTG)OTE(PICS_O_CS_MCP_02_LTG);
				N: XIC(O_CS_MCP_02_SPBG)OTE(PICS_O_CS_MCP_02_SPBG);
				N: XIC(O_CS_MCP_03_EPB)OTE(PICS_O_CS_MCP_03_EPB);
				N: XIC(O_CS_MCP_03_LTA)OTE(PICS_O_CS_MCP_03_LTA);
				N: XIC(O_CS_MCP_03_LTB)OTE(PICS_O_CS_MCP_03_LTB);
				N: XIC(O_CS_MCP_03_LTG)OTE(PICS_O_CS_MCP_03_LTG);
				N: XIC(O_CS_MCP_03_SPBG)OTE(PICS_O_CS_MCP_03_SPBG);
				N: XIC(O_CS_BM1_MCP_EPB)OTE(PICS_O_CS_MCP_BM1_EPB);
				N: XIC(O_CS_BM1_MCP_RPBA)OTE(PICS_O_CS_MCP_BM1_LTA);
				N: XIC(O_CS_BM1_MCP_LTB)OTE(PICS_O_CS_MCP_BM1_LTB);
				N: XIC(O_CS_BM1_MCP_LTG)OTE(PICS_O_CS_MCP_BM1_LTG);
				N: XIC(O_CS_O2T_04_EPB)OTE(PICS_O_CS_O2T_04_EPB);
				N: XIC(O_CS_O2T_04_RPBA)OTE(PICS_O_CS_O2T_04_RPBA);
				N: XIC(O_CS_O2T_04_SPBG)OTE(PICS_O_CS_O2T_04_SPBG);
				N: XIC(O_CS_O2T_06_EPB)OTE(PICS_O_CS_O2T_06_EPB);
				N: XIC(O_CS_O2T_06_RPBA)OTE(PICS_O_CS_O2T_06_RPBA);
				N: XIC(O_CS_O2T_06_SPBG)OTE(PICS_O_CS_O2T_06_SPBG);
				N: XIC(O_CS_O2T_10_EPB)OTE(PICS_O_CS_O2T_10_EPB);
				N: XIC(O_CS_O2T_10_RPBA)OTE(PICS_O_CS_O2T_10_RPBA);
				N: XIC(O_CS_O2T_10_SPBG)OTE(PICS_O_CS_O2T_10_SPBG);
				N: XIC(O_CS_O2T_12_EPB)OTE(PICS_O_CS_O2T_12_EPB);
				N: XIC(O_CS_O2T_12_RPBA)OTE(PICS_O_CS_O2T_12_RPBA);
				N: XIC(O_CS_O2T_12_SPBG)OTE(PICS_O_CS_O2T_12_SPBG);
				N: XIC(O_CS_O2T_14_EPB)OTE(PICS_O_CS_O2T_14_EPB);
				N: XIC(O_CS_O2T_14_RPBA)OTE(PICS_O_CS_O2T_14_RPBA);
				N: XIC(O_CS_O2T_14_SPBG)OTE(PICS_O_CS_O2T_14_SPBG);
				N: XIC(O_CS_O2T_18_EPB)OTE(PICS_O_CS_O2T_18_EPB);
				N: XIC(O_CS_O2T_18_RPBA)OTE(PICS_O_CS_O2T_18_RPBA);
				N: XIC(O_CS_O2T_18_SPBG)OTE(PICS_O_CS_O2T_18_SPBG);
				N: XIC(O_CS_O4T_06_EPB)OTE(PICS_O_CS_O4T_06_EPB);
				N: XIC(O_CS_O4T_06_RPBA)OTE(PICS_O_CS_O4T_06_RPBA);
				N: XIC(O_CS_O4T_06_SPBG)OTE(PICS_O_CS_O4T_06_SPBG);
				N: XIC(O_CS_O4T_10_EPB)OTE(PICS_O_CS_O4T_10_EPB);
				N: XIC(O_CS_O4T_10_RPBA)OTE(PICS_O_CS_O4T_10_RPBA);
				N: XIC(O_CS_O4T_10_SPBG)OTE(PICS_O_CS_O4T_10_SPBG);
				N: XIC(O_CS_T5T_09_EPB)OTE(PICS_O_CS_T5T_09_EPB);
				N: XIC(O_CS_T5T_09_RPBA)OTE(PICS_O_CS_T5T_09_RPBA);
				N: XIC(O_CS_T5T_09_SPBG)OTE(PICS_O_CS_T5T_09_SPBG);
				N: XIC(O_CS_XO1_01_EPB)OTE(PICS_O_CS_XO1_01_EPB);
				N: XIC(O_CS_XO1_01_RPBA)OTE(PICS_O_CS_XO1_01_RPBA);
				N: XIC(O_CS_XO1_01_SPBG)OTE(PICS_O_CS_XO1_01_SPBG);
				N: XIC(O_CS_XO2_02_EPB)OTE(PICS_O_CS_XO2_02_EPB);
				N: XIC(O_CS_XO2_02_RPBA)OTE(PICS_O_CS_XO2_02_RPBA);
				N: XIC(O_CS_XO2_02_SPBG)OTE(PICS_O_CS_XO2_02_SPBG);
				N: XIC(O_CS_XO2_05_EPB)OTE(PICS_O_CS_XO2_05_EPB);
				N: XIC(O_CS_XO2_05_RPBA)OTE(PICS_O_CS_XO2_05_RPBA);
				N: XIC(O_CS_XO2_05_SPBG)OTE(PICS_O_CS_XO2_05_SPBG);
				N: XIC(O_CS1_BM1_14_EPB)OTE(PICS_O_CS1_BM1_14_EPB);
				N: XIC(O_CS1_BM1_14_RPBA)OTE(PICS_O_CS1_BM1_14_RPBA);
				N: XIC(O_CS1_BM1_16_EPB)OTE(PICS_O_CS1_BM1_16_EPB);
				N: XIC(O_CS1_BM1_16_RPBA)OTE(PICS_O_CS1_BM1_16_RPBA);
				N: XIC(O_CS1_BM1_17_EPB)OTE(PICS_O_CS1_BM1_17_EPB);
				N: XIC(O_CS1_BM1_27_EPB)OTE(PICS_O_CS1_BM1_27_EPB);
				N: XIC(O_CS1_BM1_27_RPBA)OTE(PICS_O_CS1_BM1_27_RPBA);
				N: XIC(O_CS1_BM1_28_EPB)OTE(PICS_O_CS1_BM1_28_EPB);
				N: XIC(O_CS1_BM1_28_RPBA)OTE(PICS_O_CS1_BM1_28_RPBA);
				N: XIC(O_CS1_BM1_28_RPBA)OTE(PICS_O_CS1_BM1_28_RPBA);
				N: XIC(O_CS4_BM1_28_SPBG)OTE(PICS_O_CS4_BM1_28_SPBG);
				N: XIC(O_CS1_BM1_29_EPB)OTE(PICS_O_CS1_BM1_29_EPB);
				N: XIC(O_CS1_BM1_28_LTW)OTE(PICS_O_CS1_BM1_29_LTB);
				N: XIC(O_CS1_BM1_29_RPBA)OTE(PICS_O_CS1_BM1_29_RPBA);
				N: XIC(O_CS1_BM1_30_EPB)OTE(PICS_O_CS1_BM1_30_EPB);
				N: XIC(O_CS1_BM1_30_LTW)OTE(PICS_O_CS1_BM1_30_LTB);
				N: XIC(O_CS1_BM1_30_RPBA)OTE(PICS_O_CS1_BM1_30_RPBA);
				N: XIC(O_CS1_CL1T_01_EPB)OTE(PICS_O_CS1_CL1T_01_EPB);
				N: XIC(O_CS1_CL1T_01_SPBG)OTE(PICS_O_CS1_CL1T_01_SPBG);
				N: XIC(O_CS1_CL1T_02_EPB)OTE(PICS_O_CS1_CL1T_02_EPB);
				N: XIC(O_CS1_CL1T_02_RPBA)OTE(PICS_O_CS1_CL1T_02_RPBA);
				N: XIC(O_CS1_CL1T_02_SPBG)OTE(PICS_O_CS1_CL1T_02_SPBG);
				N: XIC(O_CS1_CL2T_01_EPB)OTE(PICS_O_CS1_CL2T_01_EPB);
				N: XIC(O_CS1_CL2T_01_SPBG)OTE(PICS_O_CS1_CL2T_01_SPBG);
				N: XIC(O_CS1_CL2T_02_EPB)OTE(PICS_O_CS1_CL2T_02_EPB);
				N: XIC(O_CS1_CL2T_02_RPBA)OTE(PICS_O_CS1_CL2T_02_RPBA);
				N: XIC(O_CS1_CL2T_02_SPBG)OTE(PICS_O_CS1_CL2T_02_SPBG);
				N: XIC(O_CS1_CL2T_05_EPB)OTE(PICS_O_CS1_CL2T_05_EPB);
				N: XIC(O_CS1_CL2T_05_RPBA)OTE(PICS_O_CS1_CL2T_05_RPBA);
				N: XIC(O_CS1_CL2T_05_SPBG)OTE(PICS_O_CS1_CL2T_05_SPBG);
				N: XIC(O_CS1_CL3T_01_EPB)OTE(PICS_O_CS1_CL3T_01_EPB);
				N: XIC(O_CS1_CL3T_01_SPBG)OTE(PICS_O_CS1_CL3T_01_SPBG);
				N: XIC(O_CS1_CL3T_02_EPB)OTE(PICS_O_CS1_CL3T_02_EPB);
				N: XIC(O_CS1_CL3T_02_RPBA)OTE(PICS_O_CS1_CL3T_02_RPBA);
				N: XIC(O_CS1_CL3T_02_SPBG)OTE(PICS_O_CS1_CL3T_02_SPBG);
				N: XIC(O_CS2_BM1_14_EPB)OTE(PICS_O_CS2_BM1_14_EPB);
				N: XIC(O_CS2_BM1_14_RPBA)OTE(PICS_O_CS2_BM1_14_RPBA);
				N: XIC(O_CS2_BM1_16_EPB)OTE(PICS_O_CS2_BM1_16_EPB);
				N: XIC(O_CS2_BM1_16_RPBA)OTE(PICS_O_CS2_BM1_16_RPBA);
				N: XIC(O_CS2_BM1_17_EPB)OTE(PICS_O_CS2_BM1_17_EPB);
				N: XIC(O_CS1_BM1_17_RPBA)OTE(PICS_O_CS2_BM1_17_RPBA);
				N: XIC(O_CS2_BM1_27_EPB)OTE(PICS_O_CS2_BM1_27_EPB);
				N: XIC(O_CS2_BM1_27_RPBA)OTE(PICS_O_CS2_BM1_27_RPBA);
				N: XIC(O_CS2_BM1_28_EPB)OTE(PICS_O_CS2_BM1_28_EPB);
				N: XIC(O_CS2_BM1_29_EPB)OTE(PICS_O_CS2_BM1_29_EPB);
				N: XIC(O_CS2_BM1_29_RPBA)OTE(PICS_O_CS2_BM1_29_RPBA);
				N: XIC(O_CS2_BM1_29_SPBG)OTE(PICS_O_CS2_BM1_29_SPBG);
				N: XIC(O_CS2_BM1_30_EPB)OTE(PICS_O_CS2_BM1_30_EPB);
				N: XIC(O_CS2_BM1_30_RPBA)OTE(PICS_O_CS2_BM1_30_RPBA);
				N: XIC(O_CS2_CL1T_01_EPB)OTE(PICS_O_CS2_CL1T_01_EPB);
				N: XIC(O_CS2_CL1T_01_SPBG)OTE(PICS_O_CS2_CL1T_01_SPBG);
				N: XIC(O_CS2_CL1T_02_EPB)OTE(PICS_O_CS2_CL1T_02_EPB);
				N: XIC(O_CS2_CL1T_02_SPBG)OTE(PICS_O_CS2_CL1T_02_SPBG);
				N: XIC(O_CS2_CL2T_01_EPB)OTE(PICS_O_CS2_CL2T_01_EPB);
				N: XIC(O_CS2_CL2T_01_SPBG)OTE(PICS_O_CS2_CL2T_01_SPBG);
				N: XIC(O_CS2_CL2T_02_EPB)OTE(PICS_O_CS2_CL2T_02_EPB);
				N: XIC(O_CS2_CL2T_02_SPBG)OTE(PICS_O_CS2_CL2T_02_SPBG);
				N: XIC(O_CS2_CL2T_05_EPB)OTE(PICS_O_CS2_CL2T_05_EPB);
				N: XIC(O_CS2_CL2T_05_RPBA)OTE(PICS_O_CS2_CL2T_05_RPBA);
				N: XIC(O_CS2_CL2T_05_SPBG)OTE(PICS_O_CS2_CL2T_05_SPBG);
				N: XIC(O_CS2_CL3T_01_EPB)OTE(PICS_O_CS2_CL3T_01_EPB);
				N: XIC(O_CS2_CL3T_01_SPBG)OTE(PICS_O_CS2_CL3T_01_SPBG);
				N: XIC(O_CS2_CL3T_02_EPB)OTE(PICS_O_CS2_CL3T_02_EPB);
				N: XIC(O_CS2_CL3T_02_SPBG)OTE(PICS_O_CS2_CL3T_02_SPBG);
				N: XIC(O_CS3_BM1_27_EPB)OTE(PICS_O_CS3_BM1_27_EPB);
				N: XIC(O_CS3_BM1_28_EPB)OTE(PICS_O_CS3_BM1_28_EPB);
				N: XIC(O_CS3_BM1_29_EPB)OTE(PICS_O_CS3_BM1_29_EPB);
				N: XIC(O_CS3_BM1_30_EPB)OTE(PICS_O_CS3_BM1_30_EPB);
				N: XIC(O_CS3_BM1_30_RPBA)OTE(PICS_O_CS3_BM1_30_RPBA);
				N: XIC(O_CS3_BM1_30_SPBG)OTE(PICS_O_CS3_BM1_30_SPBG);
				N: XIC(O_CS3_CL1T_01_EPB)OTE(PICS_O_CS3_CL1T_01_EPB);
				N: XIC(O_CS3_CL1T_01_SPBG)OTE(PICS_O_CS3_CL1T_01_SPBG);
				N: XIC(O_CS3_CL1T_02_EPB)OTE(PICS_O_CS3_CL1T_02_EPB);
				N: XIC(O_CS3_CL1T_02_SPBG)OTE(PICS_O_CS3_CL1T_02_SPBG);
				N: XIC(O_CS3_CL2T_02_EPB)OTE(PICS_O_CS3_CL2T_02_EPB);
				N: XIC(O_CS3_CL2T_02_SPBG)OTE(PICS_O_CS3_CL2T_02_SPBG);
				N: XIC(O_CS3_CL3T_02_EPB)OTE(PICS_O_CS3_CL3T_02_EPB);
				N: XIC(O_CS3_CL3T_02_SPBG)OTE(PICS_O_CS3_CL3T_02_SPBG);
				N: XIC(O_CS4_BM1_27_EPB)OTE(PICS_O_CS4_BM1_27_EPB);
				N: XIC(O_CS4_BM1_28_EPB)OTE(PICS_O_CS4_BM1_28_EPB);
				N: XIC(O_CS4_BM1_29_EPB)OTE(PICS_O_CS4_BM1_29_EPB);
				N: XIC(O_CS4_BM1_30_EPB)OTE(PICS_O_CS4_BM1_30_EPB);
				N: XIC(O_CS4_CL3T_02_EPB)OTE(PICS_O_CS4_CL3T_02_EPB);
				N: XIC(O_CS4_CL3T_02_RPBA)OTE(PICS_O_CS4_CL3T_02_RPBA);
				N: XIC(O_CS4_CL3T_02_SPBG)OTE(PICS_O_CS4_CL3T_02_SPBG);
				N: XIC(O_CS5_BM1_27_EPB)OTE(PICS_O_CS5_BM1_27_EPB);
				N: XIC(O_CS5_BM1_27_RPBA)OTE(PICS_O_CS5_BM1_27_RPBA);
				N: XIC(O_CS5_BM1_27_SPBG)OTE(PICS_O_CS5_BM1_27_SPBG);
				N: XIC(O_CS5_BM1_28_EPB)OTE(PICS_O_CS5_BM1_28_EPB);
				N: XIC(O_CS5_BM1_28_RPBA)OTE(PICS_O_CS5_BM1_28_RPBA);
				N: XIC(O_CS5_BM1_28_SPBG)OTE(PICS_O_CS5_BM1_28_SPBG);
				N: XIC(O_INT_C2T_12_RUN)OTE(PICS_O_INT_C2T_12_RUN);
				N: XIC(O_INT_C4_08_MRG)OTE(PICS_O_INT_C4_08_MRG);
				N: XIC(O_INT_C4_09_RES)OTE(PICS_O_INT_C4_09_RES);
				N: XIC(O_INT_C4_09_START)OTE(PICS_O_INT_C4_09_START);
				N: XIC(O_INT_CL1T_26_JAM)OTE(PICS_O_INT_CL1T_26_JAM);
				N: XIC(O_INT_CL2T_09_JAM)OTE(PICS_O_INT_CL2T_09_JAM);
				N: XIC(O_INT_CL3T_8_JAM)OTE(PICS_O_INT_CL3T_8_JAM);
				N: XIC(O_INT_HX1_11_RES)OTE(PICS_O_INT_HX1_11_RES);
				N: XIC(O_INT_HX1_11_START)OTE(PICS_O_INT_HX1_11_START);
				N: XIC(O_INT_HX1T_06_RUN)OTE(PICS_O_INT_HX1T_06_RUN);
				N: XIC(O_INT_O2T_04_RUN)OTE(PICS_O_INT_O2T_04_RUN);
				N: XIC(O_INT_O4_03_MRG)OTE(PICS_O_INT_O4_03_MRG);
				N: XIC(O_INT_O4_04_RES)OTE(PICS_O_INT_O4_04_RES);
				N: XIC(O_INT_O4_04_START)OTE(PICS_O_INT_O4_04_START);
				N: XIC(O_INT_O4_06_RES)OTE(PICS_O_INT_O4_06_RES);
				N: XIC(O_INT_O4_06_START)OTE(PICS_O_INT_O4_06_START);
				N: XIC(O_INT_O4T_05_RUN)OTE(PICS_O_INT_O4T_05_RUN);
				N: XIC(O_INT_T5T_08_RUN)OTE(PICS_O_INT_T5T_08_RUN);
				N: XIC(O_INT_T5T_09_JAM)OTE(PICS_O_INT_T5T_09_JAM);
				N: XIC(O_INT_T5T_10_RES)OTE(PICS_O_INT_T5T_10_RES);
				N: XIC(O_INT_T5T_10_START)OTE(PICS_O_INT_T5T_10_START);
				N: XIC(O_INT_XO2_05_JAM)OTE(PICS_O_INT_XO2_05_JAM);
				N: XIC(O_C_BM1_01)OTE(PICS_O_C_BM1_01);
				N: XIC(O_C_BM1_02)OTE(PICS_O_C_BM1_02);
				N: XIC(O_C_BM1_03)OTE(PICS_O_C_BM1_03);
				N: XIC(O_C_BM1_04)OTE(PICS_O_C_BM1_04);
				N: XIC(O_C_BM1_05)OTE(PICS_O_C_BM1_05);
				N: XIC(O_C_BM1_06)OTE(PICS_O_C_BM1_06);
				N: XIC(O_C_BM1_07)OTE(PICS_O_C_BM1_07);
				N: XIC(O_C_BM1_08)OTE(PICS_O_C_BM1_08);
				N: XIC(O_C_BM1_09)OTE(PICS_O_C_BM1_09);
				N: XIC(O_C_BM1_10)OTE(PICS_O_C_BM1_10);
				N: XIC(O_C_BM1_11)OTE(PICS_O_C_BM1_11);
				N: XIC(O_C_BM1_12)OTE(PICS_O_C_BM1_12);
				N: XIC(O_C_BM1_13_FWD)OTE(PICS_O_C_BM1_13_FWD);
				N: XIC(O_C_BM1_13_REV)OTE(PICS_O_C_BM1_13_REV);
				N: XIC(O_C_BM1_14)OTE(PICS_O_C_BM1_14);
				N: XIC(O_C_BM1_15)OTE(PICS_O_C_BM1_15);
				N: XIC(O_C_BM1_16)OTE(PICS_O_C_BM1_16);
				N: XIC(O_C_BM1_17)OTE(PICS_O_C_BM1_17);
				N: XIC(O_C_BM1_18)OTE(PICS_O_C_BM1_18);
				N: XIC(O_C_BM1_19)OTE(PICS_O_C_BM1_19);
				N: XIC(O_C_BM1_20)OTE(PICS_O_C_BM1_20);
				N: XIC(O_C_BM1_21)OTE(PICS_O_C_BM1_21);
				N: XIC(O_C_BM1_22)OTE(PICS_O_C_BM1_22);
				N: XIC(O_C_BM1_23)OTE(PICS_O_C_BM1_23);
				N: XIC(O_C_BM1_24)OTE(PICS_O_C_BM1_24);
				N: XIC(O_C_BM1_25)OTE(PICS_O_C_BM1_25);
				N: XIC(O_C_BM1_26)OTE(PICS_O_C_BM1_26);
				N: XIC(O_C_BM1_31)OTE(PICS_O_C_BM1_31);
				N: XIC(O_C_BM1_32)OTE(PICS_O_C_BM1_32);
				N: XIC(O_C_BM1_33)OTE(PICS_O_C_BM1_33);
				N: XIC(O_C_BM1_34)OTE(PICS_O_C_BM1_34);
				N: XIC(O_C_BM1_35)OTE(PICS_O_C_BM1_35);
				N: XIC(O_C_BM1_36)OTE(PICS_O_C_BM1_36);
				N: XIC(O_C_BM1_37)OTE(PICS_O_C_BM1_37);
				N: XIC(O_C_BM1_38)OTE(PICS_O_C_BM1_38);
				N: XIC(O_SD_XO1_EN)OTE(PICS_O_SD_XO1_EN);
				N: XIC(O_SD_XO1_EXT)OTE(PICS_O_SD_XO1_EXT);
				N: XIC(O_SD_XO1_RES)OTE(PICS_O_SD_XO1_RES);
				N: XIC(O_SD_XO1_RET)OTE(PICS_O_SD_XO1_RET);
				N: XIC(O_SD_XO1_RUN)OTE(PICS_O_SD_XO1_RUN);
				N: XIC(O_SD_XO2_EN)OTE(PICS_O_SD_XO2_EN);
				N: XIC(O_SD_XO2_EXT)OTE(PICS_O_SD_XO2_EXT);
				N: XIC(O_SD_XO2_RES)OTE(PICS_O_SD_XO2_RES);
				N: XIC(O_SD_XO2_RET)OTE(PICS_O_SD_XO2_RET);
				N: XIC(O_SD_XO2_RUN)OTE(PICS_O_SD_XO2_RUN);
				N: XIC(O_C_BM1_27)OTE(PICS_O_VFD_BM1_27_FWD);
				N: XIC(O_VFD_BM1_27_REV)OTE(PICS_O_VFD_BM1_27_REV);
				N: XIC(O_C_BM1_28)OTE(PICS_O_VFD_BM1_28_FWD);
				N: XIC(O_VFD_BM1_28_REV)OTE(PICS_O_VFD_BM1_28_REV);
				N: XIC(O_C_BM1_29)OTE(PICS_O_VFD_BM1_29_FWD);
				N: XIC(O_VFD_BM1_29_REV)OTE(PICS_O_VFD_BM1_29_REV);
				N: XIC(O_C_BM1_30)OTE(PICS_O_VFD_BM1_30_FWD);
				N: XIC(O_VFD_BM1_30_REV)OTE(PICS_O_VFD_BM1_30_REV);
				N: XIC(O_VFD_C2T_12_FWD)OTE(PICS_O_VFD_C2T_12_FWD);
				N: XIC(O_VFD_C2T_13_FWD)OTE(PICS_O_VFD_C2T_13_FWD);
				N: XIC(O_VFD_C2T_14_FWD)OTE(PICS_O_VFD_C2T_14_FWD);
				N: XIC(O_VFD_C2T_15_FWD)OTE(PICS_O_VFD_C2T_15_FWD);
				N: XIC(O_VFD_C2T_16_FWD)OTE(PICS_O_VFD_C2T_16_FWD);
				N: XIC(O_VFD_C2T_17_FWD)OTE(PICS_O_VFD_C2T_17_FWD);
				N: XIC(O_VFD_C2T_17_REV)OTE(PICS_O_VFD_C2T_17_REV);
				N: XIC(O_VFD_CL1T_01_FWD)OTE(PICS_O_VFD_CL1T_01_FWD);
				N: XIC(O_VFD_CL1T_02_FWD)OTE(PICS_O_VFD_CL1T_02_FWD);
				N: XIC(O_VFD_CL1T_03_FWD)OTE(PICS_O_VFD_CL1T_03_FWD);
				N: XIC(O_VFD_CL1T_04_FWD)OTE(PICS_O_VFD_CL1T_04_FWD);
				N: XIC(O_VFD_CL1T_05_FWD)OTE(PICS_O_VFD_CL1T_05_FWD);
				N: XIC(O_VFD_CL1T_06_FWD)OTE(PICS_O_VFD_CL1T_06_FWD);
				N: XIC(O_VFD_CL1T_07_FWD)OTE(PICS_O_VFD_CL1T_07_FWD);
				N: XIC(O_VFD_CL1T_08_FWD)OTE(PICS_O_VFD_CL1T_08_FWD);
				N: XIC(O_VFD_CL1T_09_FWD)OTE(PICS_O_VFD_CL1T_09_FWD);
				N: XIC(O_VFD_CL1T_10_FWD)OTE(PICS_O_VFD_CL1T_10_FWD);
				N: XIC(O_VFD_CL1T_11_FWD)OTE(PICS_O_VFD_CL1T_11_FWD);
				N: XIC(O_VFD_CL1T_12_FWD)OTE(PICS_O_VFD_CL1T_12_FWD);
				N: XIC(O_VFD_CL1T_13_FWD)OTE(PICS_O_VFD_CL1T_13_FWD);
				N: XIC(O_VFD_CL1T_14_FWD)OTE(PICS_O_VFD_CL1T_14_FWD);
				N: XIC(O_VFD_CL1T_15_FWD)OTE(PICS_O_VFD_CL1T_15_FWD);
				N: XIC(O_VFD_CL1T_16_FWD)OTE(PICS_O_VFD_CL1T_16_FWD);
				N: XIC(O_VFD_CL1T_17_FWD)OTE(PICS_O_VFD_CL1T_17_FWD);
				N: XIC(O_VFD_CL1T_18_FWD)OTE(PICS_O_VFD_CL1T_18_FWD);
				N: XIC(O_VFD_CL1T_19_FWD)OTE(PICS_O_VFD_CL1T_19_FWD);
				N: XIC(O_VFD_CL1T_20_FWD)OTE(PICS_O_VFD_CL1T_20_FWD);
				N: XIC(O_VFD_CL1T_21_FWD)OTE(PICS_O_VFD_CL1T_21_FWD);
				N: XIC(O_VFD_CL1T_23_FWD)OTE(PICS_O_VFD_CL1T_23_FWD);
				N: XIC(O_VFD_CL1T_24_FWD)OTE(PICS_O_VFD_CL1T_24_FWD);
				N: XIC(O_VFD_CL1T_26_FWD)OTE(PICS_O_VFD_CL1T_26_FWD);
				N: XIC(O_VFD_CL2T_01_FWD)OTE(PICS_O_VFD_CL2T_01_FWD);
				N: XIC(O_VFD_CL2T_02_FWD)OTE(PICS_O_VFD_CL2T_02_FWD);
				N: XIC(O_VFD_CL2T_03_FWD)OTE(PICS_O_VFD_CL2T_03_FWD);
				N: XIC(O_VFD_CL2T_04_FWD)OTE(PICS_O_VFD_CL2T_04_FWD);
				N: XIC(O_VFD_CL2T_05_FWD)OTE(PICS_O_VFD_CL2T_05_FWD);
				N: XIC(O_VFD_CL2T_06_FWD)OTE(PICS_O_VFD_CL2T_06_FWD);
				N: XIC(O_VFD_CL2T_07_FWD)OTE(PICS_O_VFD_CL2T_07_FWD);
				N: XIC(O_VFD_CL2T_08_FWD)OTE(PICS_O_VFD_CL2T_08_FWD);
				N: XIC(O_VFD_CL2T_09_FWD)OTE(PICS_O_VFD_CL2T_09_FWD);
				N: XIC(O_VFD_CL3T_01_FWD)OTE(PICS_O_VFD_CL3T_01_FWD);
				N: XIC(O_VFD_CL3T_02_FWD)OTE(PICS_O_VFD_CL3T_02_FWD);
				N: XIC(O_VFD_CL3T_03_FWD)OTE(PICS_O_VFD_CL3T_03_FWD);
				N: XIC(O_VFD_CL3T_04_FWD)OTE(PICS_O_VFD_CL3T_04_FWD);
				N: XIC(O_VFD_CL3T_05_FWD)OTE(PICS_O_VFD_CL3T_05_FWD);
				N: XIC(O_VFD_CL3T_06_FWD)OTE(PICS_O_VFD_CL3T_06_FWD);
				N: XIC(O_VFD_CL3T_07_FWD)OTE(PICS_O_VFD_CL3T_07_FWD);
				N: XIC(O_VFD_CL3T_08_FWD)OTE(PICS_O_VFD_CL3T_08_FWD);
				N: XIC(O_VFD_HX1T_06_FWD)OTE(PICS_O_VFD_HX1T_06_FWD);
				N: XIC(O_VFD_HX1T_07_FWD)OTE(PICS_O_VFD_HX1T_07_FWD);
				N: XIC(O_VFD_HX1T_08_FWD)OTE(PICS_O_VFD_HX1T_08_FWD);
				N: XIC(O_VFD_HX1T_09_FWD)OTE(PICS_O_VFD_HX1T_09_FWD);
				N: XIC(O_VFD_HX1T_10_FWD)OTE(PICS_O_VFD_HX1T_10_FWD);
				N: XIC(O_VFD_HX1T_10_REV)OTE(PICS_O_VFD_HX1T_10_REV);
				N: XIC(O_VFD_HX1T_10A_FWD)OTE(PICS_O_VFD_HX1T_10A_FWD);
				N: XIC(O_VFD_O2T_04_FWD)OTE(PICS_O_VFD_O2T_04_FWD);
				N: XIC(O_VFD_O2T_05_FWD)OTE(PICS_O_VFD_O2T_05_FWD);
				N: XIC(O_VFD_O2T_06_FWD)OTE(PICS_O_VFD_O2T_06_FWD);
				N: XIC(O_VFD_O2T_07_FWD)OTE(PICS_O_VFD_O2T_07_FWD);
				N: XIC(O_VFD_O2T_08_FWD)OTE(PICS_O_VFD_O2T_08_FWD);
				N: XIC(O_VFD_O2T_09_FWD)OTE(PICS_O_VFD_O2T_09_FWD);
				N: XIC(O_VFD_O2T_10_FWD)OTE(PICS_O_VFD_O2T_10_FWD);
				N: XIC(O_VFD_O2T_11_FWD)OTE(PICS_O_VFD_O2T_11_FWD);
				N: XIC(O_VFD_O2T_12_FWD)OTE(PICS_O_VFD_O2T_12_FWD);
				N: XIC(O_VFD_O2T_13_FWD)OTE(PICS_O_VFD_O2T_13_FWD);
				N: XIC(O_VFD_O2T_14_FWD)OTE(PICS_O_VFD_O2T_14_FWD);
				N: XIC(O_VFD_O2T_15_FWD)OTE(PICS_O_VFD_O2T_15_FWD);
				N: XIC(O_VFD_O2T_16_FWD)OTE(PICS_O_VFD_O2T_16_FWD);
				N: XIC(O_VFD_O2T_17_FWD)OTE(PICS_O_VFD_O2T_17_FWD);
				N: XIC(O_VFD_O2T_18_FWD)OTE(PICS_O_VFD_O2T_18_FWD);
				N: XIC(O_VFD_O2T_18_REV)OTE(PICS_O_VFD_O2T_18_REV);
				N: XIC(O_VFD_O4T_05_FWD)OTE(PICS_O_VFD_O4T_05_FWD);
				N: XIC(O_VFD_O4T_06_FWD)OTE(PICS_O_VFD_O4T_06_FWD);
				N: XIC(O_VFD_O4T_07_FWD)OTE(PICS_O_VFD_O4T_07_FWD);
				N: XIC(O_VFD_O4T_08_FWD)OTE(PICS_O_VFD_O4T_08_FWD);
				N: XIC(O_VFD_O4T_09_FWD)OTE(PICS_O_VFD_O4T_09_FWD);
				N: XIC(O_VFD_O4T_10_FWD)OTE(PICS_O_VFD_O4T_10_FWD);
				N: XIC(O_VFD_O4T_11_FWD)OTE(PICS_O_VFD_O4T_11_FWD);
				N: XIC(O_VFD_O4T_12_FWD)OTE(PICS_O_VFD_O4T_12_FWD);
				N: XIC(O_VFD_O4T_13_FWD)OTE(PICS_O_VFD_O4T_13_FWD);
				N: XIC(O_VFD_T5T_08_FWD)OTE(PICS_O_VFD_T5T_08_FWD);
				N: XIC(O_VFD_T5T_09_FWD)OTE(PICS_O_VFD_T5T_09_FWD);
				N: XIC(O_VFD_T5T_09_REV)OTE(PICS_O_VFD_T5T_09_REV);
				N: XIC(O_VFD_XO1_01_FWD)OTE(PICS_O_VFD_XO1_01_FWD);
				N: XIC(O_VFD_XO1_02_FWD)OTE(PICS_O_VFD_XO1_02_FWD);
				N: XIC(O_VFD_XO1_03_FWD)OTE(PICS_O_VFD_XO1_03_FWD);
				N: XIC(O_VFD_XO2_01_FWD)OTE(PICS_O_VFD_XO2_01_FWD);
				N: XIC(O_VFD_XO2_02_FWD)OTE(PICS_O_VFD_XO2_02_FWD);
				N: XIC(O_VFD_XO2_03_FWD)OTE(PICS_O_VFD_XO2_03_FWD);
				N: XIC(O_VFD_XO2_04_FWD)OTE(PICS_O_VFD_XO2_04_FWD);
				N: XIC(O_VFD_XO2_05_FWD)OTE(PICS_O_VFD_XO2_05_FWD);
				N: XIC(O_VFD_XO2_05_REV)OTE(PICS_O_VFD_XO2_05_REV);
				N: XIC(O_WA_BM1_01_ALM)OTE(PICS_O_WA_BM1_01_ALM);
				N: XIC(O_WA_BM1_01_LTR)OTE(PICS_O_WA_BM1_01_LTR);
				N: XIC(O_WA_BM1_03_ALM)OTE(PICS_O_WA_BM1_03_ALM);
				N: XIC(O_WA_BM1_03_LTR)OTE(PICS_O_WA_BM1_03_LTR);
				N: XIC(O_WA_BM1_06_ALM)OTE(PICS_O_WA_BM1_06_ALM);
				N: XIC(O_WA_BM1_06_LTR)OTE(PICS_O_WA_BM1_06_LTR);
				N: XIC(O_WA_BM1_15_ALM)OTE(PICS_O_WA_BM1_15_ALM);
				N: XIC(O_WA_BM1_15_LTR)OTE(PICS_O_WA_BM1_15_LTR);
				N: XIC(O_WA_BM1_16_ALM)OTE(PICS_O_WA_BM1_16_ALM);
				N: XIC(O_WA_BM1_16_LTR)OTE(PICS_O_WA_BM1_16_LTR);
				N: XIC(O_WA_BM1_18_ALM)OTE(PICS_O_WA_BM1_18_ALM);
				N: XIC(O_WA_BM1_18_LTR)OTE(PICS_O_WA_BM1_18_LTR);
				N: XIC(O_WA_BM1_23_ALM)OTE(PICS_O_WA_BM1_23_ALM);
				N: XIC(O_WA_BM1_23_LTA)OTE(PICS_O_WA_BM1_23_LTA);
				N: XIC(O_WA_BM1_23_LTR)OTE(PICS_O_WA_BM1_23_LTR);
				N: XIC(O_WA_BM1_28_ALM)OTE(PICS_O_WA_BM1_28_ALM);
				N: XIC(O_WA_BM1_28_LTR)OTE(PICS_O_WA_BM1_28_LTR);
				N: XIC(O_WA_BM1_30_ALM)OTE(PICS_O_WA_BM1_30_ALM);
				N: XIC(O_WA_BM1_30_LTR)OTE(PICS_O_WA_BM1_30_LTR);
				N: XIC(O_WA_C2T_13_ALM)OTE(PICS_O_WA_C2T_13_ALM);
				N: XIC(O_WA_C2T_13_LTA)OTE(PICS_O_WA_C2T_13_LTA);
				N: XIC(O_WA_C2T_13_LTR)OTE(PICS_O_WA_C2T_13_LTR);
				N: XIC(O_WA_CL1T_01_ALM)OTE(PICS_O_WA_CL1T_01_ALM);
				N: XIC(O_WA_CL1T_01_LTA)OTE(PICS_O_WA_CL1T_01_LTA);
				N: XIC(O_WA_CL1T_01_LTR)OTE(PICS_O_WA_CL1T_01_LTR);
				N: XIC(O_WA_CL1T_09_ALM)OTE(PICS_O_WA_CL1T_09_ALM);
				N: XIC(O_WA_CL1T_09_LTA)OTE(PICS_O_WA_CL1T_09_LTA);
				N: XIC(O_WA_CL1T_09_LTR)OTE(PICS_O_WA_CL1T_09_LTR);
				N: XIC(O_WA_CL1T_20_ALM)OTE(PICS_O_WA_CL1T_20_ALM);
				N: XIC(O_WA_CL1T_20_LTA)OTE(PICS_O_WA_CL1T_20_LTA);
				N: XIC(O_WA_CL1T_20_LTR)OTE(PICS_O_WA_CL1T_20_LTR);
				N: XIC(O_WA_CL2T_02_ALM)OTE(PICS_O_WA_CL2T_02_ALM);
				N: XIC(O_WA_CL2T_02_LTA)OTE(PICS_O_WA_CL2T_02_LTA);
				N: XIC(O_WA_CL2T_02_LTR)OTE(PICS_O_WA_CL2T_02_LTR);
				N: XIC(O_WA_CL2T_05_ALM)OTE(PICS_O_WA_CL2T_05_ALM);
				N: XIC(O_WA_CL2T_05_LTA)OTE(PICS_O_WA_CL2T_05_LTA);
				N: XIC(O_WA_CL2T_05_LTR)OTE(PICS_O_WA_CL2T_05_LTR);
				N: XIC(O_WA_CL3T_03_ALM)OTE(PICS_O_WA_CL3T_03_ALM);
				N: XIC(O_WA_CL3T_03_LTA)OTE(PICS_O_WA_CL3T_03_LTA);
				N: XIC(O_WA_CL3T_03_LTR)OTE(PICS_O_WA_CL3T_03_LTR);
				N: XIC(O_WA_MCP_01_ALM)OTE(PICS_O_WA_MCP_01_ALM);
				N: XIC(O_WA_MCP_01_LTA)OTE(PICS_O_WA_MCP_01_LTA);
				N: XIC(O_WA_MCP_01_LTR)OTE(PICS_O_WA_MCP_01_LTR);
				N: XIC(O_WA_MCP_02_ALM)OTE(PICS_O_WA_MCP_02_ALM);
				N: XIC(O_WA_MCP_02_LTA)OTE(PICS_O_WA_MCP_02_LTA);
				N: XIC(O_WA_MCP_02_LTR)OTE(PICS_O_WA_MCP_02_LTR);
				N: XIC(O_WA_MCP_03_ALM)OTE(PICS_O_WA_MCP_03_ALM);
				N: XIC(O_WA_MCP_03_LTA)OTE(PICS_O_WA_MCP_03_LTA);
				N: XIC(O_WA_MCP_03_LTR)OTE(PICS_O_WA_MCP_03_LTR);
				N: XIC(O_WA_BM1_MCP_ALM)OTE(PICS_O_WA_MCP_BM1_ALM);
				N: XIC(O_WA_BM1_MCP_LTA)OTE(PICS_O_WA_MCP_BM1_LTA);
				N: XIC(O_WA_BM1_MCP_LTR)OTE(PICS_O_WA_MCP_BM1_LTR);
				N: XIC(O_WA_O2T_06_ALM)OTE(PICS_O_WA_O2T_06_ALM);
				N: XIC(O_WA_O2T_06_LTA)OTE(PICS_O_WA_O2T_06_LTA);
				N: XIC(O_WA_O2T_06_LTR)OTE(PICS_O_WA_O2T_06_LTR);
				N: XIC(O_WA_O2T_18_ALM)OTE(PICS_O_WA_O2T_18_ALM);
				N: XIC(O_WA_O2T_18_LTA)OTE(PICS_O_WA_O2T_18_LTA);
				N: XIC(O_WA_O2T_18_LTR)OTE(PICS_O_WA_O2T_18_LTR);
				N: XIC(O_WA_O4T_10_ALM)OTE(PICS_O_WA_O4T_10_ALM);
				N: XIC(O_WA_O4T_10_LTA)OTE(PICS_O_WA_O4T_10_LTA);
				N: XIC(O_WA_O4T_10_LTR)OTE(PICS_O_WA_O4T_10_LTR);
				N: XIC(O_VFD_O3T_17_FWD)OTE(PICS_O_VFD_O3T_17_FWD);
				N: XIC(O_VFD_O3T_18_FWD)OTE(PICS_O_VFD_O3T_18_FWD);
				N: XIC(O_VFD_O3T_19_FWD)OTE(PICS_O_VFD_O3T_19_FWD);
				N: XIC(O_VFD_O3T_20_FWD)OTE(PICS_O_VFD_O3T_20_FWD);
				N: XIC(O_VFD_O4T_16_FWD)OTE(PICS_O_VFD_O4T_16_FWD);
				N: XIC(O_VFD_O4T_17_FWD)OTE(PICS_O_VFD_O4T_17_FWD);
				N: XIC(O_VFD_O4T_18_FWD)OTE(PICS_O_VFD_O4T_18_FWD);
				N: XIC(O_VFD_O4T_19_FWD)OTE(PICS_O_VFD_O4T_19_FWD);
				N: XIC(O_VFD_O4T_20_FWD)OTE(PICS_O_VFD_O4T_20_FWD);
				N: XIC(O_VFD_O4T_21_FWD)OTE(PICS_O_VFD_O4T_21_FWD);
				N: XIC(O_VFD_O4T_22_FWD)OTE(PICS_O_VFD_O4T_22_FWD);
				N: XIC(O_VFD_CL12T_35_FWD)OTE(PICS_O_VFD_CL12T_35_FWD);
				N: XIC(O_VFD_CL12T_36_FWD)OTE(PICS_O_VFD_CL12T_36_FWD);
				N: XIC(O_VFD_CL12T_36_REV)OTE(PICS_O_VFD_CL12T_36_REV);
				N: XIC(O_CS_MCP_16_EPB)OTE(PICS_O_CS_MCP_16_EPB);
				N: XIC(O_CS_MCP_16_SPBG)OTE(PICS_O_CS_MCP_16_SPBG);
				N: XIC(O_CS_MCP_16_LTG)OTE(PICS_O_CS_MCP_16_LTG);
				N: XIC(O_CS_MCP_16_LTB)OTE(PICS_O_CS_MCP_16_LTB);
				N: XIC(O_CS_MCP_16_LTA)OTE(PICS_O_CS_MCP_16_LTA);
				N: XIC(O_CS_O3T_17_EPB)OTE(PICS_O_CS_O3T_17_EPB);
				N: XIC(O_CS_O3T_17_SPBG)OTE(PICS_O_CS_O3T_17_SPBG);
				N: XIC(O_CS_O3T_17_RPBA)OTE(PICS_O_CS_O3T_17_RPBA);
				N: XIC(O_CS1_O3T_19_EPB)OTE(PICS_O_CS1_O3T_19_EPB);
				N: XIC(O_CS1_O3T_19_SPBG)OTE(PICS_O_CS1_O3T_19_SPBG);
				N: XIC(O_CS1_O3T_19_RPBA)OTE(PICS_O_CS1_O3T_19_RPBA);
				N: XIC(O_CS2_O3T_19_EPB)OTE(PICS_O_CS2_O3T_19_EPB);
				N: XIC(O_CS2_O3T_19_SPBG)OTE(PICS_O_CS2_O3T_19_SPBG);
				N: XIC(O_CS2_O3T_19_RPBA)OTE(PICS_O_CS2_O3T_19_RPBA);
				N: XIC(O_CS_O4T_16_EPB)OTE(PICS_O_CS_O4T_16_EPB);
				N: XIC(O_CS_O4T_16_SPBG)OTE(PICS_O_CS_O4T_16_SPBG);
				N: XIC(O_CS_O4T_16_RPBA)OTE(PICS_O_CS_O4T_16_RPBA);
				N: XIC(O_CS1_O4T_21_EPB)OTE(PICS_O_CS1_O4T_21_EPB);
				N: XIC(O_CS1_O4T_21_SPBG)OTE(PICS_O_CS1_O4T_21_SPBG);
				N: XIC(O_CS1_O4T_21_RPBA)OTE(PICS_O_CS1_O4T_21_RPBA);
				N: XIC(O_CS2_O4T_21_EPB)OTE(PICS_O_CS2_O4T_21_EPB);
				N: XIC(O_CS2_O4T_21_SPBG)OTE(PICS_O_CS2_O4T_21_SPBG);
				N: XIC(O_CS2_O4T_21_RPBA)OTE(PICS_O_CS2_O4T_21_RPBA);
				N: XIC(O_CS_CL12T_36_EPB)OTE(PICS_O_CS_CL12T_36_EPB);
				N: XIC(O_CS_CL12T_36_SPBG)OTE(PICS_O_CS_CL12T_36_SPBG);
				N: XIC(O_CS_CL12T_36_RPBA)OTE(PICS_O_CS_CL12T_36_RPBA);
				N: XIC(O_WA_MCP_16_ALM)OTE(PICS_O_WA_MCP_16_ALM);
				N: XIC(O_WA_MCP_16_LTR)OTE(PICS_O_WA_MCP_16_LTR);
				N: XIC(O_WA_MCP_16_LTA)OTE(PICS_O_WA_MCP_16_LTA);
				N: XIC(O_INT_O3T_17_RUN)OTE(PICS_O_INT_O3T_17_RUN);
				N: XIC(O_INT_O3_54_START)OTE(PICS_O_INT_O3_54_START);
				N: XIC(O_INT_O3T_20_JAM)OTE(PICS_O_INT_O3T_20_JAM);
				N: XIC(O_INT_O4T_16_RUN)OTE(PICS_O_INT_O4T_16_RUN);
				N: XIC(O_INT_O4_54_START)OTE(PICS_O_INT_O4_54_START);
				N: XIC(O_INT_O4T_22_JAM)OTE(PICS_O_INT_O4T_22_JAM);
				N: XIC(O_INT_CL12T_35_RUN)OTE(PICS_O_INT_CL12T_35_RUN);
		END_ROUTINE

		ROUTINE PLC_INTERLOCKS_OUT 
				N: NOP();
				N: XIC(O2T_04_MTR.CONV_RUN)OTE(O_INT_O2T_04_RUN);
				N: XIC(C2T_12_MTR.CONV_RUN)OTE(O_INT_C2T_12_RUN);
				N: XIC(O4T.MTR_GRP.START_DS)OTE(O_INT_O4_06_START);
				N: XIC(F_CL2T_09_PE_JAMMED)OTE(O_INT_CL2T_09_JAM);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_O4_06_RES);
				N: XIC(O4T_05_MTR.CONV_RUN)OTE(O_INT_O4T_05_RUN);
				N: XIC(T5T.MTR_GRP.START_DS)OTE(O_INT_O4_04_START);
				N: XIC(F_T5T_09_PE_JAMMED)OTE(O_INT_T5T_09_JAM);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_O4_04_RES);
				N: NOP()XIC(T5T_09_MRG.MrgOK)OTE(O_INT_O4_03_MRG);
				N: XIC(T5T_08_MTR.CONV_RUN)OTE(O_INT_T5T_08_RUN);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_T5T_10_START);
				N: XIC(F_CL3T_08_PE_JAMMED)OTE(O_INT_CL3T_8_JAM);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_T5T_10_RES);
				N: XIC(XO2.MTR_GRP.START_DS)OTE(O_INT_C4_09_START);
				N: XIC(F_XO2_05_PE_JAMMED)OTE(O_INT_XO2_05_JAM);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_C4_09_RES);
				N: NOP()XIC(XO2_05_MRG.MrgOK)OTE(O_INT_C4_08_MRG);
				N: XIC(HX1T_06_MTR.CONV_RUN)OTE(O_INT_HX1T_06_RUN);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_HX1_11_START);
				N: XIC(F_CL1T_26_PE1_JAMMED)OTE(O_INT_CL1T_26_JAM);
				N: NOP()XIC(INT.ALWAYS_FALSE)OTE(O_INT_HX1_11_RES);
				N: XIC(O3T_17_MTR.CONV_RUN)OTE(O_INT_O3T_17_RUN);
				N: XIC(O3T.MTR_GRP.START_DS)OTE(O_INT_O3_54_START);
				N: XIC(F_O3T_20_PE_JAMMED)OTE(O_INT_O3T_20_JAM);
				N: XIC(O3T_21_MTR.CONV_RUN)OTE(O_INT_O4T_16_RUN);
				N: XIC(O4T_2.MTR_GRP.START_DS)OTE(O_INT_O4_54_START);
				N: XIC(F_O4T_22_PE_JAMMED)OTE(O_INT_O4T_22_JAM);
				N: XIC(CL12T_35_MTR.CONV_RUN)OTE(O_INT_CL12T_35_RUN);
		END_ROUTINE

		ROUTINE PLC_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine captures PLC status information and moves it to tags for HMI display.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				N: GSV(Task,MainTask,MaxScanTime,S_PLC_101_MAX_SCAN);
				N: GSV(Task,MainTask,LastScanTime,S_PLC_101_LAST_SCAN);
				RC: "Capture the setting for the main task timed interrupt and set the $Qabove normal$Q and $Qcritical$Q scan time alarm thresholds.";
				N: [GSV(Task,MainTask,Rate,PLC_101.SCAN_LOG_CRTCL_LMT) ,SUB(PLC_101.SCAN_LOG_CRTCL_LMT,3000,PLC_101.SCAN_LOG_CRTCL_LMT) ,SUB(PLC_101.SCAN_LOG_CRTCL_LMT,3000,PLC_101.SCAN_LOG_HI_LMT) ];
				RC: "Increment the index pointer for the scan time log.";
				N: [ADD(PLC_101.SCAN_LOG_NDX,1,PLC_101.SCAN_LOG_NDX) ,GEQ(PLC_101.SCAN_LOG_NDX,10) CLR(PLC_101.SCAN_LOG_NDX) ,MOV(S_PLC_101_LAST_SCAN,PLC_101.SCAN_LOG[PLC_101.SCAN_LOG_NDX]) ];
				RC: "Count how many of the last 10 scans are above the $Qcritical$Q threshold.";
				N: [CLR(PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[0],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[1],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[2],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[3],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[4],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[5],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[6],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[7],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[8],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ,GRT(PLC_101.SCAN_LOG[9],PLC_101.SCAN_LOG_CRTCL_LMT) ADD(PLC_101.SCAN_LOG_CRTCL_CNT,1,PLC_101.SCAN_LOG_CRTCL_CNT) ];
				RC: "If too many of the last 10 scans are above the $Qcritical$Q threshold, then activate the critical scan time alarm.";
				N: GEQ(PLC_101.SCAN_LOG_CRTCL_CNT,5)TOF(PLC_101.SCAN_CRTCL_TMR,?,?);
				N: XIC(PLC_101.SCAN_CRTCL_TMR.DN)OTE(F_PLC_101_SCAN_CRTCL);
				RC: "Count how many of the last 10 scans are above the $Qabove normal$Q threshold.";
				N: [CLR(PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[0],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[1],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[2],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[3],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[4],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[5],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[6],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[7],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[8],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ,GRT(PLC_101.SCAN_LOG[9],PLC_101.SCAN_LOG_HI_LMT) ADD(PLC_101.SCAN_LOG_HI_CNT,1,PLC_101.SCAN_LOG_HI_CNT) ];
				RC: "If too many of the last 10 scans are above the $Qabove normal$Q threshold, then activate the critical scan time alarm.";
				N: GEQ(PLC_101.SCAN_LOG_HI_CNT,5)TOF(PLC_101.SCAN_HI_TMR,?,?);
				N: XIC(PLC_101.SCAN_HI_TMR.DN)XIO(F_PLC_101_SCAN_CRTCL)OTE(F_PLC_101_SCAN_HI);
				N: GSV(ControllerDevice,?,Status,INT.PLC_STATUS);
				N: GSV(ControllerDevice,?,ProductRev,S_PLC_101_SW_VER);
				N: GSV(Module,?,ForceStatus,INT.PLC_FORCE_STATUS);
				N: GSV(Module,?,LedStatus,PLC_101.LED_STATUS);
				N: GSV(FaultLog,?,MinorFaultBits,INT.PLC_MINOR_FLT);
				N: XIC(INT.PLC_FORCE_STATUS.0)OTE(F_PLC_101_FORCES_ON);
				N: XIC(INT.PLC_MINOR_FLT.10)OTE(F_PLC_101_BATTERY_FAULT);
				N: NEQ(PLC_101.LED_STATUS,3)OTE(F_PLC_101_IO_NOT_OK);
				N: XIC(INT.PLC_STATUS.13)XIC(INT.PLC_STATUS.12)OTE(F_PLC_101_KSW_REM);
				N: XIO(INT.PLC_STATUS.13)XIC(INT.PLC_STATUS.12)OTE(F_PLC_101_KSW_RUN);
				N: XIO(F_PLC_101_KSW_RUN)XIO(F_PLC_101_KSW_REM)OTE(F_PLC_101_KSW_UNK);
				RC: "HMI Reset of PLC status.";
				N: XIC(HMI_PLC_101_MAX_SCAN_RESET)[MOV(0,S_PLC_101_MAX_SCAN) ,SSV(Task,MainTask,MaxScanTime,S_PLC_101_MAX_SCAN) ,OTU(HMI_PLC_101_MAX_SCAN_RESET) ];
				N: XIC(HMI_PLC_101_RES_PRG_MJR_FLT)[OTU(F_PLC_101_PRG_MJR_FAULT) ,OTU(HMI_PLC_101_RES_PRG_MJR_FLT) ,CLR(S_PLC_101_PRG_FAULT_TYPE) ,CLR(S_PLC_101_PRG_FAULT_CODE) ];
				N: XIC(HMI_PLC_101_RES_CNTRL_MJR_FLT)[OTU(F_PLC_101_CNTRL_MJR_FAULT) ,OTU(HMI_PLC_101_RES_CNTRL_MJR_FLT) ,CLR(S_PLC_101_CNTRL_FAULT_TYPE) ,CLR(S_PLC_101_CNTRL_FAULT_CODE) ];
				RC: "****************************************************************************************************$N"
				    "The followings rungs check the redundancy of the PLCs$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "$N"
				    "Detect If A Fault Is Detected With The Secondary (Redundant) Controller.";
				N: [XIO(PLC_101.Compatible) ,XIO(PLC_101.A_Active) XIO(PLC_101.B_Active) ,XIO(PLC_101.Peer_Compatible) ,XIO(PLC_101.Peer_KSW_Match) ,XIO(PLC_101.Peer_Qualified) ,XIO(PLC_101.Peer_Run) ,XIC(PLC_101.Peer_Battery_Status) ]OTE(F_PLC_101_REDUNDANCY_FAULT);
				RC: "Detect If The Primary And Secondary Chassis$' Are Compatible";
				N: [GSV(Redundancy,?,ChassisRedundancyState,Redundancy_Status.Chassis_Redundancy_State) ,EQU(Redundancy_Status.Chassis_Redundancy_State,2) OTE(PLC_101.Compatible) ];
				RC: "Detect Which Processor Chassis (Chassis A or B) Is Active.";
				N: [GSV(Redundancy,?,PhysicalChassisID,Redundancy_Status.Physical_Chassis_ID) ,[XIC(PLC_101.A_Active) EQU(Redundancy_Status.Physical_Chassis_ID,2) ,XIC(PLC_101.B_Active) EQU(Redundancy_Status.Physical_Chassis_ID,1) ] OTE(PLC_101.SWITCHOVER) ,EQU(Redundancy_Status.Physical_Chassis_ID,1) OTE(PLC_101.A_Active) ,EQU(Redundancy_Status.Physical_Chassis_ID,2) OTE(PLC_101.B_Active) ];
				RC: "Detect If Primary And Secondary Processors Are Compatible.";
				N: GSV(Redundancy,?,CompatibilityResults,Redundancy_Status.Compatibility_Results)EQU(Redundancy_Status.Compatibility_Results,2)OTE(PLC_101.Peer_Compatible);
				RC: "Determine If The Primary And Secondary Processor Key Switches Match";
				N: GSV(Redundancy,?,KeyswitchAlarm,Redundancy_Status.Keyswitch_Alarm)EQU(Redundancy_Status.Keyswitch_Alarm,0)XIC(PLC_101.Peer_Compatible)OTE(PLC_101.Peer_KSW_Match);
				RC: "Detect If Active Primary With Qualified Secondary Processors Exists";
				N: GSV(Redundancy,?,ModuleRedundancyState,Redundancy_Status.Module_Redundancy_State)EQU(Redundancy_Status.Module_Redundancy_State,2)OTE(PLC_101.Peer_Qualified);
				RC: "Detect If Secondary Processor Is In Run Mode";
				N: GSV(Redundancy,?,PartnerMode,Redundancy_Status.Partner_Mode)EQU(Redundancy_Status.Partner_Mode,2)OTE(PLC_101.Peer_Run);
				RC: "Detect Secondary Processor Battery Status";
				N: GSV(Redundancy,?,PartnerMinorFaults,Redundancy_Status.Partner_Minor_Faults)XIC(Redundancy_Status.Partner_Minor_Faults.10)XIC(PLC_101.Peer_Qualified)OTE(PLC_101.Peer_Battery_Status);
		END_ROUTINE

		ROUTINE Program_Fault_Handler 
				RC: "****************************************************************************************************$N"
				    "This routine is the Program Fault Handler.$N"
				    "This routine is called if a Major program fault occurs.  This routine attempts to reset the fault so that the PLC can keep running.  This routine also turns on an HMI alarm so that the operator is alerted to the fact that a major fault occurred.  This routine also captures the fault type and fault code for display on the HMI, as well as logging the last 10 major program faults.$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "$N"
				    "NOTE:  You will not be able to edit any of the fault handling programs in certain redundancy states.  Refer to RSLogix 5000 Capabilities and Redundancy State for more information.";
				N: NOP();
				N: MOV(10,MAJOR_FAULT_FIFO_CONTROL.LEN);
				RC: "Get Major Fault Record";
				N: GSV(Program,THIS,MAJORFAULTRECORD,LAST_MAJOR_FAULT.Time_Low);
				N: OTU(MAJOR_FAULT_FIFO_CONTROL.EU);
				RC: "IF THE MAJOR FAULT FIFO IS FULL, DISREGARD OLDEST ITEM TO MAKE ROOM FOR NEW ITEM.";
				N: XIC(MAJOR_FAULT_FIFO_CONTROL.DN)FFU(MAJOR_FAULT_FIFO[0],MAJOR_FAULT_DISCARD,MAJOR_FAULT_FIFO_CONTROL,?,?);
				N: OTU(MAJOR_FAULT_FIFO_CONTROL.EU);
				N: OTU(MAJOR_FAULT_FIFO_CONTROL.EN);
				RC: "Move the new Fault into the Major Fault FIFO";
				N: XIO(MAJOR_FAULT_FIFO_CONTROL.DN)FFL(LAST_MAJOR_FAULT,MAJOR_FAULT_FIFO[0],MAJOR_FAULT_FIFO_CONTROL,?,?);
				N: OTU(MAJOR_FAULT_FIFO_CONTROL.EN);
				RC: "Turn on an HMI alarm and copy the fault code and fault type to HMI display tags.";
				N: [OTL(F_PLC_101_PRG_MJR_FAULT) ,MOV(LAST_MAJOR_FAULT.Type,S_PLC_101_PRG_FAULT_TYPE) ,MOV(LAST_MAJOR_FAULT.Code,S_PLC_101_PRG_FAULT_CODE) ];
				RC: "Clear the Fault Codes";
				N: XIO(zzz_Emulate)[CLR(LAST_MAJOR_FAULT.Type) ,CLR(LAST_MAJOR_FAULT.Code) ];
				RC: "Reset the Major Fault with SSV";
				N: XIO(zzz_Emulate)SSV(Program,THIS,MAJORFAULTRECORD,LAST_MAJOR_FAULT.Time_Low);
		END_ROUTINE

		ROUTINE R_CALC_BT_CONST 
				RC: "****************************************************************************************************$N"
				    "This routine sets values for the associated encoder based on the input values.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE IS NOT EXECUTED EVERY SCAN *****";
				N: SBR(R_CALC_BT_CONST_BTx,R_CALC_BT_CONST_MTRx)CPT(R_CALC_BT_CONST_PP2S,R_CALC_BT_CONST_MTRx.CONV_SPEED*0.4/R_CALC_BT_CONST_BTx.RES);
				N: [MUL(R_CALC_BT_CONST_PP2S,0.25,R_CALC_BT_CONST_RANGE) ,LES(R_CALC_BT_CONST_RANGE,3) MOV(3,R_CALC_BT_CONST_RANGE) ];
				N: ADD(R_CALC_BT_CONST_PP2S,R_CALC_BT_CONST_RANGE,R_CALC_BT_CONST_BTx.HI_LIMIT);
				N: SUB(R_CALC_BT_CONST_PP2S,R_CALC_BT_CONST_RANGE,R_CALC_BT_CONST_BTx.LO_LIMIT);
				N: CPT(R_CALC_BT_CONST_BTx.PULSE_PERIOD,R_CALC_BT_CONST_BTx.RES/(R_CALC_BT_CONST_MTRx.CONV_SPEED*0.0000002));
				N: CPT(R_CALC_BT_CONST_BTx.FAULT_TIME,R_CALC_BT_CONST_BTx.PULSE_PERIOD*2/1000);
				N: RET(R_CALC_BT_CONST_BTx);
		END_ROUTINE

		ROUTINE R_CALC_DIV_CONST 
				RC: "****************************************************************************************************$N"
				    "This routine sets values for the associated diverter based on the input values.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE IS NOT EXECUTED EVERY SCAN *****";
				N: SBR(R_CALC_DIV_ACT_CONST,R_CALC_DIV_TC_CNT_PRE,R_CALC_DIV_EXT_DELAY)[CLR(R_CALC_DIV_AC_NDX) ,CLR(R_CALC_DIV_ACT_CONST_BIT) ,CLR(R_CALC_DIV_ACT_CONST_ARY) ,FLL(0,R_CALC_DIV_AC_MASK[0],3) ];
				RC: "Add Extend Delay to Activation Constant so that if Extend Delay is non-zero, a bag which is to be diverted does not become identified as a  bag.";
				N: ADD(R_CALC_DIV_ACT_CONST,R_CALC_DIV_EXT_DELAY,R_CALC_DIV_ACT_CONST)SUB(R_CALC_DIV_TC_CNT_PRE,1,R_CALC_DIV_TC_CNT_PRE)SUB(R_CALC_DIV_TC_CNT_PRE,R_CALC_DIV_EXT_DELAY,R_CALC_DIV_TC_CNT_PRE);
				RC: "Determine Activation + Extend Delay reference point to start paddle area clear mask creation";
				N: MOD(R_CALC_DIV_ACT_CONST,32,R_CALC_DIV_ACT_CONST_BIT)SUB(R_CALC_DIV_ACT_CONST,R_CALC_DIV_ACT_CONST_BIT,R_CALC_DIV_ACT_CONST_ARY)DIV(R_CALC_DIV_ACT_CONST_ARY,32,R_CALC_DIV_ACT_CONST_ARY);
				RC: "Paddle area clear mask creation";
				N: LBL(Setup_Mask)[OTL(R_CALC_DIV_AC_MASK[R_CALC_DIV_ACT_CONST_ARY].[R_CALC_DIV_ACT_CONST_BIT]) ,OTU(R_CALC_DIV_AC_CNTRL.EN) BSL(R_CALC_DIV_AC_MASK[0],R_CALC_DIV_AC_CNTRL,INT.ALWAYS_FALSE,?) ,ADD(R_CALC_DIV_AC_NDX,1,R_CALC_DIV_AC_NDX) ];
				N: LES(R_CALC_DIV_AC_NDX,R_CALC_DIV_TC_CNT_PRE)JMP(Setup_Mask);
				N: RET(R_CALC_DIV_AC_MASK);
		END_ROUTINE

		ROUTINE R_CALC_MTR_CONST 
				RC: "****************************************************************************************************$N"
				    "This routine sets values for the associated motor based on the input values.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE IS NOT EXECUTED EVERY SCAN *****";
				N: SBR(R_CALC_MTR_CONST_MTR,R_CALC_MTR_CONST_MTRx)MOV(1000,R_CALC_MTR_CONST_MTR.CTCTR_FLT_TMR.PRE);
				N: MOV(500,R_CALC_MTR_CONST_MTR.ON_TMR.PRE);
				N: MOV(1000,R_CALC_MTR_CONST_MTR.OFF_TMR.PRE);
				N: MOV(8000,R_CALC_MTR_CONST_MTR.IM_TMR.PRE);
				N: CPT(R_CALC_MTR_CONST_MTR.INDEX_TMR.PRE,40/(R_CALC_MTR_CONST_MTRx.CONV_SPEED*0.0002));
				N: RET(R_CALC_MTR_CONST_MTR);
		END_ROUTINE

		ROUTINE R_CALC_PE_CONST 
				RC: "****************************************************************************************************$N"
				    "This routine sets values for the associated photoeye based on the input values.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE IS NOT EXECUTED EVERY SCAN *****";
				N: SBR(R_CALC_PE_CONST_PE,R_CALC_PE_CONST_MTRx)CPT(R_CALC_PE_CONST_PE.JAM_TMR.PRE,200/(R_CALC_PE_CONST_MTRx.CONV_SPEED*0.0002));
				N: CPT(R_CALC_PE_CONST_PE.TON.PRE,4/(R_CALC_PE_CONST_MTRx.CONV_SPEED*0.0002));
				N: MOV(R_CALC_PE_CONST_PE.TON.PRE,R_CALC_PE_CONST_PE.TOF.PRE);
				N: RET(R_CALC_PE_CONST_PE);
		END_ROUTINE

		ROUTINE R_CALC_SPACER_CONST 
				N: SBR(R_CALC_SPACER_CONST_BTx,R_CALC_SPACER_CONST_MTR1x,R_CALC_SPACER_CONST_MTR2x,R_CALC_SPACER_CONST_MTR)NOP();
				RC: "Calculate the spacer pulse count if an encoder resolution is specified";
				N: NEQ(R_CALC_SPACER_CONST_BTx.RES,0)[DIV(R_CALC_SPACER_CONST_MTR2x.H2H_SPACE_DIST,R_CALC_SPACER_CONST_BTx.RES,R_CALC_SPACER_CONST_MTR2x.H2H_SPACE_SET) ,DIV(R_CALC_SPACER_CONST_MTR2x.T2H_SPACE_DIST,R_CALC_SPACER_CONST_BTx.RES,R_CALC_SPACER_CONST_MTR2x.T2H_SPACE_SET) ];
				RC: "Calculate the spacer time setting";
				N: [GRT(R_CALC_SPACER_CONST_MTR2x.H2H_SPACE_DIST,0) CPT(R_CALC_SPACER_CONST_MTR.H2H_SPACE_TMR.PRE,R_CALC_SPACER_CONST_MTR2x.H2H_SPACE_DIST/(R_CALC_SPACER_CONST_MTR1x.CONV_SPEED*0.0002)) ,GRT(R_CALC_SPACER_CONST_MTR2x.T2H_SPACE_DIST,0) CPT(R_CALC_SPACER_CONST_MTR.T2H_SPACE_TMR.PRE,R_CALC_SPACER_CONST_MTR2x.T2H_SPACE_DIST/(R_CALC_SPACER_CONST_MTR1x.CONV_SPEED*0.0002)) ,LEQ(R_CALC_SPACER_CONST_MTR2x.H2H_SPACE_DIST,0) MOV(200,R_CALC_SPACER_CONST_MTR.H2H_SPACE_TMR.PRE) ,LEQ(R_CALC_SPACER_CONST_MTR2x.T2H_SPACE_DIST,0) MOV(200,R_CALC_SPACER_CONST_MTR.T2H_SPACE_TMR.PRE) ];
				N: RET(R_CALC_SPACER_CONST_MTR2x,R_CALC_SPACER_CONST_MTR);
		END_ROUTINE

		ROUTINE R_MSG_TO_UL_Add 
				RC: "****************************************************************************************************$N"
				    "This routine adds an item to the UL message FIFO Array.  If the FIFO Array is FULL then 10 messages in the array starting from the unload position will be removed to make room for the new message.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE DOES NOT EXECUTE EVERY SCAN ****$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "IF FIFO is full, Discard the oldest one.$N"
				    "$N"
				    "$N"
				    "";
				N: SUB(MSG_TO_UL_QUEUE.UNLD_POS,1,MSG_TO_UL_QUEUE.UNLD_POS_MIN1)[EQU(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.UNLD_POS_MIN1) ,EQU(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.QUEUE_SIZE_MIN1) EQU(MSG_TO_UL_QUEUE.UNLD_POS,0) ][ADD(MSG_TO_UL_QUEUE.UNLD_POS,1,MSG_TO_UL_QUEUE.UNLD_POS) ,GEQ(MSG_TO_UL_QUEUE.UNLD_POS,MSG_TO_UL_QUEUE.QUEUE_SIZE) MOV(0,MSG_TO_UL_QUEUE.UNLD_POS) ];
				RC: "Message added to FIFO Array and Load Position incremented by one$N"
				    "This message queue $'wraps around$' so after loading the highest array element, set the load position back to 0 and continue loading$N"
				    "$N"
				    "";
				N: [MOV(INT.PLC_Number_Const,MSG_TO_UL_Add.PLC_ID) ,COP(MSG_TO_UL_Add,MSG_QUEUE[MSG_TO_UL_QUEUE.LOAD_POS],1) ,ADD(MSG_TO_UL_QUEUE.LOAD_POS,1,MSG_TO_UL_QUEUE.LOAD_POS) ,GEQ(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.QUEUE_SIZE) MOV(0,MSG_TO_UL_QUEUE.LOAD_POS) ];
				N: FLL(0,MSG_TO_UL_Add,1);
		END_ROUTINE

		ROUTINE R_MSG_TO_UL_Send 
				RC: "--------------------------------------------------------------$N"
				    "UL COMMUNICATION$N"
				    "---------------------------------------------------------------$N"
				    "";
				N: NOP();
				RC: "If the message queue Load position not equal to the unload position there are messages waiting in the queue.$N"
				    "$N"
				    "If the MSG is ready, unload from the queue and trigger sending another message";
				N: NEQ(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.UNLD_POS)XIO(MSG_TO_UL_EW)XIO(MSG_TO_UL_ER)XIO(MSG_TO_UL_EN)XIO(MSG_TO_UL_ST)[JSR(R_MSG_TO_UL_Unload,0) ,XIO(R_MSG_TO_UL.EX_ONS) OTE(R_MSG_TO_UL.EX) ,OTE(R_MSG_TO_UL.EX_ONS) ];
				RC: "Disable the HeartBeat if messages are currently being sent";
				N: XIC(MSG_TO_UL_EN)CLR(R_MSG_TO_UL.HB_CNT);
				N: XIC(INT.TWO_S_PULSE)ADD(1,R_MSG_TO_UL.HB_CNT,R_MSG_TO_UL.HB_CNT);
				RC: "Load a heartbeat message into the FIFO if no messages have been sent for a pre-determined amount of time.";
				N: GEQ(R_MSG_TO_UL.HB_CNT,10)[MOV(MsgConst.MsgID_HeartBeat,MSG_TO_UL_Add.MSG_ID) ,JSR(R_MSG_TO_UL_Add,0) ,CLR(R_MSG_TO_UL.HB_CNT) ];
				RC: "Trigger the message to the Upper Level if new data has been unloaded from the fifo.$N"
				    "If the Upper Level is not available the message will remain enabled for 30 seconds before going into Error. Continually re-send the message every two seconds after the message has entered into Error";
				N: [XIC(R_MSG_TO_UL.EX) ,XIC(MSG_TO_UL_ER) GEQ(R_MSG_TO_UL.HB_CNT,1) ]MSG(MESSAGE_TO_UL);
				RC: "Create an HMI Alarm if the message goes into Error. The alarm will be reset once the Message completes successfully";
				N: [XIC(MSG_TO_UL_ER) ,XIC(F_PLC_101_MSG_TO_UL_FAIL) XIO(MSG_TO_UL_DN) ]OTE(F_PLC_101_MSG_TO_UL_FAIL);
				RC: "Monitor the message queue - if it fills up completely, assert an HMI alarm.$N"
				    "";
				N: SUB(MSG_TO_UL_QUEUE.UNLD_POS,1,MSG_TO_UL_QUEUE.UNLD_POS_MIN1)[EQU(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.UNLD_POS_MIN1) ,EQU(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.QUEUE_SIZE_MIN1) EQU(MSG_TO_UL_QUEUE.UNLD_POS,0) ,XIC(F_PLC_101_MSG_TO_UL_FULL) NEQ(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.UNLD_POS) ]OTE(F_PLC_101_MSG_TO_UL_FULL);
				RC: "Since MSG status bits may change asynchronously, it is recommended to make a copy for reference$N"
				    "instead of directly using the status bits.";
				N: COP(MESSAGE_TO_UL.Flags,R_MSG_TO_UL.FLAGS,1);
		END_ROUTINE

		ROUTINE R_MSG_TO_UL_Unload 
				RC: "****************************************************************************************************$N"
				    "This routine unloads multiple messages from the queue into a $'page$' of messages which is sent to the UL in one CIP message.$N"
				    "$N"
				    "The message is sent whenever there are any messages available and doesn$'t wait for the page to be full$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "**** THIS ROUTINE DOES NOT EXECUTE EVERY SCAN ****";
				N: NOP();
				N: [CLR(MSG_TO_UL_QUEUE.PAGE_POS) ,FLL(0,MSG_TO_UL[0],MSG_TO_UL_QUEUE.PAGE_SIZE) ];
				RC: "Loop until the page is full or the queue is empty";
				N: LBL(loop)NOP();
				RC: "This queue $'wraps around$' so after unloading the highest array element, the unload position drops back to 0. The queue is not empty until the unload position == the load position.";
				N: [COP(MSG_QUEUE[MSG_TO_UL_QUEUE.UNLD_POS],MSG_TO_UL[MSG_TO_UL_QUEUE.PAGE_POS],1) ,ADD(MSG_TO_UL_QUEUE.PAGE_POS,1,MSG_TO_UL_QUEUE.PAGE_POS) ,ADD(MSG_TO_UL_QUEUE.UNLD_POS,1,MSG_TO_UL_QUEUE.UNLD_POS) ,GEQ(MSG_TO_UL_QUEUE.UNLD_POS,MSG_TO_UL_QUEUE.QUEUE_SIZE) MOV(0,MSG_TO_UL_QUEUE.UNLD_POS) ];
				N: LES(MSG_TO_UL_QUEUE.PAGE_POS,MSG_TO_UL_QUEUE.PAGE_SIZE)NEQ(MSG_TO_UL_QUEUE.LOAD_POS,MSG_TO_UL_QUEUE.UNLD_POS)JMP(loop);
		END_ROUTINE

		ROUTINE SUBR_CALLS 
				RC: "***********************************************************************************************$N"
				    "This routine calls all of the general motor group (conveyor line) related subroutines.$N"
				    "$N"
				    "$N"
				    "***********************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor Group";
				N: NOP();
				N: JSR(BM1_A_FIELD_IND,0);
				N: JSR(BM1_A_STATUS,0);
				N: JSR(BM1_A_GFX,0);
				N: JSR(BM1_A_JAMS,0);
				N: JSR(BM1_13_MRG,0);
				N: JSR(BM1_A_MTRS,0);
				N: JSR(BM1_A_PE_Filters,0);
				N: JSR(BM1_A_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(BM1_B_FIELD_IND,0);
				N: JSR(BM1_B_STATUS,0);
				N: JSR(BM1_B_GFX,0);
				N: JSR(BM1_B_JAMS,0);
				N: JSR(BM1_B_MTRS,0);
				N: JSR(BM1_B_PE_Filters,0);
				N: JSR(BM1_B_VFDS,0);
				N: JSR(XO2_HSD,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(BM1_C_FIELD_IND,0);
				N: JSR(BM1_C_STATUS,0);
				N: JSR(BM1_C_GFX,0);
				N: JSR(BM1_C_JAMS,0);
				N: JSR(BM1_C_MTRS,0);
				N: JSR(BM1_C_PE_Filters,0);
				N: JSR(BM1_C_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(O2T_FIELD_IND,0);
				N: JSR(O2T_STATUS,0);
				N: JSR(O2T_GFX,0);
				N: JSR(O2T_JAMS,0);
				N: JSR(O2T_18_MRG,0);
				N: JSR(O2T_MTRS,0);
				N: JSR(O2T_PE_Filters,0);
				N: JSR(O2T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(C2T_FIELD_IND,0);
				N: JSR(C2T_STATUS,0);
				N: JSR(C2T_GFX,0);
				N: JSR(C2T_JAMS,0);
				N: JSR(C2T_17_MRG,0);
				N: JSR(C2T_MTRS,0);
				N: JSR(C2T_PE_Filters,0);
				N: JSR(C2T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(CL2T_FIELD_IND,0);
				N: JSR(CL2T_STATUS,0);
				N: JSR(CL2T_GFX,0);
				N: JSR(CL2T_JAMS,0);
				N: JSR(CL2T_MTRS,0);
				N: JSR(CL2T_PE_Filters,0);
				N: JSR(CL2T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(CL3T_FIELD_IND,0);
				N: JSR(CL3T_STATUS,0);
				N: JSR(CL3T_GFX,0);
				N: JSR(CL3T_JAMS,0);
				N: JSR(CL3T_MTRS,0);
				N: JSR(CL3T_PE_Filters,0);
				N: JSR(CL3T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(O4T_2_FIELD_IND,0);
				N: JSR(O4T_2_STATUS,0);
				N: JSR(O4T_2_GFX,0);
				N: JSR(O4T_2_JAMS,0);
				N: JSR(O4T_2_MTRS,0);
				N: JSR(O4T_2_PE_Filters,0);
				N: JSR(O4T_2_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(T5T_FIELD_IND,0);
				N: JSR(T5T_STATUS,0);
				N: JSR(T5T_GFX,0);
				N: JSR(T5T_JAMS,0);
				N: JSR(T5T_09_MRG,0);
				N: JSR(T5T_MTRS,0);
				N: JSR(T5T_PE_Filters,0);
				N: JSR(T5T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(XO2_FIELD_IND,0);
				N: JSR(XO2_STATUS,0);
				N: JSR(XO2_GFX,0);
				N: JSR(XO2_JAMS,0);
				N: JSR(XO2_05_MRG,0);
				N: JSR(XO2_MTRS,0);
				N: JSR(XO2_PE_Filters,0);
				N: JSR(XO2_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(CL1T_FIELD_IND,0);
				N: JSR(CL1T_STATUS,0);
				N: JSR(CL1T_GFX,0);
				N: JSR(CL1T_JAMS,0);
				N: JSR(CL1T_MTRS,0);
				N: JSR(CL1T_PE_Filters,0);
				N: JSR(CL1T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(HX1T_FIELD_IND,0);
				N: JSR(HX1T_STATUS,0);
				N: JSR(HX1T_GFX,0);
				N: JSR(HX1T_JAMS,0);
				N: JSR(HX1T_10_MRG,0);
				N: JSR(HX1T_MTRS,0);
				N: JSR(HX1T_PE_Filters,0);
				N: JSR(HX1T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(O3T_FIELD_IND,0);
				N: JSR(O3T_STATUS,0);
				N: JSR(O3T_GFX,0);
				N: JSR(O3T_JAMS,0);
				N: JSR(O3T_MTRS,0);
				N: JSR(O3T_PE_Filters,0);
				N: JSR(O3T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(O4T_FIELD_IND,0);
				N: JSR(O4T_STATUS,0);
				N: JSR(O4T_GFX,0);
				N: JSR(O4T_JAMS,0);
				N: JSR(O4T_MTRS,0);
				N: JSR(O4T_PE_Filters,0);
				N: JSR(O4T_VFDS,0);
				N: JSR(XO1_HSD,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(CL12T_FIELD_IND,0);
				N: JSR(CL12T_STATUS,0);
				N: JSR(CL12T_GFX,0);
				N: JSR(CL12T_JAMS,0);
				N: JSR(CL12T_36_MRG,0);
				N: JSR(CL12T_MTRS,0);
				N: JSR(CL12T_PE_Filters,0);
				N: JSR(CL12T_VFDS,0);
				RC: "Motor Group";
				N: NOP();
				N: JSR(XO1_FIELD_IND,0);
				N: JSR(XO1_STATUS,0);
				N: JSR(XO1_GFX,0);
				N: JSR(XO1_JAMS,0);
				N: JSR(XO1_MTRS,0);
				N: JSR(XO1_PE_Filters,0);
				N: JSR(XO1_VFDS,0);
				RC: "MCP Calls";
				N: JSR(MCP_BM1_MONITOR_ALARMS,0);
				N: JSR(MCP_BM1_DEVICES,0);
				RC: "MCP Calls";
				N: JSR(MCP_01_MONITOR_ALARMS,0);
				N: JSR(MCP_01_DEVICES,0);
				RC: "MCP Calls";
				N: JSR(MCP_02_MONITOR_ALARMS,0);
				N: JSR(MCP_02_DEVICES,0);
				RC: "MCP Calls";
				N: JSR(MCP_03_MONITOR_ALARMS,0);
				N: JSR(MCP_03_DEVICES,0);
				RC: "MCP Calls";
				N: JSR(MCP_16_MONITOR_ALARMS,0);
				N: JSR(MCP_16_DEVICES,0);
		END_ROUTINE

		ROUTINE T5T_09_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_INT_O4_03_MRG)OTL(T5T_09_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(O4_04_BT.BT_PULSE)[OTU(T5T_09_MRG.MainLineBScntrl.EN) ,BSR(T5T_09_MRG.MainLineBS[0],T5T_09_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(T5T_09_MRG.Lead_Gap_Acc.6) ADD(1,T5T_09_MRG.Lead_Gap_Acc,T5T_09_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(T5T_09_MRG.BagPastPE,T5T_09_MRGx.Lead_Gap,T5T_09_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(T5T_09_MRG.MainLineBScntrl.UL)CLR(T5T_09_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(T5T_09_MRG.Lead_Gap_Acc,T5T_09_MRG.Lead_Gap)OTE(T5T_09_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(T5T_09_MRG.MrgSeal)XIC(T5T_09_PE.FILT_NEG_XITN)RES(T5T_09_MRG.SyncRunTmr);
				N: [XIC(T5T_09_MTR.CONV_RUN) ,XIC(T5T_09_MTR.IM_TMR.TT) ]RTO(T5T_09_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_T5T_09) ,XIC(T5T_09_PE.FILT) ,XIC(T5T_09_MRG.PeSeal) XIO(T5T_09_MTR.ANTI_CASC) XIO(T5T_09_MTR.CONV_RUN) XIC(T5T_09_MTR.INTL_MTR) ][XIO(T5T_09_MRG.PeSeal) OTE(T5T_09_MRG.PeSeal_PosXitn) ,OTE(T5T_09_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(T5T_09_MRG.PeSeal_PosXitn)[MOV(T5T_09_MRG.Length,T5T_09_MRG.BagLength_Gap) CLR(T5T_09_MRG.Length) ,MOV(54,T5T_09_MRGx.MinLength) ,EQU(T5T_09_MRG.BagLength_Gap,0) DIV(T5T_09_MRGx.MinLength,T5T_09_BTx.RES,T5T_09_MRG.BagLength_Gap) ,ADD(T5T_09_MRG.BagLength_Gap,T5T_09_MRGx.Trail_Gap,T5T_09_MRG.BagLength_Gap) ,GRT(T5T_09_MRG.BagLength_Gap,T5T_09_MRGx.MaxLength) MOV(T5T_09_MRGx.MaxLength,T5T_09_MRG.BagLength_Gap) ,FLL(0,T5T_09_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[T5T_09_MRG.BagLength_Gap],T5T_09_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[T5T_09_MRG.BagLength_Gap],T5T_09_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[T5T_09_MRG.BagLength_Gap],T5T_09_MRG.MrgLineBS[2]) ,CLR(T5T_09_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(T5T_09_MRG.PeSeal)XIO(T5T_09_MRG.MrgSeal)XIC(T5T_09_BT.BT_PULSE)[OTU(T5T_09_MRG.MrgLineBScntrl.EN) ,BSR(T5T_09_MRG.MrgLineBS[0],T5T_09_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,T5T_09_MRG.BagPastPE,T5T_09_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(T5T_09_MRG.MainLineBS[0],T5T_09_MRG.MrgLineBS[0],T5T_09_MRG.Intrfr[0])AND(T5T_09_MRG.MainLineBS[1],T5T_09_MRG.MrgLineBS[1],T5T_09_MRG.Intrfr[1])AND(T5T_09_MRG.MainLineBS[2],T5T_09_MRG.MrgLineBS[2],T5T_09_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(T5T_09_MRG.Intrfr[0],0)EQU(T5T_09_MRG.Intrfr[1],0)EQU(T5T_09_MRG.Intrfr[2],0)[XIC(T5T_09_MRG.Lead_Gap_DN) ,XIC(T5T_09_MRG.Hold_Align) ][XIO(T5T_09_MRG.MrgOK) OTE(T5T_09_MRG.MrgOK_PosXitn) ,OTE(T5T_09_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(T5T_09_MTR.INTL_MTR) [XIO(T5T_09_MRG.Hold_MB) XIO(T5T_09_MRG.Hold_MA) XIO(T5T_09_MRG.Hold_Align) XIC(T5T_09_MRG.MrgOK) ,XIC(T5T_09_MRG.Hold_MA) XIO(T5T_09_MRG.MrgOK) ,XIC(T5T_09_MRG.MrgOK_PosXitn) ] ,XIC(T5T_09_MRG.MrgSeal) ]XIO(T5T_09_MTR.SPACE)XIC(T5T_09_MRG.PeSeal)[OTE(T5T_09_MRG.MrgSeal) ,OTU(T5T_09_MRG.Hold_MA) ,OTU(T5T_09_MRG.Hold_MB) ,OTU(T5T_09_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(T5T_09_MRG.PeSeal)XIC(I_INT_O4_04_RUN)RTO(T5T_09_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(T5T_09_MRG.MLPriorityTmr.DN)OTE(T5T_09_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(T5T_09_MRG.PriorityStop)XIC(T5T_09_MTR.CONV_RUN)RTO(T5T_09_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(T5T_09_MRG.MrgSeal)XIO(T5T_09_MRG.PriorityStop)RES(T5T_09_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(T5T_09_MRG.MrgLBagflow.DN)[XIO(T5T_09_MRG.PeSeal) RES(T5T_09_MRG.MLPriorityTmr) ,RES(T5T_09_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(T5T_09_MRG.MrgLPriorityTmr.DN)[RES(T5T_09_MRG.MrgLPriorityTmr) ,RES(T5T_09_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(T5T_08_PE.FILT)TON(T5T_09_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(T5T_08_MTR.CONV_RUN) [XIO(I_PE_T5T_08) ,XIC(T5T_08_PE.FILT) ] ,XIC(T5T_09_MRG.PeSeal) ,XIC(T5T_09_MTR.IM_ONS) ,XIC(F_T5T_09_OVRIDE) ]RES(T5T_09_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(T5T_09_MTR.CONV_RUN)RTO(T5T_09_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(T5T_09_PE.FILT) XIC(T5T_09_MRG.MrgOK_PosXitn) ,XIC(T5T_09_PE.FILT_POS_XITN) XIC(T5T_09_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(93,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE T5T_09_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(O4_03_PE.FILT_NEG_XITN)MOV(0,T5T_09_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(O4_03_PE.POS_XITN)[MOV(T5T_09_MRG.HeadHeadAcc,T5T_09_MRG.HeadHeadCnt) ,MOV(T5T_09_MRG.TailHeadAcc,T5T_09_MRG.TailHeadCnt) ,MOV(0,T5T_09_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(O4_04_BT.BT_PULSE)[ADD(1,T5T_09_MRG.HeadHeadAcc,T5T_09_MRG.HeadHeadAcc) ,ADD(1,T5T_09_MRG.TailHeadAcc,T5T_09_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(O4_03_PE.POS_XITN)CPT(T5T_09_MRG.LastBagMrgWndo,T5T_09_MRG.HeadHeadCnt*O4_04_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(O4_03_PE.POS_XITN)CPT(T5T_09_MRG.LastBagGapDist,T5T_09_MRG.TailHeadCnt*O4_04_BTx.RES);
		END_ROUTINE

		ROUTINE T5T_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_T5T_09_PE_JAMMED) XIC(I_PE_T5T_09) ,XIC(F_T5T_08_PE_JAMMED) XIC(I_PE_T5T_08) ,XIC(F_T5T_09_CS_E_STOP) XIO(I_CS_T5T_09_EPB) ,AFI() ]OTE(CS_T5T_09_LTA_FLASH);
				N: [[XIC(F_T5T_09_PE_JAMMED) ,XIC(F_T5T_08_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_T5T_09_LTA_FLASH) ,XIC(CS_T5T_09_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_T5T_09_RPBA);
				N: XIO(EZ_30203.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_T5T_09_EPB) ]OTE(O_CS_T5T_09_EPB);
				N: XIC(F_T5T_09_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_T5T_09_SPBG);
		END_ROUTINE

		ROUTINE T5T_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,T5T_09_MTR.G) ,XIC(T5T_09_MTR.RUNNING) MOV(Status.ConvRunning,T5T_09_MTR.G) ,XIC(T5T_09_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,T5T_09_MTR.G) ,[XIC(T5T_09_MTR.IM_TMR.TT) ,XIO(T5T_09_MTR.AUTO_STOP) XIC(T5T_09_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,T5T_09_MTR.G) ,XIC(T5T_09_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,T5T_09_MTR.G) ,XIC(F_T5T_09_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,T5T_09_MTR.G) ,XIC(T5T_09_MTR.CASC) MOV(Status.ConvCascade,T5T_09_MTR.G) ,XIC(T5T_09_MTR.CASC) XIO(I_PE_T5T_09) MOV(Status.ConvBagPresCasc,T5T_09_MTR.G) ,AFI() MOV(Status.ConvFull,T5T_09_MTR.G) ,XIC(F_T5T_09_MSD_OFF) MOV(Status.ConvDisc,T5T_09_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,T5T_09_MTR.G) ,XIC(T5T_09_MTR.JAMMED) MOV(Status.ConvJammed,T5T_09_MTR.G) ,AFI() MOV(Status.ConvMBJam,T5T_09_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,T5T_09_MTR.G) ,XIC(F_T5T_09_VFD_FAULT) MOV(Status.ConvVFDFlt,T5T_09_MTR.G) ,XIC(F_T5T_09_CTCTR_FAULT) MOV(Status.ConvCTCFlt,T5T_09_MTR.G) ,AFI() MOV(Status.ConvOverLoad,T5T_09_MTR.G) ,XIC(F_T5T_09_OVRIDE) MOV(Status.ConvOverRide,T5T_09_MTR.G) ,XIC(T5T_09_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,T5T_09_MTR.G) ,XIC(T5T_09_MTR.E_STOP) XIO(T5T_09_MTR.E_STOP_RES) MOV(Status.ConvEStop,T5T_09_MTR.G) ,XIC(F_T5T_09_OUTSERV) MOV(Status.ConvOutOfServ,T5T_09_MTR.G) ,XIC(T5T_09_MTR.COMM) MOV(Status.ConvCommFault,T5T_09_MTR.G) ,MOV(T5T_09_MTR.G,G_T5T_09_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,T5T_08_MTR.G) ,XIC(T5T_08_MTR.RUNNING) MOV(Status.ConvRunning,T5T_08_MTR.G) ,XIC(T5T_08_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,T5T_08_MTR.G) ,[XIC(T5T_08_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,T5T_08_MTR.G) ,XIC(T5T_08_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,T5T_08_MTR.G) ,XIC(F_T5T_08_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,T5T_08_MTR.G) ,XIC(T5T_08_MTR.CASC) MOV(Status.ConvCascade,T5T_08_MTR.G) ,XIC(T5T_08_MTR.CASC) XIO(I_PE_T5T_08) MOV(Status.ConvBagPresCasc,T5T_08_MTR.G) ,AFI() MOV(Status.ConvFull,T5T_08_MTR.G) ,XIC(F_T5T_08_MSD_OFF) MOV(Status.ConvDisc,T5T_08_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,T5T_08_MTR.G) ,XIC(T5T_08_MTR.JAMMED) MOV(Status.ConvJammed,T5T_08_MTR.G) ,AFI() MOV(Status.ConvMBJam,T5T_08_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,T5T_08_MTR.G) ,XIC(F_T5T_08_VFD_FAULT) MOV(Status.ConvVFDFlt,T5T_08_MTR.G) ,XIC(F_T5T_08_CTCTR_FAULT) MOV(Status.ConvCTCFlt,T5T_08_MTR.G) ,AFI() MOV(Status.ConvOverLoad,T5T_08_MTR.G) ,XIC(F_T5T_08_OVRIDE) MOV(Status.ConvOverRide,T5T_08_MTR.G) ,XIC(T5T_08_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,T5T_08_MTR.G) ,XIC(T5T_08_MTR.E_STOP) XIO(T5T_08_MTR.E_STOP_RES) MOV(Status.ConvEStop,T5T_08_MTR.G) ,XIC(F_T5T_08_OUTSERV) MOV(Status.ConvOutOfServ,T5T_08_MTR.G) ,XIC(T5T_08_MTR.COMM) MOV(Status.ConvCommFault,T5T_08_MTR.G) ,MOV(T5T_08_MTR.G,G_T5T_08_STS) ];
		END_ROUTINE

		ROUTINE T5T_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(T5T_09_MTR.CONV_RUN)RTO(T5T_09_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_T5T_09_RPBA) XIC(T5T_09_PE.JAM_TMR.DN) ,XIO(T5T_09_PE.JAM_TMR.DN) ]XIC(I_PE_T5T_09)RES(T5T_09_PE.JAM_TMR);
				N: XIC(T5T_09_PE.JAM_TMR.DN)[XIO(F_T5T_09_PE_JAMMED) [ADD(S_T5T_09_PE_JAM,1,S_T5T_09_PE_JAM) ,OTE(T5T_09_PE.JAM_ONS) ] ,OTE(F_T5T_09_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(T5T_08_MTR.CONV_RUN)RTO(T5T_08_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_T5T_09_RPBA) XIC(T5T_08_PE.JAM_TMR.DN) ,XIO(T5T_08_PE.JAM_TMR.DN) ]XIC(I_PE_T5T_08)RES(T5T_08_PE.JAM_TMR);
				N: XIC(T5T_08_PE.JAM_TMR.DN)[XIO(F_T5T_08_PE_JAMMED) [ADD(S_T5T_08_PE_JAM,1,S_T5T_08_PE_JAM) ,OTE(T5T_08_PE.JAM_ONS) ] ,OTE(F_T5T_08_PE_JAMMED) ];
		END_ROUTINE

		ROUTINE T5T_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_02_SPBG) ,XIC(I_INT_T5T_08_START) ,AFI() ]OTE(T5T.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(T5T_09_MTR.INTL_MTR)XIC(T5T_08_MTR.CONV_RUN)OTE(T5T.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_T5T_09) ,XIO(I_PE_T5T_08) ,AFI() ]OTE(T5T.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(T5T.MTR_GRP.START) ,XIC(T5T.MTR_GRP.PEs) XIO(T5T.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(T5T.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(T5T.MTR_GRP.RUN_LATCH)XIC(T5T.MTR_GRP.PEs)OTE(T5T.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(T5T.MTR_GRP.RUN_EXPAND)RTO(T5T.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(T5T.MTR_GRP.START) ,XIC(T5T.MTR_GRP.RUN_LATCH) ]XIO(T5T.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(T5T.STATUS.FIRE_ALM)OTE(T5T.MTR_GRP.RUN_LATCH);
				RC: "Motor T5T_09$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(T5T_09_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_T5T_09_JRB) TON(T5T_09_MTR.JRB_FILT_TON,?,?) ,XIC(T5T_09_MTR.JRB_FILT_TON.DN) OTE(T5T_09_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(T5T_09_MTR.E_STOP)[XIC(T5T_09_VFD.READY) XIO(T5T_09_MTR.JAMMED) ,XIC(F_T5T_09_OVRIDE) ,XIC(F_T5T_09_JOG_REVERSE) ]XIO(F_T5T_09_MSD_OFF)XIO(F_T5T_09_OUTSERV)XIO(T5T_09_MTR.COMM)OTE(T5T_09_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(T5T.MTR_GRP.RUN_LATCH) ,XIC(F_T5T_09_OVRIDE) ]XIC(T5T_09_MTR.NO_FAULT)TON(T5T_09_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(T5T_09_MTR.IM_TMR.DN)[XIO(T5T_09_MTR.INTL_MTR) OTE(T5T_09_MTR.IM_ONS) ,OTE(T5T_09_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(T5T_09_PE.FILT_NEG_XITN)RES(T5T_09_MTR.T2H_SPACE_TMR);
				N: XIC(I_INT_O4_04_RUN)RTO(T5T_09_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(T5T_09_PE.POS_XITN) XIC(T5T_09_MTR.INTL_MTR) ,XIC(T5T_09_MTR.T2H_SPACE) ]XIO(T5T_09_MTR.T2H_SPACE_TMR.DN)OTE(T5T_09_MTR.T2H_SPACE);
				N: XIC(T5T_09_MTR.T2H_SPACE)OTE(T5T_09_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(zzzO4_04zz_MTR_ON_TMR_DN) XIC(T5T_09_MTR.OFF_TMR.DN) ,XIO(zzzO4_04zz_MTR_IM_ONS) XIC(T5T_09_MTR.IM_ONS) ,XIC(T5T_09_MTR.ANTI_CASC) XIC(I_PE_T5T_09) ]OTE(T5T_09_MTR.START_EN);
				N: [[XIO(zzzO4_04zz_MTR_ON_TMR_DN) ,XIO(T5T_09_MRG.MrgSeal) ] [XIO(I_PE_T5T_09) ,XIC(T5T_09_MRG.PeSeal) ,XIO(T5T_09_MRG.SyncRunTmr.DN) ] ,XIO(T5T_09_MTR.ANTI_CASC) XIC(T5T_09_MTR.SPACE) ]OTE(T5T_09_MTR.STOP);
				N: XIC(T5T_09_MTR.INTL_MTR)XIO(F_T5T_09_JOG_REVERSE)[[XIC(T5T_09_MTR.START_EN) ,XIC(T5T_09_MTR.CONV_RUN) ] XIO(T5T_09_MTR.STOP) ,[XIO(T5T_09_MRG.SyncRunTmr.DN) ,XIC(T5T_09_MRG.MrgSeal) ] XIC(I_INT_O4_04_RUN) ,XIC(F_T5T_09_OVRIDE) ][OTE(T5T_09_MTR.CONV_RUN) ,XIO(T5T_09_MRG.MergeRunTmr.DN) OTE(O_VFD_T5T_09_FWD) ];
				N: XIC(F_T5T_09_JOG_REVERSE)XIC(T5T_09_MTR.JRB_FILT)XIO(T5T_09_MTR.E_STOP)XIC(T5T_09_VFD.READY)XIO(F_T5T_09_MSD_OFF)XIO(T5T_09_MTR.COMM)XIO(F_T5T_09_OVRIDE)OTE(O_VFD_T5T_09_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(T5T_09_MTR.CONV_RUN)TON(T5T_09_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(T5T_09_MTR.CONV_RUN)TON(T5T_09_MTR.OFF_TMR,?,?);
				RC: "Motor T5T_08$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_T5T_09_MSD_OFF)OTE(T5T_08_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(T5T_08_MTR.E_STOP)[XIC(T5T_08_VFD.READY) XIO(T5T_08_MTR.JAMMED) ,XIC(F_T5T_08_OVRIDE) ]XIO(F_T5T_08_MSD_OFF)XIO(F_T5T_08_OUTSERV)XIO(T5T_08_MTR.COMM)OTE(T5T_08_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(T5T.MTR_GRP.RUN_LATCH) ,XIC(F_T5T_08_OVRIDE) ]XIC(T5T_08_MTR.NO_FAULT)TON(T5T_08_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(T5T_08_MTR.IM_TMR.DN)[XIO(T5T_08_MTR.INTL_MTR) OTE(T5T_08_MTR.IM_ONS) ,OTE(T5T_08_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(T5T_08_PE.FILT_NEG_XITN)RES(T5T_08_MTR.T2H_SPACE_TMR);
				N: XIC(T5T_09_MTR.CONV_RUN)RTO(T5T_08_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(T5T_08_PE.POS_XITN) XIC(T5T_08_MTR.INTL_MTR) ,XIC(T5T_08_MTR.T2H_SPACE) ]XIO(T5T_08_MTR.T2H_SPACE_TMR.DN)OTE(T5T_08_MTR.T2H_SPACE);
				N: XIC(T5T_08_MTR.T2H_SPACE)OTE(T5T_08_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(T5T_09_MTR.ON_TMR.DN) XIC(T5T_08_MTR.OFF_TMR.DN) ,XIO(T5T_09_MTR.IM_ONS) XIC(T5T_08_MTR.IM_ONS) ,XIC(T5T_08_MTR.ANTI_CASC) XIC(I_PE_T5T_08) ]OTE(T5T_08_MTR.START_EN);
				N: [XIO(T5T_09_MTR.ON_TMR.DN) XIO(I_PE_T5T_08) ,XIO(T5T_08_MTR.ANTI_CASC) XIC(T5T_08_MTR.SPACE) ]OTE(T5T_08_MTR.STOP);
				N: XIC(T5T_08_MTR.INTL_MTR)[[XIC(T5T_08_MTR.START_EN) ,XIC(T5T_08_MTR.CONV_RUN) ] XIO(T5T_08_MTR.STOP) ,XIC(F_T5T_08_OVRIDE) ][OTE(T5T_08_MTR.CONV_RUN) ,OTE(O_VFD_T5T_08_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(T5T_08_MTR.CONV_RUN)TON(T5T_08_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(T5T_08_MTR.CONV_RUN)TON(T5T_08_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE T5T_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(T5T_09_MTR.COMM)[[XIO(I_PE_T5T_09) ,XIC(T5T_09_PE.TOF.DN) ] TON(T5T_09_PE.TON,?,?) ,XIO(I_PE_T5T_09) XIC(T5T_09_PE.TON.DN) TOF(T5T_09_PE.TOF,?,?) ,XIC(T5T_09_PE.TOF.DN) OTE(T5T_09_PE.FILT) ];
				N: XIC(T5T_09_PE.FILT)[XIO(T5T_09_PE.FILT_POS_XITN_MEM) OTE(T5T_09_PE.FILT_POS_XITN) ,OTE(T5T_09_PE.FILT_POS_XITN_MEM) ];
				N: XIO(T5T_09_PE.FILT)[XIO(T5T_09_PE.FILT_NEG_XITN_MEM) OTE(T5T_09_PE.FILT_NEG_XITN) ,OTE(T5T_09_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(T5T_08_MTR.COMM)[[XIO(I_PE_T5T_08) ,XIC(T5T_08_PE.TOF.DN) ] TON(T5T_08_PE.TON,?,?) ,XIO(I_PE_T5T_08) XIC(T5T_08_PE.TON.DN) TOF(T5T_08_PE.TOF,?,?) ,XIC(T5T_08_PE.TOF.DN) OTE(T5T_08_PE.FILT) ];
				N: XIC(T5T_08_PE.FILT)[XIO(T5T_08_PE.FILT_POS_XITN_MEM) OTE(T5T_08_PE.FILT_POS_XITN) ,OTE(T5T_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(T5T_08_PE.FILT)[XIO(T5T_08_PE.FILT_NEG_XITN_MEM) OTE(T5T_08_PE.FILT_NEG_XITN) ,OTE(T5T_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_T5T_08)[XIO(T5T_08_PE.POS_XITN_MEM) OTE(T5T_08_PE.POS_XITN) ,OTE(T5T_08_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(F_MCP_02_RK01_S00_COMM)[[XIO(I_INT_O4_03_MRG) ,XIC(O4_03_PE.TOF.DN) ] TON(O4_03_PE.TON,?,?) ,XIO(I_INT_O4_03_MRG) XIC(O4_03_PE.TON.DN) TOF(O4_03_PE.TOF,?,?) ,XIC(O4_03_PE.TOF.DN) OTE(O4_03_PE.FILT) ];
				N: XIC(O4_03_PE.FILT)[XIO(O4_03_PE.FILT_POS_XITN_MEM) OTE(O4_03_PE.FILT_POS_XITN) ,OTE(O4_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(O4_03_PE.FILT)[XIO(O4_03_PE.FILT_NEG_XITN_MEM) OTE(O4_03_PE.FILT_NEG_XITN) ,OTE(O4_03_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_INT_O4_03_MRG)[XIO(O4_03_PE.POS_XITN_MEM) OTE(O4_03_PE.POS_XITN) ,OTE(O4_03_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE T5T_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(T5T_09_MTR.COMM);
				N: [XIC(O_VFD_T5T_09_FWD) ,XIC(O_VFD_T5T_09_REV) ]XIC(T5T_09_MTR.CONV_RUN)OTE(T5T_09_MTR.RUNNING);
				N: XIO(I_CS_T5T_09_AUTO)OTE(F_T5T_09_JOG_REVERSE);
				N: XIC(T5T_09_VFD.FAULTED)[XIO(F_T5T_09_VFD_FAULT) OTE(T5T_09_VFD.FAULT_ONS) ,OTE(F_T5T_09_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_T5T_09_MOL);
				N: XIO(I_MSD_T5T_09)XIO(T5T_09_MTR.COMM)[XIO(F_T5T_09_MSD_OFF) OTE(T5T_09_MTR.MSD_ONS) ,OTE(F_T5T_09_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_T5T_09_CTCTR_FAULT) OTE(T5T_09_MTR.MS_FLT_ONS) ,OTE(F_T5T_09_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(T5T_09_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(T5T_09_MTR.E_STOP_RES);
				N: XIC(T5T.STATUS.FIRE_ALM)OTE(T5T_09_MTR.FIRE_ALM);
				N: XIO(T5T_09_MTR.CONV_RUN)XIC(T5T_09_MTR.INTL_MTR)OTE(T5T_09_MTR.CASC);
				N: XIO(T5T.MTR_GRP.RUN_LATCH)OTE(T5T_09_MTR.AUTO_STOP);
				N: XIC(HMI_T5T_09_OVRIDE_REQ)[XIO(F_T5T_09_OVRIDE) OTE(T5T_09_MTR.HMI_OVERRIDE_ONS) ,OTE(F_T5T_09_OVRIDE) ];
				N: XIC(HMI_T5T_09_OUTSERV_REQ)[XIO(F_T5T_09_OUTSERV) OTE(T5T_09_MTR.OOS_ONS) ,OTE(F_T5T_09_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(T5T_09_MTR.MB_JAMMED);
				N: [XIC(F_T5T_09_PE_JAMMED) ,XIC(F_T5T_08_PE_JAMMED) ,XIC(T5T_09_MTR.MB_JAMMED) ,AFI() ]OTE(T5T_09_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(T5T_08_MTR.COMM);
				N: XIC(O_VFD_T5T_08_FWD)XIC(T5T_08_MTR.CONV_RUN)OTE(T5T_08_MTR.RUNNING);
				N: XIC(T5T_08_VFD.FAULTED)[XIO(F_T5T_08_VFD_FAULT) OTE(T5T_08_VFD.FAULT_ONS) ,OTE(F_T5T_08_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_T5T_08_MOL);
				N: XIO(I_MSD_T5T_08)XIO(T5T_08_MTR.COMM)[XIO(F_T5T_08_MSD_OFF) OTE(T5T_08_MTR.MSD_ONS) ,OTE(F_T5T_08_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_T5T_08_CTCTR_FAULT) OTE(T5T_08_MTR.MS_FLT_ONS) ,OTE(F_T5T_08_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,XIO(EZ_A32A3.Zone_OK) ,AFI() ]OTE(T5T_08_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,XIC(EZ_A32A3.Zone_RES) ,AFI() ]OTE(T5T_08_MTR.E_STOP_RES);
				N: XIC(T5T.STATUS.FIRE_ALM)OTE(T5T_08_MTR.FIRE_ALM);
				N: XIO(T5T_08_MTR.CONV_RUN)XIC(T5T_08_MTR.INTL_MTR)OTE(T5T_08_MTR.CASC);
				N: XIO(T5T.MTR_GRP.RUN_LATCH)OTE(T5T_08_MTR.AUTO_STOP);
				N: XIC(HMI_T5T_08_OVRIDE_REQ)[XIO(F_T5T_08_OVRIDE) OTE(T5T_08_MTR.HMI_OVERRIDE_ONS) ,OTE(F_T5T_08_OVRIDE) ];
				N: XIC(HMI_T5T_08_OUTSERV_REQ)[XIO(F_T5T_08_OUTSERV) OTE(T5T_08_MTR.OOS_ONS) ,OTE(F_T5T_08_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(T5T_08_MTR.MB_JAMMED);
				N: [XIC(F_T5T_08_PE_JAMMED) ,XIC(T5T_08_MTR.MB_JAMMED) ,AFI() ]OTE(T5T_08_MTR.JAMMED);
		END_ROUTINE

		ROUTINE T5T_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor T5T_09 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(T5T_09_MTR.COMM)XIO(T5T_09_MTR.E_STOP)XIO(F_T5T_09_MSD_OFF)TON(T5T_09_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(T5T_09_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_T5T_09_RDY) OTE(T5T_09_VFD.FAULTED) ,XIO(T5T_09_VFD.FAULTED) OTE(T5T_09_VFD.READY) ];
				RC: "Motor T5T_08 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(T5T_08_MTR.COMM)XIO(T5T_08_MTR.E_STOP)XIO(F_T5T_08_MSD_OFF)TON(T5T_08_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(T5T_08_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_T5T_08_RDY) OTE(T5T_08_VFD.FAULTED) ,XIO(T5T_08_VFD.FAULTED) OTE(T5T_08_VFD.READY) ];
		END_ROUTINE

		ROUTINE THROUGHPUT 
				RC: "****************************************************************************************************$N"
				    "This routine collects real time bag counts for display on UL.$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "***********************************$N"
				    "CL1T Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(CL1T_03_PE.FILT_POS_XITN)ADD(1,S_CL1T_03_THRU,S_CL1T_03_THRU);
				RC: "***********************************$N"
				    "CL2T Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(CL2T_03_PE.FILT_POS_XITN)ADD(1,S_CL2T_03_THRU,S_CL2T_03_THRU);
				RC: "***********************************$N"
				    "CL3T Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(CL3T_03_PE.FILT_POS_XITN)ADD(1,S_CL3T_03_THRU,S_CL3T_03_THRU);
				RC: "***********************************$N"
				    "BM1_13 Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(BM1_13_PE.FILT_POS_XITN)ADD(1,S_BM1_13_THRU,S_BM1_13_THRU);
				RC: "***********************************$N"
				    "XO1 Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(XO1_03_PE.FILT_POS_XITN)ADD(1,S_XO1_03_THRU,S_XO1_03_THRU);
				RC: "***********************************$N"
				    "XO2 Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(XO2_03_PE.FILT_POS_XITN)ADD(1,S_XO2_05_THRU,S_XO2_05_THRU);
				RC: "***********************************$N"
				    "O2T Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(O2T_14_PE.FILT_POS_XITN)ADD(1,S_O2T_14_THRU,S_O2T_14_THRU);
				RC: "***********************************$N"
				    "O4T Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(O4T_13_PE.FILT_POS_XITN)ADD(1,S_O4T_13_THRU,S_O4T_13_THRU);
				RC: "***********************************$N"
				    "BM1_26 Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(BM1_26_PE.FILT_POS_XITN)ADD(1,S_BM1_26_THRU,S_BM1_26_THRU);
				RC: "***********************************$N"
				    "CL12T_36 Bag Count$N"
				    "***********************************$N"
				    "";
				N: XIC(CL12T_36_PE.FILT_POS_XITN)ADD(1,S_CL12T_36_THRU,S_CL12T_36_THRU);
		END_ROUTINE

		ROUTINE XO1_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_XO1_01_PE2_JAMMED) XIC(I_PE_XO1_03) ,XIC(F_XO1_02_PE_JAMMED) XIC(I_PE_XO1_02) ,XIC(F_O4T_05_PE_JAMMED) XIC(I_PE1_XO1_01) ,XIC(F_XO1_01_PE2_JAMMED) XIC(I_PE2_XO1_01) ,XIC(F_O4T_10_PE1_JAMMED) XIC(I_PE1_O4T_10) ,XIC(F_O4T_10_PE2_JAMMED) XIC(I_PE2_O4T_10) ,XIC(F_O4T_09_PE_JAMMED) XIC(I_PE_O4T_09) ,XIC(F_XO1_01_CS_E_STOP) XIO(I_CS_XO1_01_EPB) ,AFI() ]OTE(CS_XO1_01_LTA_FLASH);
				N: [[XIC(F_XO1_01_PE2_JAMMED) ,XIC(F_XO1_02_PE_JAMMED) ,XIC(F_O4T_05_PE_JAMMED) ,XIC(F_XO1_01_PE2_JAMMED) ,XIC(F_O4T_10_PE1_JAMMED) ,XIC(F_O4T_10_PE2_JAMMED) ,XIC(F_O4T_09_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_XO1_01_LTA_FLASH) ,XIC(CS_XO1_01_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_XO1_01_RPBA);
				N: XIO(EZ_30203.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_XO1_01_EPB) ]OTE(O_CS_XO1_01_EPB);
				N: XIC(F_XO1_01_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_XO1_01_SPBG);
		END_ROUTINE

		ROUTINE XO1_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO1_03_MTR.G) ,XIC(XO1_03_MTR.RUNNING) MOV(Status.ConvRunning,XO1_03_MTR.G) ,XIC(XO1_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO1_03_MTR.G) ,[XIC(XO1_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO1_03_MTR.G) ,XIC(XO1_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO1_03_MTR.G) ,XIC(F_XO1_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO1_03_MTR.G) ,XIC(XO1_03_MTR.CASC) MOV(Status.ConvCascade,XO1_03_MTR.G) ,XIC(XO1_03_MTR.CASC) XIO(I_PE_XO1_03) MOV(Status.ConvBagPresCasc,XO1_03_MTR.G) ,AFI() MOV(Status.ConvFull,XO1_03_MTR.G) ,XIC(F_XO1_03_MSD_OFF) MOV(Status.ConvDisc,XO1_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO1_03_MTR.G) ,XIC(XO1_03_MTR.JAMMED) MOV(Status.ConvJammed,XO1_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO1_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO1_03_MTR.G) ,XIC(F_XO1_03_VFD_FAULT) MOV(Status.ConvVFDFlt,XO1_03_MTR.G) ,XIC(F_XO1_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO1_03_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO1_03_MTR.G) ,XIC(F_XO1_03_OVRIDE) MOV(Status.ConvOverRide,XO1_03_MTR.G) ,XIC(XO1_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO1_03_MTR.G) ,XIC(XO1_03_MTR.E_STOP) XIO(XO1_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO1_03_MTR.G) ,XIC(F_XO1_03_OUTSERV) MOV(Status.ConvOutOfServ,XO1_03_MTR.G) ,XIC(XO1_03_MTR.COMM) MOV(Status.ConvCommFault,XO1_03_MTR.G) ,MOV(XO1_03_MTR.G,G_XO1_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO1_02_MTR.G) ,XIC(XO1_02_MTR.RUNNING) MOV(Status.ConvRunning,XO1_02_MTR.G) ,XIC(XO1_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO1_02_MTR.G) ,[XIC(XO1_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO1_02_MTR.G) ,XIC(XO1_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO1_02_MTR.G) ,XIC(F_XO1_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO1_02_MTR.G) ,XIC(XO1_02_MTR.CASC) MOV(Status.ConvCascade,XO1_02_MTR.G) ,XIC(XO1_02_MTR.CASC) XIO(I_PE_XO1_02) MOV(Status.ConvBagPresCasc,XO1_02_MTR.G) ,AFI() MOV(Status.ConvFull,XO1_02_MTR.G) ,XIC(F_XO1_02_MSD_OFF) MOV(Status.ConvDisc,XO1_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO1_02_MTR.G) ,XIC(XO1_02_MTR.JAMMED) MOV(Status.ConvJammed,XO1_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO1_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO1_02_MTR.G) ,XIC(F_XO1_02_VFD_FAULT) MOV(Status.ConvVFDFlt,XO1_02_MTR.G) ,XIC(F_XO1_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO1_02_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO1_02_MTR.G) ,XIC(F_XO1_02_OVRIDE) MOV(Status.ConvOverRide,XO1_02_MTR.G) ,XIC(XO1_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO1_02_MTR.G) ,XIC(XO1_02_MTR.E_STOP) XIO(XO1_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO1_02_MTR.G) ,XIC(F_XO1_02_OUTSERV) MOV(Status.ConvOutOfServ,XO1_02_MTR.G) ,XIC(XO1_02_MTR.COMM) MOV(Status.ConvCommFault,XO1_02_MTR.G) ,MOV(XO1_02_MTR.G,G_XO1_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO1_01_MTR.G) ,XIC(XO1_01_MTR.RUNNING) MOV(Status.ConvRunning,XO1_01_MTR.G) ,XIC(XO1_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO1_01_MTR.G) ,[XIC(XO1_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO1_01_MTR.G) ,XIC(XO1_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO1_01_MTR.G) ,XIC(F_XO1_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO1_01_MTR.G) ,XIC(XO1_01_MTR.CASC) MOV(Status.ConvCascade,XO1_01_MTR.G) ,XIC(XO1_01_MTR.CASC) XIO(I_PE1_XO1_01) MOV(Status.ConvBagPresCasc,XO1_01_MTR.G) ,AFI() MOV(Status.ConvFull,XO1_01_MTR.G) ,XIC(F_XO1_01_MSD_OFF) MOV(Status.ConvDisc,XO1_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO1_01_MTR.G) ,XIC(XO1_01_MTR.JAMMED) MOV(Status.ConvJammed,XO1_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO1_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO1_01_MTR.G) ,XIC(F_XO1_01_VFD_FAULT) MOV(Status.ConvVFDFlt,XO1_01_MTR.G) ,XIC(F_XO1_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO1_01_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO1_01_MTR.G) ,XIC(F_XO1_01_OVRIDE) MOV(Status.ConvOverRide,XO1_01_MTR.G) ,XIC(XO1_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO1_01_MTR.G) ,XIC(XO1_01_MTR.E_STOP) XIO(XO1_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO1_01_MTR.G) ,XIC(F_XO1_01_OUTSERV) MOV(Status.ConvOutOfServ,XO1_01_MTR.G) ,XIC(XO1_01_MTR.COMM) MOV(Status.ConvCommFault,XO1_01_MTR.G) ,MOV(XO1_01_MTR.G,G_XO1_01_STS) ];
		END_ROUTINE

		ROUTINE XO1_HSD 
				RC: "Siemens HSD2 Control Routine$N"
				    "The HSD has its own controller that monitors the HSD for faults and handles the actuation of the unit. This routine interfaces with the HSD and tells it when to switch position. Additionally there is fault detection for any faults which the BHS is capable of monitoring.$N"
				    "$N"
				    "=====================================================================================================================================================$N"
				    "$N"
				    "";
				N: XIC(I_SD_XO1_ZERO)OTE(XO1_HSD.HOME_FLTR);
				RC: "If the diverter is in the home position and the motor disconnect is turned off, seal in the home position status.";
				N: [XIC(XO1_HSD.HOME_FLTR) ,XIC(F_XO1_HSD_PROX_OVR) ,XIC(XO1_HSD.HOME_FLTR_SEAL) XIC(F_XO1_01_HSD_IP_DISC_OFF) ]OTE(XO1_HSD.HOME_FLTR_SEAL);
				N: XIC(I_SD_XO1_EXT)OTE(XO1_HSD.DIV_FLTR);
				N: [XIC(XO1_HSD.DIV_FLTR) ,XIC(XO1_HSD.LAST_POS_EXT) ]XIO(XO1_HSD.HOME_FLTR_SEAL)OTE(XO1_HSD.LAST_POS_EXT);
				RC: "============================================The following rungs are added for Untracked Diverters.============================================$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Local Pulse Counter Clear Control.$N"
				    "This rung controls when the local pulse counter is cleared.$N"
				    "The intent of this rung is to only clear the counter when there are no bags in the zone or on the conveyor to conveyor transition.$N"
				    "Auto_Trk bit is included in this rung to prevent counter from resetting (due to untracked zone) when bag is lost during setup.  The GEQ than 0 instruction in this rung ensures that the counter will be cleared if it ever goes negative.";
				N: XIC(XO1_HSD.BT_DONT_CLEAR)GEQ(O4T_10A_TD.BT_CNT,0)OTE(O4T_10A_TD.DONT_CLR);
				RC: "Local Pulse Counter Clear.$N"
				    "This rung clears the local pulse counter when the control rung indicates to do so.";
				N: XIO(O4T_10A_TD.DONT_CLR)CLR(O4T_10A_TD.BT_CNT);
				RC: "Local Pulse Counter.$N"
				    "This rung counts pulses when the control rung is indicating to do so.";
				N: XIC(O4T_10_BT.BT_PULSE)XIC(O4T_10A_TD.DONT_CLR)ADD(O4T_10A_TD.BT_CNT,1,O4T_10A_TD.BT_CNT);
				N: XIC(O4T_10_PE2.FILT_POS_XITN)[ADD(O4T_10A_TD.BAG_ID,1,O4T_10A_TD.BAG_ID) ,GRT(O4T_10A_TD.BAG_ID,O4T_10A_TD.BAG_ID_High_Limit) MOV(1,O4T_10A_TD.BAG_ID) ,CLR(O4T_10A_TD.Bag_Data[O4T_10A_TD.BAG_ID].Div_ID) ,OTU(O4T_10A_TD.Bag_Data[O4T_10A_TD.BAG_ID].TooClose_T) ,OTU(O4T_10A_TD.Bag_Data[O4T_10A_TD.BAG_ID].TooClose_L) ];
				RC: "============================================BHS detection of operational faults.============================================$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Failed to Extend";
				N: [XIC(XO1_HSD.DIV_REQ_ONS) ,XIC(XO1_HSD.FailedToExtend_TMR.EN) ]XIO(XO1_HSD.FAULT_RESET)XIO(XO1_HSD.DIV_FLTR)TON(XO1_HSD.FailedToExtend_TMR,?,?);
				N: [XIC(XO1_HSD.FailedToExtend_TMR.DN) ,XIC(XO1_HSD.FailedToExtend_TMR.EN) XIO(XO1_HSD.XFER_CNTRL.EM) GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.XFER_FIFO[0].POS) ,XIC(F_XO1_01_HSD_FAIL_TO_EXTEND) ]XIO(XO1_HSD.FAULT_RESET)[XIO(F_XO1_01_HSD_FAIL_TO_EXTEND) OTE(XO1_HSD.FAIL_EXTEND_ONS) ,OTE(F_XO1_01_HSD_FAIL_TO_EXTEND) ];
				RC: "Failed to Retract";
				N: [XIC(XO1_HSD.RET_REQ_ONS) ,XIC(XO1_HSD.FailedToRetract_TMR.EN) ]XIO(XO1_HSD.FAULT_RESET)XIO(XO1_HSD.HOME_FLTR_SEAL)TON(XO1_HSD.FailedToRetract_TMR,?,?);
				N: [XIC(XO1_HSD.FailedToRetract_TMR.DN) ,XIC(XO1_HSD.FailedToRetract_TMR.EN) XIO(XO1_HSD.XFER_CNTRL.EM) GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.XFER_FIFO[0].POS) ,XIC(F_XO1_01_HSD_FAIL_TO_RETRACT) ]XIO(XO1_HSD.FAULT_RESET)[XIO(F_XO1_01_HSD_FAIL_TO_RETRACT) OTE(XO1_HSD.FAIL_RETRACT_ONS) ,OTE(F_XO1_01_HSD_FAIL_TO_RETRACT) ];
				RC: "Position Fault";
				N: [XIC(XO1_HSD.HOME_FLTR_SEAL) XIC(XO1_HSD.DIV_FLTR) ,XIO(XO1_HSD.HOME_FLTR_SEAL) XIO(XO1_HSD.DIV_FLTR) ]XIC(XO1_HSD.INT_MTR)XIO(XO1_HSD.FailedToRetract_TMR.EN)XIO(XO1_HSD.FailedToExtend_TMR.EN)TON(XO1_HSD.PositionFault_TMR,?,?);
				N: [XIC(XO1_HSD.PositionFault_TMR.DN) ,XIC(XO1_HSD.PositionFault_TMR.EN) XIO(XO1_HSD.XFER_CNTRL.EM) GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.XFER_FIFO[0].POS) ,XIC(F_XO1_01_HSD_UNKNOWN_POS) ]XIO(XO1_HSD.FAULT_RESET)[XIO(F_XO1_01_HSD_UNKNOWN_POS) OTE(XO1_HSD.POS_FLT_ONS) ,OTE(F_XO1_01_HSD_UNKNOWN_POS) ];
				N: [XIC(F_XO1_01_HSD_UNKNOWN_POS) ,XIC(F_XO1_01_HSD_FAIL_TO_RETRACT) ,XIC(F_XO1_01_HSD_FAIL_TO_EXTEND) ,XIC(F_XO1_01_HSD_FAULT) ]OTE(XO1_HSD.FAULT);
				RC: "Fault Reset. Do not reset diverter faults until Home Prox is made and RPB has been depressed.$N"
				    "$N"
				    "";
				N: XIC(XO1_HSD.FAULT)[XIO(F_XO1_01_HSD_NOT_IN_AUTO) [XIC(XO1_HSD.HOME_FLTR_SEAL) XIO(XO1_HSD.DIV_FLTR) ,XIC(XO1_HSD.DIV_FLTR) XIO(XO1_HSD.HOME_FLTR_SEAL) ] ,XIC(F_XO1_01_HSD_IP_DISC_OFF) ]OTE(XO1_HSD.RESET_RDY);
				N: XIC(I_CS_O4T_10_RPBA)XIC(XO1_HSD.RESET_RDY)OTE(XO1_HSD.FAULT_RESET);
				RC: "Destination Line Full. Typically used for indexing piers.$N"
				    "";
				N: XIC(INT.ALWAYS_FALSE)OTE(XO1_HSD.FULL);
				RC: "Removed Too Close Detection for Non-Tracked Diverter$N"
				    "==================================================Upstream Too Close Detection======================================================$N"
				    "The following rungs detect if two bags are too close together for either of them to be diverted. Each time a bag clears the too close detection photo-eye, the count is reset. If another bag hits the photoeye before the counter is done, the downstream bag is flagged as $'too close trailing$' and the upstream bag is flagged as $'too close leading$'. When each of the bags reach the decision point of the diverter, their too close status will be read and the diverter will not switch.$N"
				    "$N"
				    "";
				N: NOP();
				RC: "==================================================Paddle Area Clear======================================================$N"
				    "";
				N: XIC(O4T_10_BT.BT_PULSE)[OTU(XO1_HSD.Area_Clear_Cntrl.EN) ,BSL(XO1_HSD.Area_Clear_Reg[0],XO1_HSD.Area_Clear_Cntrl,O4T_10_PE2.FILT,?) ];
				N: MEQ(XO1_HSD.Area_Clear_Reg[2],XO1_HSDx.Area_Clear_Mask[2],0)MEQ(XO1_HSD.Area_Clear_Reg[1],XO1_HSDx.Area_Clear_Mask[1],0)MEQ(XO1_HSD.Area_Clear_Reg[0],XO1_HSDx.Area_Clear_Mask[0],0)OTE(XO1_HSD.Area_Clear);
				RC: "============================================Load bag into FIFO and determine when to Cycle HSD============================================$N"
				    "Each time a bag enters the tracking zone in front of the diverter, capture the ID.$N"
				    "";
				N: XIC(O4T_10_PE2.FILT_POS_XITN)NEQ(O4T_10A_TD.BAG_ID,0)[ADD(O4T_10A_TD.BT_CNT,XO1_HSDx.ACT_Const,XO1_HSD.ACT_FFL_DATA.POS) ,MOV(O4T_10A_TD.BAG_ID,XO1_HSD.ACT_FFL_DATA.BAG_ID) ,OTU(O4T_10A_TD.Bag_Data[XO1_HSD.ACT_FFL_DATA.BAG_ID].Diverted) ,FFL(XO1_HSD.ACT_FFL_DATA,XO1_HSD.ACT_FIFO[0],XO1_HSD.ACT_CNTRL,?,?) ];
				RC: "When the bag is at the activate position for the diverter, unload the next bag from the FIFO.";
				N: [XIC(O4T_10_MTR.CONV_RUN) GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.ACT_FIFO[0].POS) ,XIC(O4T_10_MTR.JAMMED) ,XIC(F_O4T_10_ENCODER_FAULT) ]XIO(XO1_HSD.ACT_CNTRL.EM)XIO(XO1_HSD.ACT_CNTRL.EU)EQU(XO1_HSD.ACT_FFU_DATA.BAG_ID,0)FFU(XO1_HSD.ACT_FIFO[0],XO1_HSD.ACT_FFU_DATA,XO1_HSD.ACT_CNTRL,?,?);
				N: XIC(XO1_HSD.ACT_CNTRL.EU)[LIM(O4T_10A_TD.Bag_Data_Low_Limit,XO1_HSD.ACT_FFU_DATA.BAG_ID,O4T_10A_TD.Bag_Data_High_Limit) XIO(O4T_10A_TD.Bag_Data[XO1_HSD.ACT_FFU_DATA.BAG_ID].Diverted) XIO(O4T_10_MTR.JAMMED) XIO(F_O4T_10_ENCODER_FAULT) OTE(XO1_HSD.ACT_ID_VALID) ,XIO(XO1_HSD.ACT_ID_VALID) CLR(XO1_HSD.ACT_FFU_DATA.BAG_ID) ];
				RC: "Alternating bit for use with the 50/50 divert override mode.";
				N: XIC(F_XO1_01_HSD_DIVERT_HALF)[XIC(XO1_HSD.ACT_ID_VALID) XIO(XO1_HSD.DIV_HALF_CNT) ,XIO(XO1_HSD.ACT_ID_VALID) XIC(XO1_HSD.DIV_HALF_CNT) ]OTE(XO1_HSD.DIV_HALF_CNT);
				RC: "Divert Decision$N"
				    "Determine if this bag is to be diverted";
				N: XIC(XO1_HSD.ACT_ID_VALID)XIC(F_XO1_01_HSD_DIVERT_ALL)MOV(XO1_HSDx.ID,O4T_10A_TD.Bag_Data[XO1_HSD.ACT_FFU_DATA.BAG_ID].Div_ID);
				RC: "Determine if the bag can be diverted as planned.$N"
				    "Set the reason code for UL reporting$N"
				    "";
				N: NOP();
				N: XIC(INT.ALWAYS_FALSE)XIC(XO1_HSD.ACT_ID_VALID)XIO(F_XO1_01_HSD_DIVERT_ALL)[XIC(XO1_HSD.HOME_FLTR_SEAL) ,]OTE(XO1_HSD.TooClose);
				N: XIC(XO1_HSD.ACT_ID_VALID)[MOV(MsgConst.Rson_DivAuto,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_DIVERT_HALF) MOV(MsgConst.Rson_DivHMIDivertHalf,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_DIVERT_ALL) MOV(MsgConst.Rson_DivHMIDivertAll,XO1_HSD.ACT_FFU_DATA.REASON) ];
				N: XIC(XO1_HSD.ACT_ID_VALID)[EQU(XO1_HSDx.ID,O4T_10A_TD.Bag_Data[XO1_HSD.ACT_FFU_DATA.BAG_ID].Div_ID) ,XIC(F_XO1_01_HSD_DIVERT_HALF) XIC(XO1_HSD.DIV_HALF_CNT) ][XIC(XO1_HSD.TooClose) MOV(MsgConst.Rson_DivTooClose,XO1_HSD.ACT_FFU_DATA.REASON) ,XIO(XO1_01_MTR.CONV_RUN) MOV(MsgConst.Rson_DivDestNotAvail,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(XO1_HSD.FULL) MOV(MsgConst.Rson_DivLnFull,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(XO1_01_MTR.E_STOP) MOV(MsgConst.Rson_DivEstop,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(XO1_01_MTR.JAMMED) MOV(MsgConst.Rson_DivLnJam,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_OUTSERV) MOV(MsgConst.Rson_DivLnOutServ,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_OUTSERV) MOV(MsgConst.Rson_DivHMIOutServ,XO1_HSD.ACT_FFU_DATA.REASON) ]OTE(XO1_HSD.Extended_Prohibit);
				N: XIC(XO1_HSD.ACT_ID_VALID)[XIO(XO1_HSD.INT_MTR) MOV(MsgConst.Rson_DivNotRunning,XO1_HSD.ACT_FFU_DATA.REASON) ,XIO(XO1_HSD.Area_Clear) MOV(MsgConst.Rson_DivTooClose,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_UNKNOWN_POS) MOV(MsgConst.Rson_DivPosFault,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_FAIL_TO_RETRACT) MOV(MsgConst.Rson_DivFailedToRet,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_FAIL_TO_EXTEND) MOV(MsgConst.Rson_DivFailedtoExt,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_FAULT) MOV(MsgConst.Rson_DivFaulted,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_NOT_IN_AUTO) MOV(MsgConst.Rson_DivNotAuto,XO1_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO1_01_HSD_IP_DISC_OFF) MOV(MsgConst.Rson_DivDisconnectOff,XO1_HSD.ACT_FFU_DATA.REASON) ]OTE(XO1_HSD.Cycle_Prohibit);
				RC: "Divert and retract requests.";
				N: [XIC(XO1_HSD.ACT_ID_VALID) [[XIO(F_XO1_01_HSD_DIVERT_HALF) EQU(XO1_HSDx.ID,O4T_10A_TD.Bag_Data[XO1_HSD.ACT_FFU_DATA.BAG_ID].Div_ID) ,XIC(F_XO1_01_HSD_DIVERT_HALF) XIC(XO1_HSD.DIV_HALF_CNT) ] XIO(XO1_HSD.Extended_Prohibit) ,XIC(F_XO1_01_HSD_DIVERT_ALL) ] XIO(XO1_HSD.Cycle_Prohibit) ,XIC(XO1_HSD.DIV_REQ) NEQ(XO1_HSD.ACT_FFU_DATA.BAG_ID,0) ]OTE(XO1_HSD.DIV_REQ);
				N: [XIC(XO1_HSD.ACT_ID_VALID) XIO(XO1_HSD.DIV_REQ) XIO(XO1_HSD.Cycle_Prohibit) ,XIC(XO1_HSD.RET_REQ) NEQ(XO1_HSD.ACT_FFU_DATA.BAG_ID,0) ]OTE(XO1_HSD.RET_REQ);
				RC: "Delayed Activation$N"
				    "-When the Conveyor is not at full speed$N"
				    "";
				N: XIC(XO1_HSD.ACT_ID_VALID)[MOV(O4T_10A_TD.BT_CNT,XO1_HSD.ACT_POINT) ,LES(XO1_HSD.RAMP_UP_TMR.ACC,XO1_HSDx.LowSpdTime) ADD(XO1_HSD.ACT_POINT,XO1_HSDx.LowSpdDelay,XO1_HSD.ACT_POINT) ,LIM(XO1_HSDx.LowSpdTime,XO1_HSD.RAMP_UP_TMR.ACC,XO1_HSDx.MedSpdTime) ADD(XO1_HSD.ACT_POINT,XO1_HSDx.MedSpdDelay,XO1_HSD.ACT_POINT) ];
				RC: "============================================Load Bag into FIFO and Determine When to Check if it Transferred Successfully============================================$N"
				    "This FIFO is used to create a delay to ensure that the diverter has time to move before the bag ID is transferred in tracking and to ensure messaging to the upper level is accurate. The setting for this delay (xxx.XFER_CONST) should be only slightly longer than it takes for the diverter to switch positions. In most cases this should only be a few pulses.";
				N: XIC(XO1_HSD.ACT_ID_VALID)[ADD(XO1_HSDx.XFER_Const,O4T_10A_TD.BT_CNT,XO1_HSD.ACT_FFU_DATA.POS) ,[CLR(XO1_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO1_01_HSD_DIVERT_ALL) MOV(1,XO1_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO1_01_HSD_DIVERT_HALF) MOV(2,XO1_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO1_01_HSD_OUTSERV) MOV(3,XO1_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO1_HSD_PROX_OVR) MOV(4,XO1_HSD.ACT_FFU_DATA.HMI_CNTRL) ] ,FFL(XO1_HSD.ACT_FFU_DATA,XO1_HSD.XFER_FIFO[0],XO1_HSD.XFER_CNTRL,?,?) ,CLR(XO1_HSD.ACT_FFU_DATA.BAG_ID) ];
				N: NEQ(XO1_HSD.ACT_FFU_DATA.BAG_ID,0)GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.ACT_POINT)OTE(XO1_HSD.ACTIVATE_ONS);
				RC: "Send the divert command to the diverter.";
				N: [[XIC(XO1_HSD.DIV_REQ) XIC(XO1_HSD.ACTIVATE_ONS) ,XIC(XO1_HSD.DIV_ALL_ONS) ] XIC(XO1_HSD.HOME_FLTR_SEAL) ,XIC(XO1_HSD.IM_ONS) XIC(XO1_HSD.LAST_POS_EXT) ]TOF(XO1_HSD.EXT_TRIG_TMR,?,?);
				N: XIC(XO1_HSD.EXT_TRIG_TMR.DN)[XIO(O_SD_XO1_EXT) OTE(XO1_HSD.DIV_REQ_ONS) ,OTE(O_SD_XO1_EXT) ];
				N: [[XIC(XO1_HSD.RET_REQ) XIC(XO1_HSD.ACTIVATE_ONS) ,XIC(XO1_HSD.INST_RET) ,XIC(XO1_HSD.DIV_0_ONS) ] XIC(XO1_HSD.DIV_FLTR) ,XIC(XO1_HSD.IM_ONS) XIO(XO1_HSD.LAST_POS_EXT) ]TOF(XO1_HSD.RET_TRIG_TMR,?,?);
				N: XIC(XO1_HSD.RET_TRIG_TMR.DN)[XIO(O_SD_XO1_RET) OTE(XO1_HSD.RET_REQ_ONS) ,OTE(O_SD_XO1_RET) ];
				RC: "If the diverter is in the middle of diverting a bag and the destination conveyor stops then stop the mainline conveyor as well, and vice versa.";
				N: XIO(XO1_HSD.HOME_FLTR_SEAL)XIO(XO1_HSD.FailedToRetract_TMR.TT)[XIO(XO1_HSD.XFER_CNTRL.EM) ,XIC(XO1_HSD.SYNC_RUN) XIO(XO1_01_PE2.FILT_NEG_XITN) ]OTE(XO1_HSD.SYNC_RUN);
				RC: "When the current transfer ID reaches the delay setpoint, unload the data to be processed.$N"
				    "If the diverter faults while actuating for this bag, unload it and send the message so the diverter fault can be included in the message";
				N: XIO(XO1_HSD.XFER_CNTRL.EM)[GEQ(O4T_10A_TD.BT_CNT,XO1_HSD.XFER_FIFO[0].POS) ,XIC(XO1_HSD.FAULT) ,XIC(O4T_10_MTR.JAMMED) ,XIC(F_O4T_10_ENCODER_FAULT) ]XIO(XO1_HSD.UNLD_XFER_ID)OTE(XO1_HSD.UNLD_XFER_ID);
				RC: "Unload a bag ID from the FIFO if the encoder pulse count reaches the transfer setting";
				N: XIC(XO1_HSD.UNLD_XFER_ID)XIO(XO1_HSD.XFER_CNTRL.EU)FFU(XO1_HSD.XFER_FIFO[0],XO1_HSD.XFER_FIFO_DATA,XO1_HSD.XFER_CNTRL,?,?);
				RC: "The Zone belt tach count must not be cleared while the diverter is tracking a bag";
				N: [XIO(XO1_HSD.ACT_CNTRL.EM) ,XIO(XO1_HSD.XFER_CNTRL.EM) ,NEQ(XO1_HSD.ACT_FFU_DATA.BAG_ID,0) ,XIO(XO1_HSD.Area_Clear) ]OTE(XO1_HSD.BT_DONT_CLEAR);
				RC: "Trigger the XFER_ID_VALID once data has been unloaded from the FIFO. The XFER_ID_VALID is treated as a one shot as the ID will be cleared on the next scan.";
				N: XIC(XO1_HSD.XFER_CNTRL.EU)LIM(O4T_10A_TD.Bag_Data_Low_Limit,XO1_HSD.XFER_FIFO_DATA.BAG_ID,O4T_10A_TD.Bag_Data_High_Limit)XIO(O4T_10_MTR.JAMMED)XIO(F_O4T_10_ENCODER_FAULT)OTE(XO1_HSD.XFER_ID_VALID);
				RC: "For the current Bag ID, determine where the bag went by evaluating the current position of the diverter.$N"
				    "";
				N: XIC(XO1_HSD.XFER_ID_VALID)[XIC(XO1_HSD.HOME_FLTR_SEAL) XIO(XO1_HSD.DIV_FLTR) OTE(XO1_HSD.BAG_NOT_DIVERTED) ,XIC(XO1_HSD.DIV_FLTR) XIO(XO1_HSD.HOME_FLTR_SEAL) OTE(XO1_HSD.BAG_DIVERTED) ,[XIO(XO1_HSD.HOME_FLTR_SEAL) XIO(XO1_HSD.DIV_FLTR) ,XIC(XO1_HSD.HOME_FLTR_SEAL) XIC(XO1_HSD.DIV_FLTR) ] OTE(XO1_HSD.BAG_ERROR) ];
				RC: "Set Event Code for the Bag$N"
				    "";
				N: XIC(XO1_HSD.XFER_ID_VALID)[XIC(XO1_HSD.BAG_DIVERTED) MOV(MsgConst.Event_Diverted,XO1_HSD.Event) ,XIC(XO1_HSD.BAG_NOT_DIVERTED) MOV(MsgConst.Event_DivStraight,XO1_HSD.Event) ,XIC(XO1_HSD.BAG_ERROR) MOV(MsgConst.Event_DivError,XO1_HSD.Event) ];
				RC: "Get reason code determined at the activation point.$N"
				    "Update it with any faults that came up since then.";
				N: XIC(XO1_HSD.XFER_ID_VALID)[MOV(XO1_HSD.ACT_FFU_DATA.REASON,XO1_HSD.Reason) ,XIO(XO1_HSD.INT_MTR) MOV(MsgConst.Rson_DivNotRunning,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_UNKNOWN_POS) MOV(MsgConst.Rson_DivPosFault,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_FAIL_TO_RETRACT) MOV(MsgConst.Rson_DivFailedToRet,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_FAIL_TO_EXTEND) MOV(MsgConst.Rson_DivFailedtoExt,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_FAULT) MOV(MsgConst.Rson_DivFaulted,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_NOT_IN_AUTO) MOV(MsgConst.Rson_DivNotAuto,XO1_HSD.Reason) ,XIC(F_XO1_01_HSD_IP_DISC_OFF) MOV(MsgConst.Rson_DivDisconnectOff,XO1_HSD.Reason) ];
				RC: "If the bag was routed to its originally defined destination a reason code of N/A will be sent to the Upper Level.";
				N: XIC(XO1_HSD.XFER_ID_VALID)[XIC(XO1_HSD.BAG_DIVERTED) EQU(O4T_10A_TD.Bag_Data[XO1_HSD.XFER_FIFO_DATA.BAG_ID].Div_ID,XO1_HSDx.ID) ,XIC(XO1_HSD.BAG_NOT_DIVERTED) NEQ(O4T_10A_TD.Bag_Data[XO1_HSD.XFER_FIFO_DATA.BAG_ID].Div_ID,XO1_HSDx.ID) ]OTE(XO1_HSD.Reason_NA);
				RC: "Send message to the Upper Level.";
				N: XIC(XO1_HSD.XFER_ID_VALID)[MOV(MsgConst.MsgID_Divert,MSG_TO_UL_Add.MSG_ID) ,MOV(XO1_HSD.XFER_FIFO_DATA.BAG_ID,MSG_TO_UL_Add.PLC_BAG_ID) ,MOV(0,MSG_TO_UL_Add.BHS_ID) ,MOV(XO1_HSDx.ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(XO1_HSD.Event,MSG_TO_UL_Add.EVENT_ID) ,MOV(XO1_HSD.Reason,MSG_TO_UL_Add.REASON_ID) ,XIC(XO1_HSD.Reason_NA) MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,COP(XO1_HSDx.HMI_STATE[XO1_HSD.ACT_FFU_DATA.HMI_CNTRL],MSG_TO_UL_Add.DEVICE_DATA,1) ,JSR(R_MSG_TO_UL_Add,0) ];
				RC: "============================================Motor Control for HSD============================================$N"
				    "$N"
				    "";
				N: XIO(XO1_HSD.E_STOP)XIC(O_SD_XO1_EN)XIO(F_XO1_01_HSD_FAIL_TO_RETRACT)XIO(F_XO1_01_HSD_FAIL_TO_EXTEND)XIO(F_XO1_01_HSD_UNKNOWN_POS)XIO(F_XO1_01_HSD_FAULT)XIO(F_XO1_01_HSD_NOT_IN_AUTO)XIO(F_XO1_01_HSD_IP_DISC_OFF)XIO(XO1_HSD.COMM)OTE(XO1_HSD.NO_FAULT);
				N: XIC(O4T.MTR_GRP.RUN_LATCH)XIC(XO1_HSD.NO_FAULT)TON(XO1_HSD.DELAY_START_TMR,?,?);
				N: XIC(XO1_HSD.DELAY_START_TMR.DN)[XIO(XO1_HSD.INT_MTR) OTE(XO1_HSD.IM_ONS) ,OTE(XO1_HSD.INT_MTR) ];
				RC: "If there have been no bags in the general area of the diverter for a certain amount of time, then the diverter should retract.";
				N: XIC(XO1_HSD.Area_Clear)XIC(XO1_HSD.ACT_CNTRL.EM)XIO(F_XO1_01_HSD_NOT_IN_AUTO)XIO(F_XO1_01_HSD_DIVERT_ALL)XIO(XO1_HSD.HOME_FLTR_SEAL)TON(XO1_HSD.Auto_Retract_TMR,?,?);
				N: XIC(XO1_HSD.DIV_FLTR)XIC(XO1_HSD.Auto_Retract_TMR.DN)[XIO(XO1_HSD.INST_RET_SB) OTE(XO1_HSD.INST_RET) ,OTE(XO1_HSD.INST_RET_SB) ];
				RC: "Active Bag Detection for the HSD$N"
				    "Only run the HSD$'s paddle belt for a short time while bags are actively flowing on the mainline.";
				N: [XIC(O_SD_XO1_EXT) ,XIC(XO1_HSD.DIV_REQ) ]RES(XO1_HSD.PDL_RUN_TMR);
				N: [XIC(O4T_10_MTR.CONV_RUN) ,XIC(O_SD_XO1_RET) MOV(XO1_HSD.PDL_RUN_TMR.PRE,XO1_HSD.PDL_RUN_TMR.ACC) ]RTO(XO1_HSD.PDL_RUN_TMR,?,?);
				N: XIC(XO1_HSD.INT_MTR)XIC(O4T_10_MTR.CONV_RUN)XIO(XO1_HSD.PDL_RUN_TMR.DN)OTE(O_SD_XO1_RUN);
				N: XIO(XO1_HSD.E_STOP)XIO(O_SD_XO1_RES)XIC(XO1_HSD.OFF_TMR.DN)OTE(O_SD_XO1_EN);
				N: XIO(O_SD_XO1_EN)[XIO(XO1_HSD.CON_ONS) RES(XO1_HSD.OFF_TMR) ,OTE(XO1_HSD.CON_ONS) ];
				N: TON(XO1_HSD.OFF_TMR,?,?);
				RC: "If the diverter is not in the home position and the diverter has a fault then stop the mainline.";
				N: [XIO(XO1_HSD.HOME_FLTR_SEAL) ,XIC(XO1_HSD.DIV_FLTR) ,XIC(XO1_HSD.HOME_FLTR_SEAL) XIC(F_XO1_01_HSD_DIVERT_ALL) ,XIC(XO1_HSD.ML_STOP_FLT) ]XIO(XO1_HSD.INT_MTR)XIC(O4T.MTR_GRP.RUN_LATCH)OTE(XO1_HSD.ML_STOP_FLT);
				RC: "Monitor the conveyor$'s acceleration to approximate current speed";
				N: XIC(O4T_10_MTR.CONV_RUN)TON(XO1_HSD.RAMP_UP_TMR,?,?);
				RC: "============================================Statistic Counters==============================================$N"
				    "";
				N: XIC(XO1_HSD.XFER_ID_VALID)[EQU(MsgConst.Rson_DivTooClose,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivNotAuto,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivDisconnectOff,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivPosFault,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivFailedToRet,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivFailedtoExt,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivFaulted,XO1_HSD.Reason) ]ADD(1,S_XO1_01_HSD_FLTS,S_XO1_01_HSD_FLTS);
				N: XIC(XO1_HSD.XFER_ID_VALID)[EQU(MsgConst.Rson_DivDestNotAvail,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivLnFull,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivEstop,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivLnJam,XO1_HSD.Reason) ,EQU(MsgConst.Rson_DivLnOutServ,XO1_HSD.Reason) ]ADD(1,S_XO1_01_HSD_LINE_FLTS,S_XO1_01_HSD_LINE_FLTS);
				N: [XIC(XO1_HSD.DIV_REQ_ONS) ,XIC(XO1_HSD.RET_REQ_ONS) ]ADD(1,S_XO1_01_HSD_CYCLS,S_XO1_01_HSD_CYCLS);
				N: XIC(XO1_HSD.BAG_DIVERTED)ADD(1,S_XO1_01_HSD_VERIFIED_DIV,S_XO1_01_HSD_VERIFIED_DIV);
				RC: "============================================HMI Override Control============================================$N"
				    "$N"
				    "";
				N: [XIC(HMI_XO1_HSD_OUTSERV_REQ) ,XIC(HMI_XO1_HSD_PROX_OVR_REQ) OTE(F_XO1_HSD_PROX_OVR) ]OTE(F_XO1_01_HSD_OUTSERV);
				N: XIC(HMI_XO1_HSD_DIVERT_HALF_REQ)OTE(F_XO1_01_HSD_DIVERT_HALF);
				N: XIC(HMI_XO1_HSD_DIVERT_ALL_REQ)OTE(F_XO1_01_HSD_DIVERT_ALL);
				N: XIC(F_XO1_01_HSD_OUTSERV)[XIC(XO1_HSD.Area_Clear) XIC(XO1_HSD.INT_MTR) XIO(O4T_10_PE2.FILT) ,XIC(XO1_HSD.DIV_0_ONS_SB) ][XIO(XO1_HSD.DIV_0_ONS_SB) OTE(XO1_HSD.DIV_0_ONS) ,OTE(XO1_HSD.DIV_0_ONS_SB) ];
				N: XIC(F_XO1_01_HSD_DIVERT_ALL)[XIC(XO1_HSD.Area_Clear) XIC(XO1_HSD.INT_MTR) XIO(O4T_10_PE2.FILT) ,XIC(XO1_HSD.DIV_ALL_ONS_SB) ][XIO(XO1_HSD.DIV_ALL_ONS_SB) OTE(XO1_HSD.DIV_ALL_ONS) ,OTE(XO1_HSD.DIV_ALL_ONS_SB) ];
				RC: "============================================HMI Alarms below this point.============================================$N"
				    "";
				N: XIO(F_XO1_01_HSD_IP_DISC_OFF)XIO(XO1_HSD.E_STOP)TON(XO1_HSD.EN_DLY,?,?);
				N: XIO(XO1_HSD.COMM)[XIC(I_SD_XO1_FLT) ,XIO(I_SD_XO1_SLMR) ,XIO(I_SD_XO1_CUR) ]TON(XO1_HSD.FAULT_TMR,?,?);
				N: XIC(XO1_HSD.EN_DLY.DN)XIC(XO1_HSD.FAULT_TMR.DN)XIC(O_SD_XO1_EN)XIO(F_XO1_01_HSD_NOT_IN_AUTO)XIO(F_XO1_01_HSD_IP_DISC_OFF)[XIO(F_XO1_01_HSD_FAULT) OTE(XO1_HSD.FAULT_ONS) ,OTE(F_XO1_01_HSD_FAULT) ];
				N: XIO(XO1_HSD.COMM)XIO(I_SD_XO1_DS)[XIO(F_XO1_01_HSD_IP_DISC_OFF) OTE(XO1_HSD.IP_DISC_ONS) ,OTE(F_XO1_01_HSD_IP_DISC_OFF) ];
				N: XIO(XO1_HSD.COMM)XIO(I_SD_XO1_AUTO)OTE(F_XO1_01_HSD_NOT_IN_AUTO);
				N: XIC(I_SD_XO1_FLT)XIC(I_CS_O4T_10_RPBA)OTE(O_SD_XO1_RES);
				RC: "============================================HMI Status below this point.============================================$N"
				    "";
				N: NOP();
				N: [XIC(XO1_HSD.INT_MTR) XIO(O_SD_XO1_RUN) ,XIC(XO1_HSD.DELAY_START_TMR.TT) ,XIC(XO1_HSD.E_STOPPED_RES) ]OTE(XO1_HSD.Idle);
				N: XIC(XO1_HSD.INT_MTR)XIC(O_SD_XO1_RUN)OTE(XO1_HSD.RUNNING);
				N: XIO(O4T.MTR_GRP.RUN_LATCH)OTE(XO1_HSD.AUTO_STOPPED);
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(XO1_HSD.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(XO1_HSD.E_STOPPED_RES);
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(XO1_HSD.COMM);
				N: XIC(O4T.STATUS.FIRE_ALM)OTE(XO1_HSD.FIRE_ALM);
				RC: "This rung is used to set the HMI status of the HSD$N"
				    "";
				N: [CLR(XO1_HSD.G) ,XIC(XO1_HSD.RUNNING) MOV(Status.DivRunning,XO1_HSD.G) ,XIC(XO1_HSD.FULL) MOV(Status.DivFull,XO1_HSD.G) ,XIC(XO1_HSD.AUTO_STOPPED) MOV(Status.DivTimeOut,XO1_HSD.G) ,XIC(XO1_HSD.Idle) MOV(Status.DivIdle,XO1_HSD.G) ,XIC(F_XO1_01_HSD_NOT_IN_AUTO) MOV(Status.DivNotAuto,XO1_HSD.G) ,[XIC(F_XO1_01_HSD_DIVERT_ALL) ,XIC(F_XO1_01_HSD_DIVERT_HALF) ] MOV(Status.DivOverRide,XO1_HSD.G) ,XIC(F_XO1_01_HSD_IP_DISC_OFF) MOV(Status.DivDisc,XO1_HSD.G) ,XIC(F_XO1_01_HSD_UNKNOWN_POS) MOV(Status.DivPositionFault,XO1_HSD.G) ,XIC(F_XO1_01_HSD_FAIL_TO_EXTEND) MOV(Status.DivFailExt,XO1_HSD.G) ,XIC(F_XO1_01_HSD_FAIL_TO_RETRACT) MOV(Status.DivFailRet,XO1_HSD.G) ,XIC(F_XO1_01_HSD_FAULT) MOV(Status.DivFault,XO1_HSD.G) ,XIC(XO1_HSD.FIRE_ALM) MOV(Status.DivFireAlarm,XO1_HSD.G) ,XIC(XO1_HSD.E_STOP) XIO(XO1_HSD.E_STOPPED_RES) MOV(Status.DivEStop,XO1_HSD.G) ,XIC(F_XO1_01_HSD_OUTSERV) MOV(Status.DivOutOfServ,XO1_HSD.G) ,XIC(F_XO1_HSD_PROX_OVR) MOV(Status.DivProxOverride,XO1_HSD.G) ,XIC(XO1_HSD.COMM) MOV(Status.DivCommFault,XO1_HSD.G) ,MOV(XO1_HSD.G,G_XO1_01_HSD_STS) ];
				RC: "This rung is used to set the Position of the HSD$N"
				    "";
				N: [XIC(XO1_HSD.HOME_FLTR_SEAL) MOV(Status.DivPOShome,XO1_HSD.P) ,XIC(XO1_HSD.DIV_FLTR) MOV(Status.DivPOSdivert,XO1_HSD.P) ,XIO(XO1_HSD.HOME_FLTR_SEAL) XIO(XO1_HSD.DIV_FLTR) MOV(Status.DivPosNotHomeOrExt,XO1_HSD.P) ,XIC(XO1_HSD.HOME_FLTR_SEAL) XIC(XO1_HSD.DIV_FLTR) MOV(Status.DivPosHomeAndExt,XO1_HSD.P) ,MOV(XO1_HSD.P,G_XO1_01_HSD_POS) ];
		END_ROUTINE

		ROUTINE XO1_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO1_03_MTR.CONV_RUN)RTO(XO1_03_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO1_01_RPBA) XIC(XO1_03_PE.JAM_TMR.DN) ,XIO(XO1_03_PE.JAM_TMR.DN) ]XIC(I_PE_XO1_03)RES(XO1_03_PE.JAM_TMR);
				N: XIC(XO1_03_PE.JAM_TMR.DN)[XIO(F_XO1_01_PE2_JAMMED) [ADD(S_XO1_01_PE2_JAM,1,S_XO1_01_PE2_JAM) ,OTE(XO1_03_PE.JAM_ONS) ] ,OTE(F_XO1_01_PE2_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO1_02_MTR.CONV_RUN)RTO(XO1_02_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO1_01_RPBA) XIC(XO1_02_PE.JAM_TMR.DN) ,XIO(XO1_02_PE.JAM_TMR.DN) ]XIC(I_PE_XO1_02)RES(XO1_02_PE.JAM_TMR);
				N: XIC(XO1_02_PE.JAM_TMR.DN)[XIO(F_XO1_02_PE_JAMMED) [ADD(S_XO1_02_PE_JAM,1,S_XO1_02_PE_JAM) ,OTE(XO1_02_PE.JAM_ONS) ] ,OTE(F_XO1_02_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO1_01_MTR.CONV_RUN)RTO(XO1_01_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO1_01_RPBA) XIC(XO1_01_PE.JAM_TMR.DN) ,XIO(XO1_01_PE.JAM_TMR.DN) ]XIC(I_PE1_XO1_01)RES(XO1_01_PE.JAM_TMR);
				N: XIC(XO1_01_PE.JAM_TMR.DN)[XIO(F_O4T_05_PE_JAMMED) [ADD(S_O4T_05_PE_JAM,1,S_O4T_05_PE_JAM) ,OTE(XO1_01_PE.JAM_ONS) ] ,OTE(F_O4T_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO1_01_MTR.CONV_RUN)RTO(XO1_01_PE2.JAM_TMR,?,?);
				N: [XIC(I_CS_XO1_01_RPBA) XIC(XO1_01_PE2.JAM_TMR.DN) ,XIO(XO1_01_PE2.JAM_TMR.DN) ]XIC(I_PE2_XO1_01)RES(XO1_01_PE2.JAM_TMR);
				N: XIC(XO1_01_PE2.JAM_TMR.DN)[XIO(F_XO1_01_PE2_JAMMED) [ADD(S_XO1_01_PE2_JAM,1,S_XO1_01_PE2_JAM) ,OTE(XO1_01_PE2.JAM_ONS) ] ,OTE(F_XO1_01_PE2_JAMMED) ];
		END_ROUTINE

		ROUTINE XO1_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_02_SPBG) ,XIC(O4T.MTR_GRP.START_DS) ,AFI() ]OTE(XO1.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(XO1_03_MTR.CONV_RUN)XIC(XO1_02_MTR.CONV_RUN)XIC(XO1_01_MTR.CONV_RUN)OTE(XO1.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_XO1_03) ,XIO(I_PE_XO1_02) ,XIO(I_PE1_XO1_01) ,XIO(I_PE2_XO1_01) ,AFI() ]OTE(XO1.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(XO1.MTR_GRP.START) ,XIC(XO1.MTR_GRP.PEs) XIO(XO1.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(XO1.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(XO1.MTR_GRP.RUN_LATCH)XIC(XO1.MTR_GRP.PEs)OTE(XO1.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(XO1.MTR_GRP.RUN_EXPAND)RTO(XO1.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(XO1.MTR_GRP.START) ,XIC(XO1.MTR_GRP.RUN_LATCH) ]XIO(XO1.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(XO1.STATUS.FIRE_ALM)OTE(XO1.MTR_GRP.RUN_LATCH);
				RC: "Motor XO1_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_BM1_34_MSD_OFF)OTE(XO1_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO1_03_MTR.E_STOP)[XIC(XO1_03_VFD.READY) XIO(XO1_03_MTR.JAMMED) ,XIC(F_XO1_03_OVRIDE) ]XIO(F_XO1_03_MSD_OFF)XIO(F_XO1_03_OUTSERV)XIO(XO1_03_MTR.COMM)OTE(XO1_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO1.MTR_GRP.RUN_LATCH) ,XIC(F_XO1_03_OVRIDE) ]XIC(XO1_03_MTR.NO_FAULT)TON(XO1_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO1_03_MTR.IM_TMR.DN)[XIO(XO1_03_MTR.INTL_MTR) OTE(XO1_03_MTR.IM_ONS) ,OTE(XO1_03_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO1_03_PE.FILT_NEG_XITN)RES(XO1_03_MTR.T2H_SPACE_TMR);
				N: XIC(BM1_34_MTR.CONV_RUN)RTO(XO1_03_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO1_03_PE.POS_XITN) XIC(XO1_03_MTR.INTL_MTR) ,XIC(XO1_03_MTR.T2H_SPACE) ]XIO(XO1_03_MTR.T2H_SPACE_TMR.DN)OTE(XO1_03_MTR.T2H_SPACE);
				N: XIC(XO1_03_MTR.T2H_SPACE)OTE(XO1_03_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(BM1_34_MTR.ON_TMR.DN) XIC(XO1_03_MTR.OFF_TMR.DN) ,XIO(BM1_34_MTR.IM_ONS) XIC(XO1_03_MTR.IM_ONS) ,XIC(XO1_03_MTR.ANTI_CASC) XIC(I_PE_XO1_03) ]OTE(XO1_03_MTR.START_EN);
				N: [XIO(BM1_34_MTR.ON_TMR.DN) XIO(I_PE_XO1_03) ,XIO(XO1_03_MTR.ANTI_CASC) XIC(XO1_03_MTR.SPACE) ]OTE(XO1_03_MTR.STOP);
				N: XIC(XO1_03_MTR.INTL_MTR)[[XIC(XO1_03_MTR.START_EN) ,XIC(XO1_03_MTR.CONV_RUN) ] XIO(XO1_03_MTR.STOP) ,XIC(F_XO1_03_OVRIDE) ][OTE(XO1_03_MTR.CONV_RUN) ,OTE(O_VFD_XO1_03_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO1_03_MTR.CONV_RUN)TON(XO1_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO1_03_MTR.CONV_RUN)TON(XO1_03_MTR.OFF_TMR,?,?);
				RC: "Motor XO1_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO1_03_MSD_OFF)OTE(XO1_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO1_02_MTR.E_STOP)[XIC(XO1_02_VFD.READY) XIO(XO1_02_MTR.JAMMED) ,XIC(F_XO1_02_OVRIDE) ]XIO(F_XO1_02_MSD_OFF)XIO(F_XO1_02_OUTSERV)XIO(XO1_02_MTR.COMM)OTE(XO1_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO1.MTR_GRP.RUN_LATCH) ,XIC(F_XO1_02_OVRIDE) ]XIC(XO1_02_MTR.NO_FAULT)TON(XO1_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO1_02_MTR.IM_TMR.DN)[XIO(XO1_02_MTR.INTL_MTR) OTE(XO1_02_MTR.IM_ONS) ,OTE(XO1_02_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO1_02_PE.FILT_NEG_XITN)RES(XO1_02_MTR.T2H_SPACE_TMR);
				N: XIC(XO1_03_MTR.CONV_RUN)RTO(XO1_02_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO1_02_PE.POS_XITN) XIC(XO1_02_MTR.INTL_MTR) ,XIC(XO1_02_MTR.T2H_SPACE) ]XIO(XO1_02_MTR.T2H_SPACE_TMR.DN)OTE(XO1_02_MTR.T2H_SPACE);
				N: XIC(XO1_02_MTR.T2H_SPACE)OTE(XO1_02_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(XO1_03_MTR.ON_TMR.DN) XIC(XO1_02_MTR.OFF_TMR.DN) ,XIO(XO1_03_MTR.IM_ONS) XIC(XO1_02_MTR.IM_ONS) ,XIC(XO1_02_MTR.ANTI_CASC) XIC(I_PE_XO1_02) ]OTE(XO1_02_MTR.START_EN);
				N: [XIO(XO1_03_MTR.ON_TMR.DN) XIO(I_PE_XO1_02) ,XIO(XO1_02_MTR.ANTI_CASC) XIC(XO1_02_MTR.SPACE) ]OTE(XO1_02_MTR.STOP);
				N: XIC(XO1_02_MTR.INTL_MTR)[[XIC(XO1_02_MTR.START_EN) ,XIC(XO1_02_MTR.CONV_RUN) ] XIO(XO1_02_MTR.STOP) ,XIC(F_XO1_02_OVRIDE) ][OTE(XO1_02_MTR.CONV_RUN) ,OTE(O_VFD_XO1_02_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO1_02_MTR.CONV_RUN)TON(XO1_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO1_02_MTR.CONV_RUN)TON(XO1_02_MTR.OFF_TMR,?,?);
				RC: "Motor XO1_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO1_02_MSD_OFF)OTE(XO1_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO1_01_MTR.E_STOP)[XIC(XO1_01_VFD.READY) XIO(XO1_01_MTR.JAMMED) ,XIC(F_XO1_01_OVRIDE) ]XIO(F_XO1_01_MSD_OFF)XIO(F_XO1_01_OUTSERV)XIO(XO1_01_MTR.COMM)OTE(XO1_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO1.MTR_GRP.RUN_LATCH) ,XIC(F_XO1_01_OVRIDE) ]XIC(XO1_01_MTR.NO_FAULT)TON(XO1_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO1_01_MTR.IM_TMR.DN)[XIO(XO1_01_MTR.INTL_MTR) OTE(XO1_01_MTR.IM_ONS) ,OTE(XO1_01_MTR.INTL_MTR) ];
				RC: "Conveyor Running.";
				N: [XIC(XO1_02_MTR.ON_TMR.DN) XIC(XO1_01_MTR.OFF_TMR.DN) ,XIO(XO1_02_MTR.IM_ONS) XIC(XO1_01_MTR.IM_ONS) ,XIC(XO1_01_MTR.ANTI_CASC) XIC(I_PE1_XO1_01) ]OTE(XO1_01_MTR.START_EN);
				N: XIO(XO1_02_MTR.ON_TMR.DN)XIO(I_PE1_XO1_01)OTE(XO1_01_MTR.STOP);
				N: XIC(XO1_01_MTR.INTL_MTR)[[XIO(XO1_HSD.SYNC_RUN) [XIC(XO1_01_MTR.START_EN) ,XIC(XO1_01_MTR.CONV_RUN) ] ,XIC(XO1_HSD.SYNC_RUN) XIO(O4T_10_MTR.STOP) XIC(O4T_10_MTR.INTL_MTR) ] XIO(XO1_01_MTR.STOP) ,XIC(F_XO1_01_OVRIDE) ][OTE(XO1_01_MTR.CONV_RUN) ,OTE(O_VFD_XO1_01_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO1_01_MTR.CONV_RUN)TON(XO1_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO1_01_MTR.CONV_RUN)TON(XO1_01_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE XO1_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(XO1_03_MTR.COMM)[[XIO(I_PE_XO1_03) ,XIC(XO1_03_PE.TOF.DN) ] TON(XO1_03_PE.TON,?,?) ,XIO(I_PE_XO1_03) XIC(XO1_03_PE.TON.DN) TOF(XO1_03_PE.TOF,?,?) ,XIC(XO1_03_PE.TOF.DN) OTE(XO1_03_PE.FILT) ];
				N: XIC(XO1_03_PE.FILT)[XIO(XO1_03_PE.FILT_POS_XITN_MEM) OTE(XO1_03_PE.FILT_POS_XITN) ,OTE(XO1_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO1_03_PE.FILT)[XIO(XO1_03_PE.FILT_NEG_XITN_MEM) OTE(XO1_03_PE.FILT_NEG_XITN) ,OTE(XO1_03_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO1_03)[XIO(XO1_03_PE.POS_XITN_MEM) OTE(XO1_03_PE.POS_XITN) ,OTE(XO1_03_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO1_02_MTR.COMM)[[XIO(I_PE_XO1_02) ,XIC(XO1_02_PE.TOF.DN) ] TON(XO1_02_PE.TON,?,?) ,XIO(I_PE_XO1_02) XIC(XO1_02_PE.TON.DN) TOF(XO1_02_PE.TOF,?,?) ,XIC(XO1_02_PE.TOF.DN) OTE(XO1_02_PE.FILT) ];
				N: XIC(XO1_02_PE.FILT)[XIO(XO1_02_PE.FILT_POS_XITN_MEM) OTE(XO1_02_PE.FILT_POS_XITN) ,OTE(XO1_02_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO1_02_PE.FILT)[XIO(XO1_02_PE.FILT_NEG_XITN_MEM) OTE(XO1_02_PE.FILT_NEG_XITN) ,OTE(XO1_02_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO1_02)[XIO(XO1_02_PE.POS_XITN_MEM) OTE(XO1_02_PE.POS_XITN) ,OTE(XO1_02_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO1_01_MTR.COMM)[[XIO(I_PE1_XO1_01) ,XIC(XO1_01_PE.TOF.DN) ] TON(XO1_01_PE.TON,?,?) ,XIO(I_PE1_XO1_01) XIC(XO1_01_PE.TON.DN) TOF(XO1_01_PE.TOF,?,?) ,XIC(XO1_01_PE.TOF.DN) OTE(XO1_01_PE.FILT) ];
				N: XIC(XO1_01_PE.FILT)[XIO(XO1_01_PE.FILT_POS_XITN_MEM) OTE(XO1_01_PE.FILT_POS_XITN) ,OTE(XO1_01_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO1_01_PE.FILT)[XIO(XO1_01_PE.FILT_NEG_XITN_MEM) OTE(XO1_01_PE.FILT_NEG_XITN) ,OTE(XO1_01_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO1_01_MTR.COMM)[[XIO(I_PE2_XO1_01) ,XIC(XO1_01_PE2.TOF.DN) ] TON(XO1_01_PE2.TON,?,?) ,XIO(I_PE2_XO1_01) XIC(XO1_01_PE2.TON.DN) TOF(XO1_01_PE2.TOF,?,?) ,XIC(XO1_01_PE2.TOF.DN) OTE(XO1_01_PE2.FILT) ];
				N: XIC(XO1_01_PE2.FILT)[XIO(XO1_01_PE2.FILT_POS_XITN_MEM) OTE(XO1_01_PE2.FILT_POS_XITN) ,OTE(XO1_01_PE2.FILT_POS_XITN_MEM) ];
				N: XIO(XO1_01_PE2.FILT)[XIO(XO1_01_PE2.FILT_NEG_XITN_MEM) OTE(XO1_01_PE2.FILT_NEG_XITN) ,OTE(XO1_01_PE2.FILT_NEG_XITN_MEM) ];
		END_ROUTINE

		ROUTINE XO1_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(XO1_03_MTR.COMM);
				N: XIC(O_VFD_XO1_03_FWD)XIC(XO1_03_MTR.CONV_RUN)OTE(XO1_03_MTR.RUNNING);
				N: XIC(XO1_03_VFD.FAULTED)[XIO(F_XO1_03_VFD_FAULT) OTE(XO1_03_VFD.FAULT_ONS) ,OTE(F_XO1_03_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO1_03_MOL);
				N: XIO(I_MSD_XO1_03)XIO(XO1_03_MTR.COMM)[XIO(F_XO1_03_MSD_OFF) OTE(XO1_03_MTR.MSD_ONS) ,OTE(F_XO1_03_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO1_03_CTCTR_FAULT) OTE(XO1_03_MTR.MS_FLT_ONS) ,OTE(F_XO1_03_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(XO1_03_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(XO1_03_MTR.E_STOP_RES);
				N: XIC(XO1.STATUS.FIRE_ALM)OTE(XO1_03_MTR.FIRE_ALM);
				N: XIO(XO1_03_MTR.CONV_RUN)XIC(XO1_03_MTR.INTL_MTR)OTE(XO1_03_MTR.CASC);
				N: XIO(XO1.MTR_GRP.RUN_LATCH)OTE(XO1_03_MTR.AUTO_STOP);
				N: XIC(HMI_XO1_03_OVRIDE_REQ)[XIO(F_XO1_03_OVRIDE) OTE(XO1_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO1_03_OVRIDE) ];
				N: XIC(HMI_XO1_03_OUTSERV_REQ)[XIO(F_XO1_03_OUTSERV) OTE(XO1_03_MTR.OOS_ONS) ,OTE(F_XO1_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO1_03_MTR.MB_JAMMED);
				N: [XIC(F_XO1_01_PE2_JAMMED) ,XIC(F_XO1_02_PE_JAMMED) ,XIC(XO1_03_MTR.MB_JAMMED) ,AFI() ]OTE(XO1_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(XO1_02_MTR.COMM);
				N: XIC(O_VFD_XO1_02_FWD)XIC(XO1_02_MTR.CONV_RUN)OTE(XO1_02_MTR.RUNNING);
				N: XIC(XO1_02_VFD.FAULTED)[XIO(F_XO1_02_VFD_FAULT) OTE(XO1_02_VFD.FAULT_ONS) ,OTE(F_XO1_02_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO1_02_MOL);
				N: XIO(I_MSD_XO1_02)XIO(XO1_02_MTR.COMM)[XIO(F_XO1_02_MSD_OFF) OTE(XO1_02_MTR.MSD_ONS) ,OTE(F_XO1_02_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO1_02_CTCTR_FAULT) OTE(XO1_02_MTR.MS_FLT_ONS) ,OTE(F_XO1_02_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(XO1_02_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(XO1_02_MTR.E_STOP_RES);
				N: XIC(XO1.STATUS.FIRE_ALM)OTE(XO1_02_MTR.FIRE_ALM);
				N: XIO(XO1_02_MTR.CONV_RUN)XIC(XO1_02_MTR.INTL_MTR)OTE(XO1_02_MTR.CASC);
				N: XIO(XO1.MTR_GRP.RUN_LATCH)OTE(XO1_02_MTR.AUTO_STOP);
				N: XIC(HMI_XO1_02_OVRIDE_REQ)[XIO(F_XO1_02_OVRIDE) OTE(XO1_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO1_02_OVRIDE) ];
				N: XIC(HMI_XO1_02_OUTSERV_REQ)[XIO(F_XO1_02_OUTSERV) OTE(XO1_02_MTR.OOS_ONS) ,OTE(F_XO1_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO1_02_MTR.MB_JAMMED);
				N: [XIC(F_XO1_02_PE_JAMMED) ,XIC(XO1_02_MTR.MB_JAMMED) ,AFI() ]OTE(XO1_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_02_RK01_S00_COMM) ,XIC(F_MCP_02_RK02_S00_COMM) ,AFI() ]OTE(XO1_01_MTR.COMM);
				N: XIC(O_VFD_XO1_01_FWD)XIC(XO1_01_MTR.CONV_RUN)OTE(XO1_01_MTR.RUNNING);
				N: XIC(XO1_01_VFD.FAULTED)[XIO(F_XO1_01_VFD_FAULT) OTE(XO1_01_VFD.FAULT_ONS) ,OTE(F_XO1_01_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO1_01_MOL);
				N: XIO(I_MSD_XO1_01)XIO(XO1_01_MTR.COMM)[XIO(F_XO1_01_MSD_OFF) OTE(XO1_01_MTR.MSD_ONS) ,OTE(F_XO1_01_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO1_01_CTCTR_FAULT) OTE(XO1_01_MTR.MS_FLT_ONS) ,OTE(F_XO1_01_CTCTR_FAULT) ];
				N: [XIO(EZ_30200.Zone_OK) ,XIO(EZ_30203.Zone_OK) ,AFI() ]OTE(XO1_01_MTR.E_STOP);
				N: [XIC(EZ_30200.Zone_RES) ,XIC(EZ_30203.Zone_RES) ,AFI() ]OTE(XO1_01_MTR.E_STOP_RES);
				N: XIC(XO1.STATUS.FIRE_ALM)OTE(XO1_01_MTR.FIRE_ALM);
				N: XIO(XO1_01_MTR.CONV_RUN)XIC(XO1_01_MTR.INTL_MTR)OTE(XO1_01_MTR.CASC);
				N: XIO(XO1.MTR_GRP.RUN_LATCH)OTE(XO1_01_MTR.AUTO_STOP);
				N: XIC(HMI_XO1_01_OVRIDE_REQ)[XIO(F_XO1_01_OVRIDE) OTE(XO1_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO1_01_OVRIDE) ];
				N: XIC(HMI_XO1_01_OUTSERV_REQ)[XIO(F_XO1_01_OUTSERV) OTE(XO1_01_MTR.OOS_ONS) ,OTE(F_XO1_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO1_01_MTR.MB_JAMMED);
				N: [XIC(XO1_01_MTR.MB_JAMMED) ,AFI() ]OTE(XO1_01_MTR.JAMMED);
		END_ROUTINE

		ROUTINE XO1_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor XO1_03 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO1_03_MTR.COMM)XIO(XO1_03_MTR.E_STOP)XIO(F_XO1_03_MSD_OFF)TON(XO1_03_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO1_03_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO1_03_RDY) OTE(XO1_03_VFD.FAULTED) ,XIO(XO1_03_VFD.FAULTED) OTE(XO1_03_VFD.READY) ];
				RC: "Motor XO1_02 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO1_02_MTR.COMM)XIO(XO1_02_MTR.E_STOP)XIO(F_XO1_02_MSD_OFF)TON(XO1_02_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO1_02_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO1_02_RDY) OTE(XO1_02_VFD.FAULTED) ,XIO(XO1_02_VFD.FAULTED) OTE(XO1_02_VFD.READY) ];
				RC: "Motor XO1_01 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO1_01_MTR.COMM)XIO(XO1_01_MTR.E_STOP)XIO(F_XO1_01_MSD_OFF)TON(XO1_01_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO1_01_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO1_01_RDY) OTE(XO1_01_VFD.FAULTED) ,XIO(XO1_01_VFD.FAULTED) OTE(XO1_01_VFD.READY) ];
		END_ROUTINE

		ROUTINE XO2_05_MRG 
				RC: "Merge Routine - Fixed Gap size$N"
				    "*********************************************$N"
				    "$N"
				    "This rung will fill the mainline bit shift register with a 1 when the merge inhibit photoeye is blocked.";
				N: XIO(I_PE_C4_08)OTL(XO2_05_MRG.MainLineBS[1].15);
				RC: "For each mainline belt tach pulse do the following:$N"
				    "Bit shift right the mainline bit shift register$N"
				    "Increment the leading gap counter accumulator";
				N: XIC(C4_09_BT.BT_PULSE)[OTU(XO2_05_MRG.MainLineBScntrl.EN) ,BSR(XO2_05_MRG.MainLineBS[0],XO2_05_MRG.MainLineBScntrl,INT.ALWAYS_FALSE,?) ,XIO(XO2_05_MRG.Lead_Gap_Acc.6) ADD(1,XO2_05_MRG.Lead_Gap_Acc,XO2_05_MRG.Lead_Gap_Acc) ];
				RC: "This rung will add the distance the bag on the merge has coasted to the required minimum leading gap.$N"
				    "The variable $Q_MRGx.Lead_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged behind.";
				N: ADD(XO2_05_MRG.BagPastPE,XO2_05_MRGx.Lead_Gap,XO2_05_MRG.Lead_Gap);
				RC: "As the BSR is unloading ones from the mainline bit shift register at element zero bit zero clear the leading gap counter accumulator.$N"
				    "This insures the leading gap counter only increments based on the tail of the mainline bag.";
				N: XIC(XO2_05_MRG.MainLineBScntrl.UL)CLR(XO2_05_MRG.Lead_Gap_Acc);
				RC: "Once the leading gap counter has accumulated to the leading gap constant the merge behind condition has been met.";
				N: GEQ(XO2_05_MRG.Lead_Gap_Acc,XO2_05_MRG.Lead_Gap)OTE(XO2_05_MRG.Lead_Gap_DN);
				RC: "Sync Run logic for non tracked merges.$N"
				    "This allows the merge to restart when the mainline stops and a bag is mid merge";
				N: XIC(XO2_05_MRG.MrgSeal)XIC(XO2_05_PE.FILT_NEG_XITN)RES(XO2_05_MRG.SyncRunTmr);
				N: [XIC(XO2_05_MTR.CONV_RUN) ,XIC(XO2_05_MTR.IM_TMR.TT) ]RTO(XO2_05_MRG.SyncRunTmr,?,?);
				N: [XIO(I_PE_XO2_05) ,XIC(XO2_05_PE.FILT) ,XIC(XO2_05_MRG.PeSeal) XIO(XO2_05_MTR.ANTI_CASC) XIO(XO2_05_MTR.CONV_RUN) XIC(XO2_05_MTR.INTL_MTR) ][XIO(XO2_05_MRG.PeSeal) OTE(XO2_05_MRG.PeSeal_PosXitn) ,OTE(XO2_05_MRG.PeSeal) ];
				RC: "On the positive transition of the photoeye seal, populate the merge line bit shift registers.$N"
				    "The merge line bit shift registers are compared to the mainline bit shift registers to see if a bag can merge without crashing into another bag.$N"
				    "The variable $Q_MRGx.Trail_Gap$Q is from the perspective of the merging bag.  I.e. the gap between the bag that merged and the bag that it merged ahead of.$N"
				    "The variable $Q_MRGx.MinLength$Q is used when the merging bag does not have its length defined.  In such a case, you must assume the bag is the max size the system is designed to handle.$N"
				    "If the bag does have its length defined, the bag$'s length is added to $Q_MRGx.Trail_Gap$Q to define the value populated into the merge line shift register.$N"
				    "The variable $Q_MRGx.MaxLength$Q represents the number of the highest element in the $QMrgLenMask$Q arrays.  If the bag length + gap ends up greater than $Q_MRGx.MaxLength$Q, then $Q_MRGx.MaxLength$Q is used.";
				N: XIC(XO2_05_MRG.PeSeal_PosXitn)[MOV(XO2_05_MRG.Length,XO2_05_MRG.BagLength_Gap) CLR(XO2_05_MRG.Length) ,MOV(54,XO2_05_MRGx.MinLength) ,EQU(XO2_05_MRG.BagLength_Gap,0) DIV(XO2_05_MRGx.MinLength,XO2_05_BTx.RES,XO2_05_MRG.BagLength_Gap) ,ADD(XO2_05_MRG.BagLength_Gap,XO2_05_MRGx.Trail_Gap,XO2_05_MRG.BagLength_Gap) ,GRT(XO2_05_MRG.BagLength_Gap,XO2_05_MRGx.MaxLength) MOV(XO2_05_MRGx.MaxLength,XO2_05_MRG.BagLength_Gap) ,FLL(0,XO2_05_MRG.MrgLineBS[0],10) ,MOV(MrgLenMask1[XO2_05_MRG.BagLength_Gap],XO2_05_MRG.MrgLineBS[0]) ,MOV(MrgLenMask2[XO2_05_MRG.BagLength_Gap],XO2_05_MRG.MrgLineBS[1]) ,MOV(MrgLenMask3[XO2_05_MRG.BagLength_Gap],XO2_05_MRG.MrgLineBS[2]) ,CLR(XO2_05_MRG.BagPastPE) ];
				RC: "Shift the merge line bit shift one position for each pulse detected after the photoeye seal has been on but the bag is not merging as detected by the merge seal.$N"
				    "This will adjust the merge line bit shift register for any coasting of the merge conveyor.";
				N: XIC(XO2_05_MRG.PeSeal)XIO(XO2_05_MRG.MrgSeal)XIC(XO2_05_BT.BT_PULSE)[OTU(XO2_05_MRG.MrgLineBScntrl.EN) ,BSR(XO2_05_MRG.MrgLineBS[0],XO2_05_MRG.MrgLineBScntrl,INT.ALWAYS_FALSE,?) ,ADD(1,XO2_05_MRG.BagPastPE,XO2_05_MRG.BagPastPE) ];
				RC: "This rung compares the mainline bit shift registers to the merge line bit shift registers.$N"
				    "If the mainline bit shift register has ones in the merge line bit shift register it will be passed through to the interference array.";
				N: AND(XO2_05_MRG.MainLineBS[0],XO2_05_MRG.MrgLineBS[0],XO2_05_MRG.Intrfr[0])AND(XO2_05_MRG.MainLineBS[1],XO2_05_MRG.MrgLineBS[1],XO2_05_MRG.Intrfr[1])AND(XO2_05_MRG.MainLineBS[2],XO2_05_MRG.MrgLineBS[2],XO2_05_MRG.Intrfr[2]);
				RC: "If the interference arrays are empty then the merge ahead conditions have been met.$N"
				    "If the leading gap accumulator is done then the merge behind conditions have been met.$N"
				    "Set the merge ok bit and generate a positive transition when the mainline is clear for a bag to merge in.";
				N: EQU(XO2_05_MRG.Intrfr[0],0)EQU(XO2_05_MRG.Intrfr[1],0)EQU(XO2_05_MRG.Intrfr[2],0)[XIC(XO2_05_MRG.Lead_Gap_DN) ,XIC(XO2_05_MRG.Hold_Align) ][XIO(XO2_05_MRG.MrgOK) OTE(XO2_05_MRG.MrgOK_PosXitn) ,OTE(XO2_05_MRG.MrgOK) ];
				RC: "If there are no faults on the merge conveyor, the photoeye seal is set and the merge ok bit is on then seal on the merge seal bit.$N"
				    "The merge seal bit is used in the motor logic to turn on the merge conveyor.";
				N: [XIC(XO2_05_MTR.INTL_MTR) [XIO(XO2_05_MRG.Hold_MB) XIO(XO2_05_MRG.Hold_MA) XIO(XO2_05_MRG.Hold_Align) XIC(XO2_05_MRG.MrgOK) ,XIC(XO2_05_MRG.Hold_MA) XIO(XO2_05_MRG.MrgOK) ,XIC(XO2_05_MRG.MrgOK_PosXitn) ] ,XIC(XO2_05_MRG.MrgSeal) ]XIO(XO2_05_MTR.SPACE)XIC(XO2_05_MRG.PeSeal)[OTE(XO2_05_MRG.MrgSeal) ,OTU(XO2_05_MRG.Hold_MA) ,OTU(XO2_05_MRG.Hold_MB) ,OTU(XO2_05_MRG.Hold_Align) ];
				RC: "Priority logic below$N"
				    "***********************************************************$N"
				    "$N"
				    "Accumulate the Mainline priority timer if a bag is waiting on the merge and the mainline is running";
				N: XIC(XO2_05_MRG.PeSeal)XIC(I_INT_C4_09_RUN)RTO(XO2_05_MRG.MLPriorityTmr,?,?);
				RC: "Turn on the Priority stop bit when a bag has been waiting on the merge for the time the priority timer has been set to";
				N: XIC(XO2_05_MRG.MLPriorityTmr.DN)OTE(XO2_05_MRG.PriorityStop);
				RC: "Accumulate the Merge line priority timer while in priority stop mode and the merge is actively merging bags onto the mainline";
				N: XIC(XO2_05_MRG.PriorityStop)XIC(XO2_05_MTR.CONV_RUN)RTO(XO2_05_MRG.MrgLPriorityTmr,?,?);
				RC: "Reset the Merge line priority timer if a bag merges from the merge before entering priority mode";
				N: XIC(XO2_05_MRG.MrgSeal)XIO(XO2_05_MRG.PriorityStop)RES(XO2_05_MRG.MLPriorityTmr);
				RC: "Reset priority timers if there is no bag flow on the merge for X amount of time";
				N: XIC(XO2_05_MRG.MrgLBagflow.DN)[XIO(XO2_05_MRG.PeSeal) RES(XO2_05_MRG.MLPriorityTmr) ,RES(XO2_05_MRG.MrgLPriorityTmr) ];
				RC: "Reset priority timers once the merge line has had priority for the preset time";
				N: XIC(XO2_05_MRG.MrgLPriorityTmr.DN)[RES(XO2_05_MRG.MrgLPriorityTmr) ,RES(XO2_05_MRG.MLPriorityTmr) ];
				RC: "Detect active bag flow on the merge";
				N: XIO(XO2_04_PE.FILT)TON(XO2_05_MRG.MrgLBagflow,?,?);
				RC: "Merge Run Control$N"
				    "*************************************************$N"
				    "$N"
				    "Reset the merge run timer when the merge, pre merge, pre pre merge photo-eyes have been blocked, or during a system startup";
				N: [XIC(XO2_04_MTR.CONV_RUN) [XIO(I_PE_XO2_04) ,XIC(XO2_04_PE.FILT) ] ,XIC(XO2_03_MTR.CONV_RUN) [XIO(I_PE_XO2_03) ,XIC(XO2_03_PE.FILT) ] ,XIC(XO2_05_MRG.PeSeal) ,XIC(XO2_05_MTR.IM_ONS) ,XIC(F_XO2_05_OVRIDE) ]RES(XO2_05_MRG.MergeRunTmr);
				RC: "Run the merge conveyor for the designated merge run time";
				N: XIC(XO2_05_MTR.CONV_RUN)RTO(XO2_05_MRG.MergeRunTmr,?,?);
				RC: "When a bag merges, send a bag Arrival message to the UL.$N"
				    "";
				N: [XIC(XO2_05_PE.FILT) XIC(XO2_05_MRG.MrgOK_PosXitn) ,XIC(XO2_05_PE.FILT_POS_XITN) XIC(XO2_05_MRG.MrgOK) ][MOV(MsgConst.MsgID_TrackingUpdate,MSG_TO_UL_Add.MSG_ID) ,MUL(INT.PLC_Number_Const,1000,MSG_TO_UL_Add.DEVICE_ID) ADD(95,MSG_TO_UL_Add.DEVICE_ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(MsgConst.Event_TUArrived,MSG_TO_UL_Add.EVENT_ID) ,MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,JSR(R_MSG_TO_UL_Add,0) ];
		END_ROUTINE

		ROUTINE XO2_05_MRG_CAPT 
				RC: "Merge Distance capture routine.$N"
				    "Only call routine when setting up merge or testing merge$N"
				    "*******************************************************************************$N"
				    "$N"
				    "Clear the tail to head counter when a bag unblocks the capture photo-eye";
				N: XIC(C4_08_PE.FILT_NEG_XITN)MOV(0,XO2_05_MRG.TailHeadAcc);
				RC: "When a bag blocks the capture photo-eye, capture the current values of the: $N"
				    "Head to Head count$N"
				    "Tail to head count.$N"
				    "and Zero the Head to Head count";
				N: XIC(C4_08_PE.POS_XITN)[MOV(XO2_05_MRG.HeadHeadAcc,XO2_05_MRG.HeadHeadCnt) ,MOV(XO2_05_MRG.TailHeadAcc,XO2_05_MRG.TailHeadCnt) ,MOV(0,XO2_05_MRG.HeadHeadAcc) ];
				RC: "For each pulse of the encoder increment the Head to Head and Tail the Head count";
				N: XIC(C4_09_BT.BT_PULSE)[ADD(1,XO2_05_MRG.HeadHeadAcc,XO2_05_MRG.HeadHeadAcc) ,ADD(1,XO2_05_MRG.TailHeadAcc,XO2_05_MRG.TailHeadAcc) ];
				RC: "Computer the bags Head to Head distance based on the number of pulses received during the last window";
				N: XIC(C4_08_PE.POS_XITN)CPT(XO2_05_MRG.LastBagMrgWndo,XO2_05_MRG.HeadHeadCnt*C4_09_BTx.RES);
				RC: "Computer the Tail to head distance based on the number of pulses received during the last gap";
				N: XIC(C4_08_PE.POS_XITN)CPT(XO2_05_MRG.LastBagGapDist,XO2_05_MRG.TailHeadCnt*C4_09_BTx.RES);
		END_ROUTINE

		ROUTINE XO2_FIELD_IND 
				RC: "****************************************************************************************************$N"
				    "This routine controls field indicators like control station lights and beacons/stacklights.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_XO2_03_PE_JAMMED) XIC(I_PE_XO2_03) ,XIC(F_CL1T_26_PE1_JAMMED) XIC(I_PE_XO2_02) ,XIC(F_CL1T_26_PE2_JAMMED) XIC(I_PE_XO2_01) ,XIC(F_XO2_02_CS_E_STOP) XIO(I_CS_XO2_02_EPB) ,AFI() ]OTE(CS_XO2_02_LTA_FLASH);
				N: [[XIC(F_XO2_03_PE_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,AFI() ,AFI() ] XIO(CS_XO2_02_LTA_FLASH) ,XIC(CS_XO2_02_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_XO2_02_RPBA);
				N: XIO(EZ_30307.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_XO2_02_EPB) ]OTE(O_CS_XO2_02_EPB);
				N: XIC(F_XO2_02_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_XO2_02_SPBG);
				RC: "Control Station$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_XO2_05_PE_JAMMED) XIC(I_PE_XO2_05) ,XIC(F_XO2_04_PE_JAMMED) XIC(I_PE_XO2_04) ,XIC(F_XO2_03_PE_JAMMED) XIC(I_PE_XO2_03) ,XIC(F_XO2_05_CS_E_STOP) XIO(I_CS_XO2_05_EPB) ,AFI() ]OTE(CS_XO2_05_LTA_FLASH);
				N: [[XIC(F_XO2_05_PE_JAMMED) ,XIC(F_XO2_04_PE_JAMMED) ,XIC(F_XO2_03_PE_JAMMED) ,AFI() ,AFI() ] XIO(CS_XO2_05_LTA_FLASH) ,XIC(CS_XO2_05_LTA_FLASH) XIC(INT.FLASHER_BIT) ]OTE(O_CS_XO2_05_RPBA);
				N: XIO(EZ_A32B3.Zone_OK)[XIC(INT.FLASHER_BIT) ,XIO(I_CS_XO2_05_EPB) ]OTE(O_CS_XO2_05_EPB);
				N: XIC(F_XO2_05_CS_E_STOP_RESET)XIC(INT.FLASHER_BIT)OTE(O_CS_XO2_05_SPBG);
		END_ROUTINE

		ROUTINE XO2_GFX 
				RC: "****************************************************************************************************$N"
				    "This routine is used to set the HMI graphic state of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO2_05_MTR.G) ,XIC(XO2_05_MTR.RUNNING) MOV(Status.ConvRunning,XO2_05_MTR.G) ,XIC(XO2_05_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO2_05_MTR.G) ,[XIC(XO2_05_MTR.IM_TMR.TT) ,XIO(XO2_05_MTR.AUTO_STOP) XIC(XO2_05_MRG.MergeRunTmr.DN) ,AFI() ] MOV(Status.ConvIdle,XO2_05_MTR.G) ,XIC(XO2_05_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO2_05_MTR.G) ,XIC(F_XO2_05_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO2_05_MTR.G) ,XIC(XO2_05_MTR.CASC) MOV(Status.ConvCascade,XO2_05_MTR.G) ,XIC(XO2_05_MTR.CASC) XIO(I_PE_XO2_05) MOV(Status.ConvBagPresCasc,XO2_05_MTR.G) ,AFI() MOV(Status.ConvFull,XO2_05_MTR.G) ,XIC(F_XO2_05_MSD_OFF) MOV(Status.ConvDisc,XO2_05_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO2_05_MTR.G) ,XIC(XO2_05_MTR.JAMMED) MOV(Status.ConvJammed,XO2_05_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO2_05_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO2_05_MTR.G) ,XIC(F_XO2_05_VFD_FAULT) MOV(Status.ConvVFDFlt,XO2_05_MTR.G) ,XIC(F_XO2_05_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO2_05_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO2_05_MTR.G) ,XIC(F_XO2_05_OVRIDE) MOV(Status.ConvOverRide,XO2_05_MTR.G) ,XIC(XO2_05_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO2_05_MTR.G) ,XIC(XO2_05_MTR.E_STOP) XIO(XO2_05_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO2_05_MTR.G) ,XIC(F_XO2_05_OUTSERV) MOV(Status.ConvOutOfServ,XO2_05_MTR.G) ,XIC(XO2_05_MTR.COMM) MOV(Status.ConvCommFault,XO2_05_MTR.G) ,MOV(XO2_05_MTR.G,G_XO2_05_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO2_04_MTR.G) ,XIC(XO2_04_MTR.RUNNING) MOV(Status.ConvRunning,XO2_04_MTR.G) ,XIC(XO2_04_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO2_04_MTR.G) ,[XIC(XO2_04_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO2_04_MTR.G) ,XIC(XO2_04_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO2_04_MTR.G) ,XIC(F_XO2_04_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO2_04_MTR.G) ,XIC(XO2_04_MTR.CASC) MOV(Status.ConvCascade,XO2_04_MTR.G) ,XIC(XO2_04_MTR.CASC) XIO(I_PE_XO2_04) MOV(Status.ConvBagPresCasc,XO2_04_MTR.G) ,AFI() MOV(Status.ConvFull,XO2_04_MTR.G) ,XIC(F_XO2_04_MSD_OFF) MOV(Status.ConvDisc,XO2_04_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO2_04_MTR.G) ,XIC(XO2_04_MTR.JAMMED) MOV(Status.ConvJammed,XO2_04_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO2_04_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO2_04_MTR.G) ,XIC(F_XO2_04_VFD_FAULT) MOV(Status.ConvVFDFlt,XO2_04_MTR.G) ,XIC(F_XO2_04_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO2_04_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO2_04_MTR.G) ,XIC(F_XO2_04_OVRIDE) MOV(Status.ConvOverRide,XO2_04_MTR.G) ,XIC(XO2_04_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO2_04_MTR.G) ,XIC(XO2_04_MTR.E_STOP) XIO(XO2_04_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO2_04_MTR.G) ,XIC(F_XO2_04_OUTSERV) MOV(Status.ConvOutOfServ,XO2_04_MTR.G) ,XIC(XO2_04_MTR.COMM) MOV(Status.ConvCommFault,XO2_04_MTR.G) ,MOV(XO2_04_MTR.G,G_XO2_04_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO2_03_MTR.G) ,XIC(XO2_03_MTR.RUNNING) MOV(Status.ConvRunning,XO2_03_MTR.G) ,XIC(XO2_03_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO2_03_MTR.G) ,[XIC(XO2_03_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO2_03_MTR.G) ,XIC(XO2_03_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO2_03_MTR.G) ,XIC(F_XO2_03_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO2_03_MTR.G) ,XIC(XO2_03_MTR.CASC) MOV(Status.ConvCascade,XO2_03_MTR.G) ,XIC(XO2_03_MTR.CASC) XIO(I_PE_XO2_03) MOV(Status.ConvBagPresCasc,XO2_03_MTR.G) ,AFI() MOV(Status.ConvFull,XO2_03_MTR.G) ,XIC(F_XO2_03_MSD_OFF) MOV(Status.ConvDisc,XO2_03_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO2_03_MTR.G) ,XIC(XO2_03_MTR.JAMMED) MOV(Status.ConvJammed,XO2_03_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO2_03_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO2_03_MTR.G) ,XIC(F_XO2_03_VFD_FAULT) MOV(Status.ConvVFDFlt,XO2_03_MTR.G) ,XIC(F_XO2_03_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO2_03_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO2_03_MTR.G) ,XIC(F_XO2_03_OVRIDE) MOV(Status.ConvOverRide,XO2_03_MTR.G) ,XIC(XO2_03_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO2_03_MTR.G) ,XIC(XO2_03_MTR.E_STOP) XIO(XO2_03_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO2_03_MTR.G) ,XIC(F_XO2_03_OUTSERV) MOV(Status.ConvOutOfServ,XO2_03_MTR.G) ,XIC(XO2_03_MTR.COMM) MOV(Status.ConvCommFault,XO2_03_MTR.G) ,MOV(XO2_03_MTR.G,G_XO2_03_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO2_02_MTR.G) ,XIC(XO2_02_MTR.RUNNING) MOV(Status.ConvRunning,XO2_02_MTR.G) ,XIC(XO2_02_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO2_02_MTR.G) ,[XIC(XO2_02_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO2_02_MTR.G) ,XIC(XO2_02_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO2_02_MTR.G) ,XIC(F_XO2_02_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO2_02_MTR.G) ,XIC(XO2_02_MTR.CASC) MOV(Status.ConvCascade,XO2_02_MTR.G) ,XIC(XO2_02_MTR.CASC) XIO(I_PE_XO2_02) MOV(Status.ConvBagPresCasc,XO2_02_MTR.G) ,AFI() MOV(Status.ConvFull,XO2_02_MTR.G) ,XIC(F_XO2_02_MSD_OFF) MOV(Status.ConvDisc,XO2_02_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO2_02_MTR.G) ,XIC(XO2_02_MTR.JAMMED) MOV(Status.ConvJammed,XO2_02_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO2_02_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO2_02_MTR.G) ,XIC(F_XO2_02_VFD_FAULT) MOV(Status.ConvVFDFlt,XO2_02_MTR.G) ,XIC(F_XO2_02_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO2_02_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO2_02_MTR.G) ,XIC(F_XO2_02_OVRIDE) MOV(Status.ConvOverRide,XO2_02_MTR.G) ,XIC(XO2_02_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO2_02_MTR.G) ,XIC(XO2_02_MTR.E_STOP) XIO(XO2_02_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO2_02_MTR.G) ,XIC(F_XO2_02_OUTSERV) MOV(Status.ConvOutOfServ,XO2_02_MTR.G) ,XIC(XO2_02_MTR.COMM) MOV(Status.ConvCommFault,XO2_02_MTR.G) ,MOV(XO2_02_MTR.G,G_XO2_02_STS) ];
				RC: "Conveyor Graphic$N"
				    "$N"
				    "$N"
				    "";
				N: [MOV(Status.ConvIdle,XO2_01_MTR.G) ,XIC(XO2_01_MTR.RUNNING) MOV(Status.ConvRunning,XO2_01_MTR.G) ,XIC(XO2_01_MTR.AUTO_STOP) MOV(Status.ConvTimeOut,XO2_01_MTR.G) ,[XIC(XO2_01_MTR.IM_TMR.TT) ,AFI() ] MOV(Status.ConvIdle,XO2_01_MTR.G) ,XIC(XO2_01_MTR.E_STOP_RES) MOV(Status.ConvEstopRes,XO2_01_MTR.G) ,XIC(F_XO2_01_ENCODER_FAULT) MOV(Status.ConvEncoderFlt,XO2_01_MTR.G) ,XIC(XO2_01_MTR.CASC) MOV(Status.ConvCascade,XO2_01_MTR.G) ,XIC(XO2_01_MTR.CASC) XIO(I_PE_XO2_01) MOV(Status.ConvBagPresCasc,XO2_01_MTR.G) ,AFI() MOV(Status.ConvFull,XO2_01_MTR.G) ,XIC(F_XO2_01_MSD_OFF) MOV(Status.ConvDisc,XO2_01_MTR.G) ,AFI() MOV(Status.ConvFailSafeFlt,XO2_01_MTR.G) ,XIC(XO2_01_MTR.JAMMED) MOV(Status.ConvJammed,XO2_01_MTR.G) ,AFI() MOV(Status.ConvMBJam,XO2_01_MTR.G) ,[AFI() ,AFI() ] MOV(Status.ConvOverSize,XO2_01_MTR.G) ,XIC(F_XO2_01_VFD_FAULT) MOV(Status.ConvVFDFlt,XO2_01_MTR.G) ,XIC(F_XO2_01_CTCTR_FAULT) MOV(Status.ConvCTCFlt,XO2_01_MTR.G) ,AFI() MOV(Status.ConvOverLoad,XO2_01_MTR.G) ,XIC(F_XO2_01_OVRIDE) MOV(Status.ConvOverRide,XO2_01_MTR.G) ,XIC(XO2_01_MTR.FIRE_ALM) MOV(Status.ConvFireAlarm,XO2_01_MTR.G) ,XIC(XO2_01_MTR.E_STOP) XIO(XO2_01_MTR.E_STOP_RES) MOV(Status.ConvEStop,XO2_01_MTR.G) ,XIC(F_XO2_01_OUTSERV) MOV(Status.ConvOutOfServ,XO2_01_MTR.G) ,XIC(XO2_01_MTR.COMM) MOV(Status.ConvCommFault,XO2_01_MTR.G) ,MOV(XO2_01_MTR.G,G_XO2_01_STS) ];
		END_ROUTINE

		ROUTINE XO2_HSD 
				RC: "Siemens HSD2 Control Routine$N"
				    "The HSD has its own controller that monitors the HSD for faults and handles the actuation of the unit. This routine interfaces with the HSD and tells it when to switch position. Additionally there is fault detection for any faults which the BHS is capable of monitoring.$N"
				    "$N"
				    "=====================================================================================================================================================$N"
				    "$N"
				    "";
				N: XIC(I_SD_XO2_ZERO)OTE(XO2_HSD.HOME_FLTR);
				RC: "If the diverter is in the home position and the motor disconnect is turned off, seal in the home position status.";
				N: [XIC(XO2_HSD.HOME_FLTR) ,XIC(F_XO2_HSD_PROX_OVR) ,XIC(XO2_HSD.HOME_FLTR_SEAL) XIC(F_XO2_01_HSD_IP_DISC_OFF) ]OTE(XO2_HSD.HOME_FLTR_SEAL);
				N: XIC(I_SD_XO2_EXT)OTE(XO2_HSD.DIV_FLTR);
				N: [XIC(XO2_HSD.DIV_FLTR) ,XIC(XO2_HSD.LAST_POS_EXT) ]XIO(XO2_HSD.HOME_FLTR_SEAL)OTE(XO2_HSD.LAST_POS_EXT);
				RC: "============================================The following rungs are added for Untracked Diverters.============================================$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Local Pulse Counter Clear Control.$N"
				    "This rung controls when the local pulse counter is cleared.$N"
				    "The intent of this rung is to only clear the counter when there are no bags in the zone or on the conveyor to conveyor transition.$N"
				    "Auto_Trk bit is included in this rung to prevent counter from resetting (due to untracked zone) when bag is lost during setup.  The GEQ than 0 instruction in this rung ensures that the counter will be cleared if it ever goes negative.";
				N: XIC(XO2_HSD.BT_DONT_CLEAR)GEQ(PE2_BM1_23_TD.BT_CNT,0)OTE(PE2_BM1_23_TD.DONT_CLR);
				RC: "Local Pulse Counter Clear.$N"
				    "This rung clears the local pulse counter when the control rung indicates to do so.";
				N: XIO(PE2_BM1_23_TD.DONT_CLR)CLR(PE2_BM1_23_TD.BT_CNT);
				RC: "Local Pulse Counter.$N"
				    "This rung counts pulses when the control rung is indicating to do so.";
				N: XIC(BM1_23_BT.BT_PULSE)XIC(PE2_BM1_23_TD.DONT_CLR)ADD(PE2_BM1_23_TD.BT_CNT,1,PE2_BM1_23_TD.BT_CNT);
				N: XIC(BM1_23_PE2.FILT_POS_XITN)[ADD(PE2_BM1_23_TD.BAG_ID,1,PE2_BM1_23_TD.BAG_ID) ,GRT(PE2_BM1_23_TD.BAG_ID,PE2_BM1_23_TD.BAG_ID_High_Limit) MOV(1,PE2_BM1_23_TD.BAG_ID) ,CLR(PE2_BM1_23_TD.Bag_Data[PE2_BM1_23_TD.BAG_ID].Div_ID) ,OTU(PE2_BM1_23_TD.Bag_Data[PE2_BM1_23_TD.BAG_ID].TooClose_T) ,OTU(PE2_BM1_23_TD.Bag_Data[PE2_BM1_23_TD.BAG_ID].TooClose_L) ];
				RC: "============================================BHS detection of operational faults.============================================$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Failed to Extend";
				N: [XIC(XO2_HSD.DIV_REQ_ONS) ,XIC(XO2_HSD.FailedToExtend_TMR.EN) ]XIO(XO2_HSD.FAULT_RESET)XIO(XO2_HSD.DIV_FLTR)TON(XO2_HSD.FailedToExtend_TMR,?,?);
				N: [XIC(XO2_HSD.FailedToExtend_TMR.DN) ,XIC(XO2_HSD.FailedToExtend_TMR.EN) XIO(XO2_HSD.XFER_CNTRL.EM) GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.XFER_FIFO[0].POS) ,XIC(F_XO2_01_HSD_FAIL_TO_EXTEND) ]XIO(XO2_HSD.FAULT_RESET)[XIO(F_XO2_01_HSD_FAIL_TO_EXTEND) OTE(XO2_HSD.FAIL_EXTEND_ONS) ,OTE(F_XO2_01_HSD_FAIL_TO_EXTEND) ];
				RC: "Failed to Retract";
				N: [XIC(XO2_HSD.RET_REQ_ONS) ,XIC(XO2_HSD.FailedToRetract_TMR.EN) ]XIO(XO2_HSD.FAULT_RESET)XIO(XO2_HSD.HOME_FLTR_SEAL)TON(XO2_HSD.FailedToRetract_TMR,?,?);
				N: [XIC(XO2_HSD.FailedToRetract_TMR.DN) ,XIC(XO2_HSD.FailedToRetract_TMR.EN) XIO(XO2_HSD.XFER_CNTRL.EM) GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.XFER_FIFO[0].POS) ,XIC(F_XO2_01_HSD_FAIL_TO_RETRACT) ]XIO(XO2_HSD.FAULT_RESET)[XIO(F_XO2_01_HSD_FAIL_TO_RETRACT) OTE(XO2_HSD.FAIL_RETRACT_ONS) ,OTE(F_XO2_01_HSD_FAIL_TO_RETRACT) ];
				RC: "Position Fault";
				N: [XIC(XO2_HSD.HOME_FLTR_SEAL) XIC(XO2_HSD.DIV_FLTR) ,XIO(XO2_HSD.HOME_FLTR_SEAL) XIO(XO2_HSD.DIV_FLTR) ]XIC(XO2_HSD.INT_MTR)XIO(XO2_HSD.FailedToRetract_TMR.EN)XIO(XO2_HSD.FailedToExtend_TMR.EN)TON(XO2_HSD.PositionFault_TMR,?,?);
				N: [XIC(XO2_HSD.PositionFault_TMR.DN) ,XIC(XO2_HSD.PositionFault_TMR.EN) XIO(XO2_HSD.XFER_CNTRL.EM) GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.XFER_FIFO[0].POS) ,XIC(F_XO2_01_HSD_UNKNOWN_POS) ]XIO(XO2_HSD.FAULT_RESET)[XIO(F_XO2_01_HSD_UNKNOWN_POS) OTE(XO2_HSD.POS_FLT_ONS) ,OTE(F_XO2_01_HSD_UNKNOWN_POS) ];
				N: [XIC(F_XO2_01_HSD_UNKNOWN_POS) ,XIC(F_XO2_01_HSD_FAIL_TO_RETRACT) ,XIC(F_XO2_01_HSD_FAIL_TO_EXTEND) ,XIC(F_XO2_01_HSD_FAULT) ]OTE(XO2_HSD.FAULT);
				RC: "Fault Reset. Do not reset diverter faults until Home Prox is made and RPB has been depressed.$N"
				    "$N"
				    "";
				N: XIC(XO2_HSD.FAULT)[XIO(F_XO2_01_HSD_NOT_IN_AUTO) [XIC(XO2_HSD.HOME_FLTR_SEAL) XIO(XO2_HSD.DIV_FLTR) ,XIC(XO2_HSD.DIV_FLTR) XIO(XO2_HSD.HOME_FLTR_SEAL) ] ,XIC(F_XO2_01_HSD_IP_DISC_OFF) ]OTE(XO2_HSD.RESET_RDY);
				N: XIC(I_CS1_BM1_23_RPBA)XIC(XO2_HSD.RESET_RDY)OTE(XO2_HSD.FAULT_RESET);
				RC: "Destination Line Full. Typically used for indexing piers.$N"
				    "";
				N: XIC(INT.ALWAYS_FALSE)OTE(XO2_HSD.FULL);
				RC: "Removed Too Close Detection for Non-Tracked Diverter$N"
				    "==================================================Upstream Too Close Detection======================================================$N"
				    "The following rungs detect if two bags are too close together for either of them to be diverted. Each time a bag clears the too close detection photo-eye, the count is reset. If another bag hits the photoeye before the counter is done, the downstream bag is flagged as $'too close trailing$' and the upstream bag is flagged as $'too close leading$'. When each of the bags reach the decision point of the diverter, their too close status will be read and the diverter will not switch.$N"
				    "$N"
				    "";
				N: NOP();
				RC: "==================================================Paddle Area Clear======================================================$N"
				    "";
				N: XIC(BM1_23_BT.BT_PULSE)[OTU(XO2_HSD.Area_Clear_Cntrl.EN) ,BSL(XO2_HSD.Area_Clear_Reg[0],XO2_HSD.Area_Clear_Cntrl,BM1_23_PE1.FILT,?) ];
				N: MEQ(XO2_HSD.Area_Clear_Reg[2],XO2_HSDx.Area_Clear_Mask[2],0)MEQ(XO2_HSD.Area_Clear_Reg[1],XO2_HSDx.Area_Clear_Mask[1],0)MEQ(XO2_HSD.Area_Clear_Reg[0],XO2_HSDx.Area_Clear_Mask[0],0)OTE(XO2_HSD.Area_Clear);
				RC: "============================================Load bag into FIFO and determine when to Cycle HSD============================================$N"
				    "Each time a bag enters the tracking zone in front of the diverter, capture the ID.$N"
				    "";
				N: XIC(BM1_23_PE1.FILT_POS_XITN)NEQ(PE2_BM1_23_TD.BAG_ID,0)[ADD(PE2_BM1_23_TD.BT_CNT,XO2_HSDx.ACT_Const,XO2_HSD.ACT_FFL_DATA.POS) ,MOV(PE2_BM1_23_TD.BAG_ID,XO2_HSD.ACT_FFL_DATA.BAG_ID) ,OTU(PE2_BM1_23_TD.Bag_Data[XO2_HSD.ACT_FFL_DATA.BAG_ID].Diverted) ,FFL(XO2_HSD.ACT_FFL_DATA,XO2_HSD.ACT_FIFO[0],XO2_HSD.ACT_CNTRL,?,?) ];
				RC: "When the bag is at the activate position for the diverter, unload the next bag from the FIFO.";
				N: [XIC(BM1_23_MTR.CONV_RUN) GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.ACT_FIFO[0].POS) ,XIC(BM1_23_MTR.JAMMED) ,XIC(F_BM1_23_ENCODER_FAULT) ]XIO(XO2_HSD.ACT_CNTRL.EM)XIO(XO2_HSD.ACT_CNTRL.EU)EQU(XO2_HSD.ACT_FFU_DATA.BAG_ID,0)FFU(XO2_HSD.ACT_FIFO[0],XO2_HSD.ACT_FFU_DATA,XO2_HSD.ACT_CNTRL,?,?);
				N: XIC(XO2_HSD.ACT_CNTRL.EU)[LIM(PE2_BM1_23_TD.Bag_Data_Low_Limit,XO2_HSD.ACT_FFU_DATA.BAG_ID,PE2_BM1_23_TD.Bag_Data_High_Limit) XIO(PE2_BM1_23_TD.Bag_Data[XO2_HSD.ACT_FFU_DATA.BAG_ID].Diverted) XIO(BM1_23_MTR.JAMMED) XIO(F_BM1_23_ENCODER_FAULT) OTE(XO2_HSD.ACT_ID_VALID) ,XIO(XO2_HSD.ACT_ID_VALID) CLR(XO2_HSD.ACT_FFU_DATA.BAG_ID) ];
				RC: "Alternating bit for use with the 50/50 divert override mode.";
				N: XIC(F_XO2_01_HSD_DIVERT_HALF)[XIC(XO2_HSD.ACT_ID_VALID) XIO(XO2_HSD.DIV_HALF_CNT) ,XIO(XO2_HSD.ACT_ID_VALID) XIC(XO2_HSD.DIV_HALF_CNT) ]OTE(XO2_HSD.DIV_HALF_CNT);
				RC: "Divert Decision$N"
				    "Determine if this bag is to be diverted";
				N: XIC(XO1_HSD.ACT_ID_VALID)XIC(F_XO2_01_HSD_DIVERT_ALL)MOV(XO2_HSDx.ID,PE2_BM1_23_TD.Bag_Data[XO2_HSD.ACT_FFU_DATA.BAG_ID].Div_ID);
				RC: "Determine if the bag can be diverted as planned.$N"
				    "Set the reason code for UL reporting$N"
				    "";
				N: NOP();
				N: XIC(INT.ALWAYS_FALSE)XIC(XO2_HSD.ACT_ID_VALID)XIO(F_XO2_01_HSD_DIVERT_ALL)XIC(XO2_HSD.HOME_FLTR_SEAL)OTE(XO2_HSD.TooClose);
				N: XIC(XO2_HSD.ACT_ID_VALID)[MOV(MsgConst.Rson_DivAuto,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_DIVERT_HALF) MOV(MsgConst.Rson_DivHMIDivertHalf,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_DIVERT_ALL) MOV(MsgConst.Rson_DivHMIDivertAll,XO2_HSD.ACT_FFU_DATA.REASON) ];
				N: XIC(XO2_HSD.ACT_ID_VALID)[EQU(XO2_HSDx.ID,PE2_BM1_23_TD.Bag_Data[XO2_HSD.ACT_FFU_DATA.BAG_ID].Div_ID) ,XIC(F_XO2_01_HSD_DIVERT_HALF) XIC(XO2_HSD.DIV_HALF_CNT) ][XIC(XO2_HSD.TooClose) MOV(MsgConst.Rson_DivTooClose,XO2_HSD.ACT_FFU_DATA.REASON) ,XIO(XO2_01_MTR.CONV_RUN) MOV(MsgConst.Rson_DivDestNotAvail,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(XO2_HSD.FULL) MOV(MsgConst.Rson_DivLnFull,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(XO2_01_MTR.E_STOP) MOV(MsgConst.Rson_DivEstop,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(XO2_01_MTR.JAMMED) MOV(MsgConst.Rson_DivLnJam,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_OUTSERV) MOV(MsgConst.Rson_DivLnOutServ,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_OUTSERV) MOV(MsgConst.Rson_DivHMIOutServ,XO2_HSD.ACT_FFU_DATA.REASON) ]OTE(XO2_HSD.Extended_Prohibit);
				N: XIC(XO2_HSD.ACT_ID_VALID)[XIO(XO2_HSD.INT_MTR) MOV(MsgConst.Rson_DivNotRunning,XO2_HSD.ACT_FFU_DATA.REASON) ,XIO(XO2_HSD.Area_Clear) MOV(MsgConst.Rson_DivTooClose,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_UNKNOWN_POS) MOV(MsgConst.Rson_DivPosFault,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_FAIL_TO_RETRACT) MOV(MsgConst.Rson_DivFailedToRet,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_FAIL_TO_EXTEND) MOV(MsgConst.Rson_DivFailedtoExt,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_FAULT) MOV(MsgConst.Rson_DivFaulted,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_NOT_IN_AUTO) MOV(MsgConst.Rson_DivNotAuto,XO2_HSD.ACT_FFU_DATA.REASON) ,XIC(F_XO2_01_HSD_IP_DISC_OFF) MOV(MsgConst.Rson_DivDisconnectOff,XO2_HSD.ACT_FFU_DATA.REASON) ]OTE(XO2_HSD.Cycle_Prohibit);
				RC: "Divert and retract requests.";
				N: [XIC(XO2_HSD.ACT_ID_VALID) [[XIO(F_XO2_01_HSD_DIVERT_HALF) EQU(XO2_HSDx.ID,O4T_10A_TD.Bag_Data[XO2_HSD.ACT_FFU_DATA.BAG_ID].Div_ID) ,XIC(F_XO2_01_HSD_DIVERT_HALF) XIC(XO2_HSD.DIV_HALF_CNT) ] XIO(XO2_HSD.Extended_Prohibit) ,XIC(F_XO2_01_HSD_DIVERT_ALL) ] XIO(XO2_HSD.Cycle_Prohibit) ,XIC(XO2_HSD.DIV_REQ) NEQ(XO2_HSD.ACT_FFU_DATA.BAG_ID,0) ]OTE(XO2_HSD.DIV_REQ);
				N: [XIC(XO2_HSD.ACT_ID_VALID) XIO(XO2_HSD.DIV_REQ) XIO(XO2_HSD.Cycle_Prohibit) ,XIC(XO2_HSD.RET_REQ) NEQ(XO2_HSD.ACT_FFU_DATA.BAG_ID,0) ]OTE(XO2_HSD.RET_REQ);
				RC: "Delayed Activation$N"
				    "-When the Conveyor is not at full speed$N"
				    "";
				N: XIC(XO2_HSD.ACT_ID_VALID)[MOV(PE2_BM1_23_TD.BT_CNT,XO2_HSD.ACT_POINT) ,LES(XO2_HSD.RAMP_UP_TMR.ACC,XO2_HSDx.LowSpdTime) ADD(XO2_HSD.ACT_POINT,XO2_HSDx.LowSpdDelay,XO2_HSD.ACT_POINT) ,LIM(XO2_HSDx.LowSpdTime,XO2_HSD.RAMP_UP_TMR.ACC,XO2_HSDx.MedSpdTime) ADD(XO2_HSD.ACT_POINT,XO2_HSDx.MedSpdDelay,XO2_HSD.ACT_POINT) ];
				RC: "============================================Load Bag into FIFO and Determine When to Check if it Transferred Successfully============================================$N"
				    "This FIFO is used to create a delay to ensure that the diverter has time to move before the bag ID is transferred in tracking and to ensure messaging to the upper level is accurate. The setting for this delay (xxx.XFER_CONST) should be only slightly longer than it takes for the diverter to switch positions. In most cases this should only be a few pulses.";
				N: XIC(XO2_HSD.ACT_ID_VALID)[ADD(XO2_HSDx.XFER_Const,PE2_BM1_23_TD.BT_CNT,XO2_HSD.ACT_FFU_DATA.POS) ,[CLR(XO2_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO2_01_HSD_DIVERT_ALL) MOV(1,XO2_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO2_01_HSD_DIVERT_HALF) MOV(2,XO2_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO2_01_HSD_OUTSERV) MOV(3,XO2_HSD.ACT_FFU_DATA.HMI_CNTRL) ,XIC(F_XO2_HSD_PROX_OVR) MOV(4,XO2_HSD.ACT_FFU_DATA.HMI_CNTRL) ] ,FFL(XO2_HSD.ACT_FFU_DATA,XO2_HSD.XFER_FIFO[0],XO2_HSD.XFER_CNTRL,?,?) ,CLR(XO2_HSD.ACT_FFU_DATA.BAG_ID) ];
				N: NEQ(XO2_HSD.ACT_FFU_DATA.BAG_ID,0)GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.ACT_POINT)[OTE(XO2_HSD.ACTIVATE_ONS) ,CLR(XO2_HSD.ACT_FFU_DATA.BAG_ID) ];
				RC: "Send the divert command to the diverter.";
				N: [[XIC(XO2_HSD.DIV_REQ) XIC(XO2_HSD.ACTIVATE_ONS) ,XIC(XO2_HSD.DIV_ALL_ONS) ] XIC(XO2_HSD.HOME_FLTR_SEAL) ,XIC(XO2_HSD.IM_ONS) XIC(XO2_HSD.LAST_POS_EXT) ]TOF(XO2_HSD.EXT_TRIG_TMR,?,?);
				N: XIC(XO2_HSD.EXT_TRIG_TMR.DN)[XIO(O_SD_XO2_EXT) OTE(XO2_HSD.DIV_REQ_ONS) ,OTE(O_SD_XO2_EXT) ];
				N: [[XIC(XO2_HSD.RET_REQ) XIC(XO2_HSD.ACTIVATE_ONS) ,XIC(XO2_HSD.INST_RET) ,XIC(XO2_HSD.DIV_0_ONS) ] XIC(XO2_HSD.DIV_FLTR) ,XIC(XO2_HSD.IM_ONS) XIO(XO2_HSD.LAST_POS_EXT) ]TOF(XO2_HSD.RET_TRIG_TMR,?,?);
				N: XIC(XO2_HSD.RET_TRIG_TMR.DN)[XIO(O_SD_XO2_RET) OTE(XO2_HSD.RET_REQ_ONS) ,OTE(O_SD_XO2_RET) ];
				RC: "If the diverter is in the middle of diverting a bag and the destination conveyor stops then stop the mainline conveyor as well, and vice versa.";
				N: XIO(XO2_HSD.HOME_FLTR_SEAL)XIO(XO2_HSD.FailedToRetract_TMR.TT)[XIO(XO2_HSD.XFER_CNTRL.EM) ,XIC(XO2_HSD.SYNC_RUN) XIO(BM1_23_PE1.FILT_NEG_XITN) ]OTE(XO2_HSD.SYNC_RUN);
				RC: "When the current transfer ID reaches the delay setpoint, unload the data to be processed.$N"
				    "If the diverter faults while actuating for this bag, unload it and send the message so the diverter fault can be included in the message";
				N: XIO(XO2_HSD.XFER_CNTRL.EM)[GEQ(PE2_BM1_23_TD.BT_CNT,XO2_HSD.XFER_FIFO[0].POS) ,XIC(XO2_HSD.FAULT) ,XIC(BM1_23_MTR.JAMMED) ,XIC(F_BM1_23_ENCODER_FAULT) ]XIO(XO2_HSD.UNLD_XFER_ID)OTE(XO2_HSD.UNLD_XFER_ID);
				RC: "Unload a bag ID from the FIFO if the encoder pulse count reaches the transfer setting";
				N: XIC(XO2_HSD.UNLD_XFER_ID)XIO(XO2_HSD.XFER_CNTRL.EU)FFU(XO2_HSD.XFER_FIFO[0],XO2_HSD.XFER_FIFO_DATA,XO2_HSD.XFER_CNTRL,?,?);
				RC: "The Zone belt tach count must not be cleared while the diverter is tracking a bag";
				N: [XIO(XO2_HSD.ACT_CNTRL.EM) ,XIO(XO2_HSD.XFER_CNTRL.EM) ,NEQ(XO2_HSD.ACT_FFU_DATA.BAG_ID,0) ,XIO(XO2_HSD.Area_Clear) ]OTE(XO2_HSD.BT_DONT_CLEAR);
				RC: "Trigger the XFER_ID_VALID once data has been unloaded from the FIFO. The XFER_ID_VALID is treated as a one shot as the ID will be cleared on the next scan.";
				N: XIC(XO2_HSD.XFER_CNTRL.EU)LIM(PE2_BM1_23_TD.Bag_Data_Low_Limit,XO2_HSD.XFER_FIFO_DATA.BAG_ID,PE2_BM1_23_TD.Bag_Data_High_Limit)XIO(BM1_23_MTR.JAMMED)XIO(F_BM1_23_ENCODER_FAULT)OTE(XO2_HSD.XFER_ID_VALID);
				RC: "For the current Bag ID, determine where the bag went by evaluating the current position of the diverter.$N"
				    "";
				N: XIC(XO2_HSD.XFER_ID_VALID)[XIC(XO2_HSD.HOME_FLTR_SEAL) XIO(XO2_HSD.DIV_FLTR) OTE(XO2_HSD.BAG_NOT_DIVERTED) ,XIC(XO2_HSD.DIV_FLTR) XIO(XO2_HSD.HOME_FLTR_SEAL) OTE(XO2_HSD.BAG_DIVERTED) ,[XIO(XO2_HSD.HOME_FLTR_SEAL) XIO(XO2_HSD.DIV_FLTR) ,XIC(XO2_HSD.HOME_FLTR_SEAL) XIC(XO2_HSD.DIV_FLTR) ] OTE(XO2_HSD.BAG_ERROR) ];
				RC: "Set Event Code for the Bag$N"
				    "";
				N: XIC(XO2_HSD.XFER_ID_VALID)[XIC(XO2_HSD.BAG_DIVERTED) MOV(MsgConst.Event_Diverted,XO2_HSD.Event) ,XIC(XO2_HSD.BAG_NOT_DIVERTED) MOV(MsgConst.Event_DivStraight,XO2_HSD.Event) ,XIC(XO2_HSD.BAG_ERROR) MOV(MsgConst.Event_DivError,XO2_HSD.Event) ];
				RC: "Get reason code determined at the activation point.$N"
				    "Update it with any faults that came up since then.";
				N: XIC(XO2_HSD.XFER_ID_VALID)[MOV(XO2_HSD.ACT_FFU_DATA.REASON,XO2_HSD.Reason) ,XIO(XO2_HSD.INT_MTR) MOV(MsgConst.Rson_DivNotRunning,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_UNKNOWN_POS) MOV(MsgConst.Rson_DivPosFault,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_FAIL_TO_RETRACT) MOV(MsgConst.Rson_DivFailedToRet,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_FAIL_TO_EXTEND) MOV(MsgConst.Rson_DivFailedtoExt,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_FAULT) MOV(MsgConst.Rson_DivFaulted,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_NOT_IN_AUTO) MOV(MsgConst.Rson_DivNotAuto,XO2_HSD.Reason) ,XIC(F_XO2_01_HSD_IP_DISC_OFF) MOV(MsgConst.Rson_DivDisconnectOff,XO2_HSD.Reason) ];
				RC: "If the bag was routed to its originally defined destination a reason code of N/A will be sent to the Upper Level.";
				N: XIC(XO2_HSD.XFER_ID_VALID)[XIC(XO2_HSD.BAG_DIVERTED) EQU(PE2_BM1_23_TD.Bag_Data[XO2_HSD.XFER_FIFO_DATA.BAG_ID].Div_ID,XO2_HSDx.ID) ,XIC(XO2_HSD.BAG_NOT_DIVERTED) NEQ(PE2_BM1_23_TD.Bag_Data[XO2_HSD.XFER_FIFO_DATA.BAG_ID].Div_ID,XO2_HSDx.ID) ]OTE(XO2_HSD.Reason_NA);
				RC: "Send message to the Upper Level.";
				N: XIC(XO2_HSD.XFER_ID_VALID)[MOV(MsgConst.MsgID_Divert,MSG_TO_UL_Add.MSG_ID) ,MOV(XO2_HSD.XFER_FIFO_DATA.BAG_ID,MSG_TO_UL_Add.PLC_BAG_ID) ,MOV(0,MSG_TO_UL_Add.BHS_ID) ,MOV(XO2_HSDx.ID,MSG_TO_UL_Add.DEVICE_ID) ,MOV(XO2_HSD.Event,MSG_TO_UL_Add.EVENT_ID) ,MOV(XO2_HSD.Reason,MSG_TO_UL_Add.REASON_ID) ,XIC(XO2_HSD.Reason_NA) MOV(MsgConst.NA,MSG_TO_UL_Add.REASON_ID) ,COP(XO2_HSDx.HMI_STATE[XO2_HSD.ACT_FFU_DATA.HMI_CNTRL],MSG_TO_UL_Add.DEVICE_DATA,1) ,JSR(R_MSG_TO_UL_Add,0) ];
				RC: "============================================Motor Control for HSD============================================$N"
				    "$N"
				    "";
				N: XIO(XO2_HSD.E_STOP)XIC(O_SD_XO2_EN)XIO(F_XO2_01_HSD_FAIL_TO_RETRACT)XIO(F_XO2_01_HSD_FAIL_TO_EXTEND)XIO(F_XO2_01_HSD_UNKNOWN_POS)XIO(F_XO2_01_HSD_FAULT)XIO(F_XO2_01_HSD_NOT_IN_AUTO)XIO(F_XO2_01_HSD_IP_DISC_OFF)XIO(XO2_HSD.COMM)OTE(XO2_HSD.NO_FAULT);
				N: XIC(BM1_B.MTR_GRP.RUN_LATCH)XIC(XO2_HSD.NO_FAULT)TON(XO2_HSD.DELAY_START_TMR,?,?);
				N: XIC(XO2_HSD.DELAY_START_TMR.DN)[XIO(XO2_HSD.INT_MTR) OTE(XO2_HSD.IM_ONS) ,OTE(XO2_HSD.INT_MTR) ];
				RC: "If there have been no bags in the general area of the diverter for a certain amount of time, then the diverter should retract.";
				N: XIC(XO2_HSD.Area_Clear)XIC(XO2_HSD.ACT_CNTRL.EM)XIO(F_XO2_01_HSD_NOT_IN_AUTO)XIO(F_XO2_01_HSD_DIVERT_ALL)XIO(XO2_HSD.HOME_FLTR_SEAL)TON(XO2_HSD.Auto_Retract_TMR,?,?);
				N: XIC(XO2_HSD.DIV_FLTR)XIC(XO2_HSD.Auto_Retract_TMR.DN)[XIO(XO2_HSD.INST_RET_SB) OTE(XO2_HSD.INST_RET) ,OTE(XO2_HSD.INST_RET_SB) ];
				RC: "Active Bag Detection for the HSD$N"
				    "Only run the HSD$'s paddle belt for a short time while bags are actively flowing on the mainline.";
				N: [XIC(O_SD_XO2_EXT) ,XIC(XO2_HSD.DIV_REQ) ]RES(XO2_HSD.PDL_RUN_TMR);
				N: [XIC(BM1_23_MTR.CONV_RUN) ,XIC(O_SD_XO2_RET) MOV(XO2_HSD.PDL_RUN_TMR.PRE,XO2_HSD.PDL_RUN_TMR.ACC) ]RTO(XO2_HSD.PDL_RUN_TMR,?,?);
				N: XIC(XO2_HSD.INT_MTR)XIC(BM1_23_MTR.CONV_RUN)XIO(XO2_HSD.PDL_RUN_TMR.DN)OTE(O_SD_XO2_RUN);
				N: XIO(XO2_HSD.E_STOP)XIO(O_SD_XO2_RES)XIC(XO2_HSD.OFF_TMR.DN)OTE(O_SD_XO2_EN);
				N: XIO(O_SD_XO2_EN)[XIO(XO2_HSD.CON_ONS) RES(XO2_HSD.OFF_TMR) ,OTE(XO2_HSD.CON_ONS) ];
				N: TON(XO2_HSD.OFF_TMR,?,?);
				RC: "If the diverter is not in the home position and the diverter has a fault then stop the mainline.";
				N: [XIO(XO2_HSD.HOME_FLTR_SEAL) ,XIC(XO2_HSD.DIV_FLTR) ,XIC(XO2_HSD.HOME_FLTR_SEAL) XIC(F_XO2_01_HSD_DIVERT_ALL) ,XIC(XO2_HSD.ML_STOP_FLT) ]XIO(XO2_HSD.INT_MTR)XIC(BM1_B.MTR_GRP.RUN_LATCH)OTE(XO2_HSD.ML_STOP_FLT);
				RC: "Monitor the conveyor$'s acceleration to approximate current speed";
				N: XIC(BM1_23_MTR.CONV_RUN)TON(XO2_HSD.RAMP_UP_TMR,?,?);
				RC: "============================================Statistic Counters==============================================$N"
				    "";
				N: XIC(XO2_HSD.XFER_ID_VALID)[EQU(MsgConst.Rson_DivTooClose,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivNotAuto,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivDisconnectOff,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivPosFault,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivFailedToRet,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivFailedtoExt,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivFaulted,XO2_HSD.Reason) ]ADD(1,S_XO2_01_HSD_FLTS,S_XO2_01_HSD_FLTS);
				N: XIC(XO2_HSD.XFER_ID_VALID)[EQU(MsgConst.Rson_DivDestNotAvail,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivLnFull,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivEstop,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivLnJam,XO2_HSD.Reason) ,EQU(MsgConst.Rson_DivLnOutServ,XO2_HSD.Reason) ]ADD(1,S_XO2_01_HSD_LINE_FLTS,S_XO2_01_HSD_LINE_FLTS);
				N: [XIC(XO2_HSD.DIV_REQ_ONS) ,XIC(XO2_HSD.RET_REQ_ONS) ]ADD(1,S_XO2_01_HSD_CYCLS,S_XO2_01_HSD_CYCLS);
				N: XIC(XO2_HSD.BAG_DIVERTED)ADD(1,S_XO2_01_HSD_VERIFIED_DIV,S_XO2_01_HSD_VERIFIED_DIV);
				RC: "============================================HMI Override Control============================================$N"
				    "$N"
				    "";
				N: [XIC(HMI_XO2_HSD_OUTSERV_REQ) ,XIC(HMI_XO2_HSD_PROX_OVR_REQ) OTE(F_XO2_HSD_PROX_OVR) ]OTE(F_XO2_01_HSD_OUTSERV);
				N: XIC(HMI_XO2_HSD_DIVERT_HALF_REQ)OTE(F_XO2_01_HSD_DIVERT_HALF);
				N: XIC(HMI_XO2_HSD_DIVERT_ALL_REQ)OTE(F_XO2_01_HSD_DIVERT_ALL);
				N: XIC(F_XO2_01_HSD_OUTSERV)[XIC(XO2_HSD.Area_Clear) XIC(XO2_HSD.INT_MTR) XIO(BM1_23_PE.FILT) ,XIC(XO2_HSD.DIV_0_ONS_SB) ][XIO(XO2_HSD.DIV_0_ONS_SB) OTE(XO2_HSD.DIV_0_ONS) ,OTE(XO2_HSD.DIV_0_ONS_SB) ];
				N: XIC(F_XO2_01_HSD_DIVERT_ALL)[XIC(XO2_HSD.Area_Clear) XIC(XO2_HSD.INT_MTR) XIO(BM1_23_PE.FILT) ,XIC(XO2_HSD.DIV_ALL_ONS_SB) ][XIO(XO2_HSD.DIV_ALL_ONS_SB) OTE(XO2_HSD.DIV_ALL_ONS) ,OTE(XO2_HSD.DIV_ALL_ONS_SB) ];
				RC: "============================================HMI Alarms below this point.============================================$N"
				    "";
				N: XIO(F_XO2_01_HSD_IP_DISC_OFF)XIO(XO2_HSD.E_STOP)TON(XO2_HSD.EN_DLY,?,?);
				N: XIO(XO2_HSD.COMM)[XIC(I_SD_XO2_FLT) ,XIO(I_SD_XO2_SLMR) ,XIO(I_SD_XO2_CUR) ]TON(XO2_HSD.FAULT_TMR,?,?);
				N: XIC(XO2_HSD.EN_DLY.DN)XIC(XO2_HSD.FAULT_TMR.DN)XIC(O_SD_XO2_EN)XIO(F_XO2_01_HSD_NOT_IN_AUTO)XIO(F_XO2_01_HSD_IP_DISC_OFF)[XIO(F_XO2_01_HSD_FAULT) OTE(XO2_HSD.FAULT_ONS) ,OTE(F_XO2_01_HSD_FAULT) ];
				N: XIO(XO2_HSD.COMM)XIO(I_SD_XO2_DS)[XIO(F_XO2_01_HSD_IP_DISC_OFF) OTE(XO2_HSD.IP_DISC_ONS) ,OTE(F_XO2_01_HSD_IP_DISC_OFF) ];
				N: XIO(XO2_HSD.COMM)XIO(I_SD_XO2_AUTO)OTE(F_XO2_01_HSD_NOT_IN_AUTO);
				N: XIC(I_SD_XO2_FLT)XIC(I_CS1_BM1_23_RPBA)OTE(O_SD_XO2_RES);
				RC: "============================================HMI Status below this point.============================================$N"
				    "";
				N: NOP();
				N: [XIC(XO2_HSD.INT_MTR) XIO(O_SD_XO2_RUN) ,XIC(XO2_HSD.DELAY_START_TMR.TT) ,XIC(XO2_HSD.E_STOPPED_RES) ]OTE(XO2_HSD.Idle);
				N: XIC(XO2_HSD.INT_MTR)XIC(O_SD_XO2_RUN)OTE(XO2_HSD.RUNNING);
				N: XIO(BM1_B.MTR_GRP.RUN_LATCH)OTE(XO2_HSD.AUTO_STOPPED);
				N: [XIO(EZ_BM1_ECR_1.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(XO2_HSD.E_STOP);
				N: [XIC(EZ_BM1_ECR_1.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(XO2_HSD.E_STOPPED_RES);
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_BM1_RK01_S16_COMM) ,XIC(F_MCP_BM1_RK02_S00_COMM) ,AFI() ]OTE(XO2_HSD.COMM);
				N: XIC(BM1_B.STATUS.FIRE_ALM)OTE(XO2_HSD.FIRE_ALM);
				RC: "This rung is used to set the HMI status of the HSD$N"
				    "";
				N: [CLR(XO2_HSD.G) ,XIC(XO2_HSD.RUNNING) MOV(Status.DivRunning,XO2_HSD.G) ,XIC(XO2_HSD.FULL) MOV(Status.DivFull,XO2_HSD.G) ,XIC(XO2_HSD.AUTO_STOPPED) MOV(Status.DivTimeOut,XO2_HSD.G) ,XIC(XO2_HSD.Idle) MOV(Status.DivIdle,XO2_HSD.G) ,XIC(F_XO2_01_HSD_NOT_IN_AUTO) MOV(Status.DivNotAuto,XO2_HSD.G) ,[XIC(F_XO2_01_HSD_DIVERT_ALL) ,XIC(F_XO2_01_HSD_DIVERT_HALF) ] MOV(Status.DivOverRide,XO2_HSD.G) ,XIC(F_XO2_01_HSD_IP_DISC_OFF) MOV(Status.DivDisc,XO2_HSD.G) ,XIC(F_XO2_01_HSD_UNKNOWN_POS) MOV(Status.DivPositionFault,XO2_HSD.G) ,XIC(F_XO2_01_HSD_FAIL_TO_EXTEND) MOV(Status.DivFailExt,XO2_HSD.G) ,XIC(F_XO2_01_HSD_FAIL_TO_RETRACT) MOV(Status.DivFailRet,XO2_HSD.G) ,XIC(F_XO2_01_HSD_FAULT) MOV(Status.DivFault,XO2_HSD.G) ,XIC(XO2_HSD.FIRE_ALM) MOV(Status.DivFireAlarm,XO2_HSD.G) ,XIC(XO2_HSD.E_STOP) XIO(XO2_HSD.E_STOPPED_RES) MOV(Status.DivEStop,XO2_HSD.G) ,XIC(F_XO2_01_HSD_OUTSERV) MOV(Status.DivOutOfServ,XO2_HSD.G) ,XIC(F_XO2_HSD_PROX_OVR) MOV(Status.DivProxOverride,XO2_HSD.G) ,XIC(XO2_HSD.COMM) MOV(Status.DivCommFault,XO2_HSD.G) ,MOV(XO2_HSD.G,G_XO2_01_HSD_STS) ];
				RC: "This rung is used to set the Position of the HSD$N"
				    "";
				N: [XIC(XO2_HSD.HOME_FLTR_SEAL) MOV(Status.DivPOShome,XO2_HSD.P) ,XIC(XO2_HSD.DIV_FLTR) MOV(Status.DivPOSdivert,XO2_HSD.P) ,XIO(XO2_HSD.HOME_FLTR_SEAL) XIO(XO2_HSD.DIV_FLTR) MOV(Status.DivPosNotHomeOrExt,XO2_HSD.P) ,XIC(XO2_HSD.HOME_FLTR_SEAL) XIC(XO2_HSD.DIV_FLTR) MOV(Status.DivPosHomeAndExt,XO2_HSD.P) ,MOV(XO2_HSD.P,G_XO2_01_HSD_POS) ];
		END_ROUTINE

		ROUTINE XO2_JAMS 
				RC: "****************************************************************************************************$N"
				    "This routine performs jam monitoring for all photoeyes in the associated motor group.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO2_05_MTR.CONV_RUN)RTO(XO2_05_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO2_05_RPBA) XIC(XO2_05_PE.JAM_TMR.DN) ,XIO(XO2_05_PE.JAM_TMR.DN) ]XIC(I_PE_XO2_05)RES(XO2_05_PE.JAM_TMR);
				N: XIC(XO2_05_PE.JAM_TMR.DN)[XIO(F_XO2_05_PE_JAMMED) [ADD(S_XO2_05_PE_JAM,1,S_XO2_05_PE_JAM) ,OTE(XO2_05_PE.JAM_ONS) ] ,OTE(F_XO2_05_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO2_04_MTR.CONV_RUN)RTO(XO2_04_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO2_05_RPBA) XIC(XO2_04_PE.JAM_TMR.DN) ,XIO(XO2_04_PE.JAM_TMR.DN) ]XIC(I_PE_XO2_04)RES(XO2_04_PE.JAM_TMR);
				N: XIC(XO2_04_PE.JAM_TMR.DN)[XIO(F_XO2_04_PE_JAMMED) [ADD(S_XO2_04_PE_JAM,1,S_XO2_04_PE_JAM) ,OTE(XO2_04_PE.JAM_ONS) ] ,OTE(F_XO2_04_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO2_03_MTR.CONV_RUN)RTO(XO2_03_PE.JAM_TMR,?,?);
				N: [[XIC(I_CS_XO2_02_RPBA) ,XIC(I_CS_XO2_05_RPBA) ] XIC(XO2_03_PE.JAM_TMR.DN) ,XIO(XO2_03_PE.JAM_TMR.DN) ]XIC(I_PE_XO2_03)RES(XO2_03_PE.JAM_TMR);
				N: XIC(XO2_03_PE.JAM_TMR.DN)[XIO(F_XO2_03_PE_JAMMED) [ADD(S_XO2_03_PE_JAM,1,S_XO2_03_PE_JAM) ,OTE(XO2_03_PE.JAM_ONS) ] ,OTE(F_XO2_03_PE_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO2_02_MTR.CONV_RUN)RTO(XO2_02_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO2_02_RPBA) XIC(XO2_02_PE.JAM_TMR.DN) ,XIO(XO2_02_PE.JAM_TMR.DN) ]XIC(I_PE_XO2_02)RES(XO2_02_PE.JAM_TMR);
				N: XIC(XO2_02_PE.JAM_TMR.DN)[XIO(F_CL1T_26_PE1_JAMMED) [ADD(S_CL1T_26_PE1_JAM,1,S_CL1T_26_PE1_JAM) ,OTE(XO2_02_PE.JAM_ONS) ] ,OTE(F_CL1T_26_PE1_JAMMED) ];
				RC: "Jam Detection$N"
				    "$N"
				    "";
				N: XIC(XO2_01_MTR.CONV_RUN)RTO(XO2_01_PE.JAM_TMR,?,?);
				N: [XIC(I_CS_XO2_02_RPBA) XIC(XO2_01_PE.JAM_TMR.DN) ,XIO(XO2_01_PE.JAM_TMR.DN) ]XIC(I_PE_XO2_01)RES(XO2_01_PE.JAM_TMR);
				N: XIC(XO2_01_PE.JAM_TMR.DN)[XIO(F_CL1T_26_PE2_JAMMED) [ADD(S_CL1T_26_PE2_JAM,1,S_CL1T_26_PE2_JAM) ,OTE(XO2_01_PE.JAM_ONS) ] ,OTE(F_CL1T_26_PE2_JAMMED) ];
		END_ROUTINE

		ROUTINE XO2_MTRS 
				RC: "****************************************************************************************************$N"
				    "This routine performs the general start/stop control of the conveyors in the associated motor group.$N"
				    "This routine has two sections.  The first section includes logic to group the status$' of the motors into single bits, and logic for master system control such as kick starting the system and auto stopping the system.$N"
				    "The second part of this routine is a series of rungs programmed for each motor in the motor group.  The logic contained within this section is specific to each motor and may vary depending on type of drive (VFD or Full Voltage Starter) and the electromechanical braking mechanism installed (Separately  excited brake or Clutch brake).$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "System Start Request";
				N: [XIC(I_CS_MCP_03_SPBG) ,XIC(BM1_B.MTR_GRP.START_DS) ,AFI() ]OTE(XO2.MTR_GRP.START);
				RC: "Motor run expander.";
				N: XIC(XO2_05_MTR.INTL_MTR)XIC(XO2_04_MTR.CONV_RUN)XIC(XO2_03_MTR.CONV_RUN)XIC(XO2_02_MTR.CONV_RUN)XIC(XO2_01_MTR.CONV_RUN)OTE(XO2.MTR_GRP.RUN_EXPAND);
				RC: "PE Grouping";
				N: [XIO(I_PE_XO2_05) ,XIO(I_PE_XO2_04) ,XIO(I_PE_XO2_03) ,XIO(I_PE_XO2_02) ,XIO(I_PE_XO2_01) ,AFI() ]OTE(XO2.MTR_GRP.PEs);
				RC: "Reset Run Timer";
				N: [XIC(XO2.MTR_GRP.START) ,XIC(XO2.MTR_GRP.PEs) XIO(XO2.MTR_GRP.AUTO_STOP_TIMER.DN) ]RES(XO2.MTR_GRP.AUTO_STOP_TIMER);
				RC: "Send downstream start request";
				N: XIC(XO2.MTR_GRP.RUN_LATCH)XIC(XO2.MTR_GRP.PEs)OTE(XO2.MTR_GRP.START_DS);
				RC: "Run Timer";
				N: XIC(XO2.MTR_GRP.RUN_EXPAND)RTO(XO2.MTR_GRP.AUTO_STOP_TIMER,?,?);
				RC: "Run Latch";
				N: [XIC(XO2.MTR_GRP.START) ,XIC(XO2.MTR_GRP.RUN_LATCH) ]XIO(XO2.MTR_GRP.AUTO_STOP_TIMER.DN)XIO(XO2.STATUS.FIRE_ALM)OTE(XO2.MTR_GRP.RUN_LATCH);
				RC: "Motor XO2_05$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(INT.ALWAYS_FALSE)OTE(XO2_05_MTR.ANTI_CASC);
				RC: "JRB Filter";
				N: [XIC(I_CS_XO2_05_JRB) TON(XO2_05_MTR.JRB_FILT_TON,?,?) ,XIC(XO2_05_MTR.JRB_FILT_TON.DN) OTE(XO2_05_MTR.JRB_FILT) ];
				RC: "Motor No Fault detection";
				N: XIO(XO2_05_MTR.E_STOP)[XIC(XO2_05_VFD.READY) XIO(XO2_05_MTR.JAMMED) ,XIC(F_XO2_05_OVRIDE) ,XIC(F_XO2_05_JOG_REVERSE) ]XIO(F_XO2_05_MSD_OFF)XIO(F_XO2_05_OUTSERV)XIO(XO2_05_MTR.COMM)OTE(XO2_05_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO2.MTR_GRP.RUN_LATCH) ,XIC(F_XO2_05_OVRIDE) ]XIC(XO2_05_MTR.NO_FAULT)TON(XO2_05_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO2_05_MTR.IM_TMR.DN)[XIO(XO2_05_MTR.INTL_MTR) OTE(XO2_05_MTR.IM_ONS) ,OTE(XO2_05_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO2_05_PE.FILT_NEG_XITN)RES(XO2_05_MTR.T2H_SPACE_TMR);
				N: XIC(I_INT_C4_09_RUN)RTO(XO2_05_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO2_05_PE.POS_XITN) XIC(XO2_05_MTR.INTL_MTR) ,XIC(XO2_05_MTR.T2H_SPACE) ]XIO(XO2_05_MTR.T2H_SPACE_TMR.DN)OTE(XO2_05_MTR.T2H_SPACE);
				N: XIC(XO2_05_MTR.T2H_SPACE)OTE(XO2_05_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(zzzC4_09zz_MTR_ON_TMR_DN) XIC(XO2_05_MTR.OFF_TMR.DN) ,XIO(zzzC4_09zz_MTR_IM_ONS) XIC(XO2_05_MTR.IM_ONS) ,XIC(XO2_05_MTR.ANTI_CASC) XIC(I_PE_XO2_05) ]OTE(XO2_05_MTR.START_EN);
				N: [[XIO(zzzC4_09zz_MTR_ON_TMR_DN) ,XIO(XO2_05_MRG.MrgSeal) ] [XIO(I_PE_XO2_05) ,XIC(XO2_05_MRG.PeSeal) ,XIO(XO2_05_MRG.SyncRunTmr.DN) ] ,XIO(XO2_05_MTR.ANTI_CASC) XIC(XO2_05_MTR.SPACE) ]OTE(XO2_05_MTR.STOP);
				N: XIC(XO2_05_MTR.INTL_MTR)XIO(F_XO2_05_JOG_REVERSE)[[XIC(XO2_05_MTR.START_EN) ,XIC(XO2_05_MTR.CONV_RUN) ] XIO(XO2_05_MTR.STOP) ,[XIO(XO2_05_MRG.SyncRunTmr.DN) ,XIC(XO2_05_MRG.MrgSeal) ] XIC(I_INT_C4_09_RUN) ,XIC(F_XO2_05_OVRIDE) ][OTE(XO2_05_MTR.CONV_RUN) ,XIO(XO2_05_MRG.MergeRunTmr.DN) OTE(O_VFD_XO2_05_FWD) ];
				N: XIC(F_XO2_05_JOG_REVERSE)XIC(XO2_05_MTR.JRB_FILT)XIO(XO2_05_MTR.E_STOP)XIC(XO2_05_VFD.READY)XIO(F_XO2_05_MSD_OFF)XIO(XO2_05_MTR.COMM)XIO(F_XO2_05_OVRIDE)OTE(O_VFD_XO2_05_REV);
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO2_05_MTR.CONV_RUN)TON(XO2_05_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO2_05_MTR.CONV_RUN)TON(XO2_05_MTR.OFF_TMR,?,?);
				RC: "Motor XO2_04$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO2_05_MSD_OFF)OTE(XO2_04_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO2_04_MTR.E_STOP)[XIC(XO2_04_VFD.READY) XIO(XO2_04_MTR.JAMMED) ,XIC(F_XO2_04_OVRIDE) ]XIO(F_XO2_04_MSD_OFF)XIO(F_XO2_04_OUTSERV)XIO(XO2_04_MTR.COMM)OTE(XO2_04_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO2.MTR_GRP.RUN_LATCH) ,XIC(F_XO2_04_OVRIDE) ]XIC(XO2_04_MTR.NO_FAULT)TON(XO2_04_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO2_04_MTR.IM_TMR.DN)[XIO(XO2_04_MTR.INTL_MTR) OTE(XO2_04_MTR.IM_ONS) ,OTE(XO2_04_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO2_04_PE.FILT_NEG_XITN)RES(XO2_04_MTR.T2H_SPACE_TMR);
				N: XIC(XO2_05_MTR.CONV_RUN)RTO(XO2_04_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO2_04_PE.POS_XITN) XIC(XO2_04_MTR.INTL_MTR) ,XIC(XO2_04_MTR.T2H_SPACE) ]XIO(XO2_04_MTR.T2H_SPACE_TMR.DN)OTE(XO2_04_MTR.T2H_SPACE);
				N: XIC(XO2_04_MTR.T2H_SPACE)OTE(XO2_04_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(XO2_05_MTR.ON_TMR.DN) XIC(XO2_04_MTR.OFF_TMR.DN) ,XIO(XO2_05_MTR.IM_ONS) XIC(XO2_04_MTR.IM_ONS) ,XIC(XO2_04_MTR.ANTI_CASC) XIC(I_PE_XO2_04) ]OTE(XO2_04_MTR.START_EN);
				N: [XIO(XO2_05_MTR.ON_TMR.DN) XIO(I_PE_XO2_04) ,XIO(XO2_04_MTR.ANTI_CASC) XIC(XO2_04_MTR.SPACE) ]OTE(XO2_04_MTR.STOP);
				N: XIC(XO2_04_MTR.INTL_MTR)[[XIC(XO2_04_MTR.START_EN) ,XIC(XO2_04_MTR.CONV_RUN) ] XIO(XO2_04_MTR.STOP) ,XIC(F_XO2_04_OVRIDE) ][OTE(XO2_04_MTR.CONV_RUN) ,OTE(O_VFD_XO2_04_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO2_04_MTR.CONV_RUN)TON(XO2_04_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO2_04_MTR.CONV_RUN)TON(XO2_04_MTR.OFF_TMR,?,?);
				RC: "Motor XO2_03$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO2_04_MSD_OFF)OTE(XO2_03_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO2_03_MTR.E_STOP)[XIC(XO2_03_VFD.READY) XIO(XO2_03_MTR.JAMMED) ,XIC(F_XO2_03_OVRIDE) ]XIO(F_XO2_03_MSD_OFF)XIO(F_XO2_03_OUTSERV)XIO(XO2_03_MTR.COMM)OTE(XO2_03_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO2.MTR_GRP.RUN_LATCH) ,XIC(F_XO2_03_OVRIDE) ]XIC(XO2_03_MTR.NO_FAULT)TON(XO2_03_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO2_03_MTR.IM_TMR.DN)[XIO(XO2_03_MTR.INTL_MTR) OTE(XO2_03_MTR.IM_ONS) ,OTE(XO2_03_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO2_03_PE.FILT_NEG_XITN)RES(XO2_03_MTR.T2H_SPACE_TMR);
				N: XIC(XO2_04_MTR.CONV_RUN)RTO(XO2_03_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO2_03_PE.POS_XITN) XIC(XO2_03_MTR.INTL_MTR) ,XIC(XO2_03_MTR.T2H_SPACE) ]XIO(XO2_03_MTR.T2H_SPACE_TMR.DN)OTE(XO2_03_MTR.T2H_SPACE);
				N: XIC(XO2_03_MTR.T2H_SPACE)OTE(XO2_03_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(XO2_04_MTR.ON_TMR.DN) XIC(XO2_03_MTR.OFF_TMR.DN) ,XIO(XO2_04_MTR.IM_ONS) XIC(XO2_03_MTR.IM_ONS) ,XIC(XO2_03_MTR.ANTI_CASC) XIC(I_PE_XO2_03) ]OTE(XO2_03_MTR.START_EN);
				N: [XIO(XO2_04_MTR.ON_TMR.DN) XIO(I_PE_XO2_03) ,XIO(XO2_03_MTR.ANTI_CASC) XIC(XO2_03_MTR.SPACE) ]OTE(XO2_03_MTR.STOP);
				N: XIC(XO2_03_MTR.INTL_MTR)[[XIC(XO2_03_MTR.START_EN) ,XIC(XO2_03_MTR.CONV_RUN) ] XIO(XO2_03_MTR.STOP) ,XIC(F_XO2_03_OVRIDE) ][OTE(XO2_03_MTR.CONV_RUN) ,OTE(O_VFD_XO2_03_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO2_03_MTR.CONV_RUN)TON(XO2_03_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO2_03_MTR.CONV_RUN)TON(XO2_03_MTR.OFF_TMR,?,?);
				RC: "Motor XO2_02$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO2_03_MSD_OFF)OTE(XO2_02_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO2_02_MTR.E_STOP)[XIC(XO2_02_VFD.READY) XIO(XO2_02_MTR.JAMMED) ,XIC(F_XO2_02_OVRIDE) ]XIO(F_XO2_02_MSD_OFF)XIO(F_XO2_02_OUTSERV)XIO(XO2_02_MTR.COMM)OTE(XO2_02_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO2.MTR_GRP.RUN_LATCH) ,XIC(F_XO2_02_OVRIDE) ]XIC(XO2_02_MTR.NO_FAULT)TON(XO2_02_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO2_02_MTR.IM_TMR.DN)[XIO(XO2_02_MTR.INTL_MTR) OTE(XO2_02_MTR.IM_ONS) ,OTE(XO2_02_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO2_02_PE.FILT_NEG_XITN)RES(XO2_02_MTR.T2H_SPACE_TMR);
				N: XIC(XO2_03_MTR.CONV_RUN)RTO(XO2_02_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO2_02_PE.POS_XITN) XIC(XO2_02_MTR.INTL_MTR) ,XIC(XO2_02_MTR.T2H_SPACE) ]XIO(XO2_02_MTR.T2H_SPACE_TMR.DN)OTE(XO2_02_MTR.T2H_SPACE);
				N: XIC(XO2_02_MTR.T2H_SPACE)OTE(XO2_02_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(XO2_03_MTR.ON_TMR.DN) XIC(XO2_02_MTR.OFF_TMR.DN) ,XIO(XO2_03_MTR.IM_ONS) XIC(XO2_02_MTR.IM_ONS) ,XIC(XO2_02_MTR.ANTI_CASC) XIC(I_PE_XO2_02) ]OTE(XO2_02_MTR.START_EN);
				N: [XIO(XO2_03_MTR.ON_TMR.DN) XIO(I_PE_XO2_02) ,XIO(XO2_02_MTR.ANTI_CASC) XIC(XO2_02_MTR.SPACE) ]OTE(XO2_02_MTR.STOP);
				N: XIC(XO2_02_MTR.INTL_MTR)[[XIC(XO2_02_MTR.START_EN) ,XIC(XO2_02_MTR.CONV_RUN) ] XIO(XO2_02_MTR.STOP) ,XIC(F_XO2_02_OVRIDE) ][OTE(XO2_02_MTR.CONV_RUN) ,OTE(O_VFD_XO2_02_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO2_02_MTR.CONV_RUN)TON(XO2_02_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO2_02_MTR.CONV_RUN)TON(XO2_02_MTR.OFF_TMR,?,?);
				RC: "Motor XO2_01$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Anti-Cascade is the functionality by which the $Qlatching$Q aspect of a head end stop can be bypassed allowing a conveyor to restart when the photoeye is cleared.";
				N: XIC(F_XO2_02_MSD_OFF)OTE(XO2_01_MTR.ANTI_CASC);
				RC: "Motor No Fault detection";
				N: XIO(XO2_01_MTR.E_STOP)[XIC(XO2_01_VFD.READY) XIO(XO2_01_MTR.JAMMED) ,XIC(F_XO2_01_OVRIDE) ]XIO(F_XO2_01_MSD_OFF)XIO(F_XO2_01_OUTSERV)XIO(XO2_01_MTR.COMM)OTE(XO2_01_MTR.NO_FAULT);
				RC: "Internal Motor timer.";
				N: [XIC(XO2.MTR_GRP.RUN_LATCH) ,XIC(F_XO2_01_OVRIDE) ]XIC(XO2_01_MTR.NO_FAULT)TON(XO2_01_MTR.IM_TMR,?,?);
				RC: "Internal Motor.";
				N: XIC(XO2_01_MTR.IM_TMR.DN)[XIO(XO2_01_MTR.INTL_MTR) OTE(XO2_01_MTR.IM_ONS) ,OTE(XO2_01_MTR.INTL_MTR) ];
				RC: "Tail - Head Spacer - Hard$N"
				    "==============================================================$N"
				    "";
				N: XIC(XO2_01_PE.FILT_NEG_XITN)RES(XO2_01_MTR.T2H_SPACE_TMR);
				N: XIC(XO2_02_MTR.CONV_RUN)RTO(XO2_01_MTR.T2H_SPACE_TMR,?,?);
				N: [XIC(XO2_01_PE.POS_XITN) XIC(XO2_01_MTR.INTL_MTR) ,XIC(XO2_01_MTR.T2H_SPACE) ]XIO(XO2_01_MTR.T2H_SPACE_TMR.DN)OTE(XO2_01_MTR.T2H_SPACE);
				N: XIC(XO2_01_MTR.T2H_SPACE)OTE(XO2_01_MTR.SPACE);
				RC: "Conveyor Running.";
				N: [XIC(XO2_02_MTR.ON_TMR.DN) XIC(XO2_01_MTR.OFF_TMR.DN) ,XIO(XO2_02_MTR.IM_ONS) XIC(XO2_01_MTR.IM_ONS) ,XIC(XO2_01_MTR.ANTI_CASC) XIC(I_PE_XO2_01) ]OTE(XO2_01_MTR.START_EN);
				N: [XIO(XO2_02_MTR.ON_TMR.DN) XIO(I_PE_XO2_01) ,XIO(XO2_01_MTR.ANTI_CASC) XIC(XO2_01_MTR.SPACE) ]OTE(XO2_01_MTR.STOP);
				N: XIC(XO2_01_MTR.INTL_MTR)[[XIO(XO2_HSD.SYNC_RUN) [XIC(XO2_01_MTR.START_EN) ,XIC(XO2_01_MTR.CONV_RUN) ] ,XIC(XO2_HSD.SYNC_RUN) XIO(BM1_23_MTR.STOP) XIC(BM1_23_MTR.INTL_MTR) ] XIO(XO2_01_MTR.STOP) ,XIC(F_XO2_01_OVRIDE) ][OTE(XO2_01_MTR.CONV_RUN) ,OTE(O_VFD_XO2_01_FWD) ];
				RC: "Conveyor on timer.  This timer is used by the upstream conveyor to determine if this conveyor has run long enough before it is allowed to start.";
				N: XIC(XO2_01_MTR.CONV_RUN)TON(XO2_01_MTR.ON_TMR,?,?);
				RC: "Conveyor off timer.  This timer is used by the conveyor to ensure that if the conveyor stops, it stays stopped for a minimum amount of time.";
				N: XIO(XO2_01_MTR.CONV_RUN)TON(XO2_01_MTR.OFF_TMR,?,?);
		END_ROUTINE

		ROUTINE XO2_PE_Filters 
				RC: "****************************************************************************************************$N"
				    "This routine performs the photoeye filtering for non tracked phtotoeyes.$N"
				    "This routine also contains photoeye Pos/Neg Transition logic for non tracked photoeyes.$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Photoeye";
				N: XIO(XO2_05_MTR.COMM)[[XIO(I_PE_XO2_05) ,XIC(XO2_05_PE.TOF.DN) ] TON(XO2_05_PE.TON,?,?) ,XIO(I_PE_XO2_05) XIC(XO2_05_PE.TON.DN) TOF(XO2_05_PE.TOF,?,?) ,XIC(XO2_05_PE.TOF.DN) OTE(XO2_05_PE.FILT) ];
				N: XIC(XO2_05_PE.FILT)[XIO(XO2_05_PE.FILT_POS_XITN_MEM) OTE(XO2_05_PE.FILT_POS_XITN) ,OTE(XO2_05_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO2_05_PE.FILT)[XIO(XO2_05_PE.FILT_NEG_XITN_MEM) OTE(XO2_05_PE.FILT_NEG_XITN) ,OTE(XO2_05_PE.FILT_NEG_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO2_04_MTR.COMM)[[XIO(I_PE_XO2_04) ,XIC(XO2_04_PE.TOF.DN) ] TON(XO2_04_PE.TON,?,?) ,XIO(I_PE_XO2_04) XIC(XO2_04_PE.TON.DN) TOF(XO2_04_PE.TOF,?,?) ,XIC(XO2_04_PE.TOF.DN) OTE(XO2_04_PE.FILT) ];
				N: XIC(XO2_04_PE.FILT)[XIO(XO2_04_PE.FILT_POS_XITN_MEM) OTE(XO2_04_PE.FILT_POS_XITN) ,OTE(XO2_04_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO2_04_PE.FILT)[XIO(XO2_04_PE.FILT_NEG_XITN_MEM) OTE(XO2_04_PE.FILT_NEG_XITN) ,OTE(XO2_04_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO2_04)[XIO(XO2_04_PE.POS_XITN_MEM) OTE(XO2_04_PE.POS_XITN) ,OTE(XO2_04_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO2_03_MTR.COMM)[[XIO(I_PE_XO2_03) ,XIC(XO2_03_PE.TOF.DN) ] TON(XO2_03_PE.TON,?,?) ,XIO(I_PE_XO2_03) XIC(XO2_03_PE.TON.DN) TOF(XO2_03_PE.TOF,?,?) ,XIC(XO2_03_PE.TOF.DN) OTE(XO2_03_PE.FILT) ];
				N: XIC(XO2_03_PE.FILT)[XIO(XO2_03_PE.FILT_POS_XITN_MEM) OTE(XO2_03_PE.FILT_POS_XITN) ,OTE(XO2_03_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO2_03_PE.FILT)[XIO(XO2_03_PE.FILT_NEG_XITN_MEM) OTE(XO2_03_PE.FILT_NEG_XITN) ,OTE(XO2_03_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO2_03)[XIO(XO2_03_PE.POS_XITN_MEM) OTE(XO2_03_PE.POS_XITN) ,OTE(XO2_03_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO2_02_MTR.COMM)[[XIO(I_PE_XO2_02) ,XIC(XO2_02_PE.TOF.DN) ] TON(XO2_02_PE.TON,?,?) ,XIO(I_PE_XO2_02) XIC(XO2_02_PE.TON.DN) TOF(XO2_02_PE.TOF,?,?) ,XIC(XO2_02_PE.TOF.DN) OTE(XO2_02_PE.FILT) ];
				N: XIC(XO2_02_PE.FILT)[XIO(XO2_02_PE.FILT_POS_XITN_MEM) OTE(XO2_02_PE.FILT_POS_XITN) ,OTE(XO2_02_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO2_02_PE.FILT)[XIO(XO2_02_PE.FILT_NEG_XITN_MEM) OTE(XO2_02_PE.FILT_NEG_XITN) ,OTE(XO2_02_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO2_02)[XIO(XO2_02_PE.POS_XITN_MEM) OTE(XO2_02_PE.POS_XITN) ,OTE(XO2_02_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(XO2_01_MTR.COMM)[[XIO(I_PE_XO2_01) ,XIC(XO2_01_PE.TOF.DN) ] TON(XO2_01_PE.TON,?,?) ,XIO(I_PE_XO2_01) XIC(XO2_01_PE.TON.DN) TOF(XO2_01_PE.TOF,?,?) ,XIC(XO2_01_PE.TOF.DN) OTE(XO2_01_PE.FILT) ];
				N: XIC(XO2_01_PE.FILT)[XIO(XO2_01_PE.FILT_POS_XITN_MEM) OTE(XO2_01_PE.FILT_POS_XITN) ,OTE(XO2_01_PE.FILT_POS_XITN_MEM) ];
				N: XIO(XO2_01_PE.FILT)[XIO(XO2_01_PE.FILT_NEG_XITN_MEM) OTE(XO2_01_PE.FILT_NEG_XITN) ,OTE(XO2_01_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_XO2_01)[XIO(XO2_01_PE.POS_XITN_MEM) OTE(XO2_01_PE.POS_XITN) ,OTE(XO2_01_PE.POS_XITN_MEM) ];
				RC: "Photoeye";
				N: XIO(F_MCP_03_RK01_S00_COMM)[[XIO(I_PE_C4_08) ,XIC(C4_08_PE.TOF.DN) ] TON(C4_08_PE.TON,?,?) ,XIO(I_PE_C4_08) XIC(C4_08_PE.TON.DN) TOF(C4_08_PE.TOF,?,?) ,XIC(C4_08_PE.TOF.DN) OTE(C4_08_PE.FILT) ];
				N: XIC(C4_08_PE.FILT)[XIO(C4_08_PE.FILT_POS_XITN_MEM) OTE(C4_08_PE.FILT_POS_XITN) ,OTE(C4_08_PE.FILT_POS_XITN_MEM) ];
				N: XIO(C4_08_PE.FILT)[XIO(C4_08_PE.FILT_NEG_XITN_MEM) OTE(C4_08_PE.FILT_NEG_XITN) ,OTE(C4_08_PE.FILT_NEG_XITN_MEM) ];
				N: XIO(I_PE_C4_08)[XIO(C4_08_PE.POS_XITN_MEM) OTE(C4_08_PE.POS_XITN) ,OTE(C4_08_PE.POS_XITN_MEM) ];
		END_ROUTINE

		ROUTINE XO2_STATUS 
				RC: "****************************************************************************************************$N"
				    "This routine is primarily used to set the HMI status of the conveyors.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(XO2_05_MTR.COMM);
				N: [XIC(O_VFD_XO2_05_FWD) ,XIC(O_VFD_XO2_05_REV) ]XIC(XO2_05_MTR.CONV_RUN)OTE(XO2_05_MTR.RUNNING);
				N: XIO(I_CS_XO2_05_AUTO)OTE(F_XO2_05_JOG_REVERSE);
				N: XIC(XO2_05_VFD.FAULTED)[XIO(F_XO2_05_VFD_FAULT) OTE(XO2_05_VFD.FAULT_ONS) ,OTE(F_XO2_05_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO2_05_MOL);
				N: XIO(I_MSD_XO2_05)XIO(XO2_05_MTR.COMM)[XIO(F_XO2_05_MSD_OFF) OTE(XO2_05_MTR.MSD_ONS) ,OTE(F_XO2_05_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO2_05_CTCTR_FAULT) OTE(XO2_05_MTR.MS_FLT_ONS) ,OTE(F_XO2_05_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_A32B3.Zone_OK) ,AFI() ]OTE(XO2_05_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_A32B3.Zone_RES) ,AFI() ]OTE(XO2_05_MTR.E_STOP_RES);
				N: XIC(XO2.STATUS.FIRE_ALM)OTE(XO2_05_MTR.FIRE_ALM);
				N: XIO(XO2_05_MTR.CONV_RUN)XIC(XO2_05_MTR.INTL_MTR)OTE(XO2_05_MTR.CASC);
				N: XIO(XO2.MTR_GRP.RUN_LATCH)OTE(XO2_05_MTR.AUTO_STOP);
				N: XIC(HMI_XO2_05_OVRIDE_REQ)[XIO(F_XO2_05_OVRIDE) OTE(XO2_05_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO2_05_OVRIDE) ];
				N: XIC(HMI_XO2_05_OUTSERV_REQ)[XIO(F_XO2_05_OUTSERV) OTE(XO2_05_MTR.OOS_ONS) ,OTE(F_XO2_05_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO2_05_MTR.MB_JAMMED);
				N: [XIC(F_XO2_05_PE_JAMMED) ,XIC(F_XO2_04_PE_JAMMED) ,XIC(XO2_05_MTR.MB_JAMMED) ,AFI() ]OTE(XO2_05_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(XO2_04_MTR.COMM);
				N: XIC(O_VFD_XO2_04_FWD)XIC(XO2_04_MTR.CONV_RUN)OTE(XO2_04_MTR.RUNNING);
				N: XIC(XO2_04_VFD.FAULTED)[XIO(F_XO2_04_VFD_FAULT) OTE(XO2_04_VFD.FAULT_ONS) ,OTE(F_XO2_04_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO2_04_MOL);
				N: XIO(I_MSD_XO2_04)XIO(XO2_04_MTR.COMM)[XIO(F_XO2_04_MSD_OFF) OTE(XO2_04_MTR.MSD_ONS) ,OTE(F_XO2_04_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO2_04_CTCTR_FAULT) OTE(XO2_04_MTR.MS_FLT_ONS) ,OTE(F_XO2_04_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30307.Zone_OK) ,XIO(EZ_A32B3.Zone_OK) ,AFI() ]OTE(XO2_04_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30307.Zone_RES) ,XIC(EZ_A32B3.Zone_RES) ,AFI() ]OTE(XO2_04_MTR.E_STOP_RES);
				N: XIC(XO2.STATUS.FIRE_ALM)OTE(XO2_04_MTR.FIRE_ALM);
				N: XIO(XO2_04_MTR.CONV_RUN)XIC(XO2_04_MTR.INTL_MTR)OTE(XO2_04_MTR.CASC);
				N: XIO(XO2.MTR_GRP.RUN_LATCH)OTE(XO2_04_MTR.AUTO_STOP);
				N: XIC(HMI_XO2_04_OVRIDE_REQ)[XIO(F_XO2_04_OVRIDE) OTE(XO2_04_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO2_04_OVRIDE) ];
				N: XIC(HMI_XO2_04_OUTSERV_REQ)[XIO(F_XO2_04_OUTSERV) OTE(XO2_04_MTR.OOS_ONS) ,OTE(F_XO2_04_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO2_04_MTR.MB_JAMMED);
				N: [XIC(F_XO2_04_PE_JAMMED) ,XIC(F_XO2_03_PE_JAMMED) ,XIC(XO2_04_MTR.MB_JAMMED) ,AFI() ]OTE(XO2_04_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(XO2_03_MTR.COMM);
				N: XIC(O_VFD_XO2_03_FWD)XIC(XO2_03_MTR.CONV_RUN)OTE(XO2_03_MTR.RUNNING);
				N: XIC(XO2_03_VFD.FAULTED)[XIO(F_XO2_03_VFD_FAULT) OTE(XO2_03_VFD.FAULT_ONS) ,OTE(F_XO2_03_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO2_03_MOL);
				N: XIO(I_MSD_XO2_03)XIO(XO2_03_MTR.COMM)[XIO(F_XO2_03_MSD_OFF) OTE(XO2_03_MTR.MSD_ONS) ,OTE(F_XO2_03_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO2_03_CTCTR_FAULT) OTE(XO2_03_MTR.MS_FLT_ONS) ,OTE(F_XO2_03_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30307.Zone_OK) ,AFI() ]OTE(XO2_03_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30307.Zone_RES) ,AFI() ]OTE(XO2_03_MTR.E_STOP_RES);
				N: XIC(XO2.STATUS.FIRE_ALM)OTE(XO2_03_MTR.FIRE_ALM);
				N: XIO(XO2_03_MTR.CONV_RUN)XIC(XO2_03_MTR.INTL_MTR)OTE(XO2_03_MTR.CASC);
				N: XIO(XO2.MTR_GRP.RUN_LATCH)OTE(XO2_03_MTR.AUTO_STOP);
				N: XIC(HMI_XO2_03_OVRIDE_REQ)[XIO(F_XO2_03_OVRIDE) OTE(XO2_03_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO2_03_OVRIDE) ];
				N: XIC(HMI_XO2_03_OUTSERV_REQ)[XIO(F_XO2_03_OUTSERV) OTE(XO2_03_MTR.OOS_ONS) ,OTE(F_XO2_03_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO2_03_MTR.MB_JAMMED);
				N: [XIC(F_XO2_03_PE_JAMMED) ,XIC(F_CL1T_26_PE1_JAMMED) ,XIC(XO2_03_MTR.MB_JAMMED) ,AFI() ]OTE(XO2_03_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(XO2_02_MTR.COMM);
				N: XIC(O_VFD_XO2_02_FWD)XIC(XO2_02_MTR.CONV_RUN)OTE(XO2_02_MTR.RUNNING);
				N: XIC(XO2_02_VFD.FAULTED)[XIO(F_XO2_02_VFD_FAULT) OTE(XO2_02_VFD.FAULT_ONS) ,OTE(F_XO2_02_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO2_02_MOL);
				N: XIO(I_MSD_XO2_02)XIO(XO2_02_MTR.COMM)[XIO(F_XO2_02_MSD_OFF) OTE(XO2_02_MTR.MSD_ONS) ,OTE(F_XO2_02_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO2_02_CTCTR_FAULT) OTE(XO2_02_MTR.MS_FLT_ONS) ,OTE(F_XO2_02_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30307.Zone_OK) ,AFI() ]OTE(XO2_02_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30307.Zone_RES) ,AFI() ]OTE(XO2_02_MTR.E_STOP_RES);
				N: XIC(XO2.STATUS.FIRE_ALM)OTE(XO2_02_MTR.FIRE_ALM);
				N: XIO(XO2_02_MTR.CONV_RUN)XIC(XO2_02_MTR.INTL_MTR)OTE(XO2_02_MTR.CASC);
				N: XIO(XO2.MTR_GRP.RUN_LATCH)OTE(XO2_02_MTR.AUTO_STOP);
				N: XIC(HMI_XO2_02_OVRIDE_REQ)[XIO(F_XO2_02_OVRIDE) OTE(XO2_02_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO2_02_OVRIDE) ];
				N: XIC(HMI_XO2_02_OUTSERV_REQ)[XIO(F_XO2_02_OUTSERV) OTE(XO2_02_MTR.OOS_ONS) ,OTE(F_XO2_02_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO2_02_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_26_PE1_JAMMED) ,XIC(F_CL1T_26_PE2_JAMMED) ,XIC(XO2_02_MTR.MB_JAMMED) ,AFI() ]OTE(XO2_02_MTR.JAMMED);
				RC: "Conveyor Status$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(F_MCP_CC01_RK01_S02_COMM) ,XIC(F_MCP_03_RK01_S00_COMM) ,XIC(F_MCP_03_RK02_S00_COMM) ,AFI() ]OTE(XO2_01_MTR.COMM);
				N: XIC(O_VFD_XO2_01_FWD)XIC(XO2_01_MTR.CONV_RUN)OTE(XO2_01_MTR.RUNNING);
				N: XIC(XO2_01_VFD.FAULTED)[XIO(F_XO2_01_VFD_FAULT) OTE(XO2_01_VFD.FAULT_ONS) ,OTE(F_XO2_01_VFD_FAULT) ];
				N: XIC(INT.ALWAYS_FALSE)OTE(F_XO2_01_MOL);
				N: XIO(I_MSD_XO2_01)XIO(XO2_01_MTR.COMM)[XIO(F_XO2_01_MSD_OFF) OTE(XO2_01_MTR.MSD_ONS) ,OTE(F_XO2_01_MSD_OFF) ];
				N: XIC(INT.ALWAYS_FALSE)[XIO(F_XO2_01_CTCTR_FAULT) OTE(XO2_01_MTR.MS_FLT_ONS) ,OTE(F_XO2_01_CTCTR_FAULT) ];
				N: [XIO(EZ_30300.Zone_OK) ,XIO(EZ_30307.Zone_OK) ,XIO(EZ_ZONE_2.Zone_OK) ,AFI() ]OTE(XO2_01_MTR.E_STOP);
				N: [XIC(EZ_30300.Zone_RES) ,XIC(EZ_30307.Zone_RES) ,XIC(EZ_ZONE_2.Zone_RES) ,AFI() ]OTE(XO2_01_MTR.E_STOP_RES);
				N: XIC(XO2.STATUS.FIRE_ALM)OTE(XO2_01_MTR.FIRE_ALM);
				N: XIO(XO2_01_MTR.CONV_RUN)XIC(XO2_01_MTR.INTL_MTR)OTE(XO2_01_MTR.CASC);
				N: XIO(XO2.MTR_GRP.RUN_LATCH)OTE(XO2_01_MTR.AUTO_STOP);
				N: XIC(HMI_XO2_01_OVRIDE_REQ)[XIO(F_XO2_01_OVRIDE) OTE(XO2_01_MTR.HMI_OVERRIDE_ONS) ,OTE(F_XO2_01_OVRIDE) ];
				N: XIC(HMI_XO2_01_OUTSERV_REQ)[XIO(F_XO2_01_OUTSERV) OTE(XO2_01_MTR.OOS_ONS) ,OTE(F_XO2_01_OUTSERV) ];
				N: [AFI() ,AFI() ]OTE(XO2_01_MTR.MB_JAMMED);
				N: [XIC(F_CL1T_26_PE2_JAMMED) ,XIC(XO2_01_MTR.MB_JAMMED) ,AFI() ]OTE(XO2_01_MTR.JAMMED);
		END_ROUTINE

		ROUTINE XO2_VFDS 
				RC: "****************************************************************************************************$N"
				    "This routine contains VFD related logic including control and status monitoring.$N"
				    "$N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				RC: "Motor XO2_05 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO2_05_MTR.COMM)XIO(XO2_05_MTR.E_STOP)XIO(F_XO2_05_MSD_OFF)TON(XO2_05_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO2_05_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO2_05_RDY) OTE(XO2_05_VFD.FAULTED) ,XIO(XO2_05_VFD.FAULTED) OTE(XO2_05_VFD.READY) ];
				RC: "Motor XO2_04 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO2_04_MTR.COMM)XIO(XO2_04_MTR.E_STOP)XIO(F_XO2_04_MSD_OFF)TON(XO2_04_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO2_04_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO2_04_RDY) OTE(XO2_04_VFD.FAULTED) ,XIO(XO2_04_VFD.FAULTED) OTE(XO2_04_VFD.READY) ];
				RC: "Motor XO2_03 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO2_03_MTR.COMM)XIO(XO2_03_MTR.E_STOP)XIO(F_XO2_03_MSD_OFF)TON(XO2_03_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO2_03_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO2_03_RDY) OTE(XO2_03_VFD.FAULTED) ,XIO(XO2_03_VFD.FAULTED) OTE(XO2_03_VFD.READY) ];
				RC: "Motor XO2_02 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO2_02_MTR.COMM)XIO(XO2_02_MTR.E_STOP)XIO(F_XO2_02_MSD_OFF)TON(XO2_02_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO2_02_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO2_02_RDY) OTE(XO2_02_VFD.FAULTED) ,XIO(XO2_02_VFD.FAULTED) OTE(XO2_02_VFD.READY) ];
				RC: "Motor XO2_01 VFD$N"
				    "***************************$N"
				    "";
				N: XIO(XO2_01_MTR.COMM)XIO(XO2_01_MTR.E_STOP)XIO(F_XO2_01_MSD_OFF)TON(XO2_01_VFD.POWERED_DLY_TMR,?,?);
				N: XIC(XO2_01_VFD.POWERED_DLY_TMR.DN)[XIO(I_VFD_XO2_01_RDY) OTE(XO2_01_VFD.FAULTED) ,XIO(XO2_01_VFD.FAULTED) OTE(XO2_01_VFD.READY) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	TASK MainTask (Type := PERIODIC,
	               Rate := 30,
	               Priority := 10,
	               Watchdog := 500,
	               DisableUpdateOutputs := No,
	               InhibitTask := No)
			MainProgram;
	END_TASK

CONFIG CST(SystemTimeMasterID := 0) END_CONFIG

CONFIG TimeSynchronize(Priority1 := 128,
	                                 Priority2 := 128,
	                                 PTPEnable := 0) END_CONFIG

CONFIG WallClockTime(LocalTimeAdjustment := 0,
	                     TimeZone := 0) END_CONFIG

END_CONTROLLER

